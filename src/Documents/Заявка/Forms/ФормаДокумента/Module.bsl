
//++ 22.11.2017 Веденеев П. //множественные изменения обработчиков событий формы в связи с удалением второй таблицы формы и передачей её функционала в основную таблицу
//++ 29.01.2018 Веденеев П. //документ приведен в соответствие с ОПЗ 4 (v3) (множественные изменения метаданных и форм)
//++ 19.07.2018 Базунов ДА Удалил закоменченные куски кода

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗаполнитьДополнительныеПоляСпецификации();

	КонецЕсли;
	
	ЗаполнитьЭтапыЗаявки();
	
	ИсполнительДЗОПред 			= Объект.ИсполнительДЗО;
	КоличествоЭтаповЗаявкиПред 	= ЭтапыВыполненияЗаявки.Количество();
	
	ЗаполнитьВалютуОСК();
	
	ЗаполнитьТекущийЭтап();
	
	Если РольДоступна("ПредставительДЗОИсполнителяЗаявки") Тогда
		Элементы.СпецификацияТКП.Видимость = Ложь;
		Элементы.СпецификацияКонтракт.Видимость = Ложь;
		Элементы.СпециалистДЭ.ТолькоПросмотр = Истина;
		Элементы.УстановитьЭтап.Доступность = Ложь;
		Элементы.ФормаПечать.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьВнешниеЦены.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьТендерныеЦены.Видимость = Ложь; 
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Документы.Заявка) Тогда
		Элементы.УстановитьЭтап.Доступность = Ложь;
		Элементы.ДобавитьПозицию.Доступность = Ложь;
		Элементы.СпецификацияПодборПредметовСнабжения.Доступность = Ложь;
		Элементы.СпецификацияУстановитьЭтапПозиции.Доступность = Ложь;
		Элементы.ГруппаПоказатьСкрыть.Доступность = Ложь;
		Элементы.ФормаПечать.Доступность = Ложь;
	КонецЕсли;
	
	// ++ 27.08.2018 10:21:59 Базунов Д.А. Задача: 
	
	Если РольДоступна("РуководительДепартаментаВТС") ИЛИ РольДоступна("РуководительПроектаДепартаментаВТС") 
		ИЛИ РольДоступна("СпециалистДепартаментаЭкономикиОСК") ИЛИ РольДоступна("ПолныеПрава") Тогда
		
		Элементы.ГруппаЦены.Видимость = Истина;
		Элементы.СпецификацияДатаЦеныДЗО.Видимость = Истина;
		Элементы.СпецификацияПоказатьСкрытьВнешниеЦены.Видимость = Истина;
		Элементы.СпецификацияПоказатьСкрытьТендерныеЦены.Видимость = Истина;
		Элементы.СпецификацияПоказатьСкрытьВнутренниеЦены.Видимость = Истина;
		Элементы.СпецификацияПоказатьСкрытьРеквизитыФСВТС.Видимость = Истина;
		Элементы.СпецификацияРеквизитыВТС.Видимость = Истина;
		Элементы.ГруппаСуммаВалюта.Видимость = Истина;
		
	Иначе 
		
		Элементы.ГруппаЦены.Видимость = Ложь;
		Элементы.СпецификацияДатаЦеныДЗО.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьВнешниеЦены.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьТендерныеЦены.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьВнутренниеЦены.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьРеквизитыФСВТС.Видимость = Ложь;
		Элементы.СпецификацияРеквизитыВТС.Видимость = Ложь;
		Элементы.ГруппаСуммаВалюта.Видимость = Ложь;
		
	КонецЕсли;
	
	// -- 27.08.2018 10:21:59 Базунов Д.А. Задача:
	
	Элементы.СпецификацияПрименитьЦеныДЗО.Видимость = РольДоступна("СпециалистДепартаментаЭкономикиОСК") ИЛИ РольДоступна("ПолныеПрава");
	
	ДобавитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление()
	
	ЭлементыОформления = УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементыОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Спецификация");
	
	ГруппаОтбора = ЭлементыОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаОтбора.Использование = Истина;
	
	//ЭлементОтбора = ЭлементыОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Спецификация.ПредметСнабжения");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Спецификация.ПредметСнабженияИсходный");;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Спецификация.ПредметСнабженияИсходный");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементыОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоРозовый);
	ЭлементыОформления.Использование = Истина;
	
КонецПроцедуры	//ДобавитьУсловноеОформление

&НаСервере
Процедура ЗаполнитьЭтапыЗаявки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыВыполненияЗаявки.Этап КАК Этап,
	|	ЭтапыВыполненияЗаявки.Период КАК Дата
	|ИЗ
	|	РегистрСведений.ЭтапыВыполненияЗаявки КАК ЭтапыВыполненияЗаявки
	|ГДЕ
	|	ЭтапыВыполненияЗаявки.Заявка = &Заявка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыВыполненияЗаявки.Этап.Код";
	
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	
	ЭтапыВыполненияЗаявки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьВалютуОСК()
	
	Для каждого СтрокаСпецификация Из Объект.Спецификация Цикл
		
		СтрокаСпецификация.ВалютаОСК = Объект.Валюта;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ДополнительныеПоляСпецификацииЗаполнены Тогда
			
			Для каждого Строка Из Объект.Спецификация Цикл
				
				Попытка
					ЦенаОСК = Строка.ЦенаОСК;
				Исключение
				    Возврат;
				КонецПопытки;
				
				Строка.СуммаОСК = ЦенаОСК * Строка.Количество;	
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗаголовкиЦенФСВТС();
	
	ПодключитьОбработчикОжидания("ДоступностьВыгрузкиMSOffice", 0.1, Истина);
	
КонецПроцедуры

//++ 06.04.2018 Веденеев П. //изменение процедуры заполнения дополнительных полей спецификации
#Область ЗаполнениеДополнительныхПолейСпецификации

&НаСервере
Процедура ЗаполнитьДополнительныеПоляСпецификации()
	
	Если Объект.Спецификация.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеОЦенах = ПолучитьДанныеОЦенах();
	
	Если ДанныеОЦенах = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеОКП = ПолучитьДанныеОКП();
	
	Для каждого СтрокаТЧ Из Объект.Спецификация Цикл
		
		СтрокаДанныхОЦенах = ДанныеОЦенах.Найти(СтрокаТЧ.ИдентификаторПозиции, "ИдентификаторПозиции");
		
		Если Не СтрокаДанныхОЦенах = Неопределено Тогда
			
			Попытка
				
				ЦенаОСК = СтрокаДанныхОЦенах.ЦенаОСК;
				
			Исключение
				
				Возврат;
				
			КонецПопытки;
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДанныхОЦенах, , "ЦенаОСК");
			
			СтрокаТЧ.СуммаДЗО = СтрокаТЧ.Количество * СтрокаТЧ.ЦенаДЗО;
			
			Если ЦенаОСК > 0 Тогда
				
				СтрокаТЧ.ЦенаОСК  = ЦенаОСК;
				СтрокаТЧ.СуммаОСК = СтрокаТЧ.Количество * СтрокаТЧ.ЦенаОСК;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДанныхОКП = ДанныеОКП.Найти(СтрокаТЧ.ПредметСнабжения, "ПредметСнабжения");
		
		Если Не СтрокаДанныхОКП = Неопределено Тогда
			
			СтрокаТЧ.КП = СтрокаДанныхОКП.КП;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОЦенах()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныДЗО.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ЦеныДЗО.Цена КАК ЦенаДЗО,
	|	ЦеныДЗО.Валюта КАК ВалютаДЗО,
	|	ЦеныДЗО.Период КАК ДатаЦеныДЗО
	|ПОМЕСТИТЬ втЦеныДЗО
	|ИЗ
	|	РегистрСведений.ЦеныДЗО КАК ЦеныДЗО
	|ГДЕ
	|	ЦеныДЗО.Заявка = &Заявка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТКПСЗаказчикомПоЗаявкам.Регистратор КАК ТКП,
	|	ТКПСЗаказчикомПоЗаявкам.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ТКПСЗаказчикомПоЗаявкам.Цена КАК ЦенаОСК
	|ПОМЕСТИТЬ втТКПСЗаказчикомПоЗаявкам
	|ИЗ
	|	РегистрСведений.ТКПСЗаказчикомПоЗаявкам КАК ТКПСЗаказчикомПоЗаявкам
	|ГДЕ
	|	ТКПСЗаказчикомПоЗаявкам.Заявка = &Заявка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрактыСЗаказчикомПоЗаявкам.Регистратор КАК Контракт,
	|	КонтрактыСЗаказчикомПоЗаявкам.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ПОМЕСТИТЬ втКонтрактыСЗаказчикомПоЗаявкам
	|ИЗ
	|	РегистрСведений.КонтрактыСЗаказчикомПоЗаявкам КАК КонтрактыСЗаказчикомПоЗаявкам
	|ГДЕ
	|	КонтрактыСЗаказчикомПоЗаявкам.Заявка = &Заявка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЕСТЬNULL(втЦеныДЗО.ИдентификаторПозиции, втТКПСЗаказчикомПоЗаявкам.ИдентификаторПозиции), втКонтрактыСЗаказчикомПоЗаявкам.ИдентификаторПозиции) КАК ИдентификаторПозиции,
	|	ЕСТЬNULL(втЦеныДЗО.ЦенаДЗО, 0) КАК ЦенаДЗО,
	|	ЕСТЬNULL(втЦеныДЗО.ВалютаДЗО, ЗНАЧЕНИЕ(Справочник.ОКВ.ПустаяСсылка)) КАК ВалютаДЗО,
	|	ЕСТЬNULL(втЦеныДЗО.ДатаЦеныДЗО, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЦеныДЗО,
	|	ЕСТЬNULL(втТКПСЗаказчикомПоЗаявкам.ТКП, ЗНАЧЕНИЕ(Документ.Контракт.ПустаяСсылка)) КАК ТКП,
	|	ЕСТЬNULL(втТКПСЗаказчикомПоЗаявкам.ЦенаОСК, 0) КАК ЦенаОСК,
	|	ЕСТЬNULL(втКонтрактыСЗаказчикомПоЗаявкам.Контракт, ЗНАЧЕНИЕ(Документ.Контракт.ПустаяСсылка)) КАК Контракт
	|ИЗ
	|	втЦеныДЗО КАК втЦеныДЗО
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТКПСЗаказчикомПоЗаявкам КАК втТКПСЗаказчикомПоЗаявкам
	|		ПО втЦеныДЗО.ИдентификаторПозиции = втТКПСЗаказчикомПоЗаявкам.ИдентификаторПозиции
	|		ПОЛНОЕ СОЕДИНЕНИЕ втКонтрактыСЗаказчикомПоЗаявкам КАК втКонтрактыСЗаказчикомПоЗаявкам
	|		ПО втЦеныДЗО.ИдентификаторПозиции = втКонтрактыСЗаказчикомПоЗаявкам.ИдентификаторПозиции";	
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЕстьЦеныДЗО = Не Запрос.МенеджерВременныхТаблиц.Таблицы.Получить(0).ПолучитьДанные().Пустой();
	
	ЕстьТКПСЗаказчикомПоЗаявкам = Не Запрос.МенеджерВременныхТаблиц.Таблицы.Получить(1).ПолучитьДанные().Пустой();
	
	Если Не ЕстьЦеныДЗО И Не ЕстьТКПСЗаказчикомПоЗаявкам Тогда
	
		Возврат Неопределено;	
	
	КонецЕсли;
	
	Элементы.ИсполнительДЗО.ТолькоПросмотр = ЕстьЦеныДЗО;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеОКП()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрактПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	МАКСИМУМ(КонтрактПредметыСнабжения.Ссылка) КАК КП
	|ИЗ
	|	Документ.Контракт.ПредметыСнабжения КАК КонтрактПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Контракт КАК Контракт
	|		ПО КонтрактПредметыСнабжения.Ссылка = Контракт.Ссылка
	|			И (Контракт.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрактов.КонтрактСПоставщиком))
	|			И (Контракт.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтрактов.КоммерческоеПредложение))
	|			И (КонтрактПредметыСнабжения.Заявка = &Заявка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрактПредметыСнабжения.ПредметСнабжения";
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти
//-- 06.04.2018 Веденеев П. //изменение процедуры заполнения дополнительных полей спецификации

&НаКлиенте
Процедура СпецификацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.ЗагруженаССайта Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("СпецификацияПослеДобавления", 0.1, Истина);
	
КонецПроцедуры

//++ 16.02.2018 Веденеев П. //изменение процедуры добавления элемента в табличную часть

&НаКлиенте
Процедура ДобавитьПозицию(Команда)
	
	Если Объект.ЗагруженаССайта Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.ФормаСписка", Новый Структура("РежимВыбора", Истина), ЭтаФорма, , , , 
		Новый ОписаниеОповещения("СпецификацияДобавление", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры
	
&НаКлиенте
Процедура СпецификацияДобавление(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаТЧ = Объект.Спецификация.Добавить();
	СтрокаТЧ.ПредметСнабжения = РезультатЗакрытия;
	
	ПодключитьОбработчикОжидания("СпецификацияПослеДобавления", 0.1, Истина);
	
КонецПроцедуры

//-- 16.02.2018 Веденеев П. //изменение процедуры добавления элемента в табличную часть

&НаКлиенте
Процедура СпецификацияПослеДобавления() Экспорт
	
	ТекДанные = Элементы.Спецификация.ТекущиеДанные;
	ТекДанные.ИсполнительДЗО 	= Объект.ИсполнительДЗО;
	
	Если ЭтапыВыполненияЗаявки.Количество() = 1 Тогда
	
		НоваяСтрока = Объект.ЭтапыВыполненияСпецификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтапыВыполненияЗаявки.Получить(0));
		ОбновитьЭтапыВыполненияСпецификации();
	
	КонецЕсли;
	
	ОбновитьКоличествоПозиций();	

КонецПроцедуры // СпецификацияПослеДобавления()

&НаКлиенте
Процедура ОбновитьКоличествоПозиций()

	Объект.КоличествоПозиций = Объект.Спецификация.Количество();	

КонецПроцедуры // ОбновитьКоличествоПозиций()

&НаКлиенте
Процедура ОбновитьТекущуюСумму()

	ТекущиеДанные = Элементы.Спецификация.ТекущиеДанные;
	
	Попытка
		ЦенаОСК = ТекущиеДанные.ЦенаОСК;
	Исключение
		Возврат;
	КонецПопытки;
	
	ТекущиеДанные.СуммаОСК = ТекущиеДанные.Количество * ЦенаОСК;

КонецПроцедуры // ОбновитьТекущуюСумму()

&НаКлиенте
Процедура ОбновитьОбщуюСумму()

	Объект.ОбщаяСуммаЗаявки = 0;
	
	Для каждого Строка Из Объект.Спецификация Цикл
	
		Объект.ОбщаяСуммаЗаявки = Объект.ОбщаяСуммаЗаявки + Строка.СуммаОСК;		
	
	КонецЦикла;

КонецПроцедуры // ОбновитьОбщуюСумму()


//++ 23.03.2018 Веденеев П. //регулирование доступности данных в таблице спецификации в зависимости от наличии контрактов по заявкам
#Область СпецификацияДоступность

&НаКлиенте
Процедура ОграничитьДоступностьСпецификации()
	
	ОграничитьДоступностьСпецификации = (ОграничениеДоступностиСпецификации > 0);
	
	Элементы.СпецификацияПредметСнабжения.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияОписаниеИерархииИзделия.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияНаименованиеПредметаСнабженияЗаказчика.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияКодПредметаСнабженияЗаказчика.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияНаименованиеИзделияЗаказчика.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияКоличество.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияЕдиницаИзмерения.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияИсполнительДЗО.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияЦенаДЗО.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияСуммаДЗО.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияВалютаДЗО.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияДатаЦеныДЗО.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияТекущийЭтап.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияКП.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияТКП.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	Элементы.СпецификацияКонтракт.ТолькоПросмотр = ОграничитьДоступностьСпецификации;
	
	Если НЕ Элементы.Найти("СпецификацияЦенаОСК") = Неопределено Тогда
		Элементы.СпецификацияЦенаОСК.ТолькоПросмотр = (Не ОграничениеДоступностиСпецификации = 1); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТаблицаФормы = Элементы.Спецификация;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ТаблицаФормы.ТекущиеДанные.ПредметСнабжения) Тогда
		
		ОграничениеДоступностиСпецификации = ЕстьПроведенныйКонтракт(Объект.Ссылка, ТаблицаФормы.ТекущиеДанные.ПредметСнабжения);
		
	Иначе
		
		ОграничениеДоступностиСпецификации = 0;
		
	КонецЕсли;
		
	ОграничитьДоступностьСпецификации();
	
	ИмяКолонки = Прав(ТаблицаФормы.ТекущийЭлемент.Имя, СтрДлина(ТаблицаФормы.ТекущийЭлемент.Имя) - 12);
	
	Если ТаблицаФормы.ТекущиеДанные.Свойство(ИмяКолонки) Тогда
		
		ЗначениеЯчейки = ТаблицаФормы.ТекущиеДанные[ИмяКолонки];
		
		Если ТаблицаФормы.ТекущийЭлемент.ТолькоПросмотр Тогда
			
			ПоказатьЗначение(, ЗначениеЯчейки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- 23.03.2018 Веденеев П. //регулирование доступности данных в таблице спецификации в зависимости от наличии контрактов по заявкам

//++ 16.02.2018 Веденеев П. //проверка наличия контрактов по данной строке заявки
&НаСервереБезКонтекста
Функция ЕстьПроведенныйКонтракт(Заявка, ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Контракт.Вид ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Контракт.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрактов.КонтрактСПоставщиком)
	|						ТОГДА 1
	|					КОГДА Контракт.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрактов.КонтрактСЗаказчиком)
	|						ТОГДА 2
	|				КОНЕЦ
	|		КОНЕЦ) КАК НаличиеКонтрактов
	|ИЗ
	|	Документ.Контракт.ПредметыСнабжения КАК КонтрактПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Контракт КАК Контракт
	|		ПО КонтрактПредметыСнабжения.Ссылка = Контракт.Ссылка
	|			И (Контракт.Проведен)
	|			И (КонтрактПредметыСнабжения.Заявка = &Заявка)
	|			И (КонтрактПредметыСнабжения.ПредметСнабжения = &ПредметСнабжения)";
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат 0;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.НаличиеКонтрактов) Тогда
			Возврат Выборка.НаличиеКонтрактов;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции
//-- 16.02.2018 Веденеев П. //проверка наличия контрактов по данной строке заявки


&НаКлиенте
Процедура ОбновитьЭтапыВыполненияСпецификации()

	КоличествоСтрок = Объект.ЭтапыВыполненияСпецификации.Количество();
	
	Для Н = 1 По КоличествоСтрок Цикл
	
		Если Объект.ЭтапыВыполненияСпецификации.Получить(КоличествоСтрок - Н).ИдентификаторПозиции = ТекущийИдентификаторПозиции Тогда
		
			Объект.ЭтапыВыполненияСпецификации.Удалить(КоличествоСтрок - Н);	
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Для каждого Строка Из ЭтапыВыполненияПозицииСпецификации Цикл
	
		НоваяСтрока = Объект.ЭтапыВыполненияСпецификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИдентификаторПозиции = ТекущийИдентификаторПозиции;
	
	КонецЦикла;

КонецПроцедуры // ОбновитьЭтапыВыполненияСпецификации()

&НаКлиенте
Процедура ЗаполнитьЭтапыВыполненияПозицииСпецификации()

	Для каждого Строка Из Объект.ЭтапыВыполненияСпецификации Цикл
	
		Если Строка.ИдентификаторПозиции = ТекущийИдентификаторПозиции Тогда
		
			НоваяСтрока = ЭтапыВыполненияПозицииСпецификации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		КонецЕсли;	
	
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьЭтапыВыполненияПозицииСпецификации()

&НаКлиенте
Процедура СпецификацияИзделиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПредметСнабжения = Элементы.Спецификация.ТекущиеДанные.ПредметСнабжения;
	
	Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда
	
		ПоказатьПредупреждение(, "Не заполнен предмет снабжения",, "Действие запрещено");
		Возврат;
	
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПредметСнабжения", ПредметСнабжения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыбораИзделия", ЭтотОбъект);
	
	ОткрытьФорму("Документ.Заявка.Форма.ФормаПодбораИзделия", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораИзделия(ВозЗнач, ДопПараметры = Неопределено) Экспорт

	Если Не ВозЗнач = Неопределено Тогда
		
		ТекДанные = Элементы.Спецификация.ТекущиеДанные;
		ТекДанные.Изделие 					= ВозЗнач.Изделие;
		ТекДанные.ОписаниеИерархииИзделия 	= ВозЗнач.Описание; 	
		
	КонецЕсли;	

КонецПроцедуры // ОбработчикВыбораИзделия()

&НаКлиенте
Процедура СпецификацияПередУдалением(Элемент, Отказ)
	
	Если Объект.ЗагруженаССайта Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредметовСнабжения(Команда)
	
	Если Объект.ЗагруженаССайта Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПодбораПредметовСнабжения", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаПодбора",, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПодбораПредметовСнабжения(АдресВременногоХранилища, ДопПараметры = Неопределено) Экспорт

	Если Не АдресВременногоХранилища = Неопределено Тогда
	
		ОбработчикПодбораПредметовСнабженияНаСервере(АдресВременногоХранилища);	
		ОбновитьКоличествоПозиций();
	
	КонецЕсли;	

КонецПроцедуры // ОбработчикПодбораПредметовСнабжения()

&НаСервере
Процедура ОбработчикПодбораПредметовСнабженияНаСервере(АдресВременногоХранилища)

	ВыбранныеПредметыСнабжения = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Для каждого Строка Из ВыбранныеПредметыСнабжения Цикл
	
		Если Строка.Включить Тогда
			
			ТекущийИдентификаторПозиции = Строка(Новый УникальныйИдентификатор);
		
			НоваяСтрока = Объект.Спецификация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ИсполнительДЗО 			= Объект.ИсполнительДЗО;
			НоваяСтрока.ИдентификаторПозиции 	= ТекущийИдентификаторПозиции;
			
			Если ЭтапыВыполненияЗаявки.Количество() = 1 Тогда
				
				СтрокаЭтапаЗаявки = ЭтапыВыполненияЗаявки.Получить(0);
				
				// Базунов 24.04.2018
				//НоваяСтрока.ДатаТекущегоЭтапа 	= СтрокаЭтапаЗаявки.Дата;
				//НоваяСтрока.ТекущийЭтап 		= СтрокаЭтапаЗаявки.Этап;
				
				НоваяСтрока = Объект.ЭтапыВыполненияСпецификации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭтапаЗаявки);
				НоваяСтрока.ИдентификаторПозиции = ТекущийИдентификаторПозиции;				
				
			КонецЕсли;
			
		КонецЕсли;	
	
	КонецЦикла;	

КонецПроцедуры // ОбработчикПодбораПредметовСнабженияНаСервере()

&НаКлиенте
Процедура СохранитьВExcel(Команда)
	
	ВыбратьКолонкиСпецификации(Истина, Ложь);	 	
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВWord(Команда)
	
	ВыбратьКолонкиСпецификации(Ложь, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКолонкиСпецификации(Excel, Word)

	МассивКолонок = Новый Массив;
	
	Для каждого Колонка Из Элементы.Спецификация.ПодчиненныеЭлементы Цикл
		
		Если Не Колонка.Видимость Тогда
		
			Продолжить;	
		
		КонецЕсли;
		
		СтруктураКолонки = Новый Структура;
		СтруктураКолонки.Вставить("Имя", СтрЗаменить(Колонка.Имя, "Спецификация", ""));
		СтруктураКолонки.Вставить("Заголовок", Колонка.Заголовок);
		
		МассивКолонок.Добавить(СтруктураКолонки);		
	
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура("МассивКолонок", МассивКолонок);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Excel", Excel);
	ДопПараметры.Вставить("Word", Word);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыбораКолонокСпецификации", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Документ.Заявка.Форма.ФормаНастройкиМакетаСпецификации", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры // ВыбратьКолонкиСпецификации()

&НаКлиенте
Процедура ОбработчикВыбораКолонокСпецификации(МассивКолонок, ДопПараметры) Экспорт
	
	Если МассивКолонок = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Если МассивКолонок.Количество() = 0 Тогда
	
		Возврат;	
	
	КонецЕсли;

	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.Заголовок = "Сохранить как";
	
	Если ДопПараметры.Excel Тогда
	
		ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Файл Microsoft Office Excel (*.xlsx)|*.xlsx'");	
	
	ИначеЕсли ДопПараметры.Word Тогда
	
		ДиалогОткрытияФайла.Фильтр = НСтр("ru = 'Файл Microsoft Office Word (*.docx)|*.docx'");	
	
	КонецЕсли;
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ПолноеИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ТабличныйДокумент = СформироватьТабличныйДокументСпецификации(МассивКолонок);
	
	Если ДопПараметры.Excel Тогда
	
		ТабличныйДокумент.Записать(ПолноеИмяФайла + ?(Найти(ПолноеИмяФайла, ".xlsx") = 0, ".xlsx", ""), ТипФайлаТабличногоДокумента.XLSX);	
	
	ИначеЕсли ДопПараметры.Word Тогда
	
		ТабличныйДокумент.Записать(ПолноеИмяФайла + ?(Найти(ПолноеИмяФайла, ".docx") = 0, ".docx", ""), ТипФайлаТабличногоДокумента.DOCX);	
	
	КонецЕсли;	

КонецПроцедуры // ОбработчикВыбораКолонокСпецификации()

&НаСервере
Функция СформироватьТабличныйДокументСпецификации(МассивКолонок)

	МакетСпецификация = Документы.Заявка.ПолучитьМакет("МакетСпецификация");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПерваяКолонкаДобавлена = Ложь;
	
	Для каждого ИмяКолонки Из МассивКолонок Цикл
	
		ОбластьЗаголовок = МакетСпецификация.ПолучитьОбласть("Заголовок|" + ИмяКолонки);
		
		Если ПерваяКолонкаДобавлена Тогда
		
			ТабличныйДокумент.Присоединить(ОбластьЗаголовок);	
		
		Иначе
		
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			ПерваяКолонкаДобавлена = Истина;
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Для каждого Строка Из Объект.Спецификация Цикл
		
		ПерваяКолонкаДобавлена = Ложь;

		Для каждого ИмяКолонки Из МассивКолонок Цикл
			
			ОбластьПозиция = МакетСпецификация.ПолучитьОбласть("Позиция|" + ИмяКолонки);
			
			Выполнить("ОбластьПозиция.Параметры.Установить(0, Строка." + ?(ИмяКолонки = "ПредметСнабженияОбозначение", "ПредметСнабжения.Обозначение", ИмяКолонки) + ");");
			
			Если ПерваяКолонкаДобавлена Тогда
				
				ТабличныйДокумент.Присоединить(ОбластьПозиция);	
				
			Иначе
				
				ТабличныйДокумент.Вывести(ОбластьПозиция);
				ПерваяКолонкаДобавлена = Истина;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;

КонецФункции // СформироватьТабличныйДокументСпецификации()

&НаКлиенте
Процедура СпецификацияКоличествоПриИзменении(Элемент)
	
	ОбновитьТекущуюСумму();
	
	ОбновитьОбщуюСумму();	
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияЦенаОСКПриИзменении(Элемент)
	
	ОбновитьТекущуюСумму();
	
	ОбновитьОбщуюСумму();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущийЭтап()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыВыполненияЗаявкиСрезПоследних.Этап КАК Этап,
	|	ЭтапыВыполненияЗаявкиСрезПоследних.Период КАК ДатаЭтапа
	|ИЗ
	|	РегистрСведений.ЭтапыВыполненияЗаявки.СрезПоследних(, Заявка = &Заявка) КАК ЭтапыВыполненияЗаявкиСрезПоследних";
	
	Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДатаТекущегоЭтапа = Выборка.ДатаЭтапа;
		ТекущийЭтап 	  = Выборка.Этап;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекущийЭтап()

&НаКлиенте
Процедура ЭтапыВыполненияПозицииСпецификацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Элементы.Спецификация.ТекущиеДанные = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительДЗОПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИсполнительДЗОПред) И Объект.Спецификация.Количество() > 0 Тогда
	
		ЗаполнитьИсполнителяДЗОСпецификации();	
		ИсполнительДЗОПред = Объект.ИсполнительДЗО;
		Объект.ДатаНазначенияДЗО = ТекущаяДата();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителяДЗОСпецификации()

	Для каждого Строка Из Объект.Спецификация Цикл
		
		Строка.ИсполнительДЗО = Объект.ИсполнительДЗО;	
		
	КонецЦикла;		
	
КонецПроцедуры // ЗаполнитьИсполнителяДЗОСпецификации()

&НаКлиенте
Процедура ОбработчикВыбораУсловийПоставки(СписокУсловийПоставки, ДопПараметры = Неопределено) Экспорт

	Если СписокУсловийПоставки = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	МассивУсловийПоставки = Новый Массив;
	
	Для каждого ЭлементСписка Из СписокУсловийПоставки Цикл
	
		Если ЭлементСписка.Пометка Тогда
		
			МассивУсловийПоставки.Добавить(ЭлементСписка.Значение);
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Объект.УсловиеПоставки = СтрСоединить(МассивУсловийПоставки, "/");

КонецПроцедуры // ОбработчикВыбораУсловийПоставки()

&НаСервереБезКонтекста
Функция ПолучитьСписокУсловийПоставки()
	
	СписокУсловийПоставки = Новый СписокЗначений;

	Выборка = Справочники.Инкотермс2010.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокУсловийПоставки.Добавить(Выборка.Код, Выборка.Код + " (" + Выборка.Наименование + ")");		
	
	КонецЦикла;
	
	Возврат СписокУсловийПоставки;	

КонецФункции // ПолучитьСписокУсловийПоставки()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Элементы.ГруппаСохранить.Доступность = Истина;
	
	ПодключитьОбработчикОжидания("ДоступностьВыгрузкиMSOffice", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьВыгрузкиMSOffice()

	Если Модифицированность Тогда
	
		Элементы.ГруппаСохранить.Доступность = Ложь;
		
	Иначе
		
		ПодключитьОбработчикОжидания("ДоступностьВыгрузкиMSOffice", 0.1, Истина);
	
	КонецЕсли;	

КонецПроцедуры // ДоступностьВыгрузкиMSOffice()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.Дата = Дата(Год(Объект.Дата), Месяц(Объект.Дата), День(Объект.Дата));
	
	СписокДат = Новый СписокЗначений;
	
	СписокДат.Добавить(Объект.Дата, "ДатаЗаявки");
	
	Если ЗначениеЗаполнено(Объект.ДатаНазначенияДЗО) И Не Объект.ДатаНазначенияДЗО = Объект.Дата Тогда
	
		СписокДат.Добавить(Объект.ДатаНазначенияДЗО, "ДатаНазначенияДЗО");	
	
	КонецЕсли;
	
	// Базунов 24.04.2018
	//Если ЗначениеЗаполнено(Объект.ДатаТекущегоЭтапа) И Не Объект.ДатаТекущегоЭтапа = Объект.Дата Тогда
	//
	//	СписокДат.Добавить(Объект.ДатаТекущегоЭтапа, "ДатаТекущегоЭтапа");	
	//
	//КонецЕсли;
	
	Если СписокДат.Количество() = 2 И СписокДат.Получить(0) = СписокДат.Получить(1) Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	СписокДат.СортироватьПоЗначению();
	
	Если Не СписокДат.Получить(0).Представление = "ДатаЗаявки" Тогда
	
		Отказ = Истина;
		ПоказатьПредупреждение(, "Дата заявки должна быть наименьшей среди дат документа",, "Запись запрещена");
		Возврат;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.РуководительПроектаВТС) Тогда
		
		РПЗапроса = ПолучитьРуководителяПроектяЗапроса();
		
		Если Не РПЗапроса = Неопределено Тогда
			Объект.РуководительПроектаВТС = РПЗапроса;
		Иначе
			Объект.РуководительПроектаВТС = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРуководителяПроектяЗапроса()
	
	Ответ = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ЗапросТКПRFP) И ЗначениеЗаполнено(Объект.ЗапросТКПRFP.РуководительПроектаВТС) Тогда
		Ответ = Объект.ЗапросТКПRFP.РуководительПроектаВТС;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Процедура КораблиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокКораблей = ПолучитьСписокКораблей(Объект.ЗапросТКПRFP);
	СписокКораблей.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("КораблиВыбор", ЭтаФорма), "Выберите проекты кораблей:");
	
КонецПроцедуры

&НаКлиенте
Процедура КораблиВыбор(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Список.Количество() = 0 Тогда
		
		Объект.Проекты.Очистить();
		Объект.Корабли = "";
		Возврат;
		
	КонецЕсли;
	
	Объект.Проекты.Очистить();
	
	МассивКораблей = Новый Массив;
	
	Для каждого ЭлементСписка Из Список Цикл
		
		Если ЭлементСписка.Пометка Тогда
			
			СтрокаПроект = Объект.Проекты.Добавить();
			СтрокаПроект.Корабль = ЭлементСписка.Значение;
			
			МассивКораблей.Добавить(Строка(ЭлементСписка.Значение));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Корабли  = СтрСоединить(МассивКораблей, ", ");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКораблей(ЗапросТКПRFP)
	
	СписокКораблей = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроектыКораблей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПроектыКораблей КАК ПроектыКораблей
	|ГДЕ
	|	НЕ ПроектыКораблей.ПометкаУдаления
	|	И ПроектыКораблей.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|				Заказы.Владелец КАК Проект
	|			ИЗ
	|				Справочник.Заказы КАК Заказы
	|			ГДЕ
	|				Заказы.Заказчик = &Флот)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроектыКораблей.Наименование";
	Запрос.УстановитьПараметр("Флот", ЗапросТКПRFP.Заказчик.ВМС); 
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СписокКораблей.ЗагрузитьЗначения(ТаблицаЗапроса.ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокКораблей;
	
КонецФункции

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ЗаполнитьВалютуОСК();
	
КонецПроцедуры

//++ 22.02.2018 Веденеев П.
#Область Печать

&НаКлиенте
Процедура ПечатьЗапросТКП(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		
		ПоказатьПредупреждение(, "Сначала нужно записать документ!");
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ЗапросТКП.Форма.ФормаОтчета", Новый Структура("ЗапросЗаявка", Объект.Ссылка));
	
КонецПроцедуры

//++ 13.04.2018 Веденеев П. //выгрузка для ФС ВТС
#Область ПечатьВыгрузкаФСВТС

&НаКлиенте
Функция ПолучитьКаталогВыгрузки()
	
	Если Модифицированность Тогда
		
		ПоказатьПредупреждение(, "Сначала запишите документ!");
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Объект.Спецификация.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "В документе нет ни одного предмета снабжения!");
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок = "Выберите каталог для формирования файлов:";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Возврат ДиалогВыбораФайла.Каталог + "\";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузкаВнешнихЦенДляФСВТС(Команда)
	
	Каталог = ПолучитьКаталогВыгрузки();
	
	Если Каталог = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Состояние("Выгрузка файлов в " + Каталог, , , БиблиотекаКартинок.ДлительнаяОперация48);
	
	ПараметрыФСВТС = ПолучитьПараметрыФСВТС(Объект.Ссылка, Объект.ЗапросТКПRFP);
	НомерЗапроса = ПараметрыФСВТС.Получить("<НомерЗапроса>");
	
	ИмяФайла = УдалитьЗапрещенныеСимволы(НомерЗапроса + " " + Объект.НомерЗаказчика);
	
	ВыгрузитьПисьмоФСВТС(Каталог + "Сопровод в ФСВТС " + ИмяФайла + ".doc", ПараметрыФСВТС);
	ВыгрузитьПриложениеКПисьмуФСВТС(Каталог + "Приложение к письму " + ИмяФайла + ".xlsx", ПараметрыФСВТС);
	
	Сообщить("Завершена выгрузка файлов по адресу " + Каталог);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФСВТС(Заявка, ЗапросТКП)
	
	ПараметрыФСВТС = Новый Соответствие;
	ПараметрыФСВТС.Вставить("<НомерФСВТС>", ЗапросТКП.НомерФСВТС);
	ПараметрыФСВТС.Вставить("<ИностранныйЗаказчик>", Строка(ЗапросТКП.Заказчик));
	ПараметрыФСВТС.Вставить("<ГодПоставки>", Формат(Год(Заявка.Дата + ЗапросТКП.СрокПоставки * 86400), "ЧГ=0"));
	ПараметрыФСВТС.Вставить("<УсловияПоставки>", ЗапросТКП.УсловияПоставки);
	ПараметрыФСВТС.Вставить("<НомерЗапроса>", ЗапросТКП.НомерЗаказчика);
	
	Возврат ПараметрыФСВТС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМакетНаСервере(ИмяМакета, ЭтоОбщийМакет = Ложь)
	
	Если ЭтоОбщийМакет Тогда
		
		Возврат ПолучитьОбщийМакет(ИмяМакета);
		
	Иначе
	
		Возврат Документы.Контракт.ПолучитьМакет(ИмяМакета);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПисьмоФСВТС(ИмяФайла, ПараметрыФСВТС)
	
	Макет = ПолучитьМакетНаСервере("ПисьмоФСВТС", Истина);
	
	Попытка
		
		Макет.Записать(ИмяФайла);
		
	Исключение
		
		Сообщить("Не удалось записать файл " + ИмяФайла + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		
	КонецПопытки;
	
	Попытка
		
		ОбъектВорд = Новый COMОбъект("Word.Application");
		ОбъектВорд.Documents.add(ИмяФайла);
		
		ДокументВорд = ОбъектВорд.Application.Documents(1);
		ДокументВорд.Activate();
		
	Исключение
		
		Сообщить("Не удалось открыть файл " + ИмяФайла + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		УдалитьФайлы(ИмяФайла);
		
	КонецПопытки;
	
	Замена = ДокументВорд.Content.Find;
	
	Для каждого ПараметрФСВТС Из ПараметрыФСВТС Цикл
		
		Замена.Execute(ПараметрФСВТС.Ключ, , , , , , , , , ПараметрФСВТС.Значение, 2);
		
	КонецЦикла;
	
	Попытка
		
		ДокументВорд.SaveAs(ИмяФайла);
		ДокументВорд.Application.Quit();
		
	Исключение
		
		Сообщить("Не удалось сохранить файл " + ИмяФайла + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		
	КонецПопытки;
	
	ДокументВорд = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПриложениеКПисьмуФСВТС(ИмяФайла, ПараметрыФСВТС)

	ТабличныйДокумент = РаботаСФайламиOffice.ПодготовитьТабличныйДокументЗаявкаПриложениеКПисьмуФСВТС(Объект.Дата, Объект.Валюта, Объект.Спецификация, ПараметрыФСВТС);
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если ТабличныйДокумент = Неопределено Тогда
	
	Попытка
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось сохранить файл " + ИмяФайла + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция УдалитьЗапрещенныеСимволы(ИсходнаяСтрока)
	
	Результат = ИсходнаяСтрока;
	
	Результат = СтрЗаменить(Результат, ".", " ");
	Результат = СтрЗаменить(Результат, ",", " ");
	Результат = СтрЗаменить(Результат, "#", " ");
	Результат = СтрЗаменить(Результат, "%", " ");
	Результат = СтрЗаменить(Результат, "&", " ");
	Результат = СтрЗаменить(Результат, "*", " ");
	Результат = СтрЗаменить(Результат, "|", " ");
	Результат = СтрЗаменить(Результат, "|", " ");
	Результат = СтрЗаменить(Результат, ":", " ");
	Результат = СтрЗаменить(Результат, """""", " ");
	Результат = СтрЗаменить(Результат, ",", " ");
	Результат = СтрЗаменить(Результат, "<", " ");
	Результат = СтрЗаменить(Результат, ">", " ");
	Результат = СтрЗаменить(Результат, "?", " ");
	Результат = СтрЗаменить(Результат, "/", " ");
	
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция ПолучитьНачальникаОтделаЦенообразования()
	
	Возврат Строка(Константы.НачальникОтделаЦенообразования.Получить());
	
КонецФункции
 

&НаСервере
Функция ПолучитьСоответствиеОбозначений()
	
	СоответствиеОбозначений = Новый Соответствие;
	
	Для каждого СтрокаПредметСнабжения Из Объект.Спецификация Цикл
		
		 СоответствиеОбозначений.Вставить(СтрокаПредметСнабжения.ПредметСнабжения, СтрокаПредметСнабжения.ПредметСнабжения.Обозначение); 
		
	КонецЦикла;
	
	Возврат СоответствиеОбозначений;
	
КонецФункции

#КонецОбласти
//++ 13.04.2018 Веденеев П. //выгрузка для ФС ВТС

#КонецОбласти
//-- 22.02.2018 Веденеев П.



&НаСервере
Процедура УстановитьЭтапСервер(Ссылка, Этап)
	
	ОбщиеФункцииСервер.ДобавитьЭтапКЗаявке(Ссылка, Этап, ТекущаяДата());
	
	ЗаполнитьТекущийЭтап();
	
	ЗаполнитьЭтапыЗаявки();
	
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьЭтап(Команда)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("РежимВыбора", Истина);
	ДопПараметры.Вставить("ТекущийЭтап", ТекущийЭтап);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьЭтапПродолжение", ЭтаФорма);
	
	ОткрытьФорму("Справочник.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.Форма.ФормаСписка", ДопПараметры,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭтапПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		УстановитьЭтапСервер(Объект.Ссылка, Результат);
	КонецЕсли; 
	
КонецПроцедуры


 
&НаСервере
Процедура УстановитьЭтапПозицииСервер(Ссылка, Этап, ИдентификаторПозиции)
	
	Стр = Объект.ЭтапыВыполненияСпецификации.Добавить();
	Стр.ИдентификаторПозиции = ИдентификаторПозиции;
	Стр.Дата = ТекущаяДата();
	Стр.Этап = Этап;
	
	МСтроки = Объект.Спецификация.НайтиСтроки(Новый Структура("ИдентификаторПозиции",ИдентификаторПозиции));
	
	Для Каждого ТекДанные ИЗ МСтроки Цикл;
		ТекДанные.ДатаТекущегоЭтапа 	= Стр.Дата;
		ТекДанные.ТекущийЭтап 			= Стр.Этап;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭтапПозиции(Команда)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("РежимВыбора", Истина);
	ДопПараметры.Вставить("ТекущийЭтап", ТекущийЭтап);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьЭтапПозицииПродолжение", ЭтаФорма);
	
	ОткрытьФорму("Справочник.ЭтапыВыполненияПунктовЗаявок.Форма.ФормаВыбора", ДопПараметры,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЭтапПозицииПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		УстановитьЭтапПозицииСервер(Объект.Ссылка, Результат, Элементы.Спецификация.ТекущиеДанные.ИдентификаторПозиции);
		
		Модифицированность = Истина;
		
		ЭтапыВыполненияПозицииСпецификации.Очистить();
		ЗаполнитьЭтапыВыполненияПозицииСпецификации();
		
	КонецЕсли;
	
КонецПроцедуры

//++ 11.04.2018 Веденеев П. //добавление списков цен
&НаКлиенте
Процедура ПоказатьСкрытьЭтапыПозиции(Команда)
	
	Элементы.ГруппаСпецификаяПравая.Видимость = Не Элементы.ГруппаСпецификаяПравая.Видимость;
	Элементы.СпецификацияПоказатьСкрытьЭтапыПозиции.Пометка = НЕ Элементы.СпецификацияПоказатьСкрытьЭтапыПозиции.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВнутренниеЦены(Команда)
	
	Если Элементы.ГруппаВнутренниеЦены.Видимость Тогда
		
		Элементы.ГруппаВнутренниеЦены.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьВнутренниеЦены.Пометка = Ложь;
		
	Иначе
		
		ОтобразитьЦены("ЦеныВнутренние");
		Элементы.ГруппаВнутренниеЦены.Видимость = Истина;
		Элементы.СпецификацияПоказатьСкрытьВнутренниеЦены.Пометка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВнешниеЦены(Команда)
	
	Если Элементы.ГруппаВнешниеЦены.Видимость Тогда
		
		Элементы.ГруппаВнешниеЦены.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьВнешниеЦены.Пометка = Ложь;
		
	Иначе
		
		ОтобразитьЦены("ЦеныВнешние");
		Элементы.ГруппаВнешниеЦены.Видимость = Истина;
		Элементы.СпецификацияПоказатьСкрытьВнешниеЦены.Пометка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПриАктивизацииСтроки(Элемент)
	
	ПриВыбореПредметаСнабжения();
	
	ЭтапыВыполненияПозицииСпецификации.Очистить();
	
	ТекущиеДанные = Элементы.Спецификация.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПозиции) Тогда
			
			ТекущиеДанные.ИдентификаторПозиции = Строка(Новый УникальныйИдентификатор);	
			
		КонецЕсли;
		
		ТекущийИдентификаторПозиции = ТекущиеДанные.ИдентификаторПозиции;
		
		ЗаполнитьЭтапыВыполненияПозицииСпецификации();
		
	КонецЕсли;
	
	//++ 16.02.2018 Веденеев П. //проверка наличия контрактов по данной строке заявки	
	Если ЗначениеЗаполнено(Объект.Ссылка) 
		И Не ТекущиеДанные = Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.ПредметСнабжения) Тогда
		
		ОграничениеДоступностиСпецификации = ЕстьПроведенныйКонтракт(Объект.Ссылка, ТекущиеДанные.ПредметСнабжения);
		
	Иначе
		
		ОграничениеДоступностиСпецификации = 0;
		
	КонецЕсли;
		
	ОграничитьДоступностьСпецификации();			
	//-- 16.02.2018 Веденеев П. //проверка наличия контрактов по данной строке заявки
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПредметСнабженияПриИзменении(Элемент)
	
	ПриВыбореПредметаСнабжения();
	
	ТекДанные = Элементы.Спецификация.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.ПредметСнабжения) Тогда
	
		ТекДанные.ЕдиницаИзмерения = ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ТекДанные.ПредметСнабжения, "ЕдиницаИзмерения");
	
	Иначе
	
		ТекДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ОКЕИ.ПустаяСсылка");	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПослеУдаления(Элемент)
	
	ОбновитьКоличествоПозиций();
	
	ОбновитьОбщуюСумму();
	
	ПриВыбореПредметаСнабжения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореПредметаСнабжения()
	
	Если Элементы.ГруппаВнутренниеЦены.Видимость Тогда
		
		ОтобразитьЦены("ЦеныВнутренние");
		
	КонецЕсли;
	
	Если Элементы.ГруппаВнешниеЦены.Видимость Тогда
		
		ОтобразитьЦены("ЦеныВнешние");
		
	КонецЕсли;
	
	Если Элементы.ГруппаТендерныеЦены.Видимость Тогда
		
		ОтобразитьЦены("ЦеныТендерные");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЦены(ИмяСпискаЦен)
	
	ТекущиеДанные = Элементы.Спецификация.ТекущиеДанные;
	ПредметСнабжения = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.ПредметСнабжения);
	
	ЭтаФорма[ИмяСпискаЦен].Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", ПредметСнабжения);
	
КонецПроцедуры


//-- 11.04.2018 Веденеев П. //добавление списков цен

//++ 13.04.2018 Веденеев П. //реквизиты ФС ВТС
&НаКлиенте
Процедура ПоказатьСкрытьРеквизитыФСВТС(Команда)
	
	ВидимостьРеквизитов = Не Элементы.СпецификацияЦенаТекущегоГода.Видимость;
	
	Элементы.СпецификацияЦенаТекущегоГода.Видимость = ВидимостьРеквизитов;
	Элементы.СпецификацияЦенаСледующегоГода.Видимость = ВидимостьРеквизитов;
	Элементы.СпецификацияЦенаГодаЧерез1.Видимость = ВидимостьРеквизитов;
	Элементы.СпецификацияИсточникЦеновойИнформации.Видимость = ВидимостьРеквизитов;
	Элементы.СпецификацияОбоснованиеЦенообразования.Видимость = ВидимостьРеквизитов;
	
	Элементы.СпецификацияПоказатьСкрытьРеквизитыФСВТС.Пометка = ВидимостьРеквизитов;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовкиЦенФСВТС()
	
	ТекущийГод = Год(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	
	Элементы.СпецификацияЦенаТекущегоГода.Заголовок 	= "Цена " + Формат(ТекущийГод, 	   "ЧГ=0") + " г.";
	Элементы.СпецификацияЦенаСледующегоГода.Заголовок 	= "Цена " + Формат(ТекущийГод + 1, "ЧГ=0") + " г.";
	Элементы.СпецификацияЦенаГодаЧерез1.Заголовок 		= "Цена " + Формат(ТекущийГод + 2, "ЧГ=0") + " г.";
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьЗаголовкиЦенФСВТС();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗаполнитьДополнительныеПоляСпецификации();
		 
	КонецЕсли;
	
	ЗаполнитьЭтапыЗаявки();
	
	ИсполнительДЗОПред 			= Объект.ИсполнительДЗО;
	КоличествоЭтаповЗаявкиПред 	= ЭтапыВыполненияЗаявки.Количество();
	
	ЗаполнитьВалютуОСК();
	
	ЗаполнитьТекущийЭтап();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьТендерныеЦены(Команда)
	Если Элементы.ГруппаТендерныеЦены.Видимость Тогда
		
		Элементы.ГруппаТендерныеЦены.Видимость = Ложь;
		Элементы.СпецификацияПоказатьСкрытьТендерныеЦены.Пометка = Ложь;
		
	Иначе
		
		ОтобразитьЦены("ЦеныТендерные");
		Элементы.ГруппаТендерныеЦены.Видимость = Истина;
		Элементы.СпецификацияПоказатьСкрытьТендерныеЦены.Пометка = Истина;
		
	КонецЕсли;
КонецПроцедуры

//-- 13.04.2018 Веденеев П. //реквизиты ФС ВТС

&НаКлиенте
Процедура ПрименитьЦеныДЗО(Команда)
	Для каждого СтрокаСпецификации Из Объект.Спецификация Цикл
		Если СтрокаСпецификации.ВалютаДЗО = СтрокаСпецификации.ВалютаОСК Тогда
			СтрокаСпецификации.ЦенаОСК = СтрокаСпецификации.ЦенаДЗО;
			СтрокаСпецификации.СуммаОСК = СтрокаСпецификации.Количество * СтрокаСпецификации.ЦенаОСК;		
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры // ПрименитьЦеныДЗО

&НаКлиенте
Процедура ПечатьЗаявки(Команда)
	
	ПечФорма = ПолучитьПечатнуюФормуЗаявкуНаСервере();
	ПечФорма.Показать("Отчет по предметам снабжения");
	
КонецПроцедуры //ПечатьЗаявки

&НаСервере
Функция ПолучитьПечатнуюФормуЗаявкуНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ТабДок = Документы.Заявка.ПечатьНаСервере(ДокументОбъект.Ссылка);
	Возврат ТабДок;

КонецФункции // ПолучитьПечатнуюФормуЗаявкуНаСервере()











