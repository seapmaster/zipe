
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	МСтрок = ПредметыСнабжения.НайтиСтроки(Новый Структура("UID","                                    "));
	
	Для каждого Строка Из МСтрок Цикл
		
		Строка.UID = Новый УникальныйИдентификатор;
		
	КонецЦикла;
	
	Если Тип = Перечисления.ТипыКонтрактов.КоммерческоеПредложение Тогда
		
		Для Каждого стрПС Из ПредметыСнабжения Цикл
			Если Не ЗначениеЗаполнено(стрПС.ПредметСнабженияИсходный) Тогда
				стрПС.ПредметСнабженияИсходный = стрПС.ПредметСнабжения;
			КонецЕсли;
			Если стрПС.ПредметСнабжения <> стрПС.ПредметСнабженияИсходный И Не ЗначениеЗаполнено(стрПС.Комментарий) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заполните комментарий в строке № " + стрПС.НомерСтроки);
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	//ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИсправитьЗаявки();	
	
	Если Не ПроверитьСоответствиеДанныхЗаявкам() Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	СформироватьДвиженияЦеныПредметовСнабжения();
		
	Если Тип = Перечисления.ТипыКонтрактов.Контракт Тогда
	
		Если Вид = Перечисления.ВидыКонтрактов.КонтрактСЗаказчиком Тогда
		
			СформироватьДвиженияКонтрактыСЗаказчикомПоЗаявкам();	
		
		КонецЕсли;
		
	ИначеЕсли Тип = Перечисления.ТипыКонтрактов.КоммерческоеПредложение Тогда
		
		СформироватьДвиженияЦеныДЗО();		
		
	ИначеЕсли Тип = Перечисления.ТипыКонтрактов.ТКП Тогда
		
		СформироватьДвиженияТКПСЗаказчикомПоЗаявкам();		
	
	КонецЕсли;	
	
КонецПроцедуры	//ОбработкаПроведения

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроверитьСоответствиеДанныхЗаявкам()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрактПредметыСнабжения.Заявка КАК Заявка,
	|	КонтрактПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	КонтрактПредметыСнабжения.Количество КАК Количество
	|ПОМЕСТИТЬ втТабличнаяЧасть
	|ИЗ
	|	Документ.Контракт.ПредметыСнабжения КАК КонтрактПредметыСнабжения
	|ГДЕ
	|	КонтрактПредметыСнабжения.Ссылка = &Ссылка
	|	И НЕ КонтрактПредметыСнабжения.Заявка = ЗНАЧЕНИЕ(Документ.Заявка.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заявка,
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТабличнаяЧасть.Заявка КАК Заявка,
	|	втТабличнаяЧасть.ПредметСнабжения КАК ПредметСнабжения,
	|	СУММА(втТабличнаяЧасть.Количество) КАК КоличествоКонтракт,
	|	СУММА(ЕСТЬNULL(ЗаявкаСпецификация.Количество, 0)) КАК КоличествоЗаявка
	|ИЗ
	|	втТабличнаяЧасть КАК втТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заявка.Спецификация КАК ЗаявкаСпецификация
	|		ПО втТабличнаяЧасть.Заявка = ЗаявкаСпецификация.Ссылка
	|			И втТабличнаяЧасть.ПредметСнабжения = ЗаявкаСпецификация.ПредметСнабжения
	|
	|СГРУППИРОВАТЬ ПО
	|	втТабличнаяЧасть.Заявка,
	|	втТабличнаяЧасть.ПредметСнабжения
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(втТабличнаяЧасть.Количество) = СУММА(ЕСТЬNULL(ЗаявкаСпецификация.Количество, 0))";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Сообщить("Количество предметов снабжения " + Строка(Выборка.ПредметСнабжения) + " (" + Строка(Выборка.КоличествоКонтракт) + ") не соответствует таковому в документе " +
			Строка(Выборка.Заявка) + " (" + Строка(Выборка.КоличествоЗаявка) + ")", СтатусСообщения.Внимание);
			
	КонецЦикла;
		
	Возврат Ложь;	
	
КонецФункции 	//ПроверитьСоответствиеДанныхЗаявкам

Процедура ИсправитьЗаявки()

	Если Тип = Перечисления.ТипыКонтрактов.КоммерческоеПредложение Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КонтрактПредметыСнабжения.Заявка КАК Заявка,
		|	КонтрактПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
		|	КонтрактПредметыСнабжения.Количество КАК Количество,
		|	КонтрактПредметыСнабжения.ПредметСнабженияИсходный КАК ПредметСнабженияИсходный,
		|	КонтрактПредметыСнабжения.Комментарий КАК Комментарий
		|ПОМЕСТИТЬ втТабличнаяЧасть
		|ИЗ
		|	Документ.Контракт.ПредметыСнабжения КАК КонтрактПредметыСнабжения
		|ГДЕ
		|	КонтрактПредметыСнабжения.Ссылка = &Ссылка
		|	И НЕ КонтрактПредметыСнабжения.Заявка = ЗНАЧЕНИЕ(Документ.Заявка.ПустаяСсылка)
		|	И КонтрактПредметыСнабжения.ПредметСнабженияИсходный <> КонтрактПредметыСнабжения.ПредметСнабжения
		|	И КонтрактПредметыСнабжения.ПредметСнабженияИсходный <> ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заявка,
		|	ПредметСнабжения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТабличнаяЧасть.Заявка КАК Заявка,
		|	втТабличнаяЧасть.ПредметСнабжения КАК ПредметСнабжения,
		|	СУММА(втТабличнаяЧасть.Количество) КАК КоличествоКонтракт,
		|	СУММА(ЕСТЬNULL(ЗаявкаСпецификация.Количество, 0)) КАК КоличествоЗаявка,
		|	втТабличнаяЧасть.ПредметСнабженияИсходный КАК ПредметСнабженияИсходный,
		|	втТабличнаяЧасть.Комментарий КАК Комментарий
		|ИЗ
		|	втТабличнаяЧасть КАК втТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заявка.Спецификация КАК ЗаявкаСпецификация
		|		ПО втТабличнаяЧасть.Заявка = ЗаявкаСпецификация.Ссылка
		|			И втТабличнаяЧасть.ПредметСнабжения = ЗаявкаСпецификация.ПредметСнабжения
		|
		|СГРУППИРОВАТЬ ПО
		|	втТабличнаяЧасть.Заявка,
		|	втТабличнаяЧасть.ПредметСнабжения,
		|	втТабличнаяЧасть.ПредметСнабженияИсходный,
		|	втТабличнаяЧасть.Комментарий
		|
		|ИМЕЮЩИЕ
		|	НЕ СУММА(втТабличнаяЧасть.Количество) = СУММА(ЕСТЬNULL(ЗаявкаСпецификация.Количество, 0))";

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
		
			ТаблицаРезультат = РезультатЗапроса.Выгрузить();
			
			ТаблицаЗаявок = ТаблицаРезультат.Скопировать();
			ТаблицаЗаявок.Свернуть("Заявка");
			
			Для Каждого  текЗаявка Из ТаблицаЗаявок Цикл
				
				ЗаявкаОбъект = текЗаявка.Заявка.ПолучитьОбъект();
				
				ПСКонтракт = ТаблицаРезультат.НайтиСтроки(Новый Структура("Заявка", текЗаявка.Заявка));
				
				Для Каждого кПредмет Из ПСКонтракт Цикл
					
					ПредметыВзаявке = ЗаявкаОбъект.Спецификация.НайтиСтроки(Новый Структура("ПредметСнабжения", кПредмет.ПредметСнабженияИсходный)); 	
					
					Для Каждого зПредмет Из ПредметыВзаявке Цикл
						
						зПредмет.ПредметСнабжения 			= кПредмет.ПредметСнабжения;
						зПредмет.ПредметСнабженияИсходный 	= кПредмет.ПредметСнабженияИсходный;
						зПредмет.Комментарий 				= кПредмет.Комментарий;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 	//ИсправитьЗаявки

#Область ФормированиеДвижений

Процедура СформироватьДвиженияЦеныПредметовСнабжения()
	
	УсловиеПоставки = "";

	Если Вид = Перечисления.ВидыКонтрактов.КонтрактСЗаказчиком И Тип = Перечисления.ТипыКонтрактов.Контракт Тогда
	
		ТипЦены = Перечисления.ТипыЦен.Внешняя;
	
	ИначеЕсли Вид = Перечисления.ВидыКонтрактов.КонтрактСПоставщиком И 
			(Тип = Перечисления.ТипыКонтрактов.Контракт ИЛИ Тип = Перечисления.ТипыКонтрактов.КоммерческоеПредложение ИЛИ Тип = Перечисления.ТипыКонтрактов.Договор) Тогда
	
		ТипЦены = Перечисления.ТипыЦен.Внутренняя;
		
	Иначе
		
		Возврат;
	
	КонецЕсли;
	
	Для каждого Строка Из ПредметыСнабжения Цикл
	
		НоваяСтрока = Движения.ЦеныПредметовСнабжения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период 		= Дата;
		НоваяСтрока.ТипЦены 	= ТипЦены;
		НоваяСтрока.Контрагент 	= Контрагент;
		НоваяСтрока.Валюта 		= Валюта;
		НоваяСтрока.Статус 		= Статус;
		
		Если Вид = Перечисления.ВидыКонтрактов.КонтрактСЗаказчиком И Тип = Перечисления.ТипыКонтрактов.Контракт Тогда
			
			НоваяСтрока.УсловиеПоставки = Строка.Заявка.ЗапросТКПRFP.УсловияПоставки;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.ЦеныПредметовСнабжения.Записывать = Истина;	

КонецПроцедуры // СформироватьДвиженияЦеныПредметовСнабжения()

Процедура СформироватьДвиженияЦеныДЗО()

	Для каждого Строка Из ПредметыСнабжения Цикл
		
		Если ЗначениеЗаполнено(Строка.Заявка) Тогда
			
			НоваяСтрока = Движения.ЦеныДЗО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = Дата;
			НоваяСтрока.Валюта = Валюта;	
			
		КонецЕсли;	
	
	КонецЦикла;
	
	Движения.ЦеныДЗО.Записывать = Движения.ЦеныДЗО.Количество() > 0;	

КонецПроцедуры //СформироватьДвиженияЦеныДЗО

Процедура СформироватьДвиженияКонтрактыСЗаказчикомПоЗаявкам()

	Для каждого Строка Из ПредметыСнабжения Цикл
		
		Если ЗначениеЗаполнено(Строка.Заявка) Тогда
		
			НоваяСтрока = Движения.КонтрактыСЗаказчикомПоЗаявкам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.КонтрактыСЗаказчикомПоЗаявкам.Записывать = Движения.КонтрактыСЗаказчикомПоЗаявкам.Количество() > 0;	

КонецПроцедуры  //СформироватьДвиженияКонтрактыСЗаказчикомПоЗаявкам

Процедура СформироватьДвиженияТКПСЗаказчикомПоЗаявкам()

	Для каждого Строка Из ПредметыСнабжения Цикл
		
		Если ЗначениеЗаполнено(Строка.Заявка) Тогда
		
			НоваяСтрока = Движения.ТКПСЗаказчикомПоЗаявкам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Движения.ТКПСЗаказчикомПоЗаявкам.Записывать = Движения.ТКПСЗаказчикомПоЗаявкам.Количество() > 0;	

КонецПроцедуры  //СформироватьДвиженияТКПСЗаказчикомПоЗаявкам

#КонецОбласти
