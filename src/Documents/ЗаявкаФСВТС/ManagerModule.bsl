///////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПолучениеДанных

Функция ПолучитьОрганизации(ТаблицаРаспределения)
	Таблица = ТаблицаРаспределения.Скопировать();
	Таблица.Свернуть("Организация");
	Возврат Таблица.ВыгрузитьКолонку("Организация");
КонецФункции // ПолучитьОрганизации

Функция ПолучитьТаблицуРаспределения(Заявка)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	РаспределениеЗаявокОбороты.ПредметСнабжения КАК ПредметСнабжения,
	             	  |	РаспределениеЗаявокОбороты.Исполнитель КАК Организация
	             	  |ИЗ
	             	  |	РегистрНакопления.РаспределениеЗаявок.Обороты(, , , Заявка = &Заявка) КАК РаспределениеЗаявокОбороты
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	Организация,
	             	  |	ПредметСнабжения";
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьТаблицуРаспределения

Функция ПолучитьПроцессыСогласования(РаспределениеЗаявки)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	СогласованиеРаспределенияЗаявкиФСВТС.Ссылка КАК Ссылка
	             	  |ИЗ
	             	  |	БизнесПроцесс.СогласованиеРаспределенияЗаявкиФСВТС КАК СогласованиеРаспределенияЗаявкиФСВТС
	             	  |ГДЕ
	             	  |	СогласованиеРаспределенияЗаявкиФСВТС.Основание = &РаспределениеЗаявки
	             	  |	И НЕ СогласованиеРаспределенияЗаявкиФСВТС.ПометкаУдаления
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	СогласованиеРаспределенияЗаявкиФСВТС.Дата
	             	  |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("РаспределениеЗаявки", РаспределениеЗаявки);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ПолучитьПроцессыСогласования

Функция ПолучитьВизыСогласования(СогласованиеРаспределения)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ЗадачаИсполнителя.Дата КАК ДатаЗадачи,
	             	  |	ЗадачаИсполнителя.Исполнитель КАК Исполнитель,
	             	  |	СогласованиеРаспределенияЗаявкиФСВТСУстановленныеВизы.Виза КАК Виза,
					  |	СогласованиеРаспределенияЗаявкиФСВТСУстановленныеВизы.Дата КАК ДатаВизы,
	             	  |	СогласованиеРаспределенияЗаявкиФСВТСУстановленныеВизы.Комментарий КАК Комментарий
	             	  |ИЗ
	             	  |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.СогласованиеРаспределенияЗаявкиФСВТС.УстановленныеВизы КАК СогласованиеРаспределенияЗаявкиФСВТСУстановленныеВизы
	             	  |		ПО ЗадачаИсполнителя.БизнесПроцесс = СогласованиеРаспределенияЗаявкиФСВТСУстановленныеВизы.Ссылка
	             	  |			И ЗадачаИсполнителя.Исполнитель = СогласованиеРаспределенияЗаявкиФСВТСУстановленныеВизы.Исполнитель
	             	  |ГДЕ
	             	  |	ЗадачаИсполнителя.БизнесПроцесс = &СогласованиеРаспределения";
	Запрос.УстановитьПараметр("СогласованиеРаспределения", СогласованиеРаспределения);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьВизыСогласования

#КонецОбласти

#Область ЗаполнениеОбластейТабличногоДокументаЗаявки

Процедура ЗаполнитьОбластьЗаголовок(Область, Заявка)
	Область.Параметры.Заполнить(Заявка);
	Область.Параметры.Дата = Формат(Заявка.Дата, "Л=; ДЛФ=DD");
КонецПроцедуры // ЗаполнитьОбластьЗаголовок

Процедура ЗаполнитьОбластьШапкаКорабли(Область, Заявка)
	Область.Параметры.КоличествоСтрок = Заявка.Корабли.Количество();
КонецПроцедуры // ЗаполнитьОбластьШапкаКорабли

Процедура ЗаполнитьОбластьСтрокаКорабли(Область, Строка)
	Область.Параметры.Заполнить(Строка);
	Область.Параметры.Проект = Строка.Корабль.Владелец;
КонецПроцедуры // ЗаполнитьОбластьСтрокаКорабли

Процедура ЗаполнитьОбластьШапкаПС(Область, Заявка)
	Область.Параметры.КоличествоСтрок = Заявка.ПредметыСнабжения.Количество();
КонецПроцедуры // ЗаполнитьОбластьШапкаПС

Процедура ЗаполнитьОбластьСтрокаПС(Область, Строка, НомерСтроки = Неопределено)
	Область.Параметры.Заполнить(Строка);
	Если Не НомерСтроки = Неопределено Тогда
		Область.Параметры.НомерСтроки = НомерСтроки;
	КонецЕсли; // Если Не НомерСтроки = Неопределено Тогда	
КонецПроцедуры // ЗаполнитьОбластьШапкаПС

Процедура ЗаполнитьОбластьСтрокаОрганизация(Область, Организация)
	Область.Параметры.Организация = Организация;
КонецПроцедуры // ЗаполнитьОбластьСтрокаОрганизация

#КонецОбласти

#Область ЗаполнениеОбластейТабличногоДокументаИсторииСогласования

Процедура ЗаполнитьОбластьЗаголовокСогласование(Область, Согласование)
	Область.Параметры.БизнесПроцесс = Согласование;
	Область.Параметры.Наименование 	= Согласование.Наименование;
	Если Согласование.Завершен И Согласование.Согласовано Тогда
		Область.Параметры.Статус 			= "Согласовано";
		Область.Области["Статус"].ЦветФона 	= WebЦвета.НейтральноЗеленый;
	ИначеЕсли Согласование.Завершен И Не Согласование.Согласовано Тогда
		Область.Параметры.Статус 			= "Не согласовано";
		Область.Области["Статус"].ЦветФона 	= WebЦвета.СветлоРозовый;
	Иначе
		Область.Параметры.Статус 			= "В процессе";
		Область.Области["Статус"].ЦветФона 	= WebЦвета.СветлоЖелтый;
	КонецЕсли; // Если Согласование.Завершен И Согласование.Согласовано Тогда
КонецПроцедуры // ЗаполнитьОбластьЗаголовокРаспределение

Процедура ЗаполнитьОбластьСтрокаСогласование(Область, Строка)
	Область.Параметры.Заполнить(Строка);
	Если Строка.Виза = Перечисления.ВизыСогласования.Согласовано Тогда
		Область.Области["Виза"].ЦветФона 	= WebЦвета.НейтральноЗеленый;
	ИначеЕсли Строка.Виза = Перечисления.ВизыСогласования.СогласованоСЗамечаниями Тогда
		Область.Области["Виза"].ЦветФона 	= WebЦвета.СветлоЖелтый;
	ИначеЕсли Строка.Виза = Перечисления.ВизыСогласования.НеСогласовано Тогда
		Область.Области["Виза"].ЦветФона 	= WebЦвета.СветлоРозовый;
	КонецЕсли; // Если Строка.Виза = Перечисления.ВизыСогласования.Согласовано Тогда	
КонецПроцедуры // ЗаполнитьОбластьСтрокаСогласование

Функция СформироватьТабличныйДокументПоПроцессуСогласования(СогласованиеРаспределенияЗаявки)
	
	Результат 	= Новый ТабличныйДокумент;  	
	Макет 		= ПолучитьМакет("ИсторияСогласования");
	
	// Заголовок
	Область 	= Макет.ПолучитьОбласть("Заголовок");
	ЗаполнитьОбластьЗаголовокСогласование(Область, СогласованиеРаспределенияЗаявки);
	Результат.Вывести(Область);
	
	// Шапка
	Результат.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	// Строки	
	Для Каждого Строка Из ПолучитьВизыСогласования(СогласованиеРаспределенияЗаявки) Цикл
		Область = Макет.ПолучитьОбласть("Строка");
		ЗаполнитьОбластьСтрокаСогласование(Область, Строка);
		Результат.Вывести(Область);
	КонецЦикла; // Для Каждого Строка Из ПолучитьВизыСогласования(СогласованиеРаспределенияЗаявки) Цикл
	
	Возврат Результат;
КонецФункции // СформироватьТабличныйДокументПоПроцессуСогласования

#КонецОбласти

#Область ЗаполнениеОбластейТабличногоДокументаИсторииСогласования

Процедура ЗаполнитьОбластьПисьмо(Область, Заявка, Организация)
	Область.Параметры.Должность 			= Организация.ДолжностьРуководителяДательный;
	Область.Параметры.Организация 			= Организация.Наименование;
	Область.Параметры.ФИОДательныйПадеж 	= Организация.ФИОРуководителяДательный;
	Область.Параметры.ФИО 					= Организация.ФИОРуководителя; 
	Область.Параметры.Заказчик				= Заявка.Заказчик;
	Область.Параметры.ДатаЗаявки			= Формат(Заявка.ДатаЗаявки, "ДФ=dd.MM.yyyy");
	Область.Параметры.НомерЗаявки			= Заявка.НомерЗаказчика;
	Область.Параметры.РегистрационныйНомер	= Заявка.РегистрационныйНомер;
	Область.Параметры.ДатаРегистрации		= Формат(Заявка.ДатаРегистрации, "ДФ=dd.MM.yyyy");
КонецПроцедуры // ЗаполнитьОбластьПисьмо

#КонецОбласти
///////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СформироватьТаблицуДвиженийЗаявкиФСВТС(Ссылка) Экспорт
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ЗаявкаФСВТСПредметыСнабжения.Ссылка.Дата КАК Период,
	             	  |	ЗаявкаФСВТСПредметыСнабжения.Ссылка КАК Заявка,
	             	  |	ЗаявкаФСВТСПредметыСнабжения.Ссылка.Заказчик КАК Заказчик,
	             	  |	ЗаявкаФСВТСПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	             	  |	СУММА(ЗаявкаФСВТСПредметыСнабжения.Количество) КАК Количество
	             	  |ИЗ
	             	  |	Документ.ЗаявкаФСВТС.ПредметыСнабжения КАК ЗаявкаФСВТСПредметыСнабжения
	             	  |ГДЕ
	             	  |	ЗаявкаФСВТСПредметыСнабжения.Ссылка = &Ссылка
	             	  |
	             	  |СГРУППИРОВАТЬ ПО
	             	  |	ЗаявкаФСВТСПредметыСнабжения.Ссылка,
	             	  |	ЗаявкаФСВТСПредметыСнабжения.ПредметСнабжения,
	             	  |	ЗаявкаФСВТСПредметыСнабжения.Ссылка.Дата,
	             	  |	ЗаявкаФСВТСПредметыСнабжения.Ссылка.Заказчик";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // СформироватьТаблицуДвиженийЗаявкиФСВТС

Функция СформироватьТабличныйДокументЗаявки(Ссылка, ВыводитьСгруппировкойПоОрганизациям = Ложь) Экспорт
	Результат 	= Новый ТабличныйДокумент;
	Результат.НачатьАвтогруппировкуСтрок();
	Макет 		= ПолучитьМакет("Заявка");
	
	// Заголовок
	Область 	= Макет.ПолучитьОбласть("Заголовок");
	ЗаполнитьОбластьЗаголовок(Область, Ссылка);
	Результат.Вывести(Область);
	
	// Корабли - ВРЕМЕННО НЕ ВЫВОДИМ
	//Область 	= Макет.ПолучитьОбласть("ШапкаКорабли");
	//ЗаполнитьОбластьШапкаКорабли(Область, Ссылка);
	//Результат.Вывести(Область, 1,,Ложь);
	//
	//Для Каждого Строка Из Ссылка.Корабли Цикл
	//	Область = Макет.ПолучитьОбласть("СтрокаКорабли");
	//	ЗаполнитьОбластьСтрокаКорабли(Область, Строка);
	//	Результат.Вывести(Область, 2,,Ложь);
	//КонецЦикла; // Для Каждого Строка Из Ссылка.Корабли Цикл
	
	// Предметы снабжения
	Область 	= Макет.ПолучитьОбласть("ШапкаПС");
	ЗаполнитьОбластьШапкаПС(Область, Ссылка);
	Результат.Вывести(Область, 1);
	Если ВыводитьСгруппировкойПоОрганизациям Тогда
		ТаблицаРаспределения 	= ПолучитьТаблицуРаспределения(Ссылка);
		Организации 			= ПолучитьОрганизации(ТаблицаРаспределения);
		Результат.НачатьАвтогруппировкуСтрок();
		НомерСтроки				= 1;
		Для Каждого Организация Из Организации Цикл
			// Организация
			Область 			= Макет.ПолучитьОбласть("СтрокаОрганизация");
			ЗаполнитьОбластьСтрокаОрганизация(Область, Организация);
			Результат.Вывести(Область, 1, "Организация", Ложь);
			
			// Предметы снабжения
			ТаблицаПредметовСнабжения 	= ТаблицаРаспределения.Скопировать(Новый Структура("Организация", Организация));
			Для Каждого Строка Из ТаблицаПредметовСнабжения Цикл
				НайденныеСтроки = Ссылка.ПредметыСнабжения.НайтиСтроки(Новый Структура("ПредметСнабжения", Строка.ПредметСнабжения));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Область 			= Макет.ПолучитьОбласть("СтрокаПС");
					ЗаполнитьОбластьСтрокаПС(Область, НайденнаяСтрока, НомерСтроки);
					Результат.Вывести(Область, 2,,Ложь);
					НомерСтроки 		= НомерСтроки + 1;
				КонецЦикла; // Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл				
			КонецЦикла; // Для Каждого Строка Из ТаблицаПредметовСнабжения Цикл			
		КонецЦикла; // Для Каждого Организация Из Организации Цикл		
		Результат.ЗакончитьАвтогруппировкуСтрок();
	Иначе		
		Для Каждого Строка Из Ссылка.ПредметыСнабжения Цикл
			Область 			= Макет.ПолучитьОбласть("СтрокаПС");
			ЗаполнитьОбластьСтрокаПС(Область, Строка);
			Результат.Вывести(Область);
		КонецЦикла; // Для Каждого Строка Из Ссылка.Корабли Цикл
	КонецЕсли; // Если ВыводитьСгруппировкойПоОрганизациям Тогда
	
	Результат.ЗакончитьАвтогруппировкуСтрок();
	Возврат Результат;
КонецФункции // СформироватьТабличныйДокумент

Функция СформироватьТабличныйДокументИсторииСогласования(Основание) Экспорт
	Результат = Новый ТабличныйДокумент;
	
	Если ТипЗнч(Основание) = Тип("БизнесПроцессСсылка.РаспределениеЗаявкиФСВТС") Тогда
		Для Каждого Согласование Из ПолучитьПроцессыСогласования(Основание) Цикл
			Результат.Вывести(СформироватьТабличныйДокументПоПроцессуСогласования(Согласование));
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла; // Для Каждого Согласование Из ПолучитьПроцессыСогласования(Основание) Цикл		
	ИначеЕсли ТипЗнч(Основание) = Тип("БизнесПроцессСсылка.СогласованиеРаспределенияЗаявкиФСВТС") Тогда
		Результат.Вывести(СформироватьТабличныйДокументПоПроцессуСогласования(Основание));
	КонецЕсли; // Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаФСВТС") Тогда
	
	Возврат Результат;
КонецФункции // СформироватьТабличныйДокументИсторииСогласования

Функция СформироватьТабличныйДокументПисьма(Заявка) Экспорт
	Результат 	= Новый ТабличныйДокумент;
	Макет 		= ПолучитьМакет("ИнформационноеПисьмо");
	Для Каждого Организация Из ПолучитьОрганизации(ПолучитьТаблицуРаспределения(Заявка)) Цикл
		Область = Макет.ПолучитьОбласть("Письмо");
		ЗаполнитьОбластьПисьмо(Область, Заявка, Организация);
		Результат.Вывести(Область);
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла; // Для Каждого Организация Из ПолучитьОрганизации(ПолучитьТаблицуРаспределения(Заявка)) Цикл	
	
	Возврат Результат;
КонецФункции // СформироватьТабличныйДокументПисьма

Функция ЗаявкаСуществует(Идентификатор) Экспорт
	Результат 		= Ложь;
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ЗаявкаФСВТС.Ссылка КАК Ссылка
	             	  |ИЗ
	             	  |	Документ.ЗаявкаФСВТС КАК ЗаявкаФСВТС
	             	  |ГДЕ
	             	  |	ЗаявкаФСВТС.Идентификатор = &Идентификатор
	             	  |	И НЕ ЗаявкаФСВТС.ПометкаУдаления";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка 		= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат 	= Истина;
	КонецЕсли; // Если Выборка.Следующий() Тогда	
	Возврат Результат;
КонецФункции // ЗаявкаСуществует

Функция ПолучитьПроекты(Заявка) Экспорт
	Проекты = Новый Массив;
	Для Каждого Строка Из Заявка.Корабли Цикл
		Проект = Строка.Корабль.Владелец;
		Если Проекты.Найти(Проект) = Неопределено Тогда
			Проекты.Добавить(Проект);
		КонецЕсли; // Если Проекты.Найти(Проект) = Неопределено Тогда		
	КонецЦикла; // Для Каждого Строка Из Заявка.Корабли Цикл	
	Возврат Проекты;
КонецФункции // ПолучитьПроекты
