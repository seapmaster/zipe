///////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбработчикВыбораИзделия(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если Результат = Неопределено Тогда 	
	ТекущаяСтрока							= Элементы.ПредметыСнабжения.ТекущиеДанные;
	ТекущаяСтрока.Изделие					= Результат.Изделие;
	ТекущаяСтрока.ОписаниеИерархииИзделия 	= Результат.Описание;	
КонецПроцедуры // ОбработчикВыбораИзделия()

&НаСервере
Функция ПолучитьСписокВыбораПредметовСнабжения(Обозначение)
	Возврат Справочники.КаталогПредметовСнабжения.ПолучитьСписокПодобных(Обозначение);
КонецФункции // ПолучитьСписокВыбора

&НаСервере
Функция ПолучитьСписокВыбораИзделий(ПредметСнабжения)
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПолучитьСписок(ПредметСнабжения, Корабли.ВыгрузитьЗначения());
КонецФункции // ПолучитьСписокВыбораИзделий

&НаСервере
Функция ПолучитьОписаниеИзделия(Изделие)
	Возврат РегистрыСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ПолучитьОписание(Изделие);
КонецФункции // ПолучитьОписаниеИзделия

&НаСервере
Функция ПолучитьСтруктуруИзделия(ПредметСнабжения)
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПолучитьИзделие(
													ПредметСнабжения,
													Корабли.ВыгрузитьЗначения());
КонецФункции // ПолучитьСтруктуруИзделия

#Область Проверки

&НаКлиенте
Функция ПроверитьЗаполнениеНастроек()
	Результат = Истина;
	
	Если НомерПервойСтроки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан номер первой строки",, "НомерПервойСтроки");
		Результат = Ложь;
	КонецЕсли; // Если НомерПервойСтроки = 0 Тогда
	
	Если НомерПоследнейСтроки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан номер последней строки",, "НомерПоследнейСтроки");
		Результат = Ложь;
	КонецЕсли; // Если НомерПоследнейСтроки = 0 Тогда
	
	Если НомерПоследнейСтроки < НомерПервойСтроки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Номер последней строки должен быть больше номера первой строки",, "НомерПоследнейСтроки");
		Результат = Ложь;
	КонецЕсли; // Если НомерПоследнейСтроки < НомерПервойСтроки Тогда
	
	Если КолонкаНомерСтроки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка номера строки",, "КолонкаНомерСтроки");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаНомерСтроки = 0 Тогда
	
	Если КолонкаКодПС = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка кода ПС",, "КолонкаКодПС");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаКодПС = 0 Тогда
	
	Если КолонкаОбозначениеПC = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка обозначения ПС",, "КолонкаОбозначениеПC");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаОбозначениеПC = 0 Тогда
	
	Если КолонкаНаименованиеПС = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка наименования ПС",, "КолонкаНаименованиеПС");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаНаименованиеПС = 0 Тогда
	
	Если КолонкаКодИзделия = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка кода изделия",, "КолонкаКодИзделия");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаКодИзделия = 0 Тогда
	
	Если КолонкаНаименованиеИзделия = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка наименования изделия",, "КолонкаНаименованиеИзделия");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаНаименованиеИзделия = 0 Тогда
	
	Если КолонкаКоличество = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка количества",, "КолонкаКоличество");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаКоличество = 0 Тогда
	
	Возврат Результат;
КонецФункции // ПроверитьЗаполнениеНастроек

#КонецОбласти

#Область ЧтениеExcel

&НаКлиенте
Функция ЗаполнитьНачальныеПараметрыПоискаВДокументе()
	
	// Ищем шапку в первых 5 строках
	Для НомерСтроки = 1 По 5 Цикл
		Для НомерКолонки = 1 По 15 Цикл
			Значение 						= ВРег(ПолучитьЗначение(НомерСтроки, НомерКолонки));
			Если СтрНайти(Значение, ВРег("I/L")) > 0 Тогда
				НомерПервойСтроки 			= НомерСтроки + 1;
				КолонкаНомерСтроки			= НомерКолонки;
			ИначеЕсли СтрНайти(Значение, ВРег("ItemCode")) > 0 Тогда
				КолонкаОбозначениеПC		= НомерКолонки;
			ИначеЕсли СтрНайти(Значение, ВРег("ItemDesc")) > 0 Тогда
				КолонкаНаименованиеПС 		= НомерКолонки;
			ИначеЕсли СтрНайти(Значение, ВРег("Equptment")) > 0 Тогда
				КолонкаНаименованиеИзделия 	= НомерКолонки;
			ИначеЕсли СтрНайти(Значение, ВРег("Qty")) > 0 Тогда
				КолонкаКоличество 			= НомерКолонки;
			ИначеЕсли СтрНайти(Значение, ВРег("ID ПС")) > 0 Тогда
				КолонкаКодПС 				= НомерКолонки;
			ИначеЕсли СтрНайти(Значение, ВРег("ID узла")) > 0 Тогда
				КолонкаКодИзделия 			= НомерКолонки;
			КонецЕсли; // СтрНайти(Значение, ВРег("I/L")) > 0 Тогда
		КонецЦикла; // Для НомерКолонки = 1 По 15 Цикл		
	КонецЦикла; // Для НомерСтроки = 1 По 10 Цикл
	
	// Определяем количество строк
	Если НомерПервойСтроки > 0 И КолонкаНомерСтроки > 0 Тогда
		Для НомерСтроки = НомерПервойСтроки По ?(ДанныеExcel.ВысотаТаблицы > 200, 200, ДанныеExcel.ВысотаТаблицы) Цикл
			Если ПолучитьЗначение(НомерСтроки, КолонкаНомерСтроки, Истина) > 0 Тогда
				НомерПоследнейСтроки = НомерСтроки;
			КонецЕсли; // Если ПолучитьЗначение(НомерСтроки, КолонкаНомерСтроки, Истина) > 0 Тогда			
		КонецЦикла; // Для Сч = НомерПервойСтроки По ?(ДанныеExcel.ВысотаТаблицы > 200, 200, ДанныеExcel.ВысотаТаблицы) Цикл		
	КонецЕсли; // Если НомерПервойСтроки > 0 Тогда 	
КонецФункции // ЗаполнитьНачальныеПараметрыПоискаВДокументе

#КонецОбласти

#Область ОбработкаТабличногоДокумента

&НаСервере
Функция ПолучитьЗначение(НомерСтроки, НомерКолонки, ЧисловоеЗначение = Ложь)
	Попытка
		ИмяОбласти 		= "R" + Формат(НомерСтроки, "ЧГ=") +"C" + Формат(НомерКолонки);
		СтрокаДанных 	= ДанныеExcel.Область(ИмяОбласти).Текст;
		СтрокаДанных 	= СокрЛП(СтрокаДанных);
		Если ЧисловоеЗначение Тогда
			Результат 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДанных);
		Иначе
			Результат 	= СтрокаДанных;
		КонецЕсли;
	Исключение
		Результат 		= ?(ЧисловоеЗначение, -1, "");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ИмяОбласти + ": не удалось получить значение. " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции // ПолучитьЗначение

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПредметыСнабжения()
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТаблицы Из ПредметыСнабжения Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредметСнабжения) Тогда
			Продолжить;
		КонецЕсли; // Если ЗначениеЗаполнено(СтрокаТаблицы.ПредметСнабжения) Тогда
		
		СтрокаТаблицы.ПредметСнабжения 	= Справочники.КаталогПредметовСнабжения.НайтиПоОбозначению(СтрокаТаблицы.ОбозначениеПС);
	КонецЦикла; // Для Каждого СтрокаТаблицы Из ПредметыСнабжения Цикл	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // ПодобратьПредметыСнабжения

&НаСервере
Процедура ЗаполнитьИзделия()
	УстановитьПривилегированныйРежим(Истина);
	МассивКораблей = Корабли.ВыгрузитьЗначения();	
	Для Каждого СтрокаДанных Из ПредметыСнабжения Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ПредметСнабжения) 
			И ЗначениеЗаполнено(СтрокаДанных.Изделие) Тогда
			Продолжить;
		КонецЕсли; // Если ЗначениеЗаполнено(СтрокаДанных.ИзделиеСсылка) Тогда
		
		СтруктураИзделия 			= Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПолучитьИзделие(
													СтрокаДанных.ПредметСнабжения,
													МассивКораблей);
		Если Не СтруктураИзделия = Неопределено Тогда
			СтрокаДанных.Изделие	 				= СтруктураИзделия.Изделие;
			СтрокаДанных.ОписаниеИерархииИзделия 	= СтруктураИзделия.Описание;
		КонецЕсли; // Если Не СтруктураИзделия = Неопределено Тогда
	КонецЦикла; // Для Каждого СтрокаДанных Из ПредметыСнабжения Цикл	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // ЗаполнитьИзделия

&НаСервере
Функция ПолучитьАдресВХранилище()
	Возврат ПоместитьВоВременноеХранилище(ПредметыСнабжения.Выгрузить(), Новый УникальныйИдентификатор);
КонецФункции // ПолучитьАдресВХранилище

#Область CallBackМетоды

&НаКлиенте
Процедура ПослеПомещенияФайлаНаСервер(Результат, ДополнительныеПарамметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если Результат = Неопределено Тогда
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Расширение", Результат.СсылкаНаФайл.Расширение);
	
	ДанныеExcel = РаботаСФайламиOffice.ПрочитатьФайлВТабличныйДокумент(Результат.Адрес, ПараметрыФайла);
	
	ЗаполнитьНачальныеПараметрыПоискаВДокументе();
	
КонецПроцедуры // ПослеПомещенияФайлаНаСервер

#КонецОбласти

///////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура КомандаЗаполнитьТаблицуДанных(Команда)
	Если Не ПроверитьЗаполнениеНастроек() Тогда
		Возврат;
	КонецЕсли; // Если Не ПроверитьЗаполнениеНастроек() Тогда
	
	ПредметыСнабжения.Очистить();
	Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
		НоваяСтрока 					= ПредметыСнабжения.Добавить();
		НоваяСтрока.НомерСтроки 		= ПолучитьЗначение(НомерСтроки, КолонкаНомерСтроки, Истина);
		НоваяСтрока.КодПС				= ПолучитьЗначение(НомерСтроки, КолонкаКодПС);
		НоваяСтрока.ОбозначениеПС 		= ПолучитьЗначение(НомерСтроки, КолонкаОбозначениеПC);
		НоваяСтрока.НаименованиеПС 		= ПолучитьЗначение(НомерСтроки, КолонкаНаименованиеПС);
		НоваяСтрока.КодИзделия 			= ПолучитьЗначение(НомерСтроки, КолонкаКодИзделия);
		НоваяСтрока.НаименованиеИзделия = ПолучитьЗначение(НомерСтроки, КолонкаНаименованиеИзделия);
		НоваяСтрока.Количество 			= ПолучитьЗначение(НомерСтроки, КолонкаКоличество, Истина);
	КонецЦикла; // Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
	
	ЗаполнитьПредметыСнабжения();
	ЗаполнитьИзделия();
КонецПроцедуры // КомандаЗаполнитьТаблицуДанных

&НаКлиенте
Процедура КомандаПеренстиВДокумент(Команда)
	АдресВХранилище = ПолучитьАдресВХранилище();
	Закрыть(АдресВХранилище);
КонецПроцедуры // КомандаПеренстиВДокумент

///////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка				= Ложь;
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.МножественныйВыбор = Ложь;
	ПараметрыДиалога.Заголовок 			= "Файл с данными тендера"; 
	ПараметрыДиалога.Фильтр 			= "Файлы excel|*.xls;*.xlsx"; 
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеПомещенияФайлаНаСервер", ЭтаФорма);
	
	НачатьПомещениеФайлаНаСервер(ОповещениеЗавершения,,,,ПараметрыДиалога,ЭтаФорма.УникальныйИдентификатор);
	
	Режим 								= РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла 				= Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла 	= ИмяФайла;
	ДиалогОткрытияФайла.Заголовок 		= "Файл с данными тендера";
	ДиалогОткрытияФайла.Фильтр			= "Файлы excel|*.xls;*.xlsx";
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтаФорма));	
КонецПроцедуры // ИмяФайлаНачалоВыбора

&НаКлиенте
Процедура ПредметыСнабженияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ПредметыСнабженияПередНачаломДобавления

&НаКлиенте
Процедура ПредметыСнабженияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ПредметыСнабженияПередУдалением

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Корабли") Тогда
		Корабли.ЗагрузитьЗначения(Параметры.Корабли);
	КонецЕсли; // Если Параметры.Свойство("Корабли") Тогда	
КонецПроцедуры // ПриСозданииНаСервере

&НаКлиенте
Процедура ПредметыСнабженияПредметСнабженияПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПредметыСнабжения.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если ТекущаяСтрока = Неопределено Тогда
	
	СтруктураИзделия 			= ПолучитьСтруктуруИзделия(ТекущаяСтрока.ПредметСнабжения);
	Если СтруктураИзделия = Неопределено Тогда
		ТекущаяСтрока.Изделие 					= "";
		ТекущаяСтрока.ОписаниеИерархииИзделия 	= "";
	Иначе
		ТекущаяСтрока.Изделие		 			= СтруктураИзделия.Изделие;
		ТекущаяСтрока.ОписаниеИерархииИзделия 	= СтруктураИзделия.Описание;
	КонецЕсли; // Если Не СтруктураИзделия = Неопределено Тогда
КонецПроцедуры // ПредметыСнабженияПредметСнабженияПриИзменении

&НаКлиенте
Процедура ПредметыСнабженияПредметСнабженияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		ТекущаяСтрока 				= Элементы.ПредметыСнабжения.ТекущиеДанные;
		СписокВыбора 				= ПолучитьСписокВыбораПредметовСнабжения(ТекущаяСтрока.ОбозначениеПС);
		Если СписокВыбора.Количество() > 0 Тогда
			СтандартнаяОбработка 	= Ложь;
			ДанныеВыбора 			= СписокВыбора;		
		КонецЕсли; // Если СписокВыбора.Количество() > 0 Тогда
	КонецЕсли; // Если Ожидание = 0 Тогда 	              
КонецПроцедуры // ПредметыСнабженияПредметСнабженияАвтоПодбор

&НаКлиенте
Процедура ПредметыСнабженияИзделиеПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ПредметыСнабжения.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если ТекущаяСтрока = Неопределено Тогда
	
	ТекущаяСтрока.ОписаниеИерархииИзделия = ПолучитьОписаниеИзделия(ТекущаяСтрока.Изделие);
КонецПроцедуры // ПредметыСнабженияИзделиеПриИзменении

&НаКлиенте
Процедура ПредметыСнабженияИзделиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;	
	ПредметСнабжения 		= Элементы.ПредметыСнабжения.ТекущиеДанные.ПредметСнабжения;	
	Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда                               	
		ПоказатьПредупреждение(, "Не заполнен предмет снабжения",, 
									"Действие запрещено");
		Возврат;                                          	
	КонецЕсли; // Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда
	
	ПараметрыОткрытия 		= Новый Структура("ПредметСнабжения", ПредметСнабжения);      	
	ОписаниеОповещения 		= Новый ОписаниеОповещения("ОбработчикВыбораИзделия", ЭтаФорма);	
	ОткрытьФорму("Документ.Заявка.Форма.ФормаПодбораИзделия", 
							ПараметрыОткрытия, 
							ЭтотОбъект,,,, 
							ОписаниеОповещения, 
							РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ПредметыСнабженияИзделиеНачалоВыбора

&НаКлиенте
Процедура ПредметыСнабженияИзделиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		ТекущаяСтрока 				= Элементы.ПредметыСнабжения.ТекущиеДанные;
		СписокВыбора 				= ПолучитьСписокВыбораИзделий(ТекущаяСтрока.ПредметСнабжения);
		Если СписокВыбора.Количество() > 0 Тогда
			СтандартнаяОбработка 	= Ложь;
			ДанныеВыбора 			= СписокВыбора;		
		КонецЕсли; // Если СписокВыбора.Количество() > 0 Тогда
	КонецЕсли; // Если Ожидание = 0 Тогда
КонецПроцедуры // ПредметыСнабженияИзделиеАвтоПодбор

