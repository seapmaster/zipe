Перем МассивПорядковыхНомеров, ДанныеРасшифровки;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Элементы.ОсновнаяКоманднаяПанель.ПодчиненныеЭлементы.ФормаСформировать.ИмяКоманды = "СформироватьОтчет";
	
	Элементы.РезультатКомпоновки.ОтображениеСостояния.Видимость = Истина;
	Элементы.РезультатКомпоновки.ОтображениеСостояния.Текст = "Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета";
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРезультатКомпоновки()
	
	РезультатКомпоновки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьРезультатКомпоновки();
	
	Элементы.РезультатКомпоновки.ОтображениеСостояния.Видимость = Истина;
	Элементы.РезультатКомпоновки.ОтображениеСостояния.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	Элементы.РезультатКомпоновки.ОтображениеСостояния.Текст = "Формируется отчет...";
	
	ПодключитьОбработчикОжидания("СформироватьОтчетЗавершение", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетЗавершение() Экспорт
	
	ВыполнитьФормированиеОтчета();
	
	Элементы.РезультатКомпоновки.ОтображениеСостояния.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьФормированиеОтчета()
	
	РеквизитФормыВЗначение("Отчет").СкомпоноватьРезультат(РезультатКомпоновки, ДанныеРасшифровки);
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	ОбработатьВыходнуюФорму(); //выполнение постобработок (таких как иерархическая нумерация)
			
КонецФункции

&НаСервере
Процедура ОбработатьВыходнуюФорму()
	
	ТаблицаНачалась = Ложь;
	МассивПорядковыхНомеров = Новый Массив;
	ТекущийУровень = 0;
	
	Для Сч = 1 По РезультатКомпоновки.ВысотаТаблицы Цикл
		
		Область = РезультатКомпоновки.Область(Сч, 1);
		
		Если ТаблицаНачалась И Не ЗначениеЗаполнено(Область.Текст) Тогда //определение окончания таблицы
			
			Прервать;
			
		КонецЕсли;
		
		Если ТаблицаНачалась Тогда //получение уровня входимости
			
			УровеньСтроки = Число(Область.Текст);
			Область.Текст = ПолучитьУровеньВходимости(УровеньСтроки, ТекущийУровень);
			ТекущийУровень = УровеньСтроки;
			
		КонецЕсли;
		
		Если Область.Текст = "Уровень в группе" Тогда //определение начала таблицы
			
			Область.Текст = "Уровень входимости";
			ТаблицаНачалась = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьУровеньВходимости(УровеньСтроки, ТекущийУровень)
	
	Если УровеньСтроки > ТекущийУровень Тогда //переход к следующему уровню дерева
		
		МассивПорядковыхНомеров.Добавить("1");
		
	ИначеЕсли УровеньСтроки = ТекущийУровень Тогда //продолжение текущего уровня
		
		ПорядковыйНомер = Число(МассивПорядковыхНомеров.Получить(УровеньСтроки - 1)) + 1;
		МассивПорядковыхНомеров[УровеньСтроки - 1] = Формат(ПорядковыйНомер, "ЧГ=0");
		
	Иначе //возвращение к более высокому уровню
		
		Сч = МассивПорядковыхНомеров.ВГраница();
		
		Пока Сч > УровеньСтроки - 1 Цикл
			
			МассивПорядковыхНомеров.Удалить(Сч);
			Сч = Сч - 1;
			
		КонецЦикла;
		
		ПорядковыйНомер = Число(МассивПорядковыхНомеров.Получить(УровеньСтроки - 1)) + 1;
		МассивПорядковыхНомеров[УровеньСтроки - 1] = Формат(ПорядковыйНомер, "ЧГ=0");
		
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПорядковыхНомеров, ".");
		
КонецФункции

&НаСервере
Функция ПолучитьМакетПоИмени(ИмяМакета)
	
	Возврат РеквизитФормыВЗначение("Отчет").ПолучитьМакет(ИмяМакета);
	
КонецФункции

&НаКлиенте
Процедура РезультатКомпоновкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		
		ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Расшифровка, АдресДанныхРасшифровки);
		
		Если Не ЗначениеРасшифровки = Неопределено Тогда
			
			ОткрытьФорму(ЗначениеРасшифровки.ИмяФормыЭлемента, ЗначениеРасшифровки.ПараметрыОткрытия, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.Независимый);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРасшифровки(ИдентификаторРасшифровки, АдресДанныхРасшифровки)
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки];
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		
		ПолеРасшифровки = ЭлементРасшифровки.ПолучитьПоля().Найти("ЭлементСтруктуры");
		
		Если ПолеРасшифровки = Неопределено Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			ЗначениеРасшифровки = ПолеРасшифровки.Значение;
			
			ПараметрыОткрытия = Новый Структура("Владелец, Ссылка", ЗначениеРасшифровки.Владелец, ЗначениеРасшифровки);
			
			Если ЗначениеРасшифровки.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа Тогда
				
				ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаГруппы";
				
			Иначе
				
				ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия";
				
			КонецЕсли;
			
			Возврат Новый Структура("ИмяФормыЭлемента, ПараметрыОткрытия", ИмяФормыЭлемента, ПараметрыОткрытия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
