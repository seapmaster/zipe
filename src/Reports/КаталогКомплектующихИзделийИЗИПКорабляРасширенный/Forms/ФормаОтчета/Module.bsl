Перем Оглавление;
Перем ТекущаяСтраница;
Перем ЭлементыОглавления;
Перем ТипГруппа;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ОсновнаяКоманднаяПанель.ПодчиненныеЭлементы.ФормаСформировать.ИмяКоманды = "СформироватьОтчет";
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Сообщить("Формирование отчета начато в " + ТекущаяДата());
	
	ВыполнитьФормированиеОтчета();
	
	Сообщить("Формирование отчета окончено в " + ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФормированиеОтчета()
	
	ДатаНачала = ТекущаяДата();
	
	Состояние("Получение данных...", , , БиблиотекаКартинок.ДлительнаяОперация48);
	
	ДеревоРезультат.ПолучитьЭлементы().Очистить();
	
	ПолучитьРезультатКомпоновкиДанных();
	
	СтрокиДерева = ДеревоРезультат.ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() = 0 Тогда
		
		Сообщить("В базе данных нет информации о комплектующих изделиях и ЗИП корабля!", БиблиотекаКартинок.ДлительнаяОперация48);
		Возврат;
		
	КонецЕсли;
	
	Состояние("Формирование выходной формы...", , , БиблиотекаКартинок.ДлительнаяОперация48);
	
	//ОбъектВорд = ОтчетОбъект.ПолучитьМакет("ТитульныйЛист").Получить();
	//ОбъектВорд.Application.Visible = 0;
	//
	//Ворд = ОбъектВорд.Application;
	//
	//ДокументВорд = Ворд.Documents(1);
	//ДокументВорд.Activate();
	//
	//ДокументВорд.Content.Find.Execute("<Корабль>", , , , , , , , , Строка(КорневаяСтрока.Корабль), 2);
	//ДокументВорд.Content.Find.Execute("<Проект>", , , , , , , , , КорневаяСтрока.Проект, 2);
	//
	////ЗаполнитьДокумент(КорневаяСтрока.Строки, Ворд,  , Новый Массив);
	//
	//ИмяФайла = "D:\Access databases\ZIP.doc";
	//
	//ДокументВорд.SaveAs(ИмяФайла);
	//ДокументВорд.Application.Quit();
	//
	//Ворд.Quit();
	//Ворд = Неопределено;
	//
	//Сообщить(ИмяФайла);
	
	Если ДеревоРезультат.ПолучитьЭлементы().Количество() = 0 Тогда
		
		Сообщить("Не обнаружено элементов ЗИП в структуре корабля!");
		Возврат;
		
	КонецЕсли;
		
	ВыполнитьФормированиеОтчетаСервер(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьФормированиеОтчетаСервер(Документ)
	
	//предварительные обработки
	ТекущаяСтраница = 1;
	Оглавление = Новый ТаблицаЗначений;
	Оглавление.Колонки.Добавить("УровеньВходимости", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	Оглавление.Колонки.Добавить("НомерСтраницы", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	Оглавление.Индексы.Добавить("УровеньВходимости");
	
	ОбластьОписаниеЗИП = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакетПоИмени("КаталогЗИП");
	
	КорневыеСтроки = ДеревоРезультат.ПолучитьЭлементы();
	КорневаяСтрока = КорневыеСтроки[0];
	
	ЭлементыОглавления = Новый Массив;
	
	ТипГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	
	//формирование документа
	
	ЗаполнитьДокумент(КорневыеСтроки, ОбластьОписаниеЗИП, , Новый Массив, Макет, , Истина);
	
	//титульный лист
	ОбластьТитульныйЛист = Макет.ПолучитьОбласть("ТитульныйЛист");
	ОбластьТитульныйЛист.Параметры.Корабль = КорневаяСтрока.Корабль;
	ОбластьТитульныйЛист.Параметры.Проект = КорневаяСтрока.Проект;
	Документ.Вывести(ОбластьТитульныйЛист);
	Документ.ВывестиГоризонтальныйРазделительСтраниц();
	
	//содержание
	ОбластьСодержаниеШапка = Макет.ПолучитьОбласть("СодержаниеШапка");
	Документ.Вывести(ОбластьСодержаниеШапка);
	
	ОбластьСодержаниеСтрока = Макет.ПолучитьОбласть("СодержаниеСтрока");
	
	Оглавление.Сортировать("НомерСтраницы, УровеньВходимости");
	
	Для каждого СтрокаОглавления Из Оглавление Цикл
		
		ОбластьСодержаниеСтрока.Параметры.УровеньВходимости = СтрокаОглавления.УровеньВходимости;
		ОбластьСодержаниеСтрока.Параметры.НомерСтраницы = СтрокаОглавления.НомерСтраницы;
		Документ.Вывести(ОбластьСодержаниеСтрока);
		
	КонецЦикла;
	
	Документ.ВывестиГоризонтальныйРазделительСтраниц();
	
	//описание ЗИП
	Документ.Вывести(ОбластьОписаниеЗИП);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокумент(СтрокиДерева, Документ, Уровень = "", ЦепочкаВходимости, Макет, Родитель = Неопределено, НачалоЗаполнения = Ложь)
	
	Сч = 1;
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		//создаем описание входимости
		НоваяЦепочкаВходимости = Новый Массив;
		
		Для каждого ЭлементЦепочки Из ЦепочкаВходимости Цикл
			
			НоваяЦепочкаВходимости.Добавить(ЭлементЦепочки);
			
		КонецЦикла; 
		
		Если Родитель = Неопределено Или Не Родитель = СтрокаДерева.ЭлементСтруктуры Тогда
			
			Если Не НачалоЗаполнения Тогда
				
				ТекущийУровень = ?(ЗначениеЗаполнено(Уровень), (Уровень + "."), "") + Формат(Сч, "ЧГ=0");
				
				ЭлементИерархии = ТекущийУровень + " " + Строка(СтрокаДерева.ЭлементСтруктуры);
				
				НоваяЦепочкаВходимости.Добавить(ЭлементИерархии);
				
			КонецЕсли;
					
		КонецЕсли;
		
		//при необходимости включаем элемент в оглавление
		Родитель = СтрокаДерева.ЭлементСтруктуры.Родитель;
		
		Если Не СтрокаДерева.ЗИП И (СтрокаДерева.Тип = ТипГруппа Или Не ЗначениеЗаполнено(Родитель) Или Родитель.Тип = ТипГруппа) Тогда
			
			ЭлементыОглавления.Добавить(ЭлементИерархии);
			
		КонецЕсли;
		
		//идем к следующему уровню или заполняем табличный документ
		
		Подстроки = СтрокаДерева.ПолучитьЭлементы();
		
		Если Подстроки.Количество() > 0 Тогда //есть вложенные уровни, переходим к ним
			
			ЗаполнитьДокумент(Подстроки, Документ, ТекущийУровень, НоваяЦепочкаВходимости, Макет, СтрокаДерева.ЭлементСтруктуры);
			
		Иначе //вложенных уровней нет - это ЗИП, добавляем его описание к табличному документу
			
			ДобавитьДанныеЗИПвДокумент(НоваяЦепочкаВходимости, СтрокаДерева, Документ, Макет);
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеЗИПвДокумент(ЦепочкаВходимости, СтрокаДанных, Документ, Макет)
	
	//входимость
	ОбластьВходимость = Макет.ПолучитьОбласть("Входимость");
	
	ОбластьВходимость.Параметры.УровеньВходимости = ТекущаяСтраница;
	Документ.Вывести(ОбластьВходимость);
	
	Для каждого УровеньВходимости Из ЦепочкаВходимости Цикл
		
		ОбластьВходимость.Параметры.УровеньВходимости = УровеньВходимости;
		Документ.Вывести(ОбластьВходимость);
		
		Если Не ЭлементыОглавления.Найти(УровеньВходимости) = Неопределено И Оглавление.Найти(УровеньВходимости, "УровеньВходимости") = Неопределено Тогда
			
			СтрокаОглавление = Оглавление.Добавить();
			СтрокаОглавление.УровеньВходимости = УровеньВходимости;
			СтрокаОглавление.НомерСтраницы = ТекущаяСтраница;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//картинка
	ОбластьКартинка = Макет.ПолучитьОбласть("Изображение");
	
	ИзображениеСсылка = СтрокаДанных.ИзображениеПредметаСнабжения;
	
	Если ЗначениеЗаполнено(ИзображениеСсылка) Тогда
		
		АдресКартинки = ПолучитьАдресКартинки(ИзображениеСсылка);
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресКартинки);
			
		ОбластьКартинка.Рисунки[0].Картинка = Новый Картинка(ДвоичныеДанные);
		
	КонецЕсли;
	
	Документ.Вывести(ОбластьКартинка);
	
	//таблица
	ОбластьТаблица = Макет.ПолучитьОбласть("Таблица");
	ОбластьТаблица.Параметры.Заполнить(СтрокаДанных);
	
	Документ.Вывести(ОбластьТаблица);
	
	//разделитель страниц
	Документ.ВывестиГоризонтальныйРазделительСтраниц();
	
	ТекущаяСтраница = ТекущаяСтраница + 1;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресКартинки(ИзображениеСсылка)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ИзображениеСсылка).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаСервере
Процедура ПолучитьРезультатКомпоновкиДанных()
	    
    Схема = ПолучитьМакетПоИмени("ОсновнаяСхемаКомпоновкиДанных");
    Настройки = Схема.НастройкиПоУмолчанию;
    
    КомпоновщикНастроекДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
    КомпоновщикНастроекДанных.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
    КомпоновщикНастроекДанных.ЗагрузитьПользовательскиеНастройки(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроекДанных.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	дзДеревоРезультат = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьОбъект(дзДеревоРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//стандартный метод ЗначениеВРеквизитФормы() может не отработать, т.к. состав колонок результата компоновки может меняться (хотя и не должен)
	Попытка
		
		ЗначениеВРеквизитФормы(дзДеревоРезультат, "ДеревоРезультат");
		
	Исключение
		
		СтрокиРезультата = ДеревоРезультат.ПолучитьЭлементы();
		
		ЗаполнитьДеревоРезультат(дзДеревоРезультат.Строки, СтрокиРезультата);
		
	КонецПопытки;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРезультат(СтрокиДерева, СтрокиРезультата)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СтрокаРезультата = СтрокиРезультата.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаДерева);
		
		ПодстрокиДерева = СтрокаДерева.Строки;
		
		Если ПодстрокиДерева.Количество() > 0 Тогда
			
			ПодстрокиРезультата = СтрокаРезультата.ПолучитьЭлементы();
			
			ЗаполнитьДеревоРезультат(ПодстрокиДерева, ПодстрокиРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетПоИмени(ИмяМакета)
	
	Возврат РеквизитФормыВЗначение("Отчет").ПолучитьМакет(ИмяМакета);
	
КонецФункции
