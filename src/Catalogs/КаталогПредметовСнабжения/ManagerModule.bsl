////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// <Описание Функции>
//
// Параметры:
//  <парОтбора>  - Тип Структура
//                 Если параметра не задан, то будут добавлены все символы, иначе только те, ключи которых есть в структуре.
//                 Ключи 
//                 - Пробел
//                 - Цифры
//                 - ЛатиницаЗаглавные
//                 - ЛатиницаПрописные
//                 - Кириллица
Функция МассивДопустимыхСимволовПростогоПоиска(парОтбора = Неопределено)
	
	Результат = Новый Массив;
	
	Если парОтбора = Неопределено Или парОтбора.Свойство("Пробел") Тогда
		ДобавитьСимволыВМассив(32, 	 32, 	Результат); // Пробел
	КонецЕсли;
	Если парОтбора = Неопределено Или парОтбора.Свойство("Цифры") Тогда	
		ДобавитьСимволыВМассив(48, 	 57, 	Результат); // Цифры
	КонецЕсли;
	Если парОтбора = Неопределено Или парОтбора.Свойство("ЛатиницаЗаглавные") Тогда
		ДобавитьСимволыВМассив(65, 	 90, 	Результат); // Латиница заглавные
	КонецЕсли;
	Если парОтбора = Неопределено Или парОтбора.Свойство("ЛатиницаПрописные") Тогда
		ДобавитьСимволыВМассив(97, 	 122,  	Результат); // Латиница прописные
	КонецЕсли;
	Если парОтбора = Неопределено Или парОтбора.Свойство("Кириллица") Тогда
		ДобавитьСимволыВМассив(1040, 1103, 	Результат); // Кирилица
		ДобавитьСимволыВМассив(1025, 1025, 	Результат); // Ё
		ДобавитьСимволыВМассив(1105, 1105, 	Результат); // ё
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	//МассивДопустимыхСимволовПростогоПоиска

Процедура ДобавитьСимволыВМассив(НижняяГраница, ВерхняяГраница, МассивПолучатель)
	
	Для Сч = НижняяГраница По ВерхняяГраница Цикл
		МассивПолучатель.Добавить(Сч);
	КонецЦикла; 
	
КонецПроцедуры

Функция ПодготовитьОбозначениеКПоиску(Знач Обозначение, стрДопустимыхСимволов = Неопределено)
	Обозначение = СтрЗаменить(Обозначение, "  ", " ");
	Обозначение = СокрЛП(Обозначение);
	Результат 	= "";
	
	ДопустимыеСимволы = МассивДопустимыхСимволовПростогоПоиска(стрДопустимыхСимволов);
	Для Сч = 1 По СтрДлина(Обозначение) Цикл
		Символ = Сред(Обозначение, Сч, 1);
		Если ДопустимыеСимволы.Найти(КодСимвола(Символ, 1)) = Неопределено Тогда
			Результат = Результат + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // ПодготовитьОбозначениеКПоиску

Функция ПолучитьМассив(ТаблицаЗначений, ИмяРеквизита)
	ВременнаяТаблица = ТаблицаЗначений.Скопировать();
	ВременнаяТаблица.Свернуть(ИмяРеквизита);
	Возврат ВременнаяТаблица.ВыгрузитьКолонку(ИмяРеквизита);
КонецФункции // ПолучитьМассив

////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция НайтиПоОбозначению(Обозначение) Экспорт 
	Результат 		= Неопределено;     	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	КаталогПредметовСнабжения.Ссылка КАК Ссылка
	             	  |ИЗ
	             	  |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	             	  |ГДЕ
	             	  |	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	             	  |	И (КаталогПредметовСнабжения.Обозначение ПОДОБНО &Обозначение
	             	  |			ИЛИ КаталогПредметовСнабжения.ОбозначениеТранслитированное ПОДОБНО &Обозначение)
	             	  |
	             	  |ОБЪЕДИНИТЬ ВСЕ
	             	  |
	             	  |ВЫБРАТЬ
	             	  |	КодыINCAT.ПредметСнабжения
	             	  |ИЗ
	             	  |	РегистрСведений.КодыINCAT КАК КодыINCAT
	             	  |ГДЕ
	             	  |	КодыINCAT.КодINCAT = &ОбозначениеТочное";
	Запрос.УстановитьПараметр("Обозначение", ПодготовитьОбозначениеКПоиску(Обозначение));
	Запрос.УстановитьПараметр("ОбозначениеТочное", Обозначение);
	Выборка 		= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат 	= Выборка.Ссылка;
	КонецЕсли; // Если Выборка.Следующий() Тогда	
	Возврат Результат;
КонецФункции // НайтиПредметСнабженияПоОбозначению

Функция ПолучитьСписокПодобных(Обозначение) Экспорт 
	Результат			= Новый СписокЗначений;
	ОбозначениеНеточное = "%" + ПодготовитьОбозначениеКПоиску(Обозначение) + "%";
	Запрос 				= Новый Запрос;
	Запрос.Текст 		= "ВЫБРАТЬ Первые 5
		             	  |	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
		             	  |	КаталогПредметовСнабжения.Обозначение КАК Обозначение
		             	  |ИЗ
		             	  |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		             	  |ГДЕ
		             	  |	НЕ КаталогПредметовСнабжения.ПометкаУдаления
		             	  |	И КаталогПредметовСнабжения.Обозначение ПОДОБНО &Обозначение
		             	  |
		             	  |ОБЪЕДИНИТЬ ВСЕ
		             	  |
		             	  |ВЫБРАТЬ Первые 5
		             	  |	КаталогПредметовСнабжения.Ссылка,
		             	  |	КаталогПредметовСнабжения.ОбозначениеТранслитированное
		             	  |ИЗ
		             	  |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		             	  |ГДЕ
		             	  |	НЕ КаталогПредметовСнабжения.ПометкаУдаления
		             	  |	И КаталогПредметовСнабжения.ОбозначениеТранслитированное ПОДОБНО &Обозначение
		             	  |
		             	  |ОБЪЕДИНИТЬ ВСЕ
		             	  |
		             	  |ВЫБРАТЬ Первые 5
		             	  |	КодыINCAT.ПредметСнабжения,
		             	  |	КодыINCAT.КодINCAT
		             	  |ИЗ
		             	  |	РегистрСведений.КодыINCAT КАК КодыINCAT
		             	  |ГДЕ
		             	  |	КодыINCAT.КодINCAT ПОДОБНО &Обозначение";
	Запрос.УстановитьПараметр("Обозначение", ОбозначениеНеточное);
	Выборка 		= Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка, "" + Выборка.Обозначение + " - " + Выборка.Ссылка);
	КонецЦикла; // Пока Выборка.Следующий() Цикл
	
	Возврат Результат;
КонецФункции // ПолучитьСписокПодобных

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если Не Параметры.Отбор.Свойство("Обозначение") Тогда
		Возврат;
	КонецЕсли; // Если Не Параметры.Отбор.Свойство("Обозначение") Тогда
	
	СтандартнаяОбработка 	= Ложь;
	ДанныеВыбора 			= ПолучитьСписокПодобных(Параметры.Отбор.Обозначение);
КонецПроцедуры // ОбработкаПолученияДанныхВыбора

Функция ПолучитьПоставщиков(ПредметСнабжения, УчастникВТС = Ложь) Экспорт
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ РАЗЛИЧНЫЕ
	             	  |	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент КАК Контрагент
	             	  |ИЗ
	             	  |	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	             	  |ГДЕ
	             	  |	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка = &ПредметСнабжения
	             	  |	И КаталогПредметовСнабженияИзготовителиИПоставщики.Поставщик
	             	  |	И НЕ КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент.ПометкаУдаления
	             	  |	И КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент.УчастникВТС = &УчастникВТС";
	Запрос.УстановитьПараметр("ПредметСнабжения", 	ПредметСнабжения);
	Запрос.УстановитьПараметр("УчастникВТС", 		УчастникВТС);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
КонецФункции // ПолучитьПоставщиков

Функция НайтиПСПростымЗапросом(Обозначение, ПоНаименованию = Ложь, МаксРезультатов = 10, стрДопСимволов = Неопределено) Экспорт
	
	Ответ 	= Новый СписокЗначений;
	Запрос 	= Новый Запрос;
	
	#Область ТекстЗапроса
	ТекстЗапроса = "ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Источник
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	|	И &парКаталогПредметовСнабженияИмя ПОДОБНО &Обозначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	|	И КаталогПредметовСнабжения.ОбозначениеТранслитированное ПОДОБНО &Обозначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыINCAT.ПредметСнабжения
	|ИЗ
	|	РегистрСведений.КодыINCAT КАК КодыINCAT
	|ГДЕ
	|	КодыINCAT.КодINCAT ПОДОБНО &Обозначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ &МаксРезультатов
	|	ВТ_Источник.Ссылка КАК Ссылка,
	|	ВТ_Источник.Ссылка.Обозначение КАК Обозначение
	|ИЗ
	|	ВТ_Источник КАК ВТ_Источник";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&парКаталогПредметовСнабженияИмя", 
								?(ПоНаименованию, "КаталогПредметовСнабжения.Наименование", "КаталогПредметовСнабжения.Обозначение"));
								
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксРезультатов", МаксРезультатов);
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	
	
	Если ПоНаименованию Тогда 
		Запрос.УстановитьПараметр("Обозначение", Обозначение);
	Иначе
		Запрос.УстановитьПараметр("Обозначение", "%" + ПодготовитьОбозначениеКПоиску(Обозначение, стрДопСимволов) + "%");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Ответ.Добавить(Выборка.Ссылка, "" + Выборка.Обозначение + " - " + Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции // НайтиПСПростымЗапросом()

Процедура СвенутьТаблицуПоставщиков(ПредметСнабжения) Экспорт
	ПредметСнабженияОбъект 	= ПредметСнабжения.ПолучитьОбъект();
	ИзготовителиИПоставщики = ПредметСнабженияОбъект.ИзготовителиИПоставщики.Выгрузить();
	ПредметСнабженияОбъект.ИзготовителиИПоставщики.Очистить();
	Для Каждого Контрагент Из ПолучитьМассив(ИзготовителиИПоставщики, "Контрагент") Цикл
		НоваяСтрока 			= ПредметСнабженияОбъект.ИзготовителиИПоставщики.Добавить();
		НоваяСтрока.Контрагент 	= Контрагент;
		Для Каждого НайденнаяСтрока Из ИзготовителиИПоставщики.Скопировать(Новый Структура("Контрагент", Контрагент)) Цикл
			// Поставщик
			Если НайденнаяСтрока.Поставщик Тогда
				НоваяСтрока.Поставщик = Истина;
			КонецЕсли; // Если НайденнаяСтрока.Поставщик Тогда
			
			// Разработчик
			Если НайденнаяСтрока.Разработчик Тогда
				НоваяСтрока.Разработчик = Истина;
			КонецЕсли; // Если НайденнаяСтрока.Разработчик Тогда
			
			// Изготовитель
			Если НайденнаяСтрока.Изготовитель Тогда
				НоваяСтрока.Изготовитель = Истина;
			КонецЕсли; // Если НайденнаяСтрока.Изготовитель Тогда
			
			// СрокиИзготовления
			Если НайденнаяСтрока.СрокиИзготовления > НоваяСтрока.СрокиИзготовления Тогда
				НоваяСтрока.СрокиИзготовления = НайденнаяСтрока.СрокиИзготовления;
			КонецЕсли; // Если НайденнаяСтрока.СрокиИзготовления > НоваяСтрока.СрокиИзготовления Тогда
			
			// ЕдиницаИзмерения
			Если ЗначениеЗаполнено(НайденнаяСтрока.ЕдиницаИзмерения)Тогда
				НоваяСтрока.ЕдиницаИзмерения = НайденнаяСтрока.ЕдиницаИзмерения;
			КонецЕсли; // Если ЗначениеЗаполнено(НайденнаяСтрока.ЕдиницаИзмерения)Тогда
			
			// СостояниеПроизводства
			Если ЗначениеЗаполнено(НайденнаяСтрока.СостояниеПроизводства)Тогда
				НоваяСтрока.СостояниеПроизводства = НайденнаяСтрока.СостояниеПроизводства;
			КонецЕсли; // Если ЗначениеЗаполнено(НайденнаяСтрока.СостояниеПроизводства)Тогда
			
			// КлючСвязи
			Если ЗначениеЗаполнено(НайденнаяСтрока.КлючСвязи)Тогда
				НоваяСтрока.КлючСвязи = НайденнаяСтрока.КлючСвязи;
			КонецЕсли; // Если ЗначениеЗаполнено(НайденнаяСтрока.КлючСвязи)Тогда
			
		КонецЦикла; // Для Каждого НайденнаяСтрока Из ИзготовителиИПоставщики.Скопировать(Новый Структура("Контрагент", Контрагент)) Цикл		
	КонецЦикла; // Для Каждого Контрагент Из ПолучитьМассив(ИзготовителиИПоставщики) Цикл
	
	Попытка
		ПредметСнабженияОбъект.ОбменДанными.Загрузка = Истина;
		ПредметСнабженияОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось свернуть таблицу поставщиков: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры // СвенутьТаблицуПоставщиков

Функция НайтиПоНомеруОСК(НомерОСК)Экспорт
	
	Запрос 		  = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ
					|	КаталогПредметовСнабжения.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
					|ГДЕ
					|	НЕ КаталогПредметовСнабжения.ПометкаУдаления
					|	И КаталогПредметовСнабжения.НомерОСК = &НомерОСК";
	Запрос.УстановитьПараметр("НомерОСК", НомерОСК);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаРезультат.ВыгрузитьКолонку("Ссылка");

КонецФункции // НайтиПоНомеруОСК

Функция ДобавитьПоставщиков(ПредметСнабжения, Поставщики) Экспорт
	
	Результат 		= Истина;
	Записывать 		= Ложь;
	
	ПредметОбъект 	= ПредметСнабжения.ПолучитьОбъект();
	
	Для Каждого ОписаниеЭлемента Из ПредметОбъект.ИзготовителиИПоставщики Цикл
		ЭлементПоставщик = Поставщики.Найти(ОписаниеЭлемента.Контрагент); 
		Если Не ЭлементПоставщик = Неопределено Тогда
			Если Не ОписаниеЭлемента.Поставщик Тогда 
				ОписаниеЭлемента.Поставщик 	= Истина;
				Записывать 					= Истина;
			КонецЕсли; /// Если Не ОписаниеЭлемента.Поставщик Тогда 
			Поставщики.Удалить(ЭлементПоставщик);
		КонецЕсли; // Если Не ЭлементПоставщик = Неопределено И Не ОписаниеЭлемента.Поставщик Тогда
	КонецЦикла; // Для Каждого ОписаниеЭлемента Из ПредметОбъект.ИзготовителиИПоставщики Цикл
	
	Для Каждого ЭлементПоставщик Из Поставщики Цикл
		НовыйПоставщик = ПредметОбъект.ИзготовителиИПоставщики.Добавить();
		НовыйПоставщик.Контрагент 	= ЭлементПоставщик;
		НовыйПоставщик.Поставщик	= Истина;
		Записывать = Истина;
	КонецЦикла; // Для Каждого ЭлементПоставщик Из Поставщики Цикл
	
	Если Записывать Тогда
		
		Попытка
			ПредметОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Результат = Ложь;	
		КонецПопытки;
		
	КонецЕсли; // Если Записывать Тогда
	
	Возврат	Результат;
	
КонецФункции // ДобавитьПоставщиков
