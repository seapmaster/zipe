
&НаКлиенте
Процедура ОбработчикУдаленияДубликатов(УдалениеПроизведено, ДопПараметры) Экспорт

	Если УдалениеПроизведено = Истина Тогда
	
		Элементы.Список.Обновить();	
		
		Для каждого ЭлементКаталогаПредметаСнабжения Из ДопПараметры.ВыделенныеСтроки Цикл
		
			Если Не ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ЭлементКаталогаПредметаСнабжения, "ПометкаУдаления") Тогда
			
				Элементы.Список.ТекущаяСтрока = ЭлементКаталогаПредметаСнабжения;
				Прервать;
			
			КонецЕсли;	
		
		КонецЦикла;
	
	КонецЕсли;	

КонецПроцедуры // ОбработчикУдаленияДубликатов()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//++ 16.02.2018 Веденеев П.
	Если Параметры.Свойство("РежимВыбора") Тогда
		
        Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущаяСтрока") Тогда
		
		Элементы.Список.ТекущаяСтрока = Параметры.ТекущаяСтрока;
		
	КонецЕсли;
	//-- 16.02.2018 Веденеев П.
	
	//++ 06.04.2018 Полнотекстовый поиск
	РазмерПорции = 100;
	#Если НЕ ВнешнееСоединение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПоПолнотекстовомуПоискуУстановлен",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПоПолнотекстовомуПоиску",Неопределено);
	#КонецЕсли
	//-- 06.04.2018 Полнотекстовый поиск

	// Базунов 26.06.2018 На уровне прав на форме не удалось настроить видимость
	Если НЕ РольДоступна("ПолныеПрава") И РольДоступна("ПредставительДЗОИсполнителяЗаявки") Тогда
	
		Элементы.ЕстьВнешниеЦены.Видимость 	= Ложь;
	
	КонецЕсли;
	
	// ++ 11.07.2018 9:58:34 Базунов Д.А. Задача: 
	
	Элементы.ФормаОбработатьВыбранные.Видимость = ПравоДоступа("Использование", Метаданные.Обработки.ГрупповоеИзменениеРеквизитов);
	Элементы.ФормаПрименитьФильтр.Видимость 	= ПравоДоступа("Чтение", Метаданные.Справочники.АлгоритмыФильтрации);
	
	Элементы.ФормаОтправитьПоиск.Видимость 		   = ПравоДоступа("ИнтерактивныйСтарт", Метаданные.БизнесПроцессы.ОтправкаВКСУНСИНаПоискПоКоду);
	Элементы.ФормаОтправитьКлассификация.Видимость = ПравоДоступа("ИнтерактивныйСтарт", Метаданные.БизнесПроцессы.ОтправкаВКСУНСИНаКлассификацию);
	Элементы.ФормаОтправитьВРОЭ.Видимость 		   = ПравоДоступа("ИнтерактивныйСтарт", Метаданные.БизнесПроцессы.ВзаимодействиеСРОЭ);
	
	// -- 11.07.2018 9:58:34 Базунов Д.А. Задача:
	ПоляДляОграничений = Новый Массив;
	ПоляДляОграничений.Добавить("ПредставлениеДляПоиска");
	Список.УстановитьОграниченияИспользованияВГруппировке(ПоляДляОграничений);
	Список.УстановитьОграниченияИспользованияВПорядке(ПоляДляОграничений); 
КонецПроцедуры

// + Отборы

&НаКлиенте
Процедура УстановитьОтборПоЗаказамПриИзменении(Элемент)
	
	Если УстановитьОтборПоЗаказам Тогда
	
		Элементы.ГруппаЗначенияОтбораПоЗаказам.Видимость = Истина;	
	
	Иначе
	
		Элементы.ГруппаЗначенияОтбораПоЗаказам.Видимость = Ложь;
		Проекты.Очистить();
		Заказы.Очистить();
		
		УстановитьОтборКаталогаПредметовСнабжения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПриИзменении(Элемент)
	
	Заказы.Очистить();	
	
	Массив = Новый Массив();
	Массив.Добавить(Новый ПараметрВыбора("Проекты", Проекты));
	Элементы.Заказы.ПараметрыВыбора	= Новый ФиксированныйМассив(Массив);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПредметыСнабженияЗаказа(Заказ)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Возврат Не Запрос.Выполнить().Пустой();	

КонецФункции // ЕстьПредметыСнабженияЗаказа()

&НаСервереБезКонтекста
Функция ЕстьПредметыСнабженияПроекта(Проект)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Заказы КАК Заказы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроектыКораблей КАК ПроектыКораблей
	|			ПО Заказы.Владелец = ПроектыКораблей.Ссылка
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = Заказы.Ссылка
	|ГДЕ
	|	ПроектыКораблей.Ссылка = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Не Запрос.Выполнить().Пустой();	

КонецФункции // ЕстьПредметыСнабженияЗаказа()

&НаСервере
Процедура УстановитьОтборКаталогаПредметовСнабжения()
	
	ВыбранФлот = НЕ Флот.Пустая();

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СправочникКаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	СправочникКаталогПредметовСнабжения.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникКаталогПредметовСнабжения.Код КАК Код,
	|	СправочникКаталогПредметовСнабжения.Наименование КАК НаименованиеПредметаСнабжения,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(150)) КАК ПереводПредметаСнабжения,
	|	СправочникКаталогПредметовСнабжения.НомерОСК КАК НомерОСК,
	|	СправочникКаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	СправочникКаталогПредметовСнабжения.ОбозначениеТранслитированное КАК ОбозначениеТранслитированное,
	|	СправочникКаталогПредметовСнабжения.УтвержденноеНаименование КАК УтвержденноеНаименование,
	|	СправочникКаталогПредметовСнабжения.СамостоятельнаяПоставка КАК СамостоятельнаяПоставка,
	|	СправочникКаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	СправочникКаталогПредметовСнабжения.ТипДокумента КАК ТипДокумента,
	|	ВЫРАЗИТЬ(СправочникКаталогПредметовСнабжения.Комментарий КАК СТРОКА(300)) КАК Комментарий,
	|	СправочникКаталогПредметовСнабжения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникКаталогПредметовСнабжения.ФНН КАК ФНН,
	|	СправочникКаталогПредметовСнабжения.NSN КАК NSN,
	|	ЕСТЬNULL(КодыINCATПредставление.Представление, """") КАК INCAT,
	|	СправочникКаталогПредметовСнабжения.ЕКПС КАК ЕКПС,
	|	СправочникКаталогПредметовСнабжения.НоменклатурныйНомерВМФ КАК НоменклатурныйНомерВМФ,
	|	СправочникКаталогПредметовСнабжения.ОКПД2 КАК ОКПД2,
	|	СправочникКаталогПредметовСнабжения.ТНВЭД КАК ТНВЭД,
	|	СправочникКаталогПредметовСнабжения.ВерсияПрошивки КАК ВерсияПрошивки,
	|	СправочникКаталогПредметовСнабжения.ДатаПрошивки КАК ДатаПрошивки,
	|	СправочникКаталогПредметовСнабжения.Статус КАК Статус,
	|	СправочникКаталогПредметовСнабжения.ГодСнятияСПроизводства КАК ГодСнятияСПроизводства,
	|	СправочникКаталогПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	СправочникКаталогПредметовСнабжения.Предопределенный КАК Предопределенный,
	|	СправочникКаталогПредметовСнабжения.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ПОДСТРОКА(СправочникКаталогПредметовСнабжения.Наименование, 1, 1) КАК ГруппировкаПоАлфавиту,
	|	СправочникКаталогПредметовСнабжения.ЕКПС.Родитель КАК ЕКПСРодитель,
	|	"""" КАК ГруппировочноеПолеФильтра,
	|	ВЫБОР
	|		КОГДА СправочникКаталогПредметовСнабжения.Ссылка В
	|				(ВЫБРАТЬ
	|					СпецификацииПредметовСнабженияИзменения.ПредметСнабжения
	|				ИЗ
	|					РегистрСведений.СпецификацииПредметовСнабженияИзменения КАК СпецификацииПредметовСнабженияИзменения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбновляютсяСтруктурыЗаказов,
	|	СправочникКаталогПредметовСнабжения.Шифр КАК Шифр,
	|	СправочникКаталогПредметовСнабжения.ШифрТранслитированный КАК ШифрТранслитированный
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК СправочникКаталогПредметовСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыINCATПредставление КАК КодыINCATПредставление
	|		ПО СправочникКаталогПредметовСнабжения.Ссылка = КодыINCATПредставление.ПредметСнабжения";	
	
	ТекстСоединений = "";
	Если ВыбранФлот Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫРАЗИТЬ("""" КАК СТРОКА(150)) КАК ПереводПредметаСнабжения", "ДополнительныеНаименования.Перевод КАК ПереводПредметаСнабжения");
		ТекстСоединений = ТекстСоединений + Символы.ПС + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
		|		ПО СправочникКаталогПредметовСнабжения.Ссылка = ДополнительныеНаименования.Владелец
		|			И (ДополнительныеНаименования.ИмяРеквизита = ""Наименование"")
		|			И (ДополнительныеНаименования.Язык = &Язык)" + Символы.ПС;
		Элементы.Список.ПодчиненныеЭлементы.Перевод.Видимость = Истина;
	Иначе
		Элементы.Список.ПодчиненныеЭлементы.Перевод.Видимость = Ложь;
	КонецЕсли; 
	
	КолвоЗаказов  = Заказы.Количество();
	КолвоПроектов = Проекты.Количество();
	
	
	//Агеев 2020-03-25 > 
	//изменения алгоритма Поиск дублей по обозначению
	Если Заказы.Количество() > 0 И ВыбранныйАлгоритм.Наименование = "Дубли по обозначению" И УстановитьОтборПоЗаказам Тогда
		ПодбордублейПоВсемЗаказам = Истина;	
	Иначе
		ПодбордублейПоВсемЗаказам = Ложь;	  
	КонецЕсли;			
	//Агеев 2020-03-25 <
	
	ТекстУсловияЗапроса = "
		|ГДЕ 
		|	ВЫБОР
		|		КОГДА НЕ &ОтборПоПолнотекстовомуПоискуУстановлен
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ СправочникКаталогПредметовСнабжения.Ссылка В (&ОтборПоПолнотекстовомуПоиску)
		|	КОНЕЦ
		|";
	
	//Агеев 2020-03-25 > 
	//Если КолвоПроектов ИЛИ КолвоЗаказов Тогда
	Если (КолвоПроектов ИЛИ КолвоЗаказов) И Не ПодбордублейПоВсемЗаказам Тогда
		Массив = Новый Массив;
		
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + Символы.ПС + ?(ТекстУсловияЗапроса="","ГДЕ","И") + "
		|	СправочникКаталогПредметовСнабжения.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения
		|			ИЗ
		|				Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|			ГДЕ ИСТИНА
		|				" + ?(КолвоПроектов > 0, "И Владелец.Владелец В (&Проекты)","") + " 
		|				" + ?(КолвоЗаказов > 0,  "И Владелец В (&Заказы)","") + ")";
		
	КонецЕсли;
	
	//Агеев 2020-03-25 > 
	//Если ВыбранФлот Тогда
	Если ВыбранФлот И Не ПодбордублейПоВсемЗаказам Тогда
		
		Массив = Новый Массив;
		
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + Символы.ПС + ?(ТекстУсловияЗапроса="","ГДЕ","И") + "
		|	СправочникКаталогПредметовСнабжения.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения
		|			ИЗ
		|				Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|			ГДЕ Владелец.Заказчик = &Флот)";
		
	КонецЕсли;
	
	Если ЕстьВнешниеЦены И ЕстьВнутренниеЦены Тогда
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + Символы.ПС + ?(ТекстУсловияЗапроса="","ГДЕ","И") + "
		|СправочникКаталогПредметовСнабжения.Ссылка В
		|(ВЫБРАТЬ
		|	ЦеныПредметовСнабженияСрезПоследнихВнутренние.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних(, ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внутренняя)) КАК ЦеныПредметовСнабженияСрезПоследнихВнутренние
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних(, ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внешняя)) КАК ЦеныПредметовСнабженияСрезПоследнихВнешние
		|		ПО (ЦеныПредметовСнабженияСрезПоследнихВнутренние.ПредметСнабжения = ЦеныПредметовСнабженияСрезПоследнихВнешние.ПредметСнабжения))";		
	ИначеЕсли ЕстьВнутренниеЦены Тогда
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + Символы.ПС + ?(ТекстУсловияЗапроса="","ГДЕ","И") + "
		|СправочникКаталогПредметовСнабжения.Ссылка В
		|(ВЫБРАТЬ
		|	ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних(, ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внутренняя)) КАК ЦеныПредметовСнабженияСрезПоследних)";
	ИначеЕсли ЕстьВнешниеЦены Тогда
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + Символы.ПС + ?(ТекстУсловияЗапроса="","ГДЕ","И") + "
		|СправочникКаталогПредметовСнабжения.Ссылка В
		|(ВЫБРАТЬ
		|	ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних(, ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внешняя)) КАК ЦеныПредметовСнабженияСрезПоследних)";
	КонецЕсли; 
	
	Список.ДинамическоеСчитываниеДанных = Истина;
	ТекстЗапросаВиртуальныхТаблиц = "";
	ЕстьАлгоритм = ЗначениеЗаполнено(ВыбранныйАлгоритм);
	Если ЕстьАлгоритм Тогда
		Если ЗначениеЗаполнено(ВыбранныйАлгоритм.ТекстЗапросаВиртуальныхТаблиц) Тогда
			Список.ДинамическоеСчитываниеДанных = ВыбранныйАлгоритм.ДинамическоеСчитываниеДанныхВДинамическомСписке;
			ТекстЗапросаВиртуальныхТаблиц = ВыбранныйАлгоритм.ТекстЗапросаВиртуальныхТаблиц + "
			|;
			|";
		КонецЕсли; 
		
		ТекстЗапросаГруппировочногоПоля = УдалитьКомментарии(ВыбранныйАлгоритм.ТекстЗапросаГруппировочногоПоля);
		
		Если ЗначениеЗаполнено(ТекстЗапросаГруппировочногоПоля) Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,""""" КАК ГруппировочноеПолеФильтра",ТекстЗапросаГруппировочногоПоля + " КАК ГруппировочноеПолеФильтра");
			
		КонецЕсли; 
		
		//Агеев 2020-03-25 > 
		//изменения алгоритма Поиск дублей по обозначению
		УсловиеПоОбозначениям = "
		|И КаталогПредметовСнабжения.Обозначение В
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.Обозначение
		|	ИЗ
		|		Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|	ГДЕ
		|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец В (&Заказы))";
		
		Если Не ПодбордублейПоВсемЗаказам Тогда
			ТекстУсловияЗапроса = ТекстУсловияЗапроса + Символы.ПС + ?(ТекстУсловияЗапроса="","ГДЕ","И") + "
			|СправочникКаталогПредметовСнабжения.Ссылка В (" + ВыбранныйАлгоритм.ТекстЗапросаФильтра + ")";

		Иначе
			ТекстУсловияЗапроса = ТекстУсловияЗапроса + Символы.ПС + ?(ТекстУсловияЗапроса="","ГДЕ","И") + "
			|СправочникКаталогПредметовСнабжения.Ссылка В (" + ВыбранныйАлгоритм.ТекстЗапросаФильтра 
			+ УсловиеПоОбозначениям + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	Список.ТекстЗапроса = ТекстЗапросаВиртуальныхТаблиц + ТекстЗапроса + ТекстСоединений + ТекстУсловияЗапроса;
	
	Если КолвоПроектов > 0 И Не ПодбордублейПоВсемЗаказам Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Проекты", Проекты.ВыгрузитьЗначения());
	КонецЕсли; 
	Если КолвоЗаказов > 0 Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Заказы", Заказы.ВыгрузитьЗначения());
	КонецЕсли; 
	Если ВыбранФлот Тогда
		Если Не ПодбордублейПоВсемЗаказам Тогда
			Список.Параметры.УстановитьЗначениеПараметра("Флот", Флот);
		КонецЕсли;
		Список.Параметры.УстановитьЗначениеПараметра("Язык", Флот.ЯзыкПредставленияДанных);
	КонецЕсли; 
	
	Если ЕстьАлгоритм Тогда
		
		Для каждого Пар Из ВыбранныйАлгоритм.ПараметрыЗапроса Цикл
			Список.Параметры.УстановитьЗначениеПараметра(Пар.ИмяПараметра, ?(Пар.ЗначениеПараметра=Неопределено,Пар.Хранилище.Получить().ВыгрузитьЗначения(),Пар.ЗначениеПараметра));
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(ТекстЗапросаГруппировочногоПоля) Тогда
			
			ГруппировкаСуществует = Ложь;
			Для каждого ЭлементНастроек Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
				Если ЭлементНастроек.Имя = "ГруппировочноеПолеФильтра" Тогда
					ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
					ГруппировкаСуществует = Истина;
				Иначе
					ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НЕ ГруппировкаСуществует Тогда
				НовГруппировка = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				НовГруппировка.Имя = "ГруппировочноеПолеФильтра";
				
				ПолеПоле = НовГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
				ПолеПоле.Поле               = Новый ПолеКомпоновкиДанных("ГруппировочноеПолеФильтра");
				ПолеПоле.ТипГруппировки     = ТипГруппировкиКомпоновкиДанных.Элементы;
				ПолеПоле.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
			КонецЕсли; 
				
		КонецЕсли; 
		
	Иначе
		
		Для каждого ЭлементНастроек Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
			Если ЭлементНастроек.Имя = "ГруппировочноеПолеФильтра" Тогда
				ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Фильтр по типам цен
&НаКлиенте
Процедура ЕстьВнутренниеЦеныПриИзменении(Элемент)
	
	УстановитьОтборКаталогаПредметовСнабжения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьВнешниеЦеныПриИзменении(Элемент)
	
	УстановитьОтборКаталогаПредметовСнабжения();
	
КонецПроцедуры

// - Отборы

//++ 16.11.2017 Веденеев П. //вызов группового изменения реквизитов для выделенных элементов

&НаКлиенте
Процедура ОбработатьВыбранныеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиКомпоновки(ВыделенныеСтроки)
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения");
	СписокОтбора.ЗагрузитьЗначения(ВыделенныеСтроки);
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокОтбора;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции
//-- 16.11.2017 Веденеев П. //вызов группового изменения реквизитов для выделенных элементов

//+ 23.11.2017 14:35:33 Базунов Д.А. Задача: 
&НаСервере
Процедура ПрименитьФильтрНаСервере()
	
	УстановитьОтборКаталогаПредметовСнабжения();
	
	ТекущийФильтр = ВыбранныйАлгоритм.Наименование;
	Элементы.ВыбранныйФильтр.Видимость = Истина;
	
	ТекстЗапросаГруппировочногоПоля = УдалитьКомментарии(ВыбранныйАлгоритм.ТекстЗапросаГруппировочногоПоля);
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапросаГруппировочногоПоля) Тогда
		Элементы.ГруппаГруппировка.Видимость = Ложь;
	Иначе
		ТекущаяГруппировка = ТекстЗапросаГруппировочногоПоля;
		Элементы.ГруппаГруппировка.Видимость = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ВыбранныйАлгоритм = РезультатЗакрытия;
	
	ПрименитьФильтрНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьФильтрНажатие(Элемент)
	
	ВыбранныйАлгоритм = Неопределено;
	
	УстановитьОтборКаталогаПредметовСнабжения();
	
	Элементы.ВыбранныйФильтр.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьГруппировкуНажатие(Элемент)
	
	Элементы.ГруппаГруппировка.Видимость = Ложь;
	
	Для каждого ЭлементНастроек Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
		Если ЭлементНастроек.Имя = "ГруппировочноеПолеФильтра" Тогда
			ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьКомментарии(Знач Текст)
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(СокрЛП(Текст));
	Сч = 1;
	Пока Сч <= ТД.КоличествоСтрок() Цикл
		ТекСтрока = СокрЛП(ТД.ПолучитьСтроку(Сч));
		Если ТекСтрока = "" ИЛИ Лев(ТекСтрока,2) = "//" Тогда
			ТД.УдалитьСтроку(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ТД.ПолучитьТекст();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеНаСервере(ТипБП="", НовыйБП)
	
	Если ТипБП = "Поиск" Тогда
		Наименование = "Отправка в КСУ НСИ на поиск по коду";
	ИначеЕсли ТипБП = "Классификация" Тогда
		Наименование = "Отправка в КСУ НСИ на классификацию";
	Иначе
		Возврат;
	КонецЕсли; 
	
	СписокПС = Элементы.Список.ВыделенныеСтроки;
	
	НовыйБП.Исполнитель = ПараметрыСеанса.ТекущийПользователь;
	НовыйБП.Наименование = Наименование;
	НовыйБП.СрокИсполнения = ТекущаяДата() + 10*24*3600;
	
	Для каждого Стр Из СписокПС Цикл
		НовСтр = НовыйБП.ПредметыСнабжения.Добавить();
		НовСтр.ПредметСнабжения = Стр;
		Если ТипБП = "Поиск" Тогда
			НовСтр.ОпорныйКод 	= Стр[Строка(НовыйБП.ВариантыПоискаПоКоду)];
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьВРОЭНаСервере(ДокОбъект, ВыделенныеСтроки)
	
	ВзаимодействиеСРОЭ.ЗаполнитьДанныеНаСервере(ДокОбъект, ВыделенныеСтроки);
	ДокОбъект.ВариантЗаполнения = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоФлотуПриИзменении(Элемент)
	
	Если УстановитьОтборПоФлоту Тогда
		Элементы.ГруппаОтборПоФлоту.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтборПоФлоту.Видимость = Ложь;
		Флот = Неопределено;
		
		УстановитьОтборКаталогаПредметовСнабжения();
		
	КонецЕсли; 
	
КонецПроцедуры

//- 23.11.2017 14:35:33 Базунов Д.А. Задача: 


//++ 06.04.2018 Полнотекстовый поиск

&НаСервере
Функция ПолнотекстовыйПоискПС(СписокПредметовСнабжения)
	
	//настроить параметры поиска
	мОбластьПоиска = Новый Массив;
	//СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(?(Найти(СтрокаПП,"#"),СтрокаПП,"#"+СтрокаПП), РазмерПорции);
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПП, РазмерПорции);
	СписокПоиска.ПорогНечеткости  = ПорогНечеткости;
	мОбластьПоиска.Добавить(Метаданные.Справочники.КаталогПредметовСнабжения);
	мОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ДополнительныеНаименования);
	мОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ПоисковыйИндекс);
	СписокПоиска.ОбластьПоиска = мОбластьПоиска;
		
	Попытка
		
		СписокПоиска.ПерваяЧасть();
		
	Исключение
		Возврат НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
	КонецПопытки;
	
	Если СписокПоиска.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено.'");
	КонецЕсли;
	
	//Если СписокПоиска.СлишкомМногоРезультатов() Тогда
	//	Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
	//КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	//сформировать список найденных элементов
	СписокПредметовСнабжения.Очистить();
	НачальнаяПозиция = 0;
	ЕстьСледующаяПорция = Истина;

	//обработать по порциям результаты ППД
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По Мин(СписокПоиска.ПолноеКоличество()-НачальнаяПозиция,РазмерПорции)-1 Цикл
			
			//сформировать элемент результата
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			Основание = Элемент.Метаданные.Имя + " """
			            + Элемент.Представление + """ - " + Элемент.Описание;
			Если Элемент.Метаданные = Метаданные.Справочники.КаталогПредметовСнабжения Тогда
				ТекЭлементПС = Элемент.Значение;
				Основание = НСтр("ru = 'Найдено в реквизите каталога предметов снабжения'") + " - " + Элемент.Описание;
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ДополнительныеНаименования Тогда
				ТекЭлементПС = Элемент.Значение.Владелец;
				ШаблонОснования =  НСтр("ru = 'Найдено в переводе ""%1"" - %2'");
				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание); 
			ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ПоисковыйИндекс Тогда
				ТекЭлементПС = Элемент.Значение.Объект;
				ШаблонОснования =  НСтр("ru = 'Найдено в поисковом индексе ""%1"" - %2'");
				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
			Иначе
				Продолжить;
			КонецЕсли;
			
			//добавить элемент, если его еще нет в списке найденных
			НайденнаяСтрока = СписокПредметовСнабжения.Найти(ТекЭлементПС,"Ссылка");
			Если НайденнаяСтрока = Неопределено Тогда
				//ограничить количество возвращаемых значений
				//Если СписокПредметовСнабжения.Количество() > 100 Тогда
				//	Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'"); 
				//Иначе 
					Запись = СписокПредметовСнабжения.Добавить();
					Запись.Основание = Основание;
					Запись.Ссылка = ТекЭлементПС;
					
					мТип = Новый Массив;
					мТип.Добавить(ТипЗнч(ТекЭлементПС));
					Запись.ТипСсылки = Новый ОписаниеТипов(мТип);
					
				//КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	//	НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
	//	ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
	//	Если ЕстьСледующаяПорция Тогда
	//		СписокПоиска.СледующаяЧасть();
	//	КонецЕсли;
		ЕстьСледующаяПорция = Ложь;
		
	КонецЦикла;
	
	Если СписокПредметовСнабжения.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено.'");
	КонецЕсли;

	ПоследнееЧисло = Прав(СписокПредметовСнабжения.Количество(),1);
	Возврат НСтр("ru = 'Найдено " + Формат(СписокПредметовСнабжения.Количество(),"ЧГ=0") + ?(ПоследнееЧисло="1"," элемент",?(Найти("234",ПоследнееЧисло)," элемента"," элементов")) + ".'");
	
КонецФункции

&НаСервере
Функция СтрокаПоискаПриИзмененииНаСервере()
	
	Если СтрДлина(СокрЛП(СтрокаПП)) < 3 Тогда
	
		Элементы.СтрокаПП.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
		Возврат "Слишком короткий запрос!";
	
	КонецЕсли; 
	
	СписокПредметовСнабжения =  РеквизитФормыВЗначение("Основания");
	
	//получить результаты поиска
	ТекстОшибки = ПолнотекстовыйПоискПС(СписокПредметовСнабжения);
	
	Если Лев(ТекстОшибки,7) = "Найдено" Тогда
		
		//вернуть таблицу оснований
		ЗначениеВРеквизитФормы(СписокПредметовСнабжения, "Основания");
		
		Если НЕ РасширенныйПоиск Тогда
			РежимОтображенияДоПримененияПолнотекстовогоПоиска = Строка(Элементы.Список.Отображение);
		КонецЕсли;
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		//установить отбор по списку найденных элементов
#Если НЕ ВнешнееСоединение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПоПолнотекстовомуПоискуУстановлен",Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПоПолнотекстовомуПоиску",СписокПредметовСнабжения.ВыгрузитьКолонку("Ссылка"));
#КонецЕсли
		Элементы.СтрокаПП.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
#Если НЕ ВнешнееСоединение Тогда
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПоПолнотекстовомуПоискуУстановлен",Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПоПолнотекстовомуПоиску",Неопределено);
#КонецЕсли
	
	Элементы.СтрокаПП.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	
	Возврат ТекстОшибки;
	   	
КонецФункции

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Состояние("Выполняется поиск...");
	
	Если СтрокаПП <> "" Тогда
		
		ТекстОшибки = СтрокаПоискаПриИзмененииНаСервере();
		Если Лев(ТекстОшибки,7) = "Найдено" Тогда
			ПоказатьОповещениеПользователя(ТекстОшибки);
			РасширенныйПоиск = Истина;
			Основание = Основания.НайтиСтроки(Новый Структура("Ссылка", Элементы.Список.ТекущаяСтрока));
			Если Основание.Количество() = 0 Тогда
				ОснованиеВыбора = "";
			Иначе
				ОснованиеВыбора = Основание[0].Основание;
			КонецЕсли;
		Иначе
			Если НЕ ТекстОшибки = НСтр("ru = 'Ничего не найдено'") Тогда
				ПоказатьОповещениеПользователя(ТекстОшибки);
			Иначе
				Если РасширенныйПоиск И Строка(Элементы.Список.Отображение) <> РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
					Если РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Иерархический список'") Тогда
						Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
					ИначеЕсли РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Дерево'") Тогда
						Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
					КонецЕсли;
				КонецЕсли;
				РасширенныйПоиск = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если РасширенныйПоиск И Строка(Элементы.Список.Отображение) <> РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
			Если РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Иерархический список'") Тогда
				Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
			ИначеЕсли РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Дерево'") Тогда
				Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
			КонецЕсли;
		КонецЕсли;
		РасширенныйПоиск = Ложь;
#Если НЕ ВнешнееСоединение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПоПолнотекстовомуПоискуУстановлен",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПоПолнотекстовомуПоиску",Неопределено);
#КонецЕсли
		ОснованиеВыбора = "";
	КонецЕсли;
	   	
КонецПроцедуры

//-- 06.04.2018 Полнотекстовый поиск

#Область Команды

&НаКлиенте
Процедура УдалитьДубликаты(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки; 
	Если ВыделенныеСтроки.Количество() < 2 Тогда		
		ПоказатьПредупреждение(, "Выбрано менее двух элементов!");
		Возврат;		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Дубликаты", ВыделенныеСтроки);
	ПараметрыОткрытия.Вставить("Оригинал", 	Элементы.Список.ТекущиеДанные.Ссылка);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикУдаленияДубликатов", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки));
	ОткрытьФорму("Обработка.УдалениеДублейПредметовСнабжения.Форма", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры	//УдалитьДубликаты

&НаКлиенте
Процедура ПрименитьОтборПоЗаказам(Команда)
	
	Если Проекты.Количество() = 0 И Заказы.Количество() = 0 Тогда
		
		Возврат;	
		
	КонецЕсли;
	
	УстановитьОтборКаталогаПредметовСнабжения();
	
КонецПроцедуры	//ПрименитьОтборПоЗаказам

&НаКлиенте
Процедура ОбработатьВыбранные(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Не выбрано ни одного элемента!");
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыбранныеЗавершение", ЭтаФорма);
	НастройкиКомпоновки = ПолучитьНастройкиКомпоновки(ВыделенныеСтроки);
	ПараметрыОткрытия = Новый Структура("ВидыИзменяемыхОбъектов, НастройкиКомпоновки", "Справочник.КаталогПредметовСнабжения", НастройкиКомпоновки);
	
	ОткрытьФорму("Обработка.ГрупповоеИзменениеРеквизитов.Форма", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры	//ОбработатьВыбранные

&НаКлиенте
Процедура ПрименитьФильтр(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьФильтрЗавершение", ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура();
	
	ОткрытьФорму("Справочник.АлгоритмыФильтрации.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры	//ПрименитьФильтр

&НаКлиенте
Процедура ОтправитьНаПоиск(Команда)
	
	ФормаБП = ПолучитьФорму("БизнесПроцесс.ОтправкаВКСУНСИНаПоискПоКоду.Форма.ФормаБизнесПроцесса");
	ДокОбъект = ФормаБП.Объект;
	
	ЗаполнитьДанныеНаСервере("Поиск", ДокОбъект);
	КопироватьДанныеФормы(ДокОбъект, ФормаБП.Объект);
	
	ФормаБП.Открыть();
	
КонецПроцедуры //ОтправитьНаПоиск

&НаКлиенте
Процедура ОтправитьНаКлассификацию(Команда)
	
	ФормаБП = ПолучитьФорму("БизнесПроцесс.ОтправкаВКСУНСИНаКлассификацию.Форма.ФормаБизнесПроцесса");
	ДокОбъект = ФормаБП.Объект;
	
	ЗаполнитьДанныеНаСервере("Классификация", ДокОбъект);
	КопироватьДанныеФормы(ДокОбъект, ФормаБП.Объект);
	
	ФормаБП.Открыть();
	
КонецПроцедуры	//ОтправитьНаКлассификацию

&НаКлиенте
Процедура ОтправитьВРОЭ(Команда)
	
	ФормаБП = ПолучитьФорму("БизнесПроцесс.ВзаимодействиеСРОЭ.Форма.ФормаБизнесПроцесса");
	ДокОбъект = ФормаБП.Объект;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ОтправитьВРОЭНаСервере(ДокОбъект, ВыделенныеСтроки);
	КопироватьДанныеФормы(ДокОбъект, ФормаБП.Объект);
	
	ФормаБП.Открыть();
	
КонецПроцедуры	//ОтправитьВРОЭ

&НаКлиенте
Процедура КарточкаПС(Команда)
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ПредметСнабжения", Элементы.Список.ТекущаяСтрока);
	
	ОткрытьФорму("Обработка.КарточкаПредметаСнабжения.Форма.Форма", ДопПараметры, ЭтаФорма);
	
КонецПроцедуры	//КарточкаПС

&НаКлиенте
Процедура ПрименитьОтборПоФлоту(Команда)
	
	Если Флот.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьОтборКаталогаПредметовСнабжения();
	
КонецПроцедуры	//ПрименитьОтборПоФлоту

&НаКлиенте
Процедура ПоискИЗамена(Команда)
	
	НачатьПоискИЗаменуСимволов();
	
КонецПроцедуры	//ПоискИЗамена

#КонецОбласти

#Область ПоискИЗаменаСимволов

&НаКлиенте
Процедура НачатьПоискИЗаменуСимволов()
	
	Результат = ПоместитьДинСписокВоВременноеХранилище();
	
	Если Результат.Свойство("Ошибка") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Ошибка,, "Список");
		
	Иначе
		
		ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаПоискИЗаменаСимволов", Результат,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры	//НачатьПоискИЗаменуСимволов

&НаСервере
Функция ПоместитьДинСписокВоВременноеХранилище()
	
	Ответ = Новый Структура();

	СписокТаблицей = ДинамическийСписокВТаблицуЗначений();
	
	МаксКоличествоДляОбработки = Справочники.Настройки.ПолучитьМаксимальноеКоличествоПредметовСнабженияДляПоискаИЗаменыСимволов();
	
	Если СписокТаблицей.Количество() > МаксКоличествоДляОбработки Тогда
		
		Ответ.Вставить("Ошибка", "Превышено максимальное количество элементов для обработки. Уточните выборку.");	
		
	Иначе
		
		АдресМассива = ПоместитьВоВременноеХранилище(СписокТаблицей.ВыгрузитьКолонку("Ссылка"), УникальныйИдентификатор);
		
		Ответ.Вставить("АдресМассива", АдресМассива);	
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции	//ПоместитьДинСписокВоВременноеХранилище

&НаСервере
Функция ДинамическийСписокВТаблицуЗначений()
	
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции	//ДинамическийСписокВТаблицуЗначений

#КонецОбласти