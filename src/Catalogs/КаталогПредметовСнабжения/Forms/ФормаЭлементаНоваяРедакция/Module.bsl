
/////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда   
	
		ЗаполнитьИзображения();
		ЗаполнитьРесурсыИСрокиСлужбы();
		ЗаполнитьРегламентТО();
		ЗаполнитьЗИПТребуемыеДляТО();
		ПроверитьНаличиеЧертежа();
		ПроверитьПереводы();
		ЗаполнитьКодыINCAT();
			
		ТолькоПросмотр = ОбщиеФункцииСервер.ПроверкаВозможностиИзменения(ВернутьМассивПоставщиков());
		
		РольСБД = РольДоступна("СпециалистПоВедениюБД");
				
		Если НЕ РольСБД И Не ТолькоПросмотр И Объект.Статус = Справочники.СтатусыЗаписейСправочниковИКаталогов.ПровереноОСК Тогда
		
			Элементы.Статус.ТолькоПросмотр = Истина;	
		
		КонецЕсли;
		
	Иначе 
		
		Элементы.ФормаКарточкаПС.Доступность = Ложь;  		
		
	КонецЕсли;
	
	НастроитьПрименяемость();
	
	НастроитьПрименяемостьСоставнойЧастиИзделия();	
	
	НастроитьВходитВСостав();
	
	НастроитьЦеныВнешние();
	
	НастроитьЦеныВнутренние();
	
	НастроитьЦеныТендерные();
	
	ТипГруппа 	= Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	ТипИзделие 	= Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	
	ЕстьСтрокиРегламентТО = РегламентТО.Количество() > 0;
	Элементы.РегламентТОПереместитьСтрокуРегламентаТОВверх.Доступность = ЕстьСтрокиРегламентТО;
	Элементы.РегламентТОПереместитьСтрокуРегламентаТОВниз.Доступность = ЕстьСтрокиРегламентТО;
	
	ЕстьСтрокиРесурсыИСрокиСлужбы = РесурсыИСрокиСлужбы.Количество() > 0;
	Элементы.РесурсыИСрокиСлужбыПереместитьСтрокуРесурсовИСроковСлужбыВверх.Доступность = ЕстьСтрокиРесурсыИСрокиСлужбы;
	Элементы.РесурсыИСрокиСлужбыПереместитьСтрокуРесурсовИСроковСлужбыВниз.Доступность = ЕстьСтрокиРесурсыИСрокиСлужбы;
	
	ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот = ЗИПТребуемыеДляТОТекущегоВидаРабот.Количество() > 0;
	Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботПереместитьСтрокуЗИПДляТОВверх.Доступность = ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот;
	Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботПереместитьСтрокуЗИПДляТОВниз.Доступность = ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот;
	
	// Базунов 28.06.2018 На уровне прав на форме не удалось настроить видимость
	ВидимостьПоставщиков = РольДоступна("ПредставительКонтрагента");
	ВидимостьВнешнихЦен = РольДоступна("РуководительДепартаментаВТС") ИЛИ РольДоступна("РуководительПроектаДепартаментаВТС")
					ИЛИ РольДоступна("РуководительПроектаИССЗИПЭ") ИЛИ РольДоступна("СпециалистДепартаментаЭкономикиОСК") ИЛИ РольДоступна("ПолныеПрава");

	Элементы.ГруппаЦеныВнешние.Видимость 	= ВидимостьВнешнихЦен;
	Элементы.ГруппаПоставщики.Видимость  	= НЕ ВидимостьПоставщиков;
	Элементы.ГруппаЦеныТендерные.Видимость 	= ВидимостьВнешнихЦен;
	// Базунов 28.06.2018 
	
	ЭтоСпециалистБлокаЗакупок = Не РольДоступна("ПолныеПрава") И РольДоступна("СпециалистБлокаЗакупок");
	
	Если ЭтоСпециалистБлокаЗакупок Тогда
	
		Элементы.ЗаписатьИЗакрытьПрограммно.Доступность		= Ложь;
		Элементы.ЗаписатьПрограммно.Доступность				= Ложь;
		Элементы.ГруппаСпецификация.ТолькоПросмотр 			= Истина;
		Элементы.ГруппаЧертеж.Доступность	 				= Ложь;
		Элементы.ГруппаРесурсыИСрокиСлужбы.ТолькоПросмотр 	= Истина;
		Элементы.ГруппаРегламентТО.ТолькоПросмотр 			= Истина;
		
		Элементы.РесурсыИСрокиСлужбыПереместитьСтрокуРесурсовИСроковСлужбыВверх.Доступность = Ложь;
		Элементы.РесурсыИСрокиСлужбыПереместитьСтрокуРесурсовИСроковСлужбыВниз.Доступность = Ложь;
		Элементы.РегламентТОПереместитьСтрокуРегламентаТОВверх.Доступность = Ложь;
		Элементы.РегламентТОПереместитьСтрокуРегламентаТОВниз.Доступность = Ложь;
	
	КонецЕсли;
		
	ЭтоПредставительПроектантаКорабля 	= РольДоступна("ПредставительПроектантаКорабля");
	ЭтоПредставительСтроителяКорабля 	= РольДоступна("ПредставительСтроителяКорабля");
	ЭтоПредставительКонтрагента	 	 	= РольДоступна("ПредставительКонтрагента");
	ПровереноОСК						= Объект.Статус = Справочники.СтатусыЗаписейСправочниковИКаталогов.ПровереноОСК;
	
	Если Не РольДоступна("ПолныеПрава") И (ЭтоПредставительПроектантаКорабля ИЛИ ЭтоПредставительСтроителяКорабля ИЛИ ЭтоПредставительКонтрагента) Тогда
		
		Если ПровереноОСК Тогда
			
			ТолькоПросмотр 										= Истина;
			Элементы.ГруппаСпецификация.ТолькоПросмотр 			= Истина;
			Элементы.ГруппаЧертеж.Доступность	 				= Ложь;
			Элементы.ГруппаРесурсыИСрокиСлужбы.ТолькоПросмотр 	= Истина;
			Элементы.ГруппаРегламентТО.ТолькоПросмотр 			= Истина;
			Элементы.ЗаписатьИЗакрытьПрограммно.Доступность		= Ложь;
			Элементы.ЗаписатьПрограммно.Доступность				= Ложь;	
			Элементы.РесурсыИСрокиСлужбыПереместитьСтрокуРесурсовИСроковСлужбыВверх.Доступность = Ложь;
			Элементы.РесурсыИСрокиСлужбыПереместитьСтрокуРесурсовИСроковСлужбыВниз.Доступность = Ложь;
			Элементы.РегламентТОПереместитьСтрокуРегламентаТОВверх.Доступность = Ложь;
			Элементы.РегламентТОПереместитьСтрокуРегламентаТОВниз.Доступность = Ложь;
			// ++ 16.07.2018 10:26:31 Базунов Д.А. Задача: 
			Элементы.НРЕГ.Доступность = Ложь;
			Элементы.ПереводНаименования.Доступность = Ложь;
			// -- 16.07.2018 10:26:31 Базунов Д.А. Задача:
			
		КонецЕсли;
		 			
	КонецЕсли;
	
	ФНН = Объект.ФНН;
	
	Если ТипЗнч(Объект.NSN) = Тип("СправочникСсылка.ПредметыСнабженияНАТО") Тогда
		ПредметСнабженияНАТО = Объект.NSN;
	Иначе
		ПредметСнабженияНАТО = Справочники.ПредметыСнабженияНАТО.ПустаяСсылка();
	КонецЕсли; 
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.РегламентТОПредметовСнабжения) Тогда
		Элементы.РесурсыИСрокиСлужбы.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.РесурсыИСрокиСлужбыПредметовСнабжения) Тогда
		Элементы.РегламентТО.ТолькоПросмотр = Истина;
		Элементы.ЗИПТребуемыеДляТОТекущегоВидаРабот.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	Если НЕ ПравоДоступа("Использование", Метаданные.Обработки.КарточкаПредметаСнабжения) Тогда
		Элементы.ФормаКарточкаПС.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Справочники.КаталогПредметовСнабжения) Тогда
		ТолькоПросмотр = Истина;
		Элементы.ФНН.Доступность = Ложь;
		Элементы.ЗаписатьПрограммно.Доступность = Ложь;
		Элементы.ЗаписатьИЗакрытьПрограммно.Доступность = Ложь;
		Элементы.ГруппаЧертеж.Доступность = Ложь;
		//Элементы.Добавить.Доступность = Ложь;
		//Элементы.Удалить.Доступность = Ложь;
		//Элементы.СпецификацияПронумеровать.Доступность = Ложь;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.NSN) Тогда
		УстановитьТипСтрокаДляПоляNSN();
	КонецЕсли; 
		
	УстановитьПараметрыДляДинамическихСписковТабличныхЧастей();
	УстановитьОтборДляСпецификацииДинамическийСписок();
	
	ПравоНаИзменениеЦен = ПравоДоступа("Изменение", Метаданные.Документы.УстановкаЦенПредметовСнабжения);
	Элементы.ЦеныВнешниеУстановитьНовуюЦену.Видимость 	 = ПравоНаИзменениеЦен;
	Элементы.ЦеныВнутренниеУстановитьНовуюЦену.Видимость = ПравоНаИзменениеЦен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РезультатПроверкиЗаполненияРеквизитов = ПроверитьЗаполнениеРеквизитов();
	
	Если РезультатПроверкиЗаполненияРеквизитов.ЕстьЗамечания Тогда
	
		Отказ = Истина;
		Сообщить(РезультатПроверкиЗаполненияРеквизитов.Описание);
		Возврат;
	
	КонецЕсли;
	
	Если МодифицированностьРесурсовИСроковСлужбы Тогда
	
		РезультатПроверкиЗаполненияОбязательныхПолейРесурсовИСроковСлужбы = ПроверитьЗаполнениеОбязательныхПолейРесурсовИСроковСлужбы();
		
		Если РезультатПроверкиЗаполненияОбязательныхПолейРесурсовИСроковСлужбы.ЕстьЗамечания Тогда
		
			Отказ = Истина;
			Сообщить(РезультатПроверкиЗаполненияОбязательныхПолейРесурсовИСроковСлужбы.Описание);
			Возврат;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если МодифицированностьРегламентаТО Тогда
	
		РезультатПроверкиЗаполненияОбязательныхПолейРегламентаТО = ПроверитьЗаполнениеОбязательныхПолейРегламентаТО();
		
		Если РезультатПроверкиЗаполненияОбязательныхПолейРегламентаТО.ЕстьЗамечания Тогда
		
			Отказ = Истина;
			Сообщить(РезультатПроверкиЗаполненияОбязательныхПолейРегламентаТО.Описание);
			Возврат;
		
		КонецЕсли;	
	
	КонецЕсли;
	
	Если МодифицированностьЗИПДляТО Тогда
		
		Если МодифицированностьЗИПДляТОТекущегоВидаРабот Тогда
			
			ИзменитьЗИПТребуемыеДляТО();		
			
		КонецЕсли;
	
		РезультатПроверкиЗаполненияОбязательныхПолейЗИПДляТО = ПроверитьЗаполнениеОбязательныхПолейЗИПДляТО();
		
		Если РезультатПроверкиЗаполненияОбязательныхПолейЗИПДляТО.ЕстьЗамечания Тогда
		
			Отказ = Истина;
			Сообщить(РезультатПроверкиЗаполненияОбязательныхПолейЗИПДляТО.Описание);
			Возврат;
		
		КонецЕсли;	
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	
	ТекущийОбъект.Обозначение = СокрЛП(ТекущийОбъект.Обозначение);
	ТекущийОбъект.ДокументНаПоставку = СокрЛП(ТекущийОбъект.ДокументНаПоставку);
	
	// Осуществим проверку
	
	РезультатПроверкиДублирования = ПроверитьДублирование(ТекущийОбъект.Обозначение, ТекущийОбъект.ДокументНаПоставку, ТекущийОбъект.Ссылка);
	
	Если РезультатПроверкиДублирования.ЕстьДубли Тогда
	
		Отказ = Истина;
		Сообщить(РезультатПроверкиДублирования.Описание);
		Возврат;
	
	КонецЕсли;
	
	//- 14.03.2017 11:35:03 Савинов Александр Задача: Оптимизация
	
	Если МодифицированностьРесурсовИСроковСлужбы Тогда
	
		ТаблицаРесурсовИСроковСлужбы = РесурсыИСрокиСлужбы.Выгрузить();
		
		// Проверим корректность заполнения ресурсов и сроков службы
		
		РезультатПроверкиРесурсовИСроковСлужбы = ПроверитьРесурсыИСрокиСлужбы(ТаблицаРесурсовИСроковСлужбы);
		
		Если Не РезультатПроверкиРесурсовИСроковСлужбы.ЗаполнениеКорректно Тогда
		
			Отказ = Истина;
			Сообщить(РезультатПроверкиРесурсовИСроковСлужбы.Описание);
			Возврат;
		
		КонецЕсли;
	
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РесурсыИСрокиСлужбы", ТаблицаРесурсовИСроковСлужбы);	
	
	КонецЕсли;
	
	Если МодифицированностьРегламентаТО Тогда
	
		ТаблицаРегламентаТО = РегламентТО.Выгрузить();
		
		// Проверим корректность заполнения регламента ТО
		
		РезультатПроверкиРегламентаТО = ПроверитьРегламентТО(ТаблицаРегламентаТО);
		
		Если Не РезультатПроверкиРегламентаТО.ЗаполнениеКорректно Тогда
		
			Отказ = Истина;
			Сообщить(РезультатПроверкиРегламентаТО.Описание);
			Возврат;
		
		КонецЕсли;
	
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РегламентТО", ТаблицаРегламентаТО);	
	
	КонецЕсли;
	
	Если МодифицированностьЗИПДляТО Тогда
	
		ТаблицаЗИПТребуемыхДляТО = ЗИПТребуемыеДляТО.Выгрузить();
		
		// Проверим корректность заполнения ЗИП для ТО
		
		РезультатПроверкиЗИПТребуемыхДляТО = ПроверитьЗИПТребуемыеДляТО(ТаблицаЗИПТребуемыхДляТО);
		
		Если Не РезультатПроверкиЗИПТребуемыхДляТО.ЗаполнениеКорректно Тогда
		
			Отказ = Истина;
			Сообщить(РезультатПроверкиЗИПТребуемыхДляТО.Описание);
			Возврат;
		
		КонецЕсли;
	
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗИПТребуемыеДляТО", ТаблицаЗИПТребуемыхДляТО);	
	
	КонецЕсли;
		
	Если МодифицированностьКодыINCAT Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("КодыINCAT", КодыINCAT);	
		
	КонецЕсли;   	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда  	
		Закрыть();		
	КонецЕсли;
	
	ОбновитьДинамическиеСпискиТабличныхЧастей();
	УстановитьОтборДляСпецификацииДинамическийСписок();
	СпецификацияИзменена = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
		ЗаполнитьИзображения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)	
	Если СпецификацияИзменена Тогда
		Если НЕ ЗавершениеРаботы = Истина Тогда
			СпецификацияИзменена = Ложь;
			ДобавитьВОчередьАктуализацииПС(Объект.Ссылка, СпецификацияИзменена);
		Иначе
			Отказ = Истина;
			ТекстПредупреждения = "Перед завершением работы корректно закройте карточку предмета снабжения! Возможна потеря данных!";
			ПодключитьОбработчикОжидания("ДобавлениеВОчередьСпецификации", 1, Истина);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры // ПередЗакрытием

&НаКлиенте
Процедура ДобавлениеВОчередьСпецификации() Экспорт
    СпецификацияИзменена = Ложь;
    ДобавитьВОчередьАктуализацииПС(Объект.Ссылка, СпецификацияИзменена);
КонецПроцедуры // ДобавлениеВОчередьСпецификации
 
/////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПредыдущееИзображение(Команда)
	
	НомерТекущегоИзображения = НомерТекущегоИзображения - 1;
	
	АдресКартинки = Изображения.Получить(НомерТекущегоИзображения).Значение;
	
	Элементы.ПредыдущееИзображение.Доступность = НомерТекущегоИзображения > 0;
	Элементы.СледующееИзображение.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СледующееИзображение(Команда)
	
	НомерТекущегоИзображения = НомерТекущегоИзображения + 1;
	
	АдресКартинки = Изображения.Получить(НомерТекущегоИзображения).Значение;
	
	Элементы.ПредыдущееИзображение.Доступность = Истина;
	Элементы.СледующееИзображение.Доступность = КоличествоИзображений > НомерТекущегоИзображения + 1;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПрограммно(Команда)
	
	Записать();		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьПрограммно(Команда)
	
	Записать(Новый Структура("Закрыть", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПереводНаименования(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ПоказатьПредупреждение(, "Для работы с переводом необходимо записать объект",, "Действие запрещено");
		Возврат;
	
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Владелец", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ИмяРеквизита", "Наименование");
	ПараметрыОткрытия.Вставить("Значение", Объект.Наименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПереводаНаименования", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.Перевод", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереводПравилУпаковки(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ПоказатьПредупреждение(, "Для работы с переводом необходимо записать объект",, "Действие запрещено");
		Возврат;
	
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Владелец", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ИмяРеквизита", "ПравилаУпаковкиТранспортировкиХранения");
	ПараметрыОткрытия.Вставить("Значение", Объект.ПравилаУпаковкиТранспортировкиХранения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПереводаПравилУпаковки", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.Перевод", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВНижнийРегистр(Команда)
	Элементы.Наименование.ВыделенныйТекст = НРЕГ(Элементы.Наименование.ВыделенныйТекст);
КонецПроцедуры

&НаКлиенте
Процедура КарточкаПС(Команда)
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ПредметСнабжения", Объект.Ссылка);
	
	ОткрытьФорму("Обработка.КарточкаПредметаСнабжения.Форма.Форма", ДопПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧертеж(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ПоказатьПредупреждение(, "Перед добавлением чертежа необходимо записать объект",, "Действие запрещено");
		Возврат;
	
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, "Изображения (*.jpg)|*.jpg", Новый Структура("Чертеж"));
	
	ПроверитьНаличиеЧертежа();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧертеж(Команда)
	
	ДанныеФайла = ПолучитьДанныеФайла(Чертеж, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЧертеж(Команда)
	
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, "Изображения (*.jpg)|*.jpg", Новый Структура("ПрисоединенныйФайлСсылка, Чертеж", Чертеж, Истина));	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧертеж(Команда)
	
	РезультатУдаленияПрисоединенногоФайла = ОбщиеФункцииСервер.УдалитьПрисоединенныйФайл(Чертеж, Объект.Ссылка);
	
	Если РезультатУдаленияПрисоединенногоФайла.Выполнено Тогда
	
		Элементы.ДобавитьЧертеж.Видимость 	= Истина;
		Элементы.ПоказатьЧертеж.Видимость 	= Ложь;
		Элементы.ИзменитьЧертеж.Видимость 	= Ложь;
		Элементы.УдалитьЧертеж.Видимость 	= Ложь;
		
		Чертеж = ПредопределенноеЗначение("Справочник.КаталогПредметовСнабженияПрисоединенныеФайлы.ПустаяСсылка");	
	
	Иначе
	
		Сообщить(РезультатУдаленияПрисоединенногоФайла.Описание);	
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтрокуРесурсовИСроковСлужбыВверх(Команда)
	
	ТекущийПорядковыйНомер = Элементы.РесурсыИСрокиСлужбы.ТекущиеДанные.ПорядковыйНомер;
	
	Если ТекущийПорядковыйНомер = 1 Тогда // Выше некуда
	
		Возврат;	
	
	КонецЕсли;
	
	ИзменитьПорядокСтрокТаблицыРесурсовИСроковСлужбы(ТекущийПорядковыйНомер, "Вверх");		
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтрокуРесурсовИСроковСлужбыВниз(Команда)
	
	КоличествоСтрокРесурсовИСроковСлужбы = РесурсыИСрокиСлужбы.Количество();
	
	ТекущийПорядковыйНомер = Элементы.РесурсыИСрокиСлужбы.ТекущиеДанные.ПорядковыйНомер;
	
	Если ТекущийПорядковыйНомер = КоличествоСтрокРесурсовИСроковСлужбы Тогда // Ниже некуда
	
		Возврат;	
	
	КонецЕсли;
	
	ИзменитьПорядокСтрокТаблицыРесурсовИСроковСлужбы(ТекущийПорядковыйНомер, "Вниз");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтрокуРегламентаТОВверх(Команда)
	
	ТекущийПорядковыйНомер = Элементы.РегламентТО.ТекущиеДанные.ПорядковыйНомер;
	
	Если ТекущийПорядковыйНомер = 1 Тогда // Выше некуда
	
		Возврат;	
	
	КонецЕсли;
	
	ИзменитьПорядокСтрокТаблицыРегламентаТО(ТекущийПорядковыйНомер, "Вверх");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтрокуРегламентаТОВниз(Команда)
	
	КоличествоСтрокРегламентаТО = РегламентТО.Количество();
	
	ТекущийПорядковыйНомер = Элементы.РегламентТО.ТекущиеДанные.ПорядковыйНомер;
	
	Если ТекущийПорядковыйНомер = КоличествоСтрокРегламентаТО Тогда // Ниже некуда
	
		Возврат;	
	
	КонецЕсли;
	
	ИзменитьПорядокСтрокТаблицыРегламентаТО(ТекущийПорядковыйНомер, "Вниз");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтрокуЗИПДляТОВверх(Команда)
	
	ТекущийПорядковыйНомер = Элементы.ЗИПТребуемыеДляТОТекущегоВидаРабот.ТекущиеДанные.ПорядковыйНомер;
	
	Если ТекущийПорядковыйНомер = 1 Тогда // Выше некуда
	
		Возврат;	
	
	КонецЕсли;
	
	ИзменитьПорядокСтрокТаблицыЗИПДляТО(ТекущийПорядковыйНомер, "Вверх");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьСтрокуЗИПДляТОВниз(Команда)
	
	КоличествоСтрокЗИПДляТОТекущегоВида = ЗИПТребуемыеДляТОТекущегоВидаРабот.Количество();
	
	ТекущийПорядковыйНомер = Элементы.ЗИПТребуемыеДляТОТекущегоВидаРабот.ТекущиеДанные.ПорядковыйНомер;
	
	Если ТекущийПорядковыйНомер = КоличествоСтрокЗИПДляТОТекущегоВида Тогда // Ниже некуда
	
		Возврат;	
	
	КонецЕсли;
	
	ИзменитьПорядокСтрокТаблицыЗИПДляТО(ТекущийПорядковыйНомер, "Вниз");	
	
КонецПроцедуры

#Область ОбработкаДинамическихСписковТабличныхЧастей

&НаКлиенте
Процедура ДобавитьХарактеристику(Команда)
	
	ДобавитьЭлементТабличнойЧасти("Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАналог(Команда)
	
	ДобавитьЭлементТабличнойЧасти("Аналоги");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоставщика(Команда)
	
	ДобавитьЭлементТабличнойЧасти("ИзготовителиИПоставщики");

КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристику(Команда)
	
	УдалитьЭлементТабличнойЧасти("Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьАналог(Команда)
	
	УдалитьЭлементТабличнойЧасти("Аналоги");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоставщика(Команда)
	
	УдалитьЭлементТабличнойЧасти("ИзготовителиИПоставщики");
	
КонецПроцедуры     

#КонецОбласти 

#Область РаботаСоСпецификацией
	
&НаКлиенте
Процедура ДобавитьСоставляющуюЧастьВСпецификациию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("СпецификацияДинамическийСписокПередНачаломДобавленияДалее", ЭтаФорма);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед добавлением элемента табличной части необходимо записать документ. Продолжить?';"), РежимДиалогаВопрос.ДаНет, 0);
		Отказ = Истина;
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура("ПредметСнабжения", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.СпецификацииПС.Форма.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставВсяСтруктура(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоказатьПредупреждение(, "Перед просмотром структуры необходимо записать объект",, "Действие запрещено");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ПредметСнабжения", Объект.Ссылка);
		
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаПросмотрВсейСтруктуры", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПронумеровать(Команда)
	
	Если Элементы.СпецификацияДинамическийСписок.ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, "Спецификация не заполнена!");
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоставПронумероватьЗавершение", ЭтаФорма), "Нумерация элементов будет изменена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПереместитьПозициюСпецификацииВверх(Команда)
	
	Если Элементы.СпецификацияДинамическийСписок.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийНомерПозицииСпецификации = Элементы.СпецификацияДинамическийСписок.ТекущиеДанные.НомерПозиции;
		
		Если ТекущийНомерПозицииСпецификации = 1  Тогда 
			
			Возврат;	
			
		КонецЕсли;
		
		ИзменитьПорядокСоставляющихЧастейСпецификацииВДинамическомСписке(Объект.Ссылка, ТекущийНомерПозицииСпецификации, "Вверх");
		Элементы.СпецификацияДинамическийСписок.Обновить();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПереместитьПозициюСпецификацииВниз(Команда)
	
	Если Элементы.СпецификацияДинамическийСписок.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийНомерПозицииСпецификации = Элементы.СпецификацияДинамическийСписок.ТекущиеДанные.НомерПозиции;
		
		ИзменитьПорядокСоставляющихЧастейСпецификацииВДинамическомСписке(Объект.Ссылка, ТекущийНомерПозицииСпецификации, "Вниз");
		Элементы.СпецификацияДинамическийСписок.Обновить();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСоставляющуюЧастьИзСпецификации(Команда)
	
	ТекущаяСтрока = Элементы.СпецификацияДинамическийСписок.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ТекстВопроса = "";
		
		РезультатПроверки = СпецификацииПредметовСнабжения.ПроверитьВозможностьУдаленияСоставнойЧастиИзСпецификацииПредметаСнабжения(Объект.Ссылка, ТекущаяСтрока.СоставляющаяЧасть); 
		Если РезультатПроверки.Отказ Тогда
		
			Оповещение = Новый ОписаниеОповещения("УдалитьСоставляющуюЧастьИзСпецификацииДалее", ЭтаФорма);
			ОткрытьФорму("ОбщаяФорма.ФормаПрименяемостиПредметаСнабжения", Новый Структура("ПредметСнабжения, СоставляющаяЧасть", Объект.Ссылка, ТекущаяСтрока.СоставляющаяЧасть), ЭтотОбъект,,,, Оповещение);
			
		Иначе
			
			ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru = 'Вы действительно хотите удалить составляющую часть из спецификации?';");
			
			Оповещение = Новый ОписаниеОповещения("УдалитьСоставляющуюЧастьИзСпецификацииДалее", ЭтаФорма);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);

		КонецЕсли; 
		
						
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область Цены

&НаКлиенте
Процедура УстановитьНовуюЦену(Команда)
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ПредметСнабжения", Объект.Ссылка);
	ПараметрыСоздания.Вставить("ЕдиницаИзмерения", Объект.ЕдиницаИзмерения);
	ПараметрыСоздания.Вставить("ТипЦены", ?(Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЦеныВнешние, 
											ПредопределенноеЗначение("Перечисление.ТипыЦен.Внешняя"), 
											ПредопределенноеЗначение("Перечисление.ТипыЦен.Внутренняя")));

	
	ОткрытьФорму("Документ.УстановкаЦенПредметовСнабжения.Форма.ФормаДокумента", ПараметрыСоздания, ЭтотОбъект); 

	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеINCAT

&НаКлиенте
Процедура ПоказатьОписаниеINCAT(Команда)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Состояние("Выполняется формирование описания INCAT",,, БиблиотекаКартинок.ДлительнаяОперация48);

	СформироватьОписаниеINCATНаСервере(ТабДок, Объект.Ссылка);
	
	ТабДок.ОтображатьСетку 		= Ложь;
	ТабДок.ОтображатьЗаголовки 	= Ложь;
	ТабДок.Показать(Объект.Наименование);

КонецПроцедуры

#КонецОбласти 

#КонецОбласти 
/////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныепроцедурыИФункции
	
&НаСервере
Процедура ПроверитьПереводы(ИмяРеквизита = Неопределено)
	
	Если ИмяРеквизита = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДополнительныеНаименования.ИмяРеквизита,
		|	ДополнительныеНаименования.Язык
		|ИЗ
		|	РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
		|ГДЕ
		|	ДополнительныеНаименования.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат;	
			
		КонецЕсли;
		
		МассивПереводовНаименований = Новый Массив;
		МассивПереводовПравилУпаковки = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ИмяРеквизита = "Наименование" Тогда
				
				МассивПереводовНаименований.Добавить(Выборка.Язык);	
				
			ИначеЕсли Выборка.ИмяРеквизита = "ПравилаУпаковкиТранспортировкиХранения" Тогда
				
				МассивПереводовПравилУпаковки.Добавить(Выборка.Язык);
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Если МассивПереводовНаименований.Количество() > 0 Тогда
			
			МассивПереводовНаименований.Вставить(0, "Есть перевод на языки:");
			
			Команды.ПереводНаименования.Подсказка = СтрСоединить(МассивПереводовНаименований, Символы.ПС);
			
		КонецЕсли;
		
		Если МассивПереводовПравилУпаковки.Количество() > 0 Тогда
			
			МассивПереводовПравилУпаковки.Вставить(0, "Есть перевод на языки:");
			
			Команды.ПереводПравилУпаковки.Подсказка = СтрСоединить(МассивПереводовПравилУпаковки, Символы.ПС);
			
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДополнительныеНаименования.Язык
		|ИЗ
		|	РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
		|ГДЕ
		|	ДополнительныеНаименования.Владелец = &Владелец
		|	И ДополнительныеНаименования.ИмяРеквизита = &ИмяРеквизита";
		
		Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
		Запрос.УстановитьПараметр("ИмяРеквизита", ИмяРеквизита);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Если ИмяРеквизита = "Наименование" Тогда
				
				Команды.ПереводНаименования.Подсказка = "Нет переводов";	
				
			ИначеЕсли ИмяРеквизита = "ПравилаУпаковкиТранспортировкиХранения" Тогда
				
				Команды.ПереводПравилУпаковки.Подсказка = "Нет переводов"; 	
				
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		МассивПереводов = Новый Массив;
		
		МассивПереводов.Добавить("Есть перевод на языки:");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			МассивПереводов.Добавить(Выборка.Язык);	
							
		КонецЦикла;
		
		Если ИмяРеквизита = "Наименование" Тогда
		
			Команды.ПереводНаименования.Подсказка = СтрСоединить(МассивПереводов, Символы.ПС);	
		
		ИначеЕсли ИмяРеквизита = "ПравилаУпаковкиТранспортировкиХранения" Тогда
		
			Команды.ПереводПравилУпаковки.Подсказка = СтрСоединить(МассивПереводов, Символы.ПС); 	
		
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьПереводы()

&НаСервере
Процедура ЗаполнитьКодыINCAT()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КодыINCAT.КодINCAT КАК КодINCAT
	|ИЗ
	|	РегистрСведений.КодыINCAT КАК КодыINCAT
	|ГДЕ
	|	КодыINCAT.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", Объект.Ссылка);
	
	КодыINCAT.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзображения()

	МассивРасширенийКартинок = Новый Массив;
	МассивРасширенийКартинок.Добавить("bmp");
	МассивРасширенийКартинок.Добавить("dib");
	МассивРасширенийКартинок.Добавить("rle");
	МассивРасширенийКартинок.Добавить("gif");
	МассивРасширенийКартинок.Добавить("jpg");
	МассивРасширенийКартинок.Добавить("jpeg");
	МассивРасширенийКартинок.Добавить("png");
	МассивРасширенийКартинок.Добавить("tif");
	МассивРасширенийКартинок.Добавить("ico");
	МассивРасширенийКартинок.Добавить("wmf");
	МассивРасширенийКартинок.Добавить("emf");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабженияПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ПрисоединенныеФайлы.Расширение В(&МассивРасширенийКартинок)
	|	И НЕ ПрисоединенныеФайлы.Чертеж";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивРасширенийКартинок", МассивРасширенийКартинок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		АдресКартинки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КартинкаПустая.ПолучитьДвоичныеДанные());
		
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	КоличествоИзображений = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
	
		Изображения.Добавить(ПрисоединенныеФайлы.ПолучитьДанныеФайла(Выборка.Ссылка, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла);
	
	КонецЦикла;
	
	АдресКартинки = Изображения.Получить(0).Значение;
	
	Элементы.СледующееИзображение.Доступность = КоличествоИзображений > 1;
	
	НомерТекущегоИзображения = 0;

КонецПроцедуры // ЗаполнитьИзображения()

&НаСервере
Процедура НастроитьПрименяемость()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		Применяемость.Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", Объект.Ссылка); 
	
	Иначе
		
		Применяемость.ТекстЗапроса = "ВЫБРАТЬ
		|	NULL КАК Проект,
		|	NULL КАК Флот,
		|	NULL КАК Корабль,
		|	NULL КАК Родитель,		
		|	NULL КАК ЕстьНаКорабле";		
	
	КонецЕсли;
	
КонецПроцедуры // НастроитьПрименяемость()

&НаСервере
Процедура НастроитьПрименяемостьСоставнойЧастиИзделия(СоставляющаяЧасть=Неопределено)

	ПрименяемостьСоставнойЧастиИзделия.Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", Объект.Ссылка); 
	ПрименяемостьСоставнойЧастиИзделия.Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", СоставляющаяЧасть); 
	
	
КонецПроцедуры // НастроитьПрименяемостьСоставнойЧастиИзделия()

&НаСервере
Процедура НастроитьВходитВСостав()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ВходитВСостав.Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", Объект.Ссылка); 
	
	Иначе
		ВходитВСостав.ТекстЗапроса = "ВЫБРАТЬ
		|	NULL КАК ДокументНаПоставку,
		|	NULL КАК Наименование,
		|	NULL КАК Обозначение,
		|	NULL КАК Ссылка";
		
		ВходитВСостав.ОсновнаяТаблица = "";
	
	КонецЕсли;           
	
КонецПроцедуры // НастроитьВходитВСостав()

&НаСервере
Процедура НастроитьЦеныВнешние()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ЦеныВнешние.Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", Объект.Ссылка);
	
	Иначе
		
		ЦеныВнешние.ТекстЗапроса = 
		"";	
		
	КонецЕсли;	

КонецПроцедуры // НастроитьЦеныВнешние()

&НаСервере
Процедура НастроитьЦеныВнутренние()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ЦеныВнутренние.Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", Объект.Ссылка);
	
	Иначе
		
		ЦеныВнутренние.ТекстЗапроса = 
		"";	
		
	КонецЕсли;	

КонецПроцедуры // НастроитьЦеныВнутренние()

&НаСервере
Процедура НастроитьЦеныТендерные()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ЦеныТендерные.Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", Объект.Ссылка);
	
	Иначе
		
		ЦеныТендерные.ТекстЗапроса = 
		"";	
		
	КонецЕсли;	

КонецПроцедуры // НастроитьЦеныТендерные()

// Функция предназначена для проверки дублирования перед записью на сервере
//
&НаСервереБезКонтекста
Функция ПроверитьДублирование(Обозначение, ДокументНаПоставку, Ссылка)

	Результат = Новый Структура("ЕстьДубли, Описание", Ложь, "");
	
	//+ 17.03.2017 11:45:10 Савинов Александр Задача: Временное отключение до нормализации данных
	
	Возврат Результат;
	
	//- 17.03.2017 11:45:24 Савинов Александр Задача: Временное отключение до нормализации данных
	
	// Проверим, есть ли необходимость в проверке - т.е. заполнен ли у нас хоть один реквизит, по которому планируется проверка
	
	Если Не ЗначениеЗаполнено(Обозначение) И Не ЗначениеЗаполнено(ДокументНаПоставку) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Сформируем текст запроса. Реквизиты, по которым будет осуществляться проверка должны быть проиндексированы
	// Ищем первые 10 по каждому реквизиту, поскольку, если найдем больше, то система вспотеет, пока сообщение сформирует, 
	// а у пользователя все равно монитора не хватит и он не заценит
	
	МассивТекстаЗапроса = Новый Массив;
	
	Если ЗначениеЗаполнено(Обозначение) Тогда
		
		МассивТекстаЗапроса.Добавить("ВЫБРАТЬ ПЕРВЫЕ 10
		|	КаталогПредметовСнабжения.Ссылка,
		|	ИСТИНА КАК ДубльПоОбозначению,
		|	ЛОЖЬ КАК ДубльПоДокументуНаПоставку
		|ИЗ
		|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения");
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			
			МассивТекстаЗапроса.Добавить("
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабженияДоп
			|		ПО КаталогПредметовСнабжения.Ссылка = КаталогПредметовСнабженияДоп.Ссылка
			|			И (КаталогПредметовСнабженияДоп.Ссылка = &Ссылка)");		
			
		КонецЕсли;
		
		МассивТекстаЗапроса.Добавить("
		|ГДЕ
		|	КаталогПредметовСнабжения.Обозначение = &Обозначение");
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			
			МассивТекстаЗапроса.Добавить("
			|	И КаталогПредметовСнабженияДоп.Ссылка ЕСТЬ NULL ");	
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Обозначение", Обозначение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Обозначение) И ЗначениеЗаполнено(ДокументНаПоставку) Тогда
		
		МассивТекстаЗапроса.Добавить("
		|	
		|	ОБЪЕДИНИТЬ ВСЕ	
		|");	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументНаПоставку) Тогда
		
		МассивТекстаЗапроса.Добавить("ВЫБРАТЬ ПЕРВЫЕ 10
		|	КаталогПредметовСнабжения.Ссылка,
		|	ЛОЖЬ" + ?(ЗначениеЗаполнено(Обозначение), ",", "КАК ДубльПоОбозначению,") + " 
		|	ИСТИНА" + ?(ЗначениеЗаполнено(Обозначение), "", "КАК ДубльПоДокументуНаПоставку") + "
		|ИЗ
		|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения");
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			
			МассивТекстаЗапроса.Добавить("
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабженияДоп
			|		ПО КаталогПредметовСнабжения.Ссылка = КаталогПредметовСнабженияДоп.Ссылка
			|			И (КаталогПредметовСнабженияДоп.Ссылка = &Ссылка)");		
			
		КонецЕсли;
		
		МассивТекстаЗапроса.Добавить("
		|ГДЕ
		|	КаталогПредметовСнабжения.ДокументНаПоставку = &ДокументНаПоставку");
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			
			МассивТекстаЗапроса.Добавить("
			|	И КаталогПредметовСнабженияДоп.Ссылка ЕСТЬ NULL ");	
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументНаПоставку", ДокументНаПоставку);	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);	
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;	
		
	КонецЕсли;	
	
	// Дубли найдены - формируем сообщения для пользователя
	
	МассивТекстаСообщения = Новый Массив;
	
	МассивТекстаСообщения.Добавить("Обнаружены дубли:");
	МассивТекстаСообщения.Добавить(Символы.ПС);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		МассивТекстаСообщения.Добавить(Строка(Выборка.Ссылка));	
		
		Если Выборка.ДубльПоОбозначению Тогда
		
			МассивТекстаСообщения.Добавить(" - по обозначению");		
		
		ИначеЕсли Выборка.ДубльПоДокументуНаПоставку Тогда
		
			МассивТекстаСообщения.Добавить(" - по документу на поставку");			
		
		КонецЕсли;
		
		МассивТекстаСообщения.Добавить(Символы.ПС);
	
	КонецЦикла;
	
	МассивТекстаСообщения.Добавить("Запись запрещена!");
	
	Результат.ЕстьДубли = Истина;
	Результат.Описание = СтрСоединить(МассивТекстаСообщения);
	
	Возврат Результат;	

КонецФункции // ПроверитьДублирование()

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	Результат = Новый Структура("ЕстьЗамечания, Описание", Ложь, "");

	МассивЗамечаний = Новый Массив;
	
	Если Объект.ГодСнятияСПроизводства > 0 И Объект.ГодСнятияСПроизводства < 1000 Тогда
	
		МассивЗамечаний.Добавить("Год снятия с производства должен состоять из четырех цифр.");
		МассивЗамечаний.Добавить(Символы.ПС);	
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФНН) И СтрДлина(СокрЛП(Объект.ФНН)) < 13 Тогда //++ 17.11.2017 Веденеев П. //изменен формат хранения ФНН
		
		МассивЗамечаний.Добавить("Некорректно заполнен ФНН");
		МассивЗамечаний.Добавить(Символы.ПС);
	
	КонецЕсли;
	
	Если МассивЗамечаний.Количество() > 0 Тогда
		
		МассивЗамечаний.Удалить(МассивЗамечаний.Количество() - 1);
		Результат.Описание = СтрСоединить(МассивЗамечаний);
		Результат.ЕстьЗамечания = Истина;
		 
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПроверитьЗаполнениеРеквизитов()

&НаСервере
Функция ВернутьМассивПоставщиков()
	
	МассивПоставщиков = Новый Массив;
	
	Для каждого Строка Из Объект.ИзготовителиИПоставщики Цикл
	
		Если Строка.Поставщик Тогда
		
			МассивПоставщиков.Добавить(Строка.Контрагент);	
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Возврат МассивПоставщиков;
	
КонецФункции

&НаКлиенте
Процедура ОбозначениеПриИзменении(Элемент)
	
	Объект.ОбозначениеТранслитированное = ОбщиеФункцииКлиентСервер.ТранслитироватьОбозначениеРусВАнг(Объект.Обозначение);	
	
КонецПроцедуры

&НаКлиенте
Процедура ШифрПриИзменении(Элемент)
	Объект.ШифрТранслитированный = ОбщиеФункцииКлиентСервер.ТранслитироватьОбозначениеРусВАнг(Объект.Шифр);	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПереводаНаименования(ВозЗнач, ДопПараметры = Неопределено) Экспорт

	ПроверитьПереводы("Наименование");		

КонецПроцедуры // ОбработчикПереводаНаименования()

&НаКлиенте
Процедура ОбработчикПереводаПравилУпаковки(ВозЗнач, ДопПараметры = Неопределено) Экспорт

	ПроверитьПереводы("ПравилаУпаковкиТранспортировкиХранения");		

КонецПроцедуры // ОбработчикПереводаПравилУпаковки()

&НаКлиенте
Процедура ПрименяемостьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ссылка", ТекущиеДанные.Ссылка);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);	
	
	ТипВыбранногоЭлемента = ТекущиеДанные.Тип;
	
	Если ТипВыбранногоЭлемента = ТипГруппа Тогда
	
		ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаГруппы";
	
	ИначеЕсли ТипВыбранногоЭлемента = ТипИзделие Тогда
	
		ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия";	
	
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыЭлемента, ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ФННПриИзменении(Элемент)
	
	Объект.ФНН = СтрЗаменить(ФНН, "-", "");
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНаСервере(ВыбСтрока)
	
	Структура = Новый Структура;
	Структура.Вставить("Регистратор", ВыбСтрока.Регистратор);
	Структура.Вставить("ИмяФормы", 	  ВыбСтрока.Регистратор.Метаданные().Имя);
	Структура.Вставить("СсылкаПС", 	  ВыбСтрока.ПредметСнабжения);
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДокументаСЦенами(ВыбраннаяСтрока, ЭтоВнутренниеЦены)
	
	СтруктураПар = ПолучитьПараметрыНаСервере(ВыбраннаяСтрока);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СсылкаПС", СтруктураПар.СсылкаПС);
	ДопПараметры.Вставить("Ключ", 	  СтруктураПар.Регистратор);
	
	Если СтруктураПар.ИмяФормы = "Контракт" Тогда
		
		ИмяФормыДокумента = ?(ЭтоВнутренниеЦены, ".Форма.ФормаКонтрактаСПоставщиком", ".Форма.ФормаКонтрактаСЗаказчиком");
		
	Иначе
		
		ИмяФормыДокумента = ".Форма.ФормаДокумента";
		
	КонецЕсли;
	
	ОткрытьФорму("Документ." + СтруктураПар.ИмяФормы + ИмяФормыДокумента, ДопПараметры);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЦеныВнешниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуДокументаСЦенами(ВыбраннаяСтрока, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныВнутренниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуДокументаСЦенами(ВыбраннаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыИСрокиСлужбыПараметрУчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РесурсыИСрокиСлужбы.ТекущиеДанные;
	
	ТекущиеДанные.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(ТекущиеДанные.ПараметрУчета, "ЕдиницаИзмерения");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции

&НаКлиенте
Процедура ЗИПТребуемыеДляТОТекущегоВидаРаботЗИППриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗИПТребуемыеДляТОТекущегоВидаРабот.ТекущиеДанные; 
	
	ТекущиеДанные.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(ТекущиеДанные.ЗИП, "ЕдиницаИзмерения");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипСтрокаДляПоляNSN(УстановитьСсылку = Ложь)
	
	Массив = Новый Массив;
	Если УстановитьСсылку Тогда
		Массив.Добавить(Тип("СправочникСсылка.ПредметыСнабженияНАТО"));
		ОписаниеТипа = Новый ОписаниеТипов(Массив);
	Иначе
		Массив.Добавить(Тип("Строка"));
		КвСтроки = Новый КвалификаторыСтроки(13);
		ОписаниеТипа = Новый ОписаниеТипов(Массив,,,, КвСтроки);
	КонецЕсли; 
	
	Элементы.NSN.ОграничениеТипа = ОписаниеТипа;
	Объект.NSN = ОписаниеТипа.ПривестиЗначение(Объект.NSN);
	
КонецПроцедуры

&НаКлиенте
Процедура NSNНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьТипСтрокаДляПоляNSN(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура NSNОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьТипСтрокаДляПоляNSN();
	
КонецПроцедуры

&НаСервере
Функция НайтиПредметСнабженияНАТО(КодNSN)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредметыСнабженияНАТО.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПредметыСнабженияНАТО КАК ПредметыСнабженияНАТО
	|ГДЕ
	|	ПредметыСнабженияНАТО.КодNSN = &КодNSN";
	
	Запрос.УстановитьПараметр("КодNSN", СокрЛП(КодNSN));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ПредметыСнабженияНАТО.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура NSNИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СокрЛП(Текст) = "" Тогда
		Объект.NSN = "";
		УстановитьТипСтрокаДляПоляNSN();
	ИначеЕсли СтрДлина(Текст) = 13 Тогда
		Найденное = НайтиПредметСнабженияНАТО(Текст);
		Если Найденное.Пустая() Тогда
			Объект.NSN = Текст;
		Иначе
			Объект.NSN = Найденное;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыПредметыСнабженияНАТО()
	
	ТекNSN = Объект.NSN;
	Структура = Новый Структура;
	
	Если ТипЗнч(ТекNSN) = Тип("СправочникСсылка.ПредметыСнабженияНАТО") Тогда
		Структура.Вставить("Наименование", ТекNSN.ORIG_NAME_RU);
		Структура.Вставить("Обозначение",  ТекNSN.RN);
	КонецЕсли; 
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура NSNПриИзменении(Элемент)
	
	Структура = ПолучитьРеквизитыПредметыСнабженияНАТО();
	НовыеРеквизиты = Новый Структура;
	
	Для каждого Рекв Из Структура Цикл
		Если НЕ СокрЛП(Объект[Рекв.Ключ]) = Рекв.Значение Тогда
			НовыеРеквизиты.Вставить(Рекв.Ключ, Рекв.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	Если НовыеРеквизиты.Количество() > 0 Тогда
		
		ТекстВопроса = "Изменить значения реквизитов : ";
		Для каждого Рекв Из НовыеРеквизиты Цикл
			ТекстВопроса = ТекстВопроса + Рекв.Ключ + ", ";
		КонецЦикла; 
		ТекстВопроса = Лев(ТекстВопроса, СтрДлина(ТекстВопроса) - 2) + " из справочника NATO ?";
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("НовыеРеквизиты", НовыеРеквизиты);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПродолжение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60);
		 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого Рекв Из ДополнительныеПараметры.НовыеРеквизиты Цикл
			Объект[Рекв.Ключ] = Рекв.Значение;
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверкаНаличияЭлементаВТаблице(ИмяТабличнойЧасти, ИмяРеквизитаПоиска)
	
	ТекущиеДанные = Элементы[ИмяТабличнойЧасти].ТекущиеДанные; 
	
	Если Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяРеквизитаПоиска, ТекущиеДанные[ИмяРеквизитаПоиска])).Количество() > 1 Тогда
		
		Сообщить(ИмяРеквизитаПоиска + " уже есть в таблице!");
		ТекущиеДанные[ИмяРеквизитаПоиска] = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодыINCATПриИзменении(Элемент)
	
	Модифицированность = Истина; // Для того, чтобы пользователю было видно, что есть изменения, а при закрытии без записи было предупреждение 
	МодифицированностьКодыINCAT = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область Чертеж

&НаСервере
Процедура ПроверитьНаличиеЧертежа()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|		ПрисоединенныеФайлы.Чертеж КАК Чертеж
	|	ИЗ
	|		Справочник.КаталогПредметовСнабженияПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Чертеж";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Элементы.ДобавитьЧертеж.Видимость 	= Ложь;
		Элементы.ПоказатьЧертеж.Видимость 	= Истина;
		Элементы.ИзменитьЧертеж.Видимость 	= Истина;
		Элементы.УдалитьЧертеж.Видимость 	= Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Чертеж = Выборка.Ссылка;
	
	КонецЕсли;	

КонецПроцедуры // ПроверитьНаличиеЧертежа()

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Чертеж, УникальныйИдентификатор)

	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(Чертеж, УникальныйИдентификатор, Истина);	

КонецФункции // ПолучитьДанныеФайла()

#КонецОбласти

#Область РесурсыИСрокиСлужбы

// Процедура предназначена для заполнения таблицы ресурсов и сроков службы при создании формы
//
&НаСервере
Процедура ЗаполнитьРесурсыИСрокиСлужбы()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РесурсыИСрокиСлужбыПредметовСнабжения.Показатель,
	|	РесурсыИСрокиСлужбыПредметовСнабжения.ПараметрУчета,
	|	РесурсыИСрокиСлужбыПредметовСнабжения.Значение,
	|	РесурсыИСрокиСлужбыПредметовСнабжения.ЕдиницаИзмерения,
	|	РесурсыИСрокиСлужбыПредметовСнабжения.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	РегистрСведений.РесурсыИСрокиСлужбыПредметовСнабжения КАК РесурсыИСрокиСлужбыПредметовСнабжения
	|ГДЕ
	|	РесурсыИСрокиСлужбыПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	РесурсыИСрокиСлужбы.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры // ЗаполнитьРесурсыИСрокиСлужбы()

// Процедура предназначена для установки модифицированности при изменении ресурсов и сроков службы
//
&НаКлиенте
Процедура РесурсыИСрокиСлужбыПриИзменении(Элемент = Неопределено)
	
	Модифицированность = Истина; // Для того, чтобы пользователю было видно, что есть изменения, а при закрытии без записи было предупреждение 
	МодифицированностьРесурсовИСроковСлужбы = Истина; // Для того, чтобы при записи элемента записать изменения ресурсов и сроков службы	
	
	ЕстьСтрокиРесурсыИСрокиСлужбы = РесурсыИСрокиСлужбы.Количество() > 0;
	Элементы.РесурсыИСрокиСлужбыПереместитьСтрокуРесурсовИСроковСлужбыВверх.Доступность = ЕстьСтрокиРесурсыИСрокиСлужбы;
	Элементы.РесурсыИСрокиСлужбыПереместитьСтрокуРесурсовИСроковСлужбыВниз.Доступность = ЕстьСтрокиРесурсыИСрокиСлужбы;	
	
КонецПроцедуры

// Процедура предназначена для добавления строк ресурсов и сроков службы с заполнением порядкового номера
//
&НаКлиенте
Процедура РесурсыИСрокиСлужбыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	НоваяСтрока = РесурсыИСрокиСлужбы.Добавить();
	НоваяСтрока.ПорядковыйНомер = РесурсыИСрокиСлужбы.Количество();
	
	РесурсыИСрокиСлужбыПриИзменении();	
	
КонецПроцедуры

// Процедура предназначена для изменения порядковых номеров строк таблицы ресурсов и сроков службы и сортировки таблицы 
//
&НаКлиенте
Процедура ИзменитьПорядокСтрокТаблицыРесурсовИСроковСлужбы(ТекущийПорядковыйНомер, Направление)

	Для каждого Строка Из РесурсыИСрокиСлужбы Цикл
		
		Если Направление = "Вверх" Тогда
		
			Если Строка.ПорядковыйНомер = ТекущийПорядковыйНомер - 1 Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер + 1;
				
			ИначеЕсли Строка.ПорядковыйНомер = ТекущийПорядковыйНомер Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		ИначеЕсли Направление = "Вниз" Тогда
		
			Если Строка.ПорядковыйНомер = ТекущийПорядковыйНомер Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер + 1;
				
			ИначеЕсли Строка.ПорядковыйНомер = ТекущийПорядковыйНомер + 1 Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		КонецЕсли;	
	
	КонецЦикла;	
	
	РесурсыИСрокиСлужбы.Сортировать("ПорядковыйНомер");	
	
	РесурсыИСрокиСлужбыПриИзменении();

КонецПроцедуры // ИзменитьПорядокСтрокТаблицыРесурсовИСроковСлужбы()

&НаКлиенте
Процедура РесурсыИСрокиСлужбыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РесурсыИСрокиСлужбы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	ПорядковыйНомерУдаленнойСтрокиРесурсовИСроковСлужбы = ТекущиеДанные.ПорядковыйНомер;	
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыИСрокиСлужбыПослеУдаления(Элемент)
	
	Если Не ПорядковыйНомерУдаленнойСтрокиРесурсовИСроковСлужбы > РесурсыИСрокиСлужбы.Количество() Тогда
	
		Для каждого Строка Из РесурсыИСрокиСлужбы Цикл
		
			Если Строка.ПорядковыйНомер > ПорядковыйНомерУдаленнойСтрокиРесурсовИСроковСлужбы Тогда
			
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		КонецЦикла;	
	
	КонецЕсли;	
	
КонецПроцедуры

// Функция предназначена для проверки заполнения обязательных полей таблицы ресурсов и сроков службы
//
&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхПолейРесурсовИСроковСлужбы()

	Результат = Новый Структура("ЕстьЗамечания, Описание", Ложь, "");
	
	МассивЗамечаний = Новый Массив;
	
	Для каждого Строка Из РесурсыИСрокиСлужбы Цикл
	
		Если Не ЗначениеЗаполнено(Строка.Показатель) Тогда
		
			МассивЗамечаний.Добавить("Не заполнен показатель в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда
		
			МассивЗамечаний.Добавить("Не заполнено значение в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
		
			МассивЗамечаний.Добавить("Не заполнена единица измерения в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если МассивЗамечаний.Количество() > 0 Тогда
	
		МассивЗамечаний.Удалить(МассивЗамечаний.Количество() - 1);
		Результат.ЕстьЗамечания = Истина;
		Результат.Описание = СтрСоединить(МассивЗамечаний);
	
	КонецЕсли;	
	
	Возврат Результат;	

КонецФункции // ПроверитьЗаполнениеОбязательныхПолейРесурсовИСроковСлужбы()

// Функция предназначена для проверки уникальности строк таблицы ресурсов и сроков службы по ключу: Показатель + Параметр учета
//
&НаСервереБезКонтекста
Функция ПроверитьРесурсыИСрокиСлужбы(ТаблицаРесурсовИСроковСлужбы)

	Результат = Новый Структура("ЗаполнениеКорректно, Описание", Ложь, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаРесурсовИСроковСлужбы.Показатель,
	|	ТаблицаРесурсовИСроковСлужбы.ПараметрУчета,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТ_ТаблицаРесурсовИСроковСлужбы
	|ИЗ
	|	&ТаблицаРесурсовИСроковСлужбы КАК ТаблицаРесурсовИСроковСлужбы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРесурсовИСроковСлужбы.Показатель,
	|	ВТ_ТаблицаРесурсовИСроковСлужбы.ПараметрУчета
	|ИЗ
	|	ВТ_ТаблицаРесурсовИСроковСлужбы КАК ВТ_ТаблицаРесурсовИСроковСлужбы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаРесурсовИСроковСлужбы.Показатель,
	|	ВТ_ТаблицаРесурсовИСроковСлужбы.ПараметрУчета
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_ТаблицаРесурсовИСроковСлужбы.Счетчик) > 1";
	
	Запрос.УстановитьПараметр("ТаблицаРесурсовИСроковСлужбы", ТаблицаРесурсовИСроковСлужбы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.ЗаполнениеКорректно = Истина;
		Возврат Результат;	
	
	КонецЕсли;
	
	МассивТекстаСообщения = Новый Массив;
	
	МассивТекстаСообщения.Добавить("В таблице ресурсов и сроков службы содержатся строки с одинаковыми показателями и параметрами учета:");
	МассивТекстаСообщения.Добавить(Символы.ПС);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		МассивТекстаСообщения.Добавить(Строка(Выборка.Показатель));
		
		МассивТекстаСообщения.Добавить(" (" + Строка(Выборка.ПараметрУчета) + ")");	
		
		МассивТекстаСообщения.Добавить(",");
	
	КонецЦикла;
	
	МассивТекстаСообщения.Удалить(МассивТекстаСообщения.Количество() - 1);
	
	Результат.Описание = СтрСоединить(МассивТекстаСообщения);
	Возврат Результат;	

КонецФункции // ПроверитьРесурсыИСрокиСлужбы()

#КонецОбласти

#Область РегламентТО

// Процедура предназначена для заполнения таблицы регламента ТО при создании формы
//
&НаСервере
Процедура ЗаполнитьРегламентТО()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РегламентТОПредметовСнабжения.ВидРабот,
	|	РегламентТОПредметовСнабжения.Периодичность,
	|	РегламентТОПредметовСнабжения.Продолжительность,
	|	РегламентТОПредметовСнабжения.ТрудоемкостьРаботы,
	|	РегламентТОПредметовСнабжения.ТрудоемкостьСопутствующихРабот,
	|	РегламентТОПредметовСнабжения.ПорядковыйНомер КАК ПорядковыйНомер,
	|	РегламентТОПредметовСнабжения.ЕдиницаИзмеренияПериодичности,
	|	РегламентТОПредметовСнабжения.ЕдиницаИзмеренияПродолжительности
	|ИЗ
	|	РегистрСведений.РегламентТОПредметовСнабжения КАК РегламентТОПредметовСнабжения
	|ГДЕ
	|	РегламентТОПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	РегламентТО.Загрузить(РезультатЗапроса.Выгрузить());	

КонецПроцедуры // ЗаполнитьРегламентТО()

// Процедура предназначена для установки модифицированности при изменении регламента ТО
//
&НаКлиенте
Процедура РегламентТОПриИзменении(Элемент = Неопределено)
	
	Модифицированность = Истина; // Для того, чтобы пользователю было видно, что есть изменения, а при закрытии без записи было предупреждение 
	МодифицированностьРегламентаТО = Истина; // Для того, чтобы при записи элемента записать изменения регламента ТО	
	
	ЕстьСтрокиРегламентТО = РегламентТО.Количество() > 0;
	Элементы.РегламентТОПереместитьСтрокуРегламентаТОВверх.Доступность = ЕстьСтрокиРегламентТО;
	Элементы.РегламентТОПереместитьСтрокуРегламентаТОВниз.Доступность = ЕстьСтрокиРегламентТО;	
	
КонецПроцедуры

// Процедура предназначена для добавления строк регламента ТО с заполнением порядкового номера
//
&НаКлиенте
Процедура РегламентТОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	НоваяСтрока = РегламентТО.Добавить();
	НоваяСтрока.ПорядковыйНомер = РегламентТО.Количество();
	
	РегламентТОПриИзменении();
	
	Элемент.ТекущаяСтрока = НоваяСтрока.ПорядковыйНомер - 1;		
	
КонецПроцедуры

// Процедура предназначена для изменения порядковых номеров строк таблицы регламента ТО и сортировки таблицы 
//
&НаКлиенте
Процедура ИзменитьПорядокСтрокТаблицыРегламентаТО(ТекущийПорядковыйНомер, Направление)

	Для каждого Строка Из РегламентТО Цикл
		
		Если Направление = "Вверх" Тогда
		
			Если Строка.ПорядковыйНомер = ТекущийПорядковыйНомер - 1 Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер + 1;
				
			ИначеЕсли Строка.ПорядковыйНомер = ТекущийПорядковыйНомер Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		ИначеЕсли Направление = "Вниз" Тогда
		
			Если Строка.ПорядковыйНомер = ТекущийПорядковыйНомер Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер + 1;
				
			ИначеЕсли Строка.ПорядковыйНомер = ТекущийПорядковыйНомер + 1 Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		КонецЕсли;	
	
	КонецЦикла;	
	
	РегламентТО.Сортировать("ПорядковыйНомер");	
	
	РегламентТОПриИзменении();	

КонецПроцедуры // ИзменитьПорядокСтрокТаблицыРегламентаТО()

&НаКлиенте
Процедура РегламентТОПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РегламентТО.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	ПорядковыйНомерУдаленнойСтрокиРегламентаТО = ТекущиеДанные.ПорядковыйНомер;
	
	ВидРаботУдаленнойСтрокиРегламентаТО = ТекущиеДанные.ВидРабот;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентТОПослеУдаления(Элемент)
	
	Если Не ПорядковыйНомерУдаленнойСтрокиРегламентаТО > РегламентТО.Количество() Тогда
	
		Для каждого Строка Из РегламентТО Цикл
		
			Если Строка.ПорядковыйНомер > ПорядковыйНомерУдаленнойСтрокиРегламентаТО Тогда
			
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		КонецЦикла;	
	
	КонецЕсли;
	
	УдалитьЗИПТребуемыеДляТОДляВида(ВидРаботУдаленнойСтрокиРегламентаТО);
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентТОПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РегламентТО.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботДобавить.Доступность = Ложь;
		Возврат;	
	
	КонецЕсли;
	
	Если МодифицированностьЗИПДляТОТекущегоВидаРабот Тогда
	
		ИзменитьЗИПТребуемыеДляТО();		
	
	КонецЕсли;
	
	МодифицированностьЗИПДляТОТекущегоВидаРабот = Ложь;
	
	ТекущийВидРабот = ТекущиеДанные.ВидРабот;
	
	Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботДобавить.Доступность = ЗначениеЗаполнено(ТекущийВидРабот);
	
	ЗаполнитьЗИПТребуемыеДляТОТекущегоВидаРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентТОВидРаботПриИзменении(Элемент)
	
	ТекущийВидРабот = Элементы.РегламентТО.ТекущиеДанные.ВидРабот;
	
	Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботДобавить.Доступность = ЗначениеЗаполнено(ТекущийВидРабот);
	
КонецПроцедуры

// Функция предназначена для проверки заполнения обязательных полей таблицы регламента ТО
//
&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхПолейРегламентаТО()

	Результат = Новый Структура("ЕстьЗамечания, Описание", Ложь, "");
	
	МассивЗамечаний = Новый Массив;
	
	Для каждого Строка Из РегламентТО Цикл
	
		Если Не ЗначениеЗаполнено(Строка.ВидРабот) Тогда
		
			МассивЗамечаний.Добавить("Не заполнен вид работ в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Периодичность) Тогда
		
			МассивЗамечаний.Добавить("Не заполнена периодичность в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ЕдиницаИзмеренияПериодичности) Тогда
		
			МассивЗамечаний.Добавить("Не заполнена единица измерения периодичности в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Продолжительность) Тогда
		
			МассивЗамечаний.Добавить("Не заполнена продолжительность в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ЕдиницаИзмеренияПродолжительности) Тогда
		
			МассивЗамечаний.Добавить("Не заполнена единица измерения продолжительности в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ТрудоемкостьРаботы) Тогда
		
			МассивЗамечаний.Добавить("Не заполнена трудоемкость работы в строке " + Строка(Строка.ПорядковыйНомер));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если МассивЗамечаний.Количество() > 0 Тогда
	
		МассивЗамечаний.Удалить(МассивЗамечаний.Количество() - 1);
		Результат.ЕстьЗамечания = Истина;
		Результат.Описание = СтрСоединить(МассивЗамечаний);
	
	КонецЕсли;	
	
	Возврат Результат;	

КонецФункции // ПроверитьЗаполнениеОбязательныхПолейРегламентаТО()

// Функция предназначена для проверки уникальности строк таблицы регламента ТО по ключу: Вид работ
//
&НаСервереБезКонтекста
Функция ПроверитьРегламентТО(ТаблицаРегламентаТО)

	Результат = Новый Структура("ЗаполнениеКорректно, Описание", Ложь, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаРегламентаТО.ВидРабот,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТ_ТаблицаРегламентаТО
	|ИЗ
	|	&ТаблицаРегламентаТО КАК ТаблицаРегламентаТО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРегламентаТО.ВидРабот
	|ИЗ
	|	ВТ_ТаблицаРегламентаТО КАК ВТ_ТаблицаРегламентаТО
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаРегламентаТО.ВидРабот
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_ТаблицаРегламентаТО.Счетчик) > 1";
	
	Запрос.УстановитьПараметр("ТаблицаРегламентаТО", ТаблицаРегламентаТО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.ЗаполнениеКорректно = Истина;
		Возврат Результат;	
	
	КонецЕсли;
	
	МассивТекстаСообщения = Новый Массив;
	
	МассивТекстаСообщения.Добавить("В таблице регламента ТО содержатся строки с одинаковыми видами работ:");
	МассивТекстаСообщения.Добавить(Символы.ПС);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		МассивТекстаСообщения.Добавить(Строка(Выборка.ВидРабот));
		
		МассивТекстаСообщения.Добавить(",");
	
	КонецЦикла;
	
	МассивТекстаСообщения.Удалить(МассивТекстаСообщения.Количество() - 1);
	
	Результат.Описание = СтрСоединить(МассивТекстаСообщения);
	Возврат Результат;	

КонецФункции // ПроверитьРесурсыИСрокиСлужбы()

#КонецОбласти

#Область ЗИПТребуемыеДляТО

// Процедура предназначена для заполнения таблицы ЗИП требуемых для ТО при создании формы
//
&НаСервере
Процедура ЗаполнитьЗИПТребуемыеДляТО()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ВидРабот,
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ЗИП,
	|	ЗИПТребуемыеДляТОПредметовСнабжения.Количество,
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЗИПТребуемыеДляТОПредметовСнабжения КАК ЗИПТребуемыеДляТОПредметовСнабжения
	|ГДЕ
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	ЗИПТребуемыеДляТО.Загрузить(РезультатЗапроса.Выгрузить());	

КонецПроцедуры // ЗаполнитьЗИПТребуемыеДляТО()

// Процедура предназначена для удаления из таблицы требуемых ЗИП для ТО строк, относящихся к определенному виду работ
//
&НаКлиенте
Процедура УдалитьЗИПТребуемыеДляТОДляВида(ВидРабот)

	КоличествоСтрок = ЗИПТребуемыеДляТО.Количество();
	
	Для Н = 1 По КоличествоСтрок Цикл
	
		Если ЗИПТребуемыеДляТО.Получить(КоличествоСтрок - Н).ВидРабот = ВидРабот Тогда
		
			ЗИПТребуемыеДляТО.Удалить(КоличествоСтрок - Н);		
		
		КонецЕсли;
	
	КонецЦикла;	

КонецПроцедуры // УдалитьЗИПТребуемыеДляТОДляВида()

// Процедура предназначена для синхронизации основной таблицы ЗИП для ТО с таблицей, выводимой на экран для текущего вида работ
//
&НаКлиенте
Процедура ИзменитьЗИПТребуемыеДляТО()
	
	// Удаляем строки с текущим видом работ

	УдалитьЗИПТребуемыеДляТОДляВида(ТекущийВидРабот);
	
	// Добавляем новые строки с текущим видом работ
	
	Для каждого Строка Из ЗИПТребуемыеДляТОТекущегоВидаРабот Цикл
	
		НоваяСтрока = ЗИПТребуемыеДляТО.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВидРабот = ТекущийВидРабот;
	
	КонецЦикла;

КонецПроцедуры // ИзменитьЗИПТребуемыеДляТО()

// Процедура предназначена для обновления выводимых на экран ЗИП для ТО для текущего вида работ
//
&НаКлиенте
Процедура ЗаполнитьЗИПТребуемыеДляТОТекущегоВидаРабот()

	ЗИПТребуемыеДляТОТекущегоВидаРабот.Очистить();
	
	Для каждого Строка Из ЗИПТребуемыеДляТО Цикл
	
		Если Строка.ВидРабот = ТекущийВидРабот Тогда
		
			НоваяСтрока = ЗИПТребуемыеДляТОТекущегоВидаРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		КонецЕсли;	
	
	КонецЦикла;
	
	ЗИПТребуемыеДляТОТекущегоВидаРабот.Сортировать("ПорядковыйНомер");
	
	Если ЭтоИностанныйЗаказчик Или ЭтоСпециалистБлокаЗакупок Или 
		(ПровереноОСК И (ЭтоПредставительПроектантаКорабля Или ЭтоПредставительСтроителяКорабля)) Тогда
		
		Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботПереместитьСтрокуЗИПДляТОВверх.Доступность = Ложь;
		Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботПереместитьСтрокуЗИПДляТОВниз.Доступность = Ложь;	
		
	Иначе
		
		ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот = ЗИПТребуемыеДляТОТекущегоВидаРабот.Количество() > 0;
		Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботПереместитьСтрокуЗИПДляТОВверх.Доступность = ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот;
		Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботПереместитьСтрокуЗИПДляТОВниз.Доступность = ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот;	
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьЗИПТребуемыеДляТОТекущегоВидаРабот()

// Процедура предназначена для установки модифицированности при изменении ЗИП требуемых для ТО
//
&НаКлиенте
Процедура ЗИПТребуемыеДляТОТекущегоВидаРаботПриИзменении(Элемент = Неопределено)
	
	Модифицированность = Истина; // Для того, чтобы пользователю было видно, что есть изменения, а при закрытии без записи было предупреждение 
	МодифицированностьЗИПДляТО = Истина; // Для того, чтобы при записи элемента записать изменения ЗИП требуемых для ТО
	МодифицированностьЗИПДляТОТекущегоВидаРабот = Истина; // Для того, чтобы перенести изменения в общую таблицу ЗИП требуемых для ТО
	
	ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот = ЗИПТребуемыеДляТОТекущегоВидаРабот.Количество() > 0;
	Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботПереместитьСтрокуЗИПДляТОВверх.Доступность = ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот;
	Элементы.ЗИПТребуемыеДляТОТекущегоВидаРаботПереместитьСтрокуЗИПДляТОВниз.Доступность = ЕстьСтрокиЗИПТребуемыеДляТОТекущегоВидаРабот;	
	
КонецПроцедуры

// Процедура предназначена для добавления строк ЗИП требуемых для ТО с заполнением порядкового номера
//
&НаКлиенте
Процедура ЗИПТребуемыеДляТОТекущегоВидаРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	НоваяСтрока = ЗИПТребуемыеДляТОТекущегоВидаРабот.Добавить();
	НоваяСтрока.ПорядковыйНомер = ЗИПТребуемыеДляТОТекущегоВидаРабот.Количество();
	
	ЗИПТребуемыеДляТОТекущегоВидаРаботПриИзменении();	
	
КонецПроцедуры

// Процедура предназначена для изменения порядковых номеров строк таблицы ЗИП для ТО и сортировки таблицы 
//
&НаКлиенте
Процедура ИзменитьПорядокСтрокТаблицыЗИПДляТО(ТекущийПорядковыйНомер, Направление)

	Для каждого Строка Из ЗИПТребуемыеДляТОТекущегоВидаРабот Цикл
		
		Если Направление = "Вверх" Тогда
		
			Если Строка.ПорядковыйНомер = ТекущийПорядковыйНомер - 1 Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер + 1;
				
			ИначеЕсли Строка.ПорядковыйНомер = ТекущийПорядковыйНомер Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		ИначеЕсли Направление = "Вниз" Тогда
		
			Если Строка.ПорядковыйНомер = ТекущийПорядковыйНомер Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер + 1;
				
			ИначеЕсли Строка.ПорядковыйНомер = ТекущийПорядковыйНомер + 1 Тогда
				
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		КонецЕсли;	
	
	КонецЦикла;	
	
	ЗИПТребуемыеДляТОТекущегоВидаРабот.Сортировать("ПорядковыйНомер");	
	
	ЗИПТребуемыеДляТОТекущегоВидаРаботПриИзменении();	

КонецПроцедуры // ИзменитьПорядокСтрокТаблицыЗИПДляТО()

&НаКлиенте
Процедура ЗИПТребуемыеДляТОТекущегоВидаРаботПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ЗИПТребуемыеДляТОТекущегоВидаРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	ПорядковыйНомерУдаленнойСтрокиЗипДляТО = ТекущиеДанные.ПорядковыйНомер;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗИПТребуемыеДляТОТекущегоВидаРаботПослеУдаления(Элемент)
	
	Если Не ПорядковыйНомерУдаленнойСтрокиЗипДляТО > РегламентТО.Количество() Тогда
	
		Для каждого Строка Из РегламентТО Цикл
		
			Если Строка.ПорядковыйНомер > ПорядковыйНомерУдаленнойСтрокиЗипДляТО Тогда
			
				Строка.ПорядковыйНомер = Строка.ПорядковыйНомер - 1;	
			
			КонецЕсли;	
		
		КонецЦикла;	
	
	КонецЕсли;	
	
КонецПроцедуры

// Функция предназначена для проверки заполнения обязательных полей таблицы ЗИП для ТО
//
&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхПолейЗИПДляТО()

	Результат = Новый Структура("ЕстьЗамечания, Описание", Ложь, "");
	
	МассивЗамечаний = Новый Массив;
	
	Для каждого Строка Из ЗИПТребуемыеДляТО Цикл
	
		Если Не ЗначениеЗаполнено(Строка.ЗИП) Тогда
		
			МассивЗамечаний.Добавить("Не заполнен ЗИП в строке " + Строка(Строка.ПорядковыйНомер) + " вида работ " + Строка(Строка.ВидРабот));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.Количество) Тогда
		
			МассивЗамечаний.Добавить("Не заполнено количество в строке " + Строка(Строка.ПорядковыйНомер) + " вида работ " + Строка(Строка.ВидРабот));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
		
			МассивЗамечаний.Добавить("Не заполнена единица измерения в строке " + Строка(Строка.ПорядковыйНомер) + " вида работ " + Строка(Строка.ВидРабот));
			МассивЗамечаний.Добавить(Символы.ПС);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если МассивЗамечаний.Количество() > 0 Тогда
	
		МассивЗамечаний.Удалить(МассивЗамечаний.Количество() - 1);
		Результат.ЕстьЗамечания = Истина;
		Результат.Описание = СтрСоединить(МассивЗамечаний);
	
	КонецЕсли;	
	
	Возврат Результат;	

КонецФункции // ПроверитьЗаполнениеОбязательныхПолейЗИПДляТО()

// Функция предназначена для проверки уникальности строк таблицы ЗИП для ТО по ключу: Вид работ + ЗИП
//
&НаСервереБезКонтекста
Функция ПроверитьЗИПТребуемыеДляТО(ТаблицаЗИПТребуемыхДляТО)

	Результат = Новый Структура("ЗаполнениеКорректно, Описание", Ложь, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаЗИПТребуемыхДляТО.ВидРабот,
	|	ТаблицаЗИПТребуемыхДляТО.ЗИП,
	|	1 КАК Счетчик
	|ПОМЕСТИТЬ ВТ_ТаблицаЗИПТребуемыхДляТО
	|ИЗ
	|	&ТаблицаЗИПТребуемыхДляТО КАК ТаблицаЗИПТребуемыхДляТО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаЗИПТребуемыхДляТО.ВидРабот КАК ВидРабот,
	|	ВТ_ТаблицаЗИПТребуемыхДляТО.ЗИП
	|ИЗ
	|	ВТ_ТаблицаЗИПТребуемыхДляТО КАК ВТ_ТаблицаЗИПТребуемыхДляТО
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаЗИПТребуемыхДляТО.ВидРабот,
	|	ВТ_ТаблицаЗИПТребуемыхДляТО.ЗИП
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_ТаблицаЗИПТребуемыхДляТО.Счетчик) > 1";
	
	Запрос.УстановитьПараметр("ТаблицаЗИПТребуемыхДляТО", ТаблицаЗИПТребуемыхДляТО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.ЗаполнениеКорректно = Истина;
		Возврат Результат;	
	
	КонецЕсли;
	
	МассивТекстаСообщения = Новый Массив;
	
	МассивТекстаСообщения.Добавить("В таблице ЗИП, требуемых для ТО, содержатся строки с одинаковыми видами работ и ЗИП:");
	МассивТекстаСообщения.Добавить(Символы.ПС);
	
	ВыборкаВидыРабот = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		МассивТекстаСообщения.Добавить("Вид работ - ");
		МассивТекстаСообщения.Добавить(Строка(Выборка.ВидРабот));
		МассивТекстаСообщения.Добавить(", ЗИП - ");
		МассивТекстаСообщения.Добавить(Строка(Выборка.ЗИП));
		МассивТекстаСообщения.Добавить(",");
	
	КонецЦикла;
	
	МассивТекстаСообщения.Удалить(МассивТекстаСообщения.Количество() - 1);
	
	Результат.Описание = СтрСоединить(МассивТекстаСообщения);
	Возврат Результат;	

КонецФункции // ПроверитьРесурсыИСрокиСлужбы()

#КонецОбласти

#Область ОбработкаДинамическихСписковТабличныхЧастей

&НаКлиенте
Процедура ХарактеристикиСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИзменитьЭлементТабличнойЧасти("Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзготовителиИПоставщикиСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИзменитьЭлементТабличнойЧасти("ИзготовителиИПоставщики");
	
КонецПроцедуры

&НаКлиенте
Процедура АналогиСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИзменитьЭлементТабличнойЧасти("Аналоги");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементТабличнойЧасти(ИмяТабличнойЧасти)
	
	Если Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьХарактеристикуДалее", ЭтаФорма, Новый Структура("ИмяТабличнойЧасти, Действие", ИмяТабличнойЧасти, "Добавление"));
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед добавлением элемента табличной части необходимо записать документ. Продолжить?';"), РежимДиалогаВопрос.ДаНет, 0);
 
	Иначе
		
		ДобавитьЭлементТабличнойЧастиОткрытьФормуВвода(ИмяТабличнойЧасти);
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементТабличнойЧасти(ИмяТабличнойЧасти)
	
	Если Модифицированность Тогда
		
    	Оповещение = Новый ОписаниеОповещения("ИзменитьХарактеристикуДалее", ЭтаФорма, Новый Структура("ИмяТабличнойЧасти, Действие", ИмяТабличнойЧасти, "Изменение"));
    	ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед изменением элемента табличной части необходимо записать документ. Продолжить?';"), РежимДиалогаВопрос.ДаНет, 0);
 
	Иначе
		
		ИзменитьЭлементТабличнойЧастиОткрытьФормуВвода(ИмяТабличнойЧасти);
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементТабличнойЧасти(ИмяТабличнойЧасти)
	
	Если Модифицированность Тогда
		
    	Оповещение = Новый ОписаниеОповещения("ИзменитьХарактеристикуДалее", ЭтаФорма, Новый Структура("ИмяТабличнойЧасти, Действие", ИмяТабличнойЧасти, "Удаление"));
    	ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед изменением элемента табличной части необходимо записать документ. Продолжить?';"), РежимДиалогаВопрос.ДаНет, 0);
 
	Иначе
		
		УдалитьЭлементТабличнойЧастиДалее(ИмяТабличнойЧасти);
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьХарактеристикуДалее(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Записать();
	
	Если НЕ Модифицированность Тогда

		Если ДополнительныеПараметры.Действие = "Добавление" Тогда
    		ДобавитьЭлементТабличнойЧастиОткрытьФормуВвода(ДополнительныеПараметры.ИмяТабличнойЧасти);
		ИначеЕсли ДополнительныеПараметры.Действие = "Изменение" Тогда
			ИзменитьЭлементТабличнойЧастиОткрытьФормуВвода(ДополнительныеПараметры.ИмяТабличнойЧасти);
		Иначе
			УдалитьЭлементТабличнойЧастиДалее(ДополнительныеПараметры.ИмяТабличнойЧасти);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементТабличнойЧастиОткрытьФормуВвода(ИмяТабличнойЧасти)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЭлементТабличнойЧастиСохранение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("ИмяТабличнойЧасти, ПредметСнабжения", ИмяТабличнойЧасти, Объект.Ссылка);
	
	Если ИмяТабличнойЧасти = "Характеристики" Тогда
		
		ВыбранныеХарактеристики = Новый Массив;
		Для Каждого СтрокаХарактеристик Из Объект.Характеристики Цикл
			
			ВыбранныеХарактеристики.Добавить(СтрокаХарактеристик.Характеристика);
						
		КонецЦикла;
				
		ПараметрыОткрытия.Вставить("ВыбранныеХарактеристики", 	ВыбранныеХарактеристики);
		
	ИначеЕсли ИмяТабличнойЧасти = "ИзготовителиИПоставщики" Тогда
		
		ВыбранныеПоставщики = Новый Массив;
		Для Каждого СтрокаИзготовителиИПоставщики Из Объект.ИзготовителиИПоставщики Цикл
			
			ВыбранныеПоставщики.Добавить(СтрокаИзготовителиИПоставщики.Контрагент);
						
		КонецЦикла;
				
		ПараметрыОткрытия.Вставить("ВыбранныеПоставщики", 	ВыбранныеПоставщики);
	
	КонецЕсли;	

	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаПозицииТабличнойЧасти", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
    
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементТабличнойЧастиОткрытьФормуВвода(ИмяТабличнойЧасти)
	
	ТекущиеДанные = Элементы[ИмяТабличнойЧасти+"Список"].ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура("ИмяТабличнойЧасти, ПредметСнабжения", ИмяТабличнойЧасти, Объект.Ссылка);
	
	Если ИмяТабличнойЧасти = "Характеристики" Тогда
		
		ПараметрыОткрытия.Вставить("Характеристика", 			ТекущиеДанные.Характеристика);
		ПараметрыОткрытия.Вставить("Значение", 					ТекущиеДанные.Значение);
		ПараметрыОткрытия.Вставить("ЕдиницаИзмерения", 			ТекущиеДанные.ЕдиницаИзмерения);
		ПараметрыОткрытия.Вставить("Основная", 					ТекущиеДанные.Основная);
		ПараметрыОткрытия.Вставить("ОтображениеДляЗаказчика", 	ТекущиеДанные.ОтображениеДляЗаказчика);
		
		ВыбранныеХарактеристики = Новый Массив;
		Для Каждого СтрокаХарактеристик Из Объект.Характеристики Цикл
			
			Если СтрокаХарактеристик.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
				ВыбранныеХарактеристики.Добавить(СтрокаХарактеристик.Характеристика);
			КонецЕсли;
						
		КонецЦикла;
				
		ПараметрыОткрытия.Вставить("ВыбранныеХарактеристики", 	ВыбранныеХарактеристики);
		
	ИначеЕсли ИмяТабличнойЧасти = "Аналоги" Тогда
		
		ПараметрыОткрытия.Вставить("Аналог", 					ТекущиеДанные.Аналог);
		ПараметрыОткрытия.Вставить("ТипЗамены", 				ТекущиеДанные.ТипЗамены);
		
	ИначеЕсли ИмяТабличнойЧасти = "ИзготовителиИПоставщики" Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", 				ТекущиеДанные.Контрагент);
		ПараметрыОткрытия.Вставить("Поставщик", 				ТекущиеДанные.Поставщик);
		ПараметрыОткрытия.Вставить("Разработчик", 				ТекущиеДанные.Разработчик);
		ПараметрыОткрытия.Вставить("Изготовитель", 				ТекущиеДанные.Изготовитель);
		ПараметрыОткрытия.Вставить("СрокиИзготовления", 		ТекущиеДанные.СрокиИзготовления);
		ПараметрыОткрытия.Вставить("ЕдиницаИзмерения", 			ТекущиеДанные.ЕдиницаИзмерения);
		ПараметрыОткрытия.Вставить("СостояниеПроизводства", 	ТекущиеДанные.СостояниеПроизводства);
		
		ВыбранныеПоставщики = Новый Массив;
		Для Каждого СтрокаИзготовителиИПоставщики Из Объект.ИзготовителиИПоставщики Цикл
			
			Если СтрокаИзготовителиИПоставщики.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
				ВыбранныеПоставщики.Добавить(СтрокаИзготовителиИПоставщики.Контрагент);
			КонецЕсли;
						
		КонецЦикла;
				
		ПараметрыОткрытия.Вставить("ВыбранныеПоставщики", 	ВыбранныеПоставщики);

	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьЭлементТабличнойЧастиСохранение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаПозицииТабличнойЧасти", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементТабличнойЧастиСохранение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		НоваяСтрока = Объект[Результат.ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЭлементТабличнойЧастиСохранение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные = Элементы[Результат.ИмяТабличнойЧасти+"Список"].ТекущиеДанные;
		МассивСтрок = Объект[Результат.ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("НомерСтроки", ТекущиеДанные.НомерСтроки));
		
		ЗаполнитьЗначенияСвойств(МассивСтрок[0], Результат);
		
		Записать();
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементТабличнойЧастиДалее(ИмяТабличнойЧасти) Экспорт
	
	ТекущиеДанные = Элементы[ИмяТабличнойЧасти+"Список"].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("НомерСтроки", ТекущиеДанные.НомерСтроки));
		
		Объект[ИмяТабличнойЧасти].Удалить(МассивСтрок[0]);
		
		Записать();
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДляДинамическихСписковТабличныхЧастей()
	
	Характеристики.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	ИзготовителиИПоставщики.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	Аналоги.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеСпискиТабличныхЧастей()
	
	УстановитьПараметрыДляДинамическихСписковТабличныхЧастей();
			
	Элементы.ХарактеристикиСписок.Обновить();
	Элементы.АналогиСписок.Обновить();
	Элементы.ИзготовителиИПоставщикиСписок.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СпецификацияДинамическийСписок

&НаСервере
Процедура УстановитьОтборДляСпецификацииДинамическийСписок()
	
	СпецификацияДинамическийСписок.Отбор.Элементы.Очистить();
	
	ОтборСписка = СпецификацияДинамическийСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	ОтборСписка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ОтборСписка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредметСнабжения"); 
	ОтборСписка.Использование = Истина; 
	ОтборСписка.ПравоеЗначение = Объект.Ссылка;  
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияДинамическийСписокПередНачаломДобавленияДалее(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Записать();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ПараметрыОткрытия = Новый Структура("ПредметСнабжения", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.СпецификацииПС.Форма.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонеЦЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПронумероватьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПеренумероватьСпецификацию(Объект.Ссылка);
		Элементы.СпецификацияДинамическийСписок.Обновить();
		
	Иначе
		
		ПоказатьПредупреждение(, "Действие отменено");
		Возврат;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияДинамическийСписокПриИзменении(Элемент)
	
	СпецификацияИзменена = Истина;
	ДобавитьВОчередьАктуализацииПС(Объект.Ссылка, СпецификацияИзменена);	
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияДинамическийСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	МассивКонструктораКлюча = Новый Массив;
	МассивКонструктораКлюча.Добавить(Новый Структура("ПредметСнабжения, СоставляющаяЧасть", 
									Объект.Ссылка, Элементы.СпецификацияДинамическийСписок.ТекущиеДанные.СоставляющаяЧасть));

	КлючЗаписиРегистра = Новый ("РегистрСведенийКлючЗаписи.СпецификацииПС", МассивКонструктораКлюча);
	
	ОткрытьФорму("РегистрСведений.СпецификацииПС.Форма.ФормаЗаписи", Новый Структура("Ключ, ПредметСнабжения", КлючЗаписиРегистра, Объект.Ссылка), ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПеренумероватьСпецификацию(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПС.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПС.ЗИП КАК ЗИП,
	|	ВЫБОР
	|		КОГДА СпецификацииПС.НомерПозиции = 0
	|			ТОГДА 999999
	|		ИНАЧЕ СпецификацииПС.НомерПозиции
	|	КОНЕЦ КАК НомерПозиции
	|ИЗ
	|	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО СпецификацииПС.СоставляющаяЧасть = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|	СпецификацииПС.ПредметСнабжения = &ПредметСнабжения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПозиции,
	|	КаталогПредметовСнабжения.Наименование";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ПорядковыйНомер = 1;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		СтрокаТаблицы.НомерПозиции = ПорядковыйНомер;
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;

	НаборЗаписей = РегистрыСведений.СпецификацииПС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредметСнабжения.Установить(ПредметСнабжения);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Отбор = Новый Структура("ПредметСнабжения, СоставляющаяЧасть, ЗИП");
		ЗаполнитьЗначенияСвойств(Отбор, Запись);
		НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Запись.НомерПозиции = НайденныеСтроки[0].НомерПозиции;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПорядокСоставляющихЧастейСпецификацииВДинамическомСписке(ПредметСнабжения, ТекущийНомерПозиции, Направление)

	НаборЗаписей = РегистрыСведений.СпецификацииПС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредметСнабжения.Установить(ПредметСнабжения);
	НаборЗаписей.Прочитать();
	
	Если (ТекущийНомерПозиции = 1 ИЛИ ТекущийНомерПозиции = 0) И Направление = "Вверх" Тогда
		Возврат;
	КонецЕсли;

	Если (ТекущийНомерПозиции = НаборЗаписей.Количество() ИЛИ ТекущийНомерПозиции = 0) И Направление = "Вниз" Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Если Направление = "Вверх" Тогда
		
			Если Запись.НомерПозиции = ТекущийНомерПозиции - 1 Тогда
				
				Запись.НомерПозиции = Запись.НомерПозиции + 1;
				
			ИначеЕсли Запись.НомерПозиции = ТекущийНомерПозиции Тогда
				
				Запись.НомерПозиции = Запись.НомерПозиции - 1;	
				
			КонецЕсли;	
		
		ИначеЕсли Направление = "Вниз" Тогда
		
			Если Запись.НомерПозиции = ТекущийНомерПозиции Тогда
				
				Запись.НомерПозиции = Запись.НомерПозиции + 1;
				
			ИначеЕсли Запись.НомерПозиции = ТекущийНомерПозиции + 1 Тогда
				
				Запись.НомерПозиции = Запись.НомерПозиции - 1;	
				
			КонецЕсли;	
		
		КонецЕсли;	
	
	КонецЦикла;	
	
	НаборЗаписей.Записать();

КонецПроцедуры // ИзменитьПорядокСоставляющихЧастейСпецификации()

&НаСервереБезКонтекста
Процедура ДобавитьВОчередьАктуализацииПС(ПредметСнабжения, Отложен)

	СпецификацииПредметовСнабжения.ДобавитьВРегистрАктуализацияСтруктурыПС(ПредметСнабжения, Отложен);			
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСоставляющуюЧастьИзСпецификацииДалее(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТекущаяСтрока = Элементы.СпецификацияДинамическийСписок.ТекущиеДанные;
		СпецификацииПредметовСнабжения.УдалитьСоставляющуюЧастьИзСпецификации(Объект.Ссылка, ТекущаяСтрока.СоставляющаяЧасть);
		Элементы.СпецификацияДинамическийСписок.Обновить();
		СпецификацияИзменена = Истина;
		ДобавитьВОчередьАктуализацииПС(Объект.Ссылка, СпецификацияИзменена);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОписаниеINCAT

&НаСервереБезКонтекста
Процедура СформироватьОписаниеINCATНаСервере(ТабДок, ПредметСнабженияСсылка)
	
	Макет = Справочники.КаталогПредметовСнабжения.ПолучитьМакет("ОписаниеINCAT");

	МассивЗаказов = ПолучитьМассивЗаказов(ПредметСнабженияСсылка);
	Для каждого Заказ  Из МассивЗаказов Цикл
	
		СформироватьОписаниеINCATИПоЗаказуИВывестиВТабличныйДокумент(ТабДок, Макет, Заказ, ПредметСнабженияСсылка);		
	   
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗаказов(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ > 0)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|				ГДЕ
	|					(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = ""Архив""
	|							И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка)
	|							И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|						ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.NSN = """"
	|							И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.ФНН = """"
	|							И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.INCAT = """"))
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Служебный
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец.Наименование";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("Служебный", Константы.СлужебныйЗаказ.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Владелец");
			
КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьОписаниеINCATИПоЗаказуИВывестиВТабличныйДокумент(ТабДок, Макет, Корабль, ПредметСнабженияСсылка)
	
	Запрос 			= ОписаниеINCAT.ПолучитьЗапросСВременнымиТаблицами(Корабль, ПредметСнабженияСсылка);
	ТаблицыДанных 	= ПолучитьТаблицыОписанийINCAT(Запрос); 
	
	ВывестиШапку(ТабДок, Макет, Корабль);
	
	Для каждого КлючИЗначение Из ТаблицыДанных Цикл
	
		ВывестиТаблицу(ТабДок, Макет, КлючИЗначение.Значение, КлючИЗначение.Ключ)	
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицыОписанийINCAT(Запрос)
	
	ТаблицыДанных = Новый Структура; 
	
	ТаблицыДанных.Вставить("Item", 				ОписаниеINCAT.СформироватьТаблицуItem(Запрос));
	ТаблицыДанных.Вставить("Vendor", 			ОписаниеINCAT.СформироватьТаблицуVendor(Запрос));
	ТаблицыДанных.Вставить("Eqpt", 				ОписаниеINCAT.СформироватьТаблицуEqpt(Запрос));
	ТаблицыДанных.Вставить("EqptRoutine", 		ОписаниеINCAT.СформироватьТаблицуEqptRoutine(Запрос));
	ТаблицыДанных.Вставить("Characteristic",	ОписаниеINCAT.СформироватьТаблицуCharacteristic(Запрос));
	ТаблицыДанных.Вставить("Substitute", 		ОписаниеINCAT.СформироватьТаблицуSubstitute(Запрос));
	ТаблицыДанных.Вставить("ItemVendor", 		ОписаниеINCAT.СформироватьТаблицуItemVendor(Запрос));
	ТаблицыДанных.Вставить("EASK", 				ОписаниеINCAT.СформироватьТаблицуEASK(Запрос));
		
	Возврат ТаблицыДанных;
			
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиШапку(ТабДок, Макет, Корабль)
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Корабль = Корабль;
	ТабДок.Вывести(ОбластьШапка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВывестиТаблицу(ТабДок, Макет, ТаблицаДанных, ИмяТаблицы)
	
	ОбластьШапка = Макет.ПолучитьОбласть("ИмяТаблицы");
	ОбластьШапка.Параметры.ИмяТаблицы = ИмяТаблицы;
	ТабДок.Вывести(ОбластьШапка);

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка" + ИмяТаблицы);
	ТабДок.Вывести(ОбластьШапка);
	
	ОбластьДетали = Макет.ПолучитьОбласть("Детали" + ИмяТаблицы);
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ОбластьДетали.Параметры.Заполнить(СтрокаТаблицы);				
	    ТабДок.Вывести(ОбластьДетали);
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область РаспространитьПоставщика
	
&НаКлиенте
Процедура РаспространитьПоставщика(Команда)
	
	ВремяНачалаОбработки = ТекущаяДата();

	Если Объект.ИзготовителиИПоставщики.Количество() = 0 Тогда
		Сообщить("" + " У текущего элемента нет поставщиков!");
		Возврат;
	КонецЕсли;
	
	СписокПоставщиков = Новый СписокЗначений;
	Для каждого СтрокаПоставщик Из Объект.ИзготовителиИПоставщики Цикл
		СписокПоставщиков.Добавить(СтрокаПоставщик.Контрагент, 
		"" + СтрокаПоставщик.Контрагент + " (" + 
		?(СтрокаПоставщик.Поставщик, "П", "") +
		?(СтрокаПоставщик.Разработчик, "Р", "") +
		?(СтрокаПоставщик.Изготовитель, "И", "") + ")");
	КонецЦикла; 
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма);
	СписокПоставщиков.ПоказатьВыборЭлемента(Оповещение, "Выберите поставщика:");

КонецПроцедуры // РаспространитьПоставщика

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПоставщиковНаСервере(ВыбранныйЭлемент.Значение);
	Сообщить(НСтр("ru = 'Обработка спецификации завершена'"));
	
КонецПроцедуры // ПослеВыбораЭлемента

&НаСервере
Процедура ИзменитьПоставщиковНаСервере(НовыйПоставщик)
	
	СпецификацияДляОбработкиПоставщиков = ПолучитьСпецификацию(Объект.Ссылка);
	ОбработатьСпецификацию(СпецификацияДляОбработкиПоставщиков, НовыйПоставщик);
	
КонецПроцедуры // ИзменитьПоставщиковНаСервере

&НаСервере
Функция ПолучитьСпецификацию(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.Текст = ПолучитьТекстЗапросаДляСпецификации();
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьСпецификацию

&НаСервере
Функция ПолучитьТекстЗапросаДляСпецификации()	
	КоличествоЦиклов = 12;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СпецификацииПС.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	|ГДЕ
	|	СпецификацииПС.ПредметСнабжения = &ПредметСнабжения
	|;";
	
	Для Н = 1 По КоличествоЦиклов - 1 Цикл		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВТ_" + Н + ".СоставляющаяЧасть КАК ПредметСнабжения,
		|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть		
		|ПОМЕСТИТЬ ВТ_" + (Н + 1) + "
		|ИЗ
		|	ВТ_" + Н + " КАК ВТ_" + Н + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПС КАК СпецификацииПС
		|		ПО ВТ_" + Н + ".СоставляющаяЧасть = СпецификацииПС.ПредметСнабжения
		|;
		|";		
	КонецЦикла;	
	
	СтрокаОбъединитьВсе = "";
	СтрокаПоместить = "ПОМЕСТИТЬ ВТ_Спецификация";
	
	Для Н = 1 По КоличествоЦиклов Цикл 		
		ТекстЗапроса = ТекстЗапроса + СтрокаОбъединитьВсе + "
		|
		|ВЫБРАТЬ
		|	ВТ_" + Н + ".ПредметСнабжения КАК ПредметСнабжения,
		|	ВТ_" + Н + ".СоставляющаяЧасть КАК СоставляющаяЧасть		
		|" + СтрокаПоместить + "
		|ИЗ
		|	ВТ_" + Н + " КАК ВТ_" + Н + "
		|
		|";  		
		СтрокаПоместить = "";
		СтрокаОбъединитьВсе = "ОБЪЕДИНИТЬ ВСЕ";
	КонецЦикла;	
	
	Для Н = 1 По КоличествоЦиклов Цикл 		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|УНИЧТОЖИТЬ ВТ_" + Н + "
		|
		|"; 		
		СтрокаОбъединитьВсе = "ОБЪЕДИНИТЬ ВСЕ"; 
	КонецЦикла;	

	ТекстЗапроса = ТекстЗапроса + "
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Спецификация.ПредметСнабжения КАК ПредметСнабжения,
	|	ВТ_Спецификация.СоставляющаяЧасть КАК СоставляющаяЧасть
	|ИЗ
	|	ВТ_Спецификация КАК ВТ_Спецификация
	|
	|";  	
	Возврат ТекстЗапроса;	
КонецФункции // ПолучитьТекстЗапросаДляСпецификации()

&НаСервере
Процедура ОбработатьСпецификацию(Спецификация, НовыйПоставщик)
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого СтрокаСпецификации Из Спецификация Цикл
			
			ТребуетсяДобавитьНовогоПоставщика = Истина;
			СоставляющаяЧасть = СтрокаСпецификации.СоставляющаяЧасть;
			Для каждого СтрокаПоставщик Из СоставляющаяЧасть.ИзготовителиИПоставщики Цикл
				Если СтрокаПоставщик.Контрагент = НовыйПоставщик Тогда
					ТребуетсяДобавитьНовогоПоставщика = ложь;
					Прервать;				
				КонецЕсли;			
			КонецЦикла; 
			
			Если ТребуетсяДобавитьНовогоПоставщика Тогда
				
				СоставляющаяЧастьОбъект = СоставляющаяЧасть.ПолучитьОбъект();
				НоваяСтрока = СоставляющаяЧастьОбъект.ИзготовителиИПоставщики.Добавить();
				НоваяСтрока.Контрагент = НовыйПоставщик;
				НоваяСтрока.Поставщик = Истина;
				СоставляющаяЧастьОбъект.Записать();
			
			КонецЕсли;
		
		КонецЦикла; 
		
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Сообщить(СтрШаблон(НСтр("ru = 'Обработка спецификации не выполнена:%1'"), ОписаниеОшибки()));

	КонецПопытки;
	
КонецПроцедуры // ОбработатьСпецификацию
	
#КонецОбласти

