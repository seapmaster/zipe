////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьНомерОСК()
	Результат		= "ОСК-0000000001";
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	             	  |	КаталогПредметовСнабжения.НомерОСК КАК НомерОСК
	             	  |ИЗ
	             	  |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	НомерОСК УБЫВ";  	
	Выборка 		= Запрос.Выполнить().Выбрать();	
	Если Выборка.Следующий() 
		И ЗначениеЗаполнено(Выборка.НомерОСК) Тогда		
		НомерСтрока 	= Формат(Число(Прав(Выборка.НомерОСК, 10)) + 1, "ЧГ=");		
		МассивНомера 	= Новый Массив;
		МассивНомера.Добавить("ОСК-");		
		ЧислоНулей 		= 10 - СтрДлина(НомерСтрока);		
		Для Сч = 1 По ЧислоНулей Цикл                 		
			МассивНомера.Добавить("0");			
		КонецЦикла;	// Для Сч = 1 По ЧислоНулей Цикл
		МассивНомера.Добавить(НомерСтрока);	
		Результат = СтрСоединить(МассивНомера);	  	
	КонецЕсли; // Если Выборка.Следующий() 	
	
	Возврат Результат;
КонецФункции // ПолучитьНомерОСК()

Процедура ДобавитьПоставщикаПоПользователю()
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли; // Если Не ЗначениеЗаполнено(Пользователь) Тогда
	
	Организация = Пользователь.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли; // Если Не ЗначениеЗаполнено(Организация) Тогда
	
	НайденныеСтроки = ИзготовителиИПоставщики.НайтиСтроки(Новый Структура("Контрагент", Организация));
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока 				= ИзготовителиИПоставщики.Добавить();
		НоваяСтрока.Контрагент 		= Организация;
		НоваяСтрока.Поставщик 		= Истина;
	Иначе
		НайденныеСтроки[0].Поставщик = Истина;
	КонецЕсли; // Если НайденныеСтроки.Количество() = 0 Тогда	
КонецПроцедуры // ДобавитьПоставщикаПоПользователю

////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; // Если ОбменДанными.Загрузка Тогда 	
	
	Если ЭтоНовый() 
		И РольДоступна("ПредставительПроектантаКорабля") Тогда
		ДобавитьПоставщикаПоПользователю();
	КонецЕсли; // Если ЭтоНовый() Тогда	
		
	ПровереноОСК = Справочники.СтатусыЗаписейСправочниковИКаталогов.ПровереноОСК;
	
	Если Не РольДоступна("ПолныеПрава") 
		И (РольДоступна("ПредставительПроектантаКорабля") 
			Или РольДоступна("ПредставительСтроителяКорабля")) 
		И ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Ссылка, "Статус") = ПровереноОСК Тогда	
		Отказ = Истина;
		Возврат;	
	КонецЕсли; // Если Не РольДоступна("ПолныеПрава") 
	
	Если Не ЗначениеЗаполнено(НомерОСК) 
		И Статус = ПровереноОСК Тогда		
		Блокировка 				= Новый БлокировкаДанных;
		ЭлементБлокировки 		= Блокировка.Добавить("Справочник.КаталогПредметовСнабжения");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();		
		НомерОСК 				= ПолучитьНомерОСК();	
	КонецЕсли; // Если Не ЗначениеЗаполнено(НомерОСК) 	
	
	РеквизитыПредметаСнабжения = ОбщиеФункцииСервер.ПолучитьЗначенияРеквизитов(Ссылка, "Наименование");	
	Если Не РеквизитыПредметаСнабжения = Неопределено 
		И Не РеквизитыПредметаСнабжения.Наименование = Наименование Тогда		
		ОбщиеФункцииПривилегированный.ДоавитьВОчередьОбновленияНаименованийКомплектующихИзделийИЗИП(ТекущаяДата(), Ссылка);		
	КонецЕсли; // Если Не РеквизитыПредметаСнабжения = Неопределено 
	
	Если Не Обозначение = ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Ссылка, "Обозначение") Тогда		
		ОбозначениеТранслитированное = ОбщиеФункцииКлиентСервер.ТранслитироватьОбозначениеРусВАнг(Обозначение);		
	КонецЕсли; // Если Не Обозначение = ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Ссылка, "Обозначение") Тогда			
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; // Если ОбменДанными.Загрузка Тогда
	
	Если ДополнительныеСвойства.Свойство("РесурсыИСрокиСлужбы") Тогда	
		РезультатЗаписиРесурсовИСроковСлужбы = ПредметыСнабженияСервер.ЗаписатьРесурсыИСрокиСлужбы(Ссылка, ДополнительныеСвойства.РесурсыИСрокиСлужбы); 		
		Если Не РезультатЗаписиРесурсовИСроковСлужбы.Выполнено Тогда		
			Отказ = Истина;
			Сообщить(РезультатЗаписиРесурсовИСроковСлужбы.Описание);
			Возврат;                                                		
		КонецЕсли; // Если Не РезультатЗаписиРесурсовИСроковСлужбы.Выполнено Тогда			
	КонецЕсли; // Если ДополнительныеСвойства.Свойство("РесурсыИСрокиСлужбы") Тогда	
	
	Если ДополнительныеСвойства.Свойство("РегламентТО") Тогда 	
		РезультатЗаписиРегламентаТО = ПредметыСнабженияСервер.ЗаписатьРегламентТО(Ссылка, ДополнительныеСвойства.РегламентТО); 		
		Если Не РезультатЗаписиРегламентаТО.Выполнено Тогда		
			Отказ = Истина;
			Сообщить(РезультатЗаписиРегламентаТО.Описание);
			Возврат;                                                            		
		КонецЕсли; // Если Не РезультатЗаписиРегламентаТО.Выполнено Тогда			
	КонецЕсли; // Если ДополнительныеСвойства.Свойство("РегламентТО") Тогда 	
	
	Если ДополнительныеСвойства.Свойство("ЗИПТребуемыеДляТО") Тогда 	
		РезультатЗаписиЗИПТребуемыхДляТО = ПредметыСнабженияСервер.ЗаписатьЗИПТребуемыеДляТО(Ссылка, ДополнительныеСвойства.ЗИПТребуемыеДляТО); 		
		Если Не РезультатЗаписиЗИПТребуемыхДляТО.Выполнено Тогда		
			Отказ = Истина;
			Сообщить(РезультатЗаписиЗИПТребуемыхДляТО.Описание);
			Возврат;		
		КонецЕсли; // Если Не РезультатЗаписиЗИПТребуемыхДляТО.Выполнено Тогда	
	КонецЕсли; // Если ДополнительныеСвойства.Свойство("ЗИПТребуемыеДляТО") Тогда 	
	
	Если ДополнительныеСвойства.Свойство("КодыINCAT") Тогда	
		РезультатЗаписиКодыINCAT = ПредметыСнабженияСервер.ЗаписатьКодыINCAT(Ссылка, ДополнительныеСвойства.КодыINCAT); 		
		Если НЕ РезультатЗаписиКодыINCAT.Выполнено Тогда		
			Отказ = Истина;
			Сообщить(РезультатЗаписиКодыINCAT.Описание);
			Возврат;		
		КонецЕсли; // Если НЕ РезультатЗаписиКодыINCAT.Выполнено Тогда			
	КонецЕсли; // Если ДополнительныеСвойства.Свойство("КодыINCAT") Тогда	
	
	Если СпецификацииПредметовСнабжения.ПолучитьСостояниеОтложен(Ссылка) Тогда	
		СпецификацииПредметовСнабжения.ДобавитьВРегистрАктуализацияСтруктурыПС(Ссылка, Ложь);	
	КонецЕсли; // Если СпецификацииПредметовСнабжения.ПолучитьСостояниеОтложен(Ссылка) Тогда	
	
	РегистрыСведений.ОчередьОбновленияИндекса.УстановитьОбъектВОчередьОбновленияПоисковогоИндекса(Ссылка);	
	
КонецПроцедуры // ПриЗаписи

Процедура ПередУдалением(Отказ)
	
	// Дополнительные наименования	
	НаборЗаписей = РегистрыСведений.ДополнительныеНаименования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);		
	КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда	
	
	// Ресурсы и сроки службы	
	НаборЗаписей = РегистрыСведений.РесурсыИСрокиСлужбыПредметовСнабжения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредметСнабжения.Установить(Ссылка);
	НаборЗаписей.Прочитать();	
	Если НаборЗаписей.Количество() > 0 Тогда	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);		
	КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда	
	
	// Регламент ТО	
	НаборЗаписей = РегистрыСведений.РегламентТОПредметовСнабжения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредметСнабжения.Установить(Ссылка);
	НаборЗаписей.Прочитать();	
	Если НаборЗаписей.Количество() > 0 Тогда	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);		
	КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда	
	
	// ЗИП, требуемые для ТО	
	НаборЗаписей = РегистрыСведений.ЗИПТребуемыеДляТОПредметовСнабжения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредметСнабжения.Установить(Ссылка);
	НаборЗаписей.Прочитать();	
	Если НаборЗаписей.Количество() > 0 Тогда	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);      		
	КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда
	
	// ПометкиПользователей
	НаборЗаписей = РегистрыСведений.ПометкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлементСтруктуры.Установить(Ссылка);
	НаборЗаписей.Прочитать();	
	Если НаборЗаписей.Количество() > 0 Тогда	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);		
	КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда	
	
	// ВыгруженныеПредметыСнабжения
	НаборЗаписей = РегистрыСведений.ВыгруженныеПредметыСнабжения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредметСнабжения.Установить(Ссылка);
	НаборЗаписей.Прочитать();	
	Если НаборЗаписей.Количество() > 0 Тогда	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);      		
	КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда
	
	// КодыINCAT
	НаборЗаписей = РегистрыСведений.КодыINCAT.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредметСнабжения.Установить(Ссылка);
	НаборЗаписей.Прочитать();	
	Если НаборЗаписей.Количество() > 0 Тогда	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);		
	КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда
	
	// КодыINCATПредставление
	НаборЗаписей = РегистрыСведений.КодыINCATПредставление.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПредметСнабжения.Установить(Ссылка);
	НаборЗаписей.Прочитать();	
	Если НаборЗаписей.Количество() > 0 Тогда	
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);		
	КонецЕсли; // Если НаборЗаписей.Количество() > 0 Тогда	
	
КонецПроцедуры // ПередУдалением

Процедура ПриКопировании(ОбъектКопирования)	
	НомерОСК 	= "";
	Статус 		= Справочники.СтатусыЗаписейСправочниковИКаталогов.ПустаяСсылка();	
КонецПроцедуры // ПриКопировании


