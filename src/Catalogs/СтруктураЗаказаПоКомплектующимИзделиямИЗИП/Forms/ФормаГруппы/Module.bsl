//////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитов()
	
	Результат 		= Новый Структура("ЕстьЗамечания, Описание", Ложь, "");
	МассивЗамечаний = Новый Массив;
	
	// Если введен номер, проверим его корректность                        	
	Если ЗначениеЗаполнено(Объект.Номер) Тогда
		
		ПродолжитьПроверкуНомера = Истина;
	
		Если Найти(Объект.Номер, " ") > 0 Тогда 		
			МассивЗамечаний.Добавить("Номер не соответствует маске ББББББ-ЦЦЦ-ЦЦЦЦ,где Б - буква, Ц - цифра.");
			МассивЗамечаний.Добавить(Символы.ПС);
			ПродолжитьПроверкуНомера = Ложь;  			
		КонецЕсли; // Если Найти(Объект.Номер, " ") > 0 Тогда
		
		Если ПродолжитьПроверкуНомера Тогда 			
			БуквеннаяЧасть = Лев(Объект.Номер, 6);			
			Если Не БуквеннаяЧасть = ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеСимволы(БуквеннаяЧасть,, Истина) Тогда				
				МассивЗамечаний.Добавить("Номер не соответствует маске ББББББ-ЦЦЦ-ЦЦЦЦ,где Б - буква, Ц - цифра.");
				МассивЗамечаний.Добавить(Символы.ПС);
				ПродолжитьПроверкуНомера = Ложь;				
			КонецЕсли; // БуквеннаяЧасть = Лев(Объект.Номер, 6);			
		КонецЕсли; // Если ПродолжитьПроверкуНомера Тогда 			
		
		Если ПродолжитьПроверкуНомера Тогда 			
			ЦифроваяЧасть = Сред(Объект.Номер, 8, 3);			
			Если Не ЦифроваяЧасть = ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеСимволы(ЦифроваяЧасть, Истина) Тогда				
				МассивЗамечаний.Добавить("Номер не соответствует маске ББББББ-ЦЦЦ-ЦЦЦЦ,где Б - буква, Ц - цифра.");
				МассивЗамечаний.Добавить(Символы.ПС);
				ПродолжитьПроверкуНомера = Ложь;     				
			КонецЕсли;// Если Не ЦифроваяЧасть = ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеСимволы(ЦифроваяЧасть, Истина) Тогда
		КонецЕсли; // Если ПродолжитьПроверкуНомера Тогда 			
		
		Если ПродолжитьПроверкуНомера Тогда			
			ЦифроваяЧасть = Прав(Объект.Номер, 4);			
			Если Не ЦифроваяЧасть = ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеСимволы(ЦифроваяЧасть, Истина) Тогда				
				МассивЗамечаний.Добавить("Номер не соответствует маске ББББББ-ЦЦЦ-ЦЦЦЦ,где Б - буква, Ц - цифра.");
				МассивЗамечаний.Добавить(Символы.ПС);				
			КонецЕсли; // Если Не ЦифроваяЧасть = ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеСимволы(ЦифроваяЧасть, Истина) Тогда			
		КонецЕсли; // Если ПродолжитьПроверкуНомера Тогда				
	КонецЕсли; // Если ЗначениеЗаполнено(Объект.Номер) Тогда
	
	Если МассивЗамечаний.Количество() > 0 Тогда             		
		МассивЗамечаний.Удалить(МассивЗамечаний.Количество() - 1);
		Результат.Описание 		= СтрСоединить(МассивЗамечаний);
		Результат.ЕстьЗамечания = Истина;		 
	КонецЕсли; // Если МассивЗамечаний.Количество() > 0 Тогда
	
	Возврат Результат;

КонецФункции // ПроверитьЗаполнениеРеквизитов()

&НаСервере
Процедура ЗаполнитьОписаниеИерархии()    
	ОписаниеИерархии = ?(ЗначениеЗаполнено(Объект.Ссылка), 
							СтруктураЗаказаСервер.ПолучитьОписаниеИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП(Объект.Ссылка), 
							СтруктураЗаказаСервер.СформироватьОписаниеИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП(Объект.Родитель));	
КонецПроцедуры // ЗаполнитьОписаниеИерархии()

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(Ответ, ДопПараметры = Неопределено) Экспорт

	Если Ответ = КодВозвратаДиалога.Отмена Тогда 	
		Возврат;	                             	
	КонецЕсли; // Если Ответ = КодВозвратаДиалога.Отмена Тогда 	
	
	Если Ответ = КодВозвратаДиалога.Да Тогда	
		Записать();	                        	
	КонецЕсли;	// Если Ответ = КодВозвратаДиалога.Да Тогда	
	
	ЗакрытиеОбработано = Истина;	
	Закрыть(Новый Структура("ЗаписьБылаПроизведена", ЗаписьБылаПроизведена));
КонецПроцедуры // ПередЗакрытиемПродолжение()

&НаКлиенте
Процедура ОбработчикВыбораЗаведования(Заведование, ДопПараметры = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Заведование) Тогда	
		Объект.Заведование = Заведование;
		Модифицированность = Истина;	
	КонецЕсли;	// Если ЗначениеЗаполнено(Заведование) Тогда

КонецПроцедуры // ОбработчикВыбораЗаведования()

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Чертеж, УникальныйИдентификатор)

	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(Чертеж, УникальныйИдентификатор);	

КонецФункции // ПолучитьДанныеФайла()

//////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ПоказатьВСписке(Команда)	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда	
		ПараметрыОткрытия 	= Новый Структура();
		ПараметрыОткрытия.Вставить("ЭлементСтруктуры", 	Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Владелец", 			Объект.Владелец);		
		ОткрытьФорму("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);	
	КонецЕсли; // Если ЗначениеЗаполнено(Объект.Ссылка) Тогда		
КонецПроцедуры // ПоказатьВСписке

&НаКлиенте
Процедура ВНижнийРегистр(Команда)
	Элементы.НаименованиеДополнительное.ВыделенныйТекст = НРЕГ(Элементы.НаименованиеДополнительное.ВыделенныйТекст);
КонецПроцедуры

#Область Чертеж

&НаСервере
Процедура ПроверитьНаличиеЧертежа()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИППрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИППрисоединенныеФайлы КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИППрисоединенныеФайлы
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИППрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Элементы.ФормаДобавитьЧертеж.Видимость 	= Ложь;
		Элементы.ФормаПоказатьЧертеж.Видимость 	= Истина;
		Элементы.ФормаИзменитьЧертеж.Видимость 	= Истина;
		Элементы.ФормаУдалитьЧертеж.Видимость 	= Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Чертеж = Выборка.Ссылка;
	
	КонецЕсли;	

КонецПроцедуры // ПроверитьНаличиеЧертежа()

&НаКлиенте
Процедура ДобавитьЧертеж(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ПоказатьПредупреждение(, "Перед добавлением чертежа необходимо записать объект",, "Действие запрещено");
		Возврат;
	
	КонецЕсли;
	
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, "Изображения (*.jpg)|*.jpg");	
	
	ПроверитьНаличиеЧертежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЧертеж(Команда)
	
	ДанныеФайла = ПолучитьДанныеФайла(Чертеж, УникальныйИдентификатор);
	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЧертеж(Команда)
	
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, "Изображения (*.jpg)|*.jpg", Новый Структура("ПрисоединенныйФайлСсылка", Чертеж));
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЧертеж(Команда)
	
	РезультатУдаленияПрисоединенногоФайла = ОбщиеФункцииСервер.УдалитьПрисоединенныйФайл(Чертеж, Объект.Ссылка);
	
	Если РезультатУдаленияПрисоединенногоФайла.Выполнено Тогда
	
		Элементы.ФормаДобавитьЧертеж.Видимость 	= Истина;
		Элементы.ФормаПоказатьЧертеж.Видимость 	= Ложь;
		Элементы.ФормаИзменитьЧертеж.Видимость 	= Ложь;
		Элементы.ФормаУдалитьЧертеж.Видимость 	= Ложь;
		
		Чертеж = ПредопределенноеЗначение("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИППрисоединенныеФайлы.ПустаяСсылка");	
	
	Иначе
	
		Сообщить(РезультатУдаленияПрисоединенногоФайла.Описание);	
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 		
		НаименованиеДополнительное = СтруктураЗаказаСервер.ПолучитьДополнительноеНаименование(Объект.Ссылка, Объект.Владелец.Заказчик.ЯзыкПредставленияДанных);
	//ИначеЕсли Параметры.Свойство("Ссылка") Тогда		
	//	ЗначениеВРеквизитФормы(Параметры.Ссылка.ПолучитьОбъект(), "Объект");
	Иначе		
		Если Не Параметры.Свойство("Владелец") Тогда  			
			Отказ = Истина;
			Сообщить("Запрещено создавать элемент без предварительного выбора его владельца.");
			Возврат;                                  			
		КонецЕсли; // Если Не Параметры.Свойство("Владелец") Тогда
		
		Объект.Владелец = Параметры.Владелец;		
		Если Параметры.Свойство("Родитель") Тогда			
			Объект.Родитель 	= Параметры.Родитель;
			Объект.Заведование 	= Параметры.Заведование;			
		КонецЕсли; // Если Параметры.Свойство("Родитель") Тогда
		
		Объект.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;			
	КонецЕсли; // КонецЕсли; // Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
	ПроверитьНаличиеЧертежа();
	
	ЗаполнитьОписаниеИерархии();
	
	Если Параметры.ТолькоПросмотр = Истина Тогда	
		Элементы.ФормаДобавитьЧертеж.Доступность	= Ложь;
		Элементы.ФормаИзменитьЧертеж.Доступность 	= Ложь;
		Элементы.ФормаУдалитьЧертеж.Доступность 	= Ложь;   	
	КонецЕсли; // Если Параметры.ТолькоПросмотр = Истина Тогда
	
	Если Не РольДоступна("ПолныеПрава") 
		И РольДоступна("ИностранныйЗаказчик") Тогда	
		Элементы.Заведование.Видимость = Ложь;     	
	КонецЕсли; // Если Не РольДоступна("ПолныеПрава") 
	
	// Доступность операций изменения данных зависит от наличия БП на их изменение
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыДляРедактированияСтруктурыКорабля") 
		И Не КорректировкаДанныхСправочников.КорабльНаходитсяВПроцессеРедактирования(Объект.Владелец) Тогда		
		КорректировкаДанныхСправочников.ОтключитьНепосредственноеИзменениеДанных(ЭтаФорма, Ложь);          		
	КонецЕсли; // Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыДляРедактированияСтруктурыКорабля") 
	
КонецПроцедуры // ПриСозданииНаСервере

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РезультатПроверкиЗаполненияРеквизитов = ПроверитьЗаполнениеРеквизитов();	
	Если РезультатПроверкиЗаполненияРеквизитов.ЕстьЗамечания Тогда          	
		Отказ = Истина;
		Сообщить(РезультатПроверкиЗаполненияРеквизитов.Описание);
		Возврат;	
	КонецЕсли;	// Если РезультатПроверкиЗаполненияРеквизитов.ЕстьЗамечания Тогда	
КонецПроцедуры // ПередЗаписью

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)	
	ЗаписьБылаПроизведена = Истина;	  	
КонецПроцедуры  // ПослеЗаписи

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;	
	Если Не ЗавершениеРаботы 
		И Не ЗакрытиеОбработано Тогда		
		Если Модифицированность Тогда			
			Отказ 				= Истина;			
			ОписаниеОповещения 	= Новый ОписаниеОповещения("ПередЗакрытиемПродолжение", ЭтотОбъект);			
			ПоказатьВопрос(ОписаниеОповещения, "Данные были изменены. Сохранить изменения?", 
								РежимДиалогаВопрос.ДаНетОтмена,,, "1С:Предприятие");			
		Иначе			
			ПередЗакрытиемПродолжение(КодВозвратаДиалога.Нет);					
		КонецЕсли;	// Если Модифицированность Тогда		
	КонецЕсли;	// Если Не ЗавершениеРаботы 	
КонецПроцедуры // ПередЗакрытием

&НаКлиенте
Процедура НаименованиеДополнительноеПриИзменении(Элемент)	
	МодифицированностьДопНаименования 	= Истина;
	Модифицированность 					= Истина;	
КонецПроцедуры // НаименованиеДополнительноеПриИзменении

&НаКлиенте
Процедура ЗаведованиеСоздание(Элемент, СтандартнаяОбработка) 	
	СтандартнаяОбработка 	= Ложь;	
	ПараметрыОткрытия 		= Новый Структура("Владелец", Объект.Владелец);	
	ОписаниеОповещения 		= Новый ОписаниеОповещения("ОбработчикВыбораЗаведования", ЭтотОбъект);	
	ОткрытьФорму("Справочник.БоевыеЧасти.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
КонецПроцедуры // ЗаведованиеСоздание

&НаКлиенте
Процедура ЗаведованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка 	= Ложь;   	
	ПараметрыОткрытия 		= Новый Структура("Владелец", Объект.Владелец);	
	ОписаниеОповещения		= Новый ОписаниеОповещения("ОбработчикВыбораЗаведования", ЭтотОбъект);	
	ОткрытьФорму("Справочник.БоевыеЧасти.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ЗаведованиеНачалоВыбора

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если МодифицированностьДопНаименования Тогда		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Язык", ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ТекущийОбъект.Владелец, "Заказчик"), "ЯзыкПредставленияДанных"));
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НаименованиеДополнительное", НаименованиеДополнительное);		
	КонецЕсли; // Если МодифицированностьДопНаименования Тогда		
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) 
		И ЗначениеЗаполнено(ОписаниеИерархии) Тогда	
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОписаниеИерархии", ОписаниеИерархии);		
	КонецЕсли; // Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) 	
КонецПроцедуры // ПередЗаписьюНаСервере







