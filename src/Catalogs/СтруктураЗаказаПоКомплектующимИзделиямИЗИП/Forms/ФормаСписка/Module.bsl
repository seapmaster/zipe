
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.ТекущаяСтрока = Неопределено Тогда  //веденеев 18.09.17 - при открытии из формы без начального отбора по владельцу
		
		Параметры.Отбор.Вставить("Владелец", Параметры.ТекущаяСтрока.Владелец);
		
	КонецЕсли;  
	
	Если Параметры.Свойство("ЭлементСтруктуры") Тогда
	
		Параметры.Отбор.Вставить("Владелец", Параметры.Владелец);
		Элементы.Список.ТекущаяСтрока = Параметры.ЭлементСтруктуры;
	
	КонецЕсли;
	
	Параметры.Свойство("РежимВыбора", Элементы.Список.РежимВыбора);
	
	Владелец = Параметры.Отбор.Владелец;
	
	Если Не ЗначениеЗаполнено(Владелец) Тогда
	
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("Язык", ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Владелец, "Заказчик"), "ЯзыкПредставленияДанных"));
	Список.Параметры.УстановитьЗначениеПараметра("УсловиеПоискаДублей", Истина);

	//Список.Параметры.УстановитьЗначениеПараметра("Владелец", Владелец);
	
	ТипГруппа 	= Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	ТипИзделие 	= Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	
	ОпределитьДоступностьДействий();
	
	ГруппаАрхив = НайтиПапкуАрхивНаКорабле(Владелец,Ложь);
	
	//++ 15.03.2018 Веденеев П. //доступность операций изменения данных зависит от наличия БП на их изменение
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыДляРедактированияСтруктурыКорабля") Тогда
		
		КорабльНаходитсяВПроцессеРедактирования = КорректировкаДанныхСправочников.КорабльНаходитсяВПроцессеРедактирования(Владелец);
		
		Элементы.ГруппаПодменюДобавить.Доступность = КорабльНаходитсяВПроцессеРедактирования;
		Элементы.ФормаУдалитьЭлементыСтруктурыКорабля.Доступность = КорабльНаходитсяВПроцессеРедактирования;
		Элементы.ФормаПереместитьВАрхив.Доступность = КорабльНаходитсяВПроцессеРедактирования;
		Элементы.ФормаОбъединить.Доступность = КорабльНаходитсяВПроцессеРедактирования;
		Элементы.ФормаУдалитьДубликаты.Доступность = КорабльНаходитсяВПроцессеРедактирования;
		Элементы.ФормаПреобразоватьВГруппу.Доступность = КорабльНаходитсяВПроцессеРедактирования;
		Элементы.ФормаПреобразоватьВИзделие.Доступность = КорабльНаходитсяВПроцессеРедактирования;
		
	КонецЕсли;
	//-- 15.03.2018 Веденеев П. //доступность операций изменения данных зависит от наличия БП на их изменение
	ПоляДляОграничений = Новый Массив;
	ПоляДляОграничений.Добавить("ПредставлениеДляПоиска");  	
	Список.УстановитьОграниченияИспользованияВГруппировке(ПоляДляОграничений);
	Список.УстановитьОграниченияИспользованияВПорядке(ПоляДляОграничений); 
КонецПроцедуры

// Процедура предназначена для определения доступности добавления, изменения и пометки на удаления элементов
//
&НаСервере
Процедура ОпределитьДоступностьДействий()

	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Метаданные.Роли.ПолныеПрава);
	МассивРолей.Добавить(Метаданные.Роли.СпециалистПоВедениюБД);
	МассивРолей.Добавить(Метаданные.Роли.РуководительПроектаДепартаментаВТС);
	МассивРолей.Добавить(Метаданные.Роли.CпециалистДепартаментаГОЗ);
	МассивРолей.Добавить(Метаданные.Роли.ПредставительПроектантаКорабля);
	МассивРолей.Добавить(Метаданные.Роли.ПредставительСтроителяКорабля);
	
	Для каждого Роль Из МассивРолей Цикл
	
		Если РольДоступна(Роль) Тогда
		
			Возврат;	
		
		КонецЕсли;	
	
	КонецЦикла;
	
	РазрешенТолькоПросмотр = Истина;
	
	Элементы.ГруппаПодменюДобавить.Доступность = Ложь;

КонецПроцедуры // ОпределитьДоступностьДействий()

&НаКлиенте
Процедура ДобавитьГруппа(Команда)
	
	ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаГруппы";
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ЗИП", Ложь);
	
	// Определим, есть ли текущие данные для добавления с родителем
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
	
		ПараметрыОткрытия.Вставить("Родитель", ТекущиеДанные.Ссылка);
		ПараметрыОткрытия.Вставить("Заведование", ТекущиеДанные.Заведование);
	
	КонецЕсли;
		
	ОткрытьФормуЭлемента(ИмяФормыЭлемента, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзделие(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ЗИП", Ложь);
	
	// Определим, есть ли текущие данные для добавления с родителем
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
	
		ПараметрыОткрытия.Вставить("Родитель", ТекущиеДанные.Ссылка);	
		ПараметрыОткрытия.Вставить("Заведование", ТекущиеДанные.Заведование);
	
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФормыЭлемента", "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия");
	ДопПараметры.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
	ДопПараметры.Вставить("ДобавлениеИзделия", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыбораПредметаСнабжения", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаСписка", Новый Структура("РежимВыбора", Истина), , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.Независимый);			
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗИП(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ЗИП", Истина);
	
	// Определим, есть ли текущие данные для добавления с родителем
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
	
		ПараметрыОткрытия.Вставить("Родитель", ТекущиеДанные.Ссылка);
		ПараметрыОткрытия.Вставить("Заведование", ТекущиеДанные.Заведование);
	
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФормыЭлемента", "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия");
	ДопПараметры.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
	ДопПараметры.Вставить("ДобавлениеИзделия", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыбораПредметаСнабжения", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаСписка", Новый Структура("РежимВыбора", Истина), , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.Независимый);	
	
КонецПроцедуры

// Процедура предназначена для открытия формы элемента в зависимости от типа с заданными параметрами и инициализации обновления списка
//
&НаКлиенте
Процедура ОткрытьФормуЭлемента(ИмяФормыЭлемента, ПараметрыОткрытия, ДобавлениеИзделия = Ложь)
	
	ПараметрыОткрытия.Вставить("Владелец", Владелец);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДобавлениеИзделия", ДобавлениеИзделия);
	ДопПараметры.Вставить("Тип", ТипИзделие);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОткрытияФормыЭлемента", ЭтотОбъект, ДопПараметры);
	
	// Базунов Тут косяк открытия формы!
	ОткрытьФорму(ИмяФормыЭлемента, ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.Независимый); 

КонецПроцедуры // ОткрытьФормуЭлемента()

// Процедура предназначена для обновления списка после добавления нового элемента
//
&НаКлиенте
Процедура ОбработчикОткрытияФормыЭлемента(СтруктураЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(СтруктураЗакрытия) = Тип("Структура") Тогда
		Если СтруктураЗакрытия.Свойство("ЗаписьБылаПроизведена") И СтруктураЗакрытия.Свойство("ПредметСнабженияИмеетСпецификацию") Тогда
			СтруктураЗаказаВызовСервера.ОбработатьСтруктуруЗаказов(СтруктураЗакрытия.ПредметСнабжения);	
		КонецЕсли; 
	КонецЕсли;   	

КонецПроцедуры // ОбработчикОткрытияФормыЭлемента()

&НаКлиенте
Процедура ОбработчикОткрытияФормыЭлементаПродолжение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
	
		РезультатСозданияПодчиненныхЭлементов = СтруктураЗаказаСервер.СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказа(ДопПараметры.ЭлементСтруктуры, Владелец, ДопПараметры.Заведование, ДопПараметры.ПредметСнабжения);
		
		Если Не РезультатСозданияПодчиненныхЭлементов.Выполнено Тогда
			
			Сообщить(РезультатСозданияПодчиненныхЭлементов.Описание);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказаВФоне(ДопПараметры.ЭлементСтруктуры, Владелец, ДопПараметры.Заведование, ДопПараметры.ПредметСнабжения, УникальныйИдентификатор);
		Возврат;
	
	КонецЕсли;
	
	Элементы.Список.Обновить();

КонецПроцедуры // ОбработчикОткрытияФормыЭлементаПродолжение()

// Процедура предназначена для запуска фонового задания для создания подчиненных элементов добавленного элемента структуры заказа
// Параметры:
// ЭлементСтруктурыЗаказа - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// Владелец - Справочники.Заказы
// Заведование - Справочники.БоевыеЧасти
// ПредметСнабжения - Справочники.КаталогПредметовСнабжения
//
&НаСервереБезКонтекста
Процедура СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказаВФоне(ЭлементСтруктурыЗаказа, Владелец, Заведование, ПредметСнабжения, Ключ)
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ЭлементСтруктурыЗаказа);
	ПараметрыЗадания.Добавить(Владелец);
	ПараметрыЗадания.Добавить(Заведование);
	ПараметрыЗадания.Добавить(ПредметСнабжения);
	
	Наименование = "Создание подчиненных элементов структуры заказа. Заказ - " + Строка(Владелец) + ", элемент структуры заказа - " + Строка(ЭлементСтруктурыЗаказа);

	ФоновыеЗадания.Выполнить("СтруктураЗаказаСервер.СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказаВФоне", ПараметрыЗадания, Ключ, Наименование);

КонецПроцедуры // СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказаВФоне()

// Процедура предназначена для перехода к добавлению элемента после выбора предмета снабжения
//
&НаКлиенте
Процедура ОбработчикВыбораПредметаСнабжения(ПредметСнабжения, ДопПараметры) Экспорт

	Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда
	
		Возврат;	
	
	КонецЕсли;

	ДопПараметры.ПараметрыОткрытия.Вставить("ПредметСнабжения", ПредметСнабжения);	
	
	ОткрытьФормуЭлемента(ДопПараметры.ИмяФормыЭлемента, ДопПараметры.ПараметрыОткрытия, ДопПараметры.ДобавлениеИзделия);

КонецПроцедуры // ОбработчикВыбораПредметаСнабжения()

&НаСервере
Функция ПроверитьОбработкуЭталона(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(СпецификацииПредметовСнабженияИзменения.ЭталонОбработан) КАК ЭталонОбработан,
	|	СпецификацииПредметовСнабженияИзменения.ПредметСнабжения КАК ПредметСнабжения
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений КАК СпецификацииПредметовСнабженияИзменения
	|ГДЕ
	|	СпецификацииПредметовСнабженияИзменения.ПредметСнабжения = &ПредметСнабжения
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПредметовСнабженияИзменения.ПредметСнабжения";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ЭталонОбработан;
	
КонецФункции

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ссылка", 	ВыбраннаяСтрока);
	ПараметрыОткрытия.Вставить("Ключ", 		ВыбраннаяСтрока);
	
	Если РазрешенТолькоПросмотр Тогда
	
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);	
	
	КонецЕсли;
	
	Если ТекущиеДанные.Тип = ТипГруппа Тогда
	
		ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаГруппы";
	
	Иначе
	
		ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия";
	
	КонецЕсли;
	
	ОткрытьФормуЭлемента(ИмяФормыЭлемента, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Элементы.ФормаДобавитьГруппа.Доступность 	= Истина;
		Элементы.ФормаДобавитьИзделие.Доступность 	= Истина;
		Элементы.ФормаДобавитьЗИП.Доступность 		= Истина; //++ 17.10.2017 Веденеев П. //запрещение добавления ЗИП в изделие
		//Элементы.ФормаУдалитьЭлементыСтруктурыКорабля.Доступность = Ложь; //++ 23.10.2017 Веденеев П. //удаление групп и элементов, напрямую подчиненных группам
		
	Иначе
		Попытка
			ЭтоТипГруппа = ТекущиеДанные.Тип = ТипГруппа;
			
			Элементы.ФормаДобавитьГруппа.Доступность 	= ЭтоТипГруппа;
			Элементы.ФормаДобавитьИзделие.Доступность 	= ЭтоТипГруппа;
			Элементы.ФормаДобавитьЗИП.Доступность 		= ЭтоТипГруппа; //++ 17.10.2017 Веденеев П. //запрещение добавления ЗИП в изделие
			
			//++ 23.10.2017 Веденеев П. //удаление групп и элементов, напрямую подчиненных группам
			//Элементы.ФормаУдалитьЭлементыСтруктурыКорабля.Доступность = ЭтоТипГруппа Или РодительЯвляетсяГруппой(ТекущиеДанные.Ссылка, ТипГруппа);
			//-- 23.10.2017 Веденеев П. //удаление групп и элементов, напрямую подчиненных группам
			
			Если ГруппаАрхив.Пустая() Тогда
				Элементы.СписокКонтекстноеМенюУдалитьАрхив.Доступность= Ложь;
			Иначе
				Элементы.СписокКонтекстноеМенюУдалитьАрхив.Доступность = ТекущиеДанные.Ссылка = ГруппаАрхив ИЛИ ТекущиеДанные.Родитель = ГруппаАрхив;;
			КонецЕсли; 
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//++ 23.10.2017 Веденеев П. //удаление групп и элементов, напрямую подчиненных группам
&НаСервереБезКонтекста
Функция РодительЯвляетсяГруппой(Ссылка, ТипГруппа)
	
	ТипРодителя = Ссылка.Родитель.Тип;
	
	Возврат (ТипРодителя = ТипГруппа Или Не ЗначениеЗаполнено(ТипРодителя));
	
КонецФункции
//-- 23.10.2017 Веденеев П. //удаление групп и элементов, напрямую подчиненных группам

&НаКлиенте
Процедура РежимПросмотраСпискаСписок(Команда)
	
	Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	Элементы.ГруппаПодменюДобавить.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраСпискаИерархическийСписок(Команда)
	
	Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	Элементы.ГруппаПодменюДобавить.Доступность = Ложь;	
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраСпискаДерево(Команда)
	
	Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
	Элементы.ГруппаПодменюДобавить.Доступность = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикУдаленияДубликатов(УдалениеПроизведено, ДопПараметры) Экспорт

	Если УдалениеПроизведено = Истина Тогда
	
		Элементы.Список.Обновить();
		
		Для каждого ЭлементСтруктуры Из ДопПараметры.ВыделенныеСтроки Цикл
		
			Если Не ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ЭлементСтруктуры, "ПометкаУдаления") Тогда
			
				Элементы.Список.ТекущаяСтрока = ЭлементСтруктуры;
				Прервать;
			
			КонецЕсли;	
		
		КонецЦикла;
	
	КонецЕсли;	

КонецПроцедуры // ОбработчикУдаленияДубликатов()

&НаСервере
Процедура УстановитьОтборПоЦенам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления КАК ПометкаУдаления,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Код КАК Код,
	               |	ВЫБОР
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |			ТОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование
	               |		ИНАЧЕ КаталогПредметовСнабжения.Наименование
	               |	КОНЕЦ КАК Наименование,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип КАК Тип,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование КАК Заведование,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Номер КАК Номер,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ВерсияПрошивки КАК ВерсияПрошивки,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ДатаПрошивки КАК ДатаПрошивки,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Предопределенный КАК Предопределенный,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	               |	КаталогПредметовСнабжения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	               |	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	               |	ВЫБОР
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |				И НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	               |			ТОГДА 0
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |				И СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	               |			ТОГДА 1
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	               |				И СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные
	               |				И НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	               |			ТОГДА 2
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	               |				И СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные
	               |				И СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	               |			ТОГДА 3
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	               |				И НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные
	               |				И НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	               |			ТОГДА 4
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	               |				И НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные
	               |				И СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	               |			ТОГДА 5
	               |	КОНЕЦ КАК ИдентификаторТипа,
	               |	ЕСТЬNULL(ДополнительныеНаименованияГрупп.Перевод, ДополнительныеНаименованияПредметовСнабжения.Перевод) КАК НаименованиеДополнительное,
	               |	ВЫБОР
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |				ИЛИ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка)
	               |				ИЛИ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель В
	               |						(ВЫБРАТЬ
	               |							Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	               |						ИЗ
	               |							Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	               |						ГДЕ
	               |							Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа))
	               |					И НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП
	               |			ТОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип
	               |		ИНАЧЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ТипСоставляющейЧасти
	               |	КОНЕЦ КАК ТипСоставляющейЧасти,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.НомерПозицииСпецификации КАК НомерПозицииСпецификации,
	               |	КаталогПредметовСнабжения.ФНН КАК ФНН,
	               |	КаталогПредметовСнабжения.NSN КАК NSN,
	               |	ЕСТЬNULL(КодыINCATПредставление.Представление, """") КАК INCAT,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ОбозначениеДоп КАК ОбозначениеДоп,
	               |	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные КАК ЕстьПодчиненные,
	               |	ОписанияИерархииЭлементовСтруктуры.ОписаниеИерархии КАК Входимость,
	               |	ВЫБОР
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения В
	               |				(ВЫБРАТЬ
	               |					СпецификацииПредметовСнабженияИзменения.ПредметСнабжения
	               |				ИЗ
	               |					РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений КАК СпецификацииПредметовСнабженияИзменения)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОбновляютсяСтруктурыЗаказов,
	               |	ВЫБОР
	               |		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения В
	               |				(ВЫБРАТЬ
	               |					ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП.ПредметСнабжения
	               |				ИЗ
	               |					РегистрСведений.ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП КАК ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОбновляютсяНаименования
	               |ИЗ
	               |	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименованияПредметовСнабжения
	               |			ПО КаталогПредметовСнабжения.Ссылка = ДополнительныеНаименованияПредметовСнабжения.Владелец
	               |				И (ДополнительныеНаименованияПредметовСнабжения.Язык = &Язык)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыINCATПредставление КАК КодыINCATПредставление
	               |			ПО КаталогПредметовСнабжения.Ссылка = КодыINCATПредставление.ПредметСнабжения
	               |		ПО СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименованияГрупп
	               |		ПО СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = ДополнительныеНаименованияГрупп.Владелец
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктуры
	               |		ПО СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = ОписанияИерархииЭлементовСтруктуры.ЭлементСтруктуры"; 
	
	Если ЕстьВнешниеЦены И ЕстьВнутренниеЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения В
		|(ВЫБРАТЬ
		|	ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних(, ) КАК ЦеныПредметовСнабженияСрезПоследних)";
	ИначеЕсли ЕстьВнутренниеЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения В
		|(ВЫБРАТЬ
		|	ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних(, ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внутренняя)) КАК ЦеныПредметовСнабженияСрезПоследних)";
	ИначеЕсли ЕстьВнешниеЦены Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения В
		|(ВЫБРАТЬ
		|	ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних(, ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внешняя)) КАК ЦеныПредметовСнабженияСрезПоследних)";
	КонецЕсли; 
	
	Список.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПросмотраСПиска()
	
	Если ЕстьВнешниеЦены Или ЕстьВнутренниеЦены Тогда
		РежимПросмотраСпискаСписок("");
	Иначе
		РежимПросмотраСпискаДерево("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьВнутренниеЦеныПриИзменении(Элемент)
	
	УстановитьОтборПоЦенам();
	УстановитьРежимПросмотраСПиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьВнешниеЦеныПриИзменении(Элемент)
	
	УстановитьОтборПоЦенам();
	УстановитьРежимПросмотраСПиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТекущееСостояние(ТекстСообщения,ДатаНачала=Неопределено,КоличествоЗавершено=0,ОбщееКоличество=0,СтрПрошло="",СтрОсталось="",СтрокаПояснение="") Экспорт
	
	ОбработкаПрерыванияПользователя();
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = ТекущаяДата();
	КонецЕсли; 
	
	ТекДата = ТекущаяДата();
	ВремяОсталось = Дата(1,1,1) + ?(КоличествоЗавершено=0,0,(ТекДата - ДатаНачала)/КоличествоЗавершено*(ОбщееКоличество-КоличествоЗавершено));
	ВремяПрошло   = Дата(1,1,1) + (ТекДата-ДатаНачала);
	СтрОсталось = ?(ВремяОсталось = Дата(1,1,1),"00:00:00",?(Год(ВремяОсталось)>1,Строка(Год(ВремяОсталось)-1) + " г. ","") + ?(Месяц(ВремяОсталось)>1,Строка(Месяц(ВремяОсталось)-1) + " мес. ","") + ?(День(ВремяОсталось)>1,Строка(День(ВремяОсталось)-1) + " дн. ","") + Формат(ВремяОсталось,"ДФ=""ЧЧ:мм:сс"""));
	СтрПрошло 	= ?(ВремяПрошло   = Дата(1,1,1),"00:00:00",?(Год(ВремяПрошло)>1,Строка(Год(ВремяПрошло)-1) + " г. ","") + ?(Месяц(ВремяПрошло)>1,Строка(Месяц(ВремяПрошло)-1) + " мес. ","") + ?(День(ВремяПрошло)>1,Строка(День(ВремяПрошло)-1) + " дн. ","") + Формат(ВремяПрошло,"ДФ=""ЧЧ:мм:сс"""));
	СтрокаПояснение = "Прошло: " + СтрПрошло + "  Осталось: " + СтрОсталось;
	
	Состояние("" + ДатаНачала  + " (" + КоличествоЗавершено + "/" + ОбщееКоличество + "): " + ТекстСообщения 
	,?(ОбщееКоличество=0,100,Цел(100/ОбщееКоличество*КоличествоЗавершено))
	,СтрокаПояснение);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщееКоличество(Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	КОЛИЧЕСТВО(КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент) КАК Контрагент
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель В ИЕРАРХИИ(&Родитель)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Родитель
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ПредметСнабжения КАК ПредметСнабжения,
	|	ЛОЖЬ КАК Обработан
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица";
	//|ГДЕ
	//|	ВременнаяТаблица.Контрагент = 0
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Владелец", Родитель.Владелец);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОбрабатываемыхПС.Загрузить(Выборка);
	
	ТаблицаПоставщиков = Родитель.ПредметСнабжения.ИзготовителиИПоставщики.Выгрузить();
	Поставщики.Загрузить(ТаблицаПоставщиков);
	
	Возврат Выборка.Количество();
	
КонецФункции
 
&НаСервере
Процедура ПротащитьПоставщиковНаСервере(Порция)
	
	Запрос = Новый Запрос;  // ПЕРВЫЕ " + Формат(Порция,"ЧГ=") + "
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ПредметСнабжения КАК ПредметСнабжения,
	|	Таблица.Обработан КАК Обработан
	|ПОМЕСТИТЬ Табл
	|ИЗ
	|	&ТаблицаДляОбработки КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(Порция,"ЧГ=") + "
	|	Табл.ПредметСнабжения КАК ПредметСнабжения
	|ИЗ
	|	Табл КАК Табл
	|ГДЕ
	|	НЕ Табл.Обработан";
	
	Запрос.УстановитьПараметр("ТаблицаДляОбработки", ТаблицаОбрабатываемыхПС.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТЧ_Поставщиков = Выборка.ПредметСнабжения.ИзготовителиИПоставщики;
		
		Для каждого Поставщик Из Поставщики Цикл
			
			Если ТЧ_Поставщиков.Найти(Поставщик.Контрагент) = Неопределено Тогда
				
				СпрОб = Выборка.ПредметСнабжения.ПолучитьОбъект();
				
				ЗаполнитьЗначенияСвойств(СпрОб.ИзготовителиИПоставщики.Добавить(), Поставщик);
				
				СпрОб.Записать();
				
			КонецЕсли; 
			
		КонецЦикла; 
				
		Найд = ТаблицаОбрабатываемыхПС.НайтиСтроки(Новый Структура("ПредметСнабжения", Выборка.ПредметСнабжения));
		Если Найд.Количество() > 0 Тогда
			Найд[0].Обработан = Истина;
		КонецЕсли; 
		
	КонецЦикла;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораЭлемента(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = Поставщики.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		ТекСтр = Поставщики.Получить(Индекс);
		Если НЕ ТекСтр.Контрагент = ВыбранныйЭлемент.Значение Тогда
			Поставщики.Удалить(Индекс);
		КонецЕсли; 
	КонецЦикла; 
	
	ОбщееКоличество = СписокПараметров.ОбщееКоличество;
	Порция 			= СписокПараметров.Порция;
	ВремяНачалаОбработки = СписокПараметров.ВремяНачалаОбработки;
	
	Сообщить("" + ТекущаяДата() + ": Начало обработки");
	
	ТекСчетчик = 0;

	Пока ТекСчетчик < ОбщееКоличество Цикл
		
		ВывестиТекущееСостояние("Обработка справочника", ВремяНачалаОбработки, ТекСчетчик, ОбщееКоличество);
		
		ПротащитьПоставщиковНаСервере(Порция);
		
		ТекСчетчик = МИН(ТекСчетчик + Порция,ОбщееКоличество);
	
	КонецЦикла; 
	
	СтрПрошло = "";
	Если ТекСчетчик Тогда
		ВывестиТекущееСостояние("Обработка справочника",ВремяНачалаОбработки,ОбщееКоличество,ОбщееКоличество,СтрПрошло);
	КонецЕсли; 

	Сообщить("" + ТекущаяДата() + ": Окончание обработки (затрачено: " + СтрПрошло + ")");
	
КонецПроцедуры
 
&НаКлиенте
Процедура РаспространитьПоставщиков(Команда)
	
	ВремяНачалаОбработки = ТекущаяДата();
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекСсылка = Элементы.Список.ТекущиеДанные.Ссылка;
	Если ТекСсылка = Неопределено Тогда
		Возврат; 
	КонецЕсли; 
	
	ТаблицаОбрабатываемыхПС.Очистить(); Поставщики.Очистить();
	
	ОбщееКоличество = ПолучитьОбщееКоличество(ТекСсылка);
	
	Если Поставщики.Количество() = 0 Тогда
		Сообщить("" + " У текущего элемента нет поставщиков!");
		Возврат;
	КонецЕсли;
	
	Если ОбщееКоличество = 0 Тогда
		Сообщить("" + "У подчиненных элементов есть заполненные поставщики!");
		Возврат;
	КонецЕсли; 
	
	// Выберем одного поставщика
	Спис = Новый СписокЗначений;
	Для каждого Стр Из Поставщики Цикл
		Спис.Добавить(Стр.Контрагент);
	КонецЦикла; 
	
	Порция = МАКС(Цел(ОбщееКоличество/100), 1);
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Порция", Порция);
	ДопПараметры.Вставить("ОбщееКоличество", ОбщееКоличество);
	ДопПараметры.Вставить("ВремяНачалаОбработки", ВремяНачалаОбработки);

	Оповещение = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтаФорма, ДопПараметры);
	
	Спис.ПоказатьВыборЭлемента(Оповещение, "Выберите поставщика:");
		
КонецПроцедуры

//++ 18.10.2017 Веденеев П. //добавление со спецификацией

//процедура добавляет одиночный предмет снабжения в структуру заказа (в иерархию выбранного элемента). возвращает результат добавления
&НаСервере
Процедура ДобавитьПредметСнабженияВСтруктуруЗаказа(Родитель, ПредметСнабжения, ЭлементСтруктуры = Неопределено, ТипЭлементовСтруктурыЗаказа = Неопределено)
	
	СтруктураЗаказаМенеджер = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	
	Если Родитель = Неопределено Тогда
		
		Родитель = СтруктураЗаказаМенеджер.ПустаяСсылка();
		
	КонецЕсли;
	
	//если элемент имеет эталон - добавляем спецификацию	
	ЭталонныеИзделияМенеджерЗаписи = РегистрыСведений.ЭталонныеИзделияВСтруктуреЗаказов.СоздатьМенеджерЗаписи();
	ЭталонныеИзделияМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
	ЭталонныеИзделияМенеджерЗаписи.Прочитать();
	
	Если ЭталонныеИзделияМенеджерЗаписи.Выбран() И Не ЭталонныеИзделияМенеджерЗаписи.ЭлементСтруктурыЗаказа = ЭлементСтруктуры Тогда 
	
		ДеревоСпецификации = СтруктураЗаказаСервер.ПолучитьДеревоСпецификацииЭталонногоЭлемента(ЭталонныеИзделияМенеджерЗаписи.ЭлементСтруктурыЗаказа);
		
		//++ 06.03.2018 Веденеев П. //добавлена проверка на обработку эталона корневого элемента
		КорневаяСтрока = ДеревоСпецификации.Строки[0];
		
		Если Не КорневаяСтрока.ЭталонОбработан Тогда
			
			Сообщить("Не обработан эталон элемента "+Строка(КорневаяСтрока.ПредметСнабжения)+ ". Подчиненные элементы будут записаны после обработки эталона", 
				СтатусСообщения.Важное);
			Возврат;
			
		КонецЕсли;
		//-- 06.03.2018 Веденеев П. //добавлена проверка на обработку эталона корневого элемента
		
		СтрокиДерева = ?(ЭлементСтруктуры = Неопределено, ДеревоСпецификации.Строки, КорневаяСтрока.Строки);
		
		Если ЭлементСтруктуры = Неопределено Тогда
			
			ЭлементСтруктуры = Родитель;
			
		КонецЕсли;
		
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
			СоздатьЭлементСтруктурыЗаказа(СтрокаДерева, ЭлементСтруктуры, СтруктураЗаказаМенеджер);	
		
		КонецЦикла;
		
	Иначе
		
		Если ЭлементСтруктуры = Неопределено Тогда
			
			ЭлементСтруктуры = ЗаписатьЭлементСтруктурыЗаказа(Владелец, Родитель, ПредметСнабжения, Ложь, СтруктураЗаказаМенеджер);
			
			Если ЭлементСтруктуры = Неопределено Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДеревоСпецификации = Новый ДеревоЗначений;
		ДеревоСпецификации.Колонки.Добавить("ПредметСнабжения", Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения"));
		ДеревоСпецификации.Колонки.Добавить("ЗИП", Новый ОписаниеТипов("Булево"));
		ДеревоСпецификации.Колонки.Добавить("ЭталонОбработан", Новый ОписаниеТипов("Булево"));
		
		ЗаполнитьДеревоСпецификации(ПредметСнабжения, ДеревоСпецификации.Строки);
		
		Для каждого СтрокаДерева Из ДеревоСпецификации.Строки Цикл
		
			СоздатьЭлементСтруктурыЗаказа(СтрокаДерева, ЭлементСтруктуры, СтруктураЗаказаМенеджер);	
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//процедура заполняет дерево составляющих частей предмета снабжения
Процедура ЗаполнитьДеревоСпецификации(ПредметСнабжения, СтрокиДерева, СчитанныеЭлементы = Неопределено) Экспорт
	
	Если СчитанныеЭлементы = Неопределено Тогда //проверка на зацикливание
		
		СчитанныеЭлементы = Новый Массив;
			
	КонецЕсли;
	
	СчитанныеЭлементы.Добавить(ПредметСнабжения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	ИСТИНА КАК ЭталонОбработан
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|	И НЕ СпецификацииПредметовСнабжения.СоставляющаяЧасть В (&СчитанныеЭлементы)";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("СчитанныеЭлементы", СчитанныеЭлементы); //проверка на зацикливание
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
		
		МаксимальныйИндекс = СчитанныеЭлементы.ВГраница();
		
		Если Выборка.ЗИП Тогда
			
			ЗаполнитьДеревоСпецификации(Выборка.Ссылка, СтрокаДерева.Строки, СчитанныеЭлементы);
			
			Если Не СчитанныеЭлементы[МаксимальныйИндекс] = ПредметСнабжения Тогда
				
				СчитанныеЭлементы.Удалить(МаксимальныйИндекс);
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//процедура создает элемент структуры заказа на основании элемента спецификации. если элемент спецификации имеет свою спецификацию - вызывает создание подчиненных элементов
&НаСервере
Процедура СоздатьЭлементСтруктурыЗаказа(СтрокаДерева, ЭлементРодитель, СтруктураЗаказаМенеджер);
	
	Если Не СтрокаДерева.ЭталонОбработан Тогда
		
		Сообщить("Не обработан эталон элемента "+Строка(СтрокаДерева.ПредметСнабжения), СтатусСообщения.Важное);
		Возврат;
		
	КонецЕсли;
		
	ЭлементСтруктурыЗаказа =  ЗаписатьЭлементСтруктурыЗаказа(Владелец, ЭлементРодитель, СтрокаДерева.ПредметСнабжения, СтрокаДерева.ЗИП, 
		СтрокаДерева.ТипСоставляющейЧасти, СтруктураЗаказаМенеджер); //++ 06.03.2018 Веденеев П. //добавлено заполнение типа составляющей части
	
	Если ЭлементСтруктурыЗаказа = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтрокиДерева = СтрокаДерева.Строки;
	
	Если СтрокиДерева.Количество() > 0 Тогда
		
		Для каждого ПодчиненнаяСтрока Из СтрокиДерева Цикл
			
			СоздатьЭлементСтруктурыЗаказа(ПодчиненнаяСтрока, ЭлементСтруктурыЗаказа, СтруктураЗаказаМенеджер);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//функция записывает элемент структуры заказа в БД. возвращает ссылку на созданный элемент (неопределено, если создать не удалось)
&НаСервереБезКонтекста
Функция ЗаписатьЭлементСтруктурыЗаказа(Владелец, ЭлементРодитель, ПредметСнабжения, ЗИП, ТипСоставляющейЧасти, СтруктураЗаказаМенеджер = Неопределено)
	
	СправочникМенеджерСтруктураЗаказа = ?(СтруктураЗаказаМенеджер = Неопределено, Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП, СтруктураЗаказаМенеджер);
	
	ЭлементСтруктурыЗаказа = СправочникМенеджерСтруктураЗаказа.СоздатьЭлемент();
	ЭлементСтруктурыЗаказа.Владелец = Владелец;
	ЭлементСтруктурыЗаказа.Родитель = ЭлементРодитель;
	ЭлементСтруктурыЗаказа.ПредметСнабжения = ПредметСнабжения;
	ЭлементСтруктурыЗаказа.Наименование = Строка(ПредметСнабжения);
	ЭлементСтруктурыЗаказа.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	ЭлементСтруктурыЗаказа.ЗИП = ЗИП;
	ЭлементСтруктурыЗаказа.ТипСоставляющейЧасти = ТипСоставляющейЧасти; //++ 06.03.2018 Веденеев П. //добавлено заполнение типа составляющей части

	
	Попытка
		
		ЭлементСтруктурыЗаказа.Записать();
		Возврат ЭлементСтруктурыЗаказа.Ссылка;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

//-- 18.10.2017 Веденеев П. //добавление со спецификацией

//++ 19.10.2017 Веденеев П. //объединение элементов структуры
#Область ОбъединениеЭлементов

&НаКлиенте
Процедура Объединить(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, "Не выбран элемент-приемник!");
		Возврат;
		
	КонецЕсли;
	
	МассивСсылокИсточников = Элементы.Список.ВыделенныеСтроки;
	
	Если МассивСсылокИсточников.Количество() < 2 Тогда
	
		ПоказатьПредупреждение(, "Выделено менее двух элементов!");
		Возврат;	
	
	КонецЕсли;
	
	Если ОбъединяемыеЭлементыСодержатГруппыИИзделия(МассивСсылокИсточников) Тогда
		
		ПоказатьПредупреждение(, "Выделены как группы, так и не группы!");
		Возврат;
		
	КонецЕсли;
	
	СсылкаПриемник = ТекущиеДанные.Ссылка;
	
	МассивСсылокИсточников.Удалить(МассивСсылокИсточников.Найти(СсылкаПриемник));
	
	ДополнительныеПараметры = Новый Структура("СсылкаПриемник, МассивСсылокИсточников", СсылкаПриемник, МассивСсылокИсточников);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбъединитьЗавершение", ЭтаФорма, ДополнительныеПараметры), "Объединить выделенные элементы?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбъединениеЭлементов(ДополнительныеПараметры);
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбъединениеЭлементов(ПараметрыОбъединения)
	
	ПараметрыОбъединения.Вставить("ВыбраннаяКоманда", "Объединить");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеДубликатовЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаВыполнение", ПараметрыОбъединения, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ОбъединяемыеЭлементыСодержатГруппыИИзделия(МассивЭлементов)
	
	ЕстьГруппа = Ложь;
	ЕстьНеГруппа = Ложь;
	
	Для каждого ЭлементМассива Из МассивЭлементов Цикл
		
		Если ЭлементМассива.Тип = ТипГруппа Или Не ЗначениеЗаполнено(ЭлементМассива.ПредметСнабжения) Тогда
			
			ЕстьГруппа = Истина;
			
		Иначе
			
			ЕстьНеГруппа = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьГруппа И ЕстьНеГруппа;
	
КонецФункции

//++ 20.10.2017 Веденеев П. //удаление дубликатов (предметов снабжения)

//функция схлопывает элементы структуры, если все выделенные элементы ссылаются один предмет снабжения
//возвращает истина - произошло схлопывание, удаление дубликатов не требуется; ложь - требуется удаление дубликатов
&НаКлиенте
Функция СхлопнутьЭлементыСтруктуры(ОригинальныйЭлемент, ВыделенныеСтроки, ПредметыСнабжения)
	
	ПредметСнабжения = ПредметыСнабжения[0];
	
	Для каждого ТекПредметСнабжения Из ПредметыСнабжения Цикл
		
		Если Не ТекПредметСнабжения = ПредметСнабжения Тогда //выбраны разные предметы снабжения, нужно вызывать удаление дубликатов
			
			Возврат Ложь;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	//АВ+
	ВыделенныеСтроки.Удалить(ВыделенныеСтроки.Найти(ОригинальныйЭлемент));
	
	ПараметрыОбъединения = Новый Структура;
	ПараметрыОбъединения.Вставить("СсылкаПриемник", ОригинальныйЭлемент);
	ПараметрыОбъединения.Вставить("МассивСсылокИсточников", ВыделенныеСтроки);
	ПараметрыОбъединения.Вставить("ВыбраннаяКоманда", "Объединить");
	
	ОткрытьФорму("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаВыполнение", ПараметрыОбъединения, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Возврат Истина;
	
КонецФункции

//функция возвращает список предметов снабжения выделенных элементов структуры заказа
//если в массив элементов структуры встречаются группы  или не указан предмет снабжения - возвращает Неопределено
&НаСервереБезКонтекста
Функция ПолучитьМассивДубликатов(МассивЭлементовСтруктуры, ТипГруппа)
	
	МассивДубликатов = Новый Массив;
	КоличествоЭлементов = МассивЭлементовСтруктуры.Количество();
	
	Для каждого ЭлементМассива Из МассивЭлементовСтруктуры Цикл
		
		Если ЭлементМассива.Тип = ТипГруппа Или Не ЗначениеЗаполнено(ЭлементМассива.ПредметСнабжения) Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если Не МассивДубликатов.Найти(ЭлементМассива.ПредметСнабжения) = Неопределено И КоличествоЭлементов > 2 Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		МассивДубликатов.Добавить(ЭлементМассива.ПредметСнабжения);
		
	КонецЦикла;
	
	Возврат МассивДубликатов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРодителейУдаляемыхСпецификаций(МассивЭлементовСтруктуры, Оригинал)
	
	ТаблицаРодителейУдаляемыхСпецификаций.Очистить(); 
	
	Для каждого ЭлементМассива Из МассивЭлементовСтруктуры Цикл
		
		РодительЭлемента = ЭлементМассива.Родитель;
		ПредметСнабжения = РодительЭлемента.ПредметСнабжения;
		
		Если РодительЭлемента.Тип = ТипГруппа Или Не ЗначениеЗаполнено(ПредметСнабжения) 
			Или ЭлементМассива.Тип = ТипГруппа Или Не ЗначениеЗаполнено(ЭлементМассива.ПредметСнабжения) 
			Или (ЭлементМассива.ПредметСнабжения = Оригинал.ПредметСнабжения И ПредметСнабжения = Оригинал.Родитель.ПредметСнабжения) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаРодителейУдаляемыхСпецификаций.Добавить();
		СтрокаТаблицы.ПредметСнабжения = ПредметСнабжения;
		СтрокаТаблицы.СоставляющаяЧасть = ЭлементМассива.ПредметСнабжения;
		СтрокаТаблицы.ЗИП = ЭлементМассива.ЗИП;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъединяемыхЭлементовСтруктуры(Дубликаты, Оригинал, ТипГруппа)
	
	СписокОбъединяемыхЭлементовСтруктуры = Новый СписокЗначений;
	
	СписокОбъединяемыхЭлементовСтруктуры.Добавить(Оригинал);
	
	ИндексКрайнегоДубликата = Дубликаты.Количество() - 1;
	
	Для каждого Дубликат Из Дубликаты Цикл
		
		РодительДубликата = Дубликат.Родитель;
		
		//	 Если (РодительДубликата.Тип = ТипГруппа Или Не ЗначениеЗаполнено(РодительДубликата.ПредметСнабжения)) 
		Если Не Дубликат = Оригинал Тогда
			
			СписокОбъединяемыхЭлементовСтруктуры.Добавить(Дубликат);
			
		КонецЕсли;
		
	КонецЦикла;
	 
	 Возврат СписокОбъединяемыхЭлементовСтруктуры;
	
КонецФункции

&НаКлиенте
Процедура УдалитьДубликатыСтарая(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		
		ПоказатьПредупреждение(, "Выделено менее двух элементов!");
		Возврат;
		
	КонецЕсли;
	
	Дубликаты = ПолучитьМассивДубликатов(ВыделенныеСтроки, ТипГруппа);
	
	Если Дубликаты = Неопределено Тогда
		
		ПоказатьПредупреждение(, "Среди выделенных элементов или их родителей есть группы и/или элементы без предмета снабжения или выделены элементы с одинаковыми предметами снабжения!");
		Возврат;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные; 
	
	Если СхлопнутьЭлементыСтруктуры(ТекущиеДанные.Ссылка, ВыделенныеСтроки, Дубликаты) Тогда
		
		Элементы.Список.Обновить();
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Дубликаты", Дубликаты);
	
	СписокСохраняемыхРеквизитов = Новый СписокЗначений;
	СписокСохраняемыхРеквизитов.Добавить("Обозначение", "Обозначение");
	СписокСохраняемыхРеквизитов.Добавить("ОбозначениеТранслитированное", "Обозначение транслитерированное");
	СписокСохраняемыхРеквизитов.Добавить("ДокументНаПоставку", "Документ на поставку");
	СписокСохраняемыхРеквизитов.Добавить("НомерОСК", "Номер ОСК");
	СписокСохраняемыхРеквизитов.Добавить("ФНН", "ФНН");
	СписокСохраняемыхРеквизитов.Добавить("NSN", "NSN");
	СписокСохраняемыхРеквизитов.Добавить("INCAT", "INCAT");
	СписокСохраняемыхРеквизитов.Добавить("ИзготовителиИПоставщики", "Табличная часть: Изготовители и поставщики");
	СписокСохраняемыхРеквизитов.Добавить("Характеристики", "Табличная часть: Характеристики");
	
	ПараметрыОткрытия.Вставить("СписокСохраняемыхРеквизитов", СписокСохраняемыхРеквизитов);
	
	ПараметрыОткрытия.Вставить("ОригинальныйЭлемент", ТекущиеДанные.ПредметСнабжения);
	
	ЗаполнитьТаблицуРодителейУдаляемыхСпецификаций(ВыделенныеСтроки, ТекущиеДанные.Ссылка);
	
	ПараметрыОткрытия.Вставить("ТаблицаРодителейУдаляемыхСпецификаций", ТаблицаРодителейУдаляемыхСпецификаций);
	ПараметрыОткрытия.Вставить("ПризнакЗИПОригинала", ТекущиеДанные.ЗИП);
	ПараметрыОткрытия.Вставить("СписокОбъединяемыхЭлементовСтруктуры", ПолучитьСписокОбъединяемыхЭлементовСтруктуры(ВыделенныеСтроки, ТекущиеДанные.Ссылка, ТипГруппа));
		
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеДубликатовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//Обработчик команды Удалить дубликаты
&НаКлиенте
Процедура УдалитьДубликаты(Команда)
	
	Элементы.Список.Обновить();
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	ОригинальныйЭлемент = ТекущиеДанные.Ссылка;

	Если ВыделенныеСтроки.Количество() < 2 Тогда
		
		ПоказатьПредупреждение(, "Выделено менее двух элементов!");
		Возврат;
		
	КонецЕсли;	
		
	//1. Блок проверки
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Оригинал", ОригинальныйЭлемент);
	ПараметрыПроверки.Вставить("МассивОбъединяемыхЭлементовСтруктуры", ВыделенныеСтроки);
	
	РезультатПроверки = СтруктураЗаказаСервер.ПроверитьВозможностьОбъединенияЭлементовСтруктуры(ПараметрыПроверки);
	
	//2. Обработка
	
	Если РезультатПроверки.Действие = "СхлопываниеЭлементовСтруктуры" Тогда
		
		ВыделенныеСтроки.Удалить(ВыделенныеСтроки.Найти(ОригинальныйЭлемент));
		
		ПараметрыОбъединения = Новый Структура;
		ПараметрыОбъединения.Вставить("СсылкаПриемник", ОригинальныйЭлемент);
		ПараметрыОбъединения.Вставить("МассивСсылокИсточников", ВыделенныеСтроки);
		ПараметрыОбъединения.Вставить("ВыбраннаяКоманда", "Объединить");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеДубликатовЗавершение", ЭтотОбъект);

		ОткрытьФорму("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаВыполнение", ПараметрыОбъединения, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
		
	ИначеЕсли РезультатПроверки.Действие = "УдалениеДубликатовПредметовСнабжения" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Дубликаты", РезультатПроверки.Дубликаты);
		ПараметрыОткрытия.Вставить("СписокСохраняемыхРеквизитов", ПолучитьСписокСохраняемыхЭлементов());
		ПараметрыОткрытия.Вставить("ОригинальныйЭлемент", ТекущиеДанные.ПредметСнабжения);
		
		ЗаполнитьТаблицуРодителейУдаляемыхСпецификаций(ВыделенныеСтроки, ТекущиеДанные.Ссылка);
		
		ПараметрыОткрытия.Вставить("ТаблицаРодителейУдаляемыхСпецификаций", ТаблицаРодителейУдаляемыхСпецификаций);
		ПараметрыОткрытия.Вставить("ПризнакЗИПОригинала", ТекущиеДанные.ЗИП);
		ПараметрыОткрытия.Вставить("СписокОбъединяемыхЭлементовСтруктуры", ПолучитьСписокОбъединяемыхЭлементовСтруктуры(ВыделенныеСтроки, ТекущиеДанные.Ссылка, ТипГруппа));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалениеДубликатовЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Удаление невозможно: %1'"), РезультатПроверки.ОписаниеОтказа));
	
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДубликатыЧерезМастер(Команда)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		Если ТипЗнч(Стр) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			ПоказатьПредупреждение(, "Выделите элементы внутри группировки!");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОригинальныйЭлемент = ТекущиеДанные.Ссылка;

	Если ВыделенныеСтроки.Количество() < 2 Тогда
		
		ПоказатьПредупреждение(, "Выделено менее двух элементов!");
		Возврат;
		
	КонецЕсли;	
	
	
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Оригинал", 	ОригинальныйЭлемент);
	ПараметрыОткрытия.Вставить("Дубликаты", ВыделенныеСтроки);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьДубликатыЧерезМастерЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("Обработка.МастерУдаленияДублейСтруктурыЗаказа.Форма", ПараметрыОткрытия, Неопределено,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяВнешнейОбработки(АдресВоВременномХранилище)
	
	Возврат ВнешниеОбработки.Подключить(АдресВоВременномХранилище,,);
  
КонецФункции 

&НаКлиенте
Процедура УдалитьДубликатыЧерезМастерЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Если РезультатВыполнения.Отказ Тогда
			
			ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Удаление невозможно: %1'"), РезультатВыполнения.ОписаниеОтказа));
			
		Иначе
			
			Элементы.Список.Обновить();	
			
			Если ПоискВключен Тогда
				ПозиционированиеПослеУдаленияДублей();	
				настройкаПоискаДублей("","",Истина);
			КонецЕсли;
			
		КонецЕсли; 	
	
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура УдалениеДубликатовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Элементы.Список.Обновить();		

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокСохраняемыхЭлементов()
	
	СписокСохраняемыхРеквизитов = Новый СписокЗначений;
	СписокСохраняемыхРеквизитов.Добавить("Обозначение", "Обозначение");
	СписокСохраняемыхРеквизитов.Добавить("ОбозначениеТранслитированное", "Обозначение транслитерированное");
	СписокСохраняемыхРеквизитов.Добавить("ДокументНаПоставку", "Документ на поставку");
	СписокСохраняемыхРеквизитов.Добавить("НомерОСК", "Номер ОСК");
	СписокСохраняемыхРеквизитов.Добавить("ФНН", "ФНН");
	СписокСохраняемыхРеквизитов.Добавить("NSN", "NSN");
	СписокСохраняемыхРеквизитов.Добавить("INCAT", "INCAT");
	СписокСохраняемыхРеквизитов.Добавить("ИзготовителиИПоставщики", "Табличная часть: Изготовители и поставщики");
	СписокСохраняемыхРеквизитов.Добавить("Характеристики", "Табличная часть: Характеристики");
	
	Возврат СписокСохраняемыхРеквизитов;

КонецФункции


//-- 20.10.2017 Веденеев П. //удаление дубликатов (предметов снабжения)

#КонецОбласти
//++ 19.10.2017 Веденеев П. //объединение элементов структуры

//++ 23.10.2017 Веденеев П. //удаление групп и элементов, напрямую подчиненных группам
&НаКлиенте
Процедура УдалитьЭлементыСтруктурыКорабля(Команда)
	
	ЭлементСтруктуры = Элементы.Список.ТекущиеДанные.Ссылка;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЭлементыСтруктурыКорабляЗавершение", ЭтаФорма, Новый Структура("ЭлементСтруктуры", ЭлементСтруктуры));
	
	ПоказатьВопрос(ОписаниеОповещения, "Внимание!!! Выполнение действия приведет к необратимому удалению выделенных элементов и всех их подчиненных. Продолжить?", РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементыСтруктурыКорабляЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		РезультатУдаленияЭлемента = СтруктураЗаказаСервер.УдалитьЭлементСтруктурыЗаказа(ДополнительныеПараметры.ЭлементСтруктуры);
		
		Если РезультатУдаленияЭлемента.Выполнено Тогда
			
			Элементы.Список.Обновить();
			
		Иначе
			
			Сообщить(РезультатУдаленияЭлемента.Описание, СтатусСообщения.Важное);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		
	КонецЕсли;
	
КонецПроцедуры

//-- 23.10.2017 Веденеев П. //удаление групп и элементов, напрямую подчиненных группам

// Переместить в архив ++

&НаСервере
Функция НайтиПапкуАрхивНаКорабле(Корабль,Создавать=Истина)
	
	Если НЕ ЗначениеЗаполнено(Корабль) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Корабль
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка)
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = ""Архив""";
	
	Запрос.УстановитьПараметр("Корабль", Корабль);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда // Нашли, возвращаем
		
		Возврат Выборка.Ссылка;
		
	ИначеЕсли Создавать Тогда 
		
		НовЭлемент = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		НовЭлемент.Владелец = Корабль;
		НовЭлемент.Наименование = "Архив";
		НовЭлемент.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
		НовЭлемент.Записать();
		Возврат НовЭлемент.Ссылка;
		
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции
 
&НаСервере
Процедура ПереместитьВАрхивНаСервере_Старая(ВыделенныеСтроки, Корабль)
	
	ГруппаАрхив = НайтиПапкуАрхивНаКорабле(Корабль);
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		Родитель 		 = Строка.Родитель;
		ПредметСнабжения = Строка.ПредметСнабжения;
		//если элемент имеет предмет снабжения и его родитель имеет предмет снабжения, тогда удаляем составляющую часть из спецификации родителя
		Если ЗначениеЗаполнено(ПредметСнабжения) И ЗначениеЗаполнено(Родитель) И ЗначениеЗаполнено(Родитель.ПредметСнабжения) Тогда
			
			РезультатУдаленияСпецификации = СтруктураЗаказаСервер.ОбработатьИзменениеСпецификации(Родитель.ПредметСнабжения, ПредметСнабжения, Строка.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление);
			
			Если Не РезультатУдаленияСпецификации.Выполнено Тогда
				
				Сообщить(РезультатУдаленияСпецификации.Описание, СтатусСообщения.Важное);
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СпрОбъект = Строка.ПолучитьОбъект();
		СпрОбъект.Родитель = ГруппаАрхив;
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
			Сообщить("Не удалось переместить в архив! "+Ошибка);
			Прервать;
		КонецПопытки; 
	КонецЦикла; 
		
КонецПроцедуры  

&НаСервере
Процедура ПереместитьВАрхивНаСервере(ВыделенныеСтроки, Корабль)
	
	ГруппаАрхив = НайтиПапкуАрхивНаКорабле(Корабль);
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		ПереместитьЭлементСтруктурыВАрхивНаСервере(Строка, ГруппаАрхив);
	КонецЦикла; 
		
КонецПроцедуры // ПереместитьВАрхивНаСервере

&НаСервере
Процедура ПереместитьЭлементСтруктурыВАрхивНаСервере(Ссылка, ГруппаАрхив)
	
	НачатьТранзакцию();
	
	Попытка
		
		СпрОбъект = Ссылка.ПолучитьОбъект();
		СпрОбъект.Родитель = ГруппаАрхив;
		СпрОбъект.Записать();
		
		Если ЗначениеЗаполнено(Ссылка.Родитель.ПредметСнабжения) И ЗначениеЗаполнено(Ссылка.ПредметСнабжения) Тогда
		
			СпецификацииПредметовСнабжения.УдалитьСоставляющуюЧастьИзСпецификации(Ссылка.Родитель.ПредметСнабжения, Ссылка.ПредметСнабжения);
			СпецификацииПредметовСнабжения.ДобавитьВРегистрАктуализацияСтруктурыПС(Ссылка.Родитель.ПредметСнабжения);
		
		КонецЕсли; 		
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;    		
		
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры  // ПереместитьЭлементСтруктурыВАрхивНаСервере

&НаСервере
Функция ПолучитьРодителяСтроки(ТекДанные)
	
	Возврат ТекДанные.Родитель;
	
КонецФункции

&НаКлиенте
Процедура ПереместитьВАрхив(Команда)
	
	ТекЭлементФормы = "Список";
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереместитьВАрхивЗавершение", ЭтаФорма, Новый Структура("ВыделенныеСтроки, Корабль, ТекЭлементФормы", ВыделенныеСтроки, Владелец, ТекЭлементФормы));
	
	ПоказатьВопрос(ОписаниеОповещения, "Переместить выделенные элементы в Архив?", РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВАрхивЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
		Корабль = ДополнительныеПараметры.Корабль;
		ТекЭлементФормы = ДополнительныеПараметры.ТекЭлементФормы;
		
		Родитель = ПолучитьРодителяСтроки(ВыделенныеСтроки[0]);
		
		ПереместитьВАрхивНаСервере(ВыделенныеСтроки, Корабль);
		
		Элементы[ТекЭлементФормы].Обновить();
		
		Элементы[ТекЭлементФормы].ТекущаяСтрока = Родитель;
		
	КонецЕсли;

КонецПроцедуры
 
// Переместить в архив --

// Удалить папку архив ++
&НаКлиенте
Процедура УдалитьАрхив(Команда)
	
	ЭлементСтруктуры = Элементы.Список.ТекущаяСтрока;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьАрхивЗавершение", ЭтаФорма, Новый Структура("ЭлементСтруктуры, ТекЭлемент", ЭлементСтруктуры, "Список"));
	
	ПоказатьВопрос(ОписаниеОповещения, "Внимание!!! Выполнение действия приведет к необратимому удалению выделенных элементов и всех их подчиненных. Продолжить?", РежимДиалогаВопрос.ДаНет); 

КонецПроцедуры

// ++ 18.07.2018 15:38:58 Базунов Д.А. Задача: 
// Если есть право удаление то удаляем в привилигированном режиме, чтобы на давать доступ на вспомогательные регистры Тогда
&НаСервере
Функция ЕстьПравоУдаления()
	
	Если ПравоДоступа("Удаление", Метаданные.Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП) И НЕ РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции
// -- 18.07.2018 15:38:58 Базунов Д.А. Задача:

&НаКлиенте
Процедура УдалитьАрхивЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		РезультатУдаленияЭлемента = СтруктураЗаказаСервер.УдалитьЭлементСтруктурыЗаказа(ДополнительныеПараметры.ЭлементСтруктуры, ЕстьПравоУдаления());
		
		Если РезультатУдаленияЭлемента.Выполнено Тогда
			
			Элементы[ДополнительныеПараметры.ТекЭлемент].Обновить();
			
		Иначе
			
			Сообщить(РезультатУдаленияЭлемента.Описание, СтатусСообщения.Важное);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		
	КонецЕсли;
	
КонецПроцедуры

// Удалить папку архив --

// Преобразование в группу ++
#Область ПреобразованиеВГруппу

&НаСервере
Процедура ПреобразоватьВГруппуНаСервере_Старая(ДопПараметры)
	
	ТекПС = ДопПараметры.ЭлементСтруктуры.ПредметСнабжения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ТекПС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	
	ОчиститьСпецификацию = Истина;
	Пока Выборка.Следующий() Цикл
		
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.Тип = ТипГруппа;
		СпрОб.ПредметСнабжения = "";
		СпрОб.Количество = 1;
		СпрОб.КоличествоВЗИПБорт = 0;
		СпрОб.КоличествоВЗИПБаза = 0;
		СпрОб.КоличествоВЗИПДЭ = 0;
		СпрОб.КоличествоВЗИПР = 0;
		СпрОб.ЗИП = Ложь;
		
		Попытка
			СпрОб.Записать();
		Исключение
		    ОчиститьСпецификацию = Ложь;
		КонецПопытки;
		
	КонецЦикла;  
	
	// Очищаем спецификацию ПС
	Если ОчиститьСпецификацию Тогда
		
		ОбщиеФункцииСервер.УдалитьПредметСнабженияИзСпецификаций(ТекПС);
		
		МассивРегистров = Новый Массив;
		МассивРегистров.Добавить("ЗначенияХарактеристикПредметовПоставки");
		МассивРегистров.Добавить("ЛогЗагрузки");
		МассивРегистров.Добавить("ЭталонныеИзделияВСтруктуреЗаказов");
		МассивРегистров.Добавить("СпецификацииПредметовСнабженияОчередьИзменений");
		МассивРегистров.Добавить("ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП");		
		
		ОбщиеФункцииСервер.УдалитьСсылкиНаПредметСнабженияИзРегистровСведений(ТекПС, МассивРегистров);
		
		// Помечаем на удаление ПС
		СпрОб = ТекПС.ПолучитьОбъект();
		СпрОб.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьВГруппуНаСервере(ДополнительныеПараметры)

	ТекущийПредметСнабжения = ДополнительныеПараметры.ЭлементСтруктуры.ПредметСнабжения;
	Если НЕ ЗначениеЗаполнено(ТекущийПредметСнабжения) Тогда
		Возврат;	
	КонецЕсли; 
	
	Выборка = ВыбратьЭлементыСтруктурыПоПредметуСнабжения(ТекущийПредметСнабжения);

	НачатьТранзакцию();
	Попытка
		ИзменитьТипЭлементовСтрукутры(Выборка);
		ОчиститьРегистрыПоПредметуСнабжения(ТекущийПредметСнабжения);
		ПометитьНаУдаление(ТекущийПредметСнабжения);
		ЗафиксироватьТранзакцию();
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ВыбратьЭлементыСтруктурыПоПредметуСнабжения(ПредметСнабжения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции // ВыбратьЭлементыСтруктурыПоПредметуСнабжения

&НаСервере
Процедура ИзменитьТипЭлементовСтрукутры(Выборка)

	Пока Выборка.Следующий() Цикл
		
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		СпрОб.Тип = СтруктураЗаказаСерверПовтИсп.ТипГруппа();
		СпрОб.ПредметСнабжения = "";
		СпрОб.Количество = 1;
		СпрОб.КоличествоВЗИПБорт = 0;
		СпрОб.КоличествоВЗИПБаза = 0;
		СпрОб.КоличествоВЗИПДЭ = 0;
		СпрОб.КоличествоВЗИПР = 0;
		СпрОб.ЗИП = Ложь;
		
		СпрОб.Записать();
			
	КонецЦикла;

КонецПроцедуры // ИзменитьТипЭлментовСтрукутры

&НаСервере
Процедура ОчиститьРегистрыПоПредметуСнабжения(ПредметСнабжения)

	СпецификацииПредметовСнабжения.ОчиститьСпецификациюПредметаСнабжения(ПредметСнабжения);
	СпецификацииПредметовСнабжения.УдалитьСоставляющуюЧастьИзСпецификацийСДобавлениемВОчередь(ПредметСнабжения);
	
	МассивРегистров = Новый Массив;
	МассивРегистров.Добавить("ЗначенияХарактеристикПредметовПоставки");
	МассивРегистров.Добавить("ЛогЗагрузки");
	МассивРегистров.Добавить("ЭталонныеИзделияВСтруктуреЗаказов");
	МассивРегистров.Добавить("СпецификацииПредметовСнабженияОчередьИзменений");
	МассивРегистров.Добавить("ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП");		
	
	ОбщиеФункцииСервер.УдалитьСсылкиНаПредметСнабженияИзРегистровСведений(ПредметСнабжения, МассивРегистров);
	
КонецПроцедуры // ОчиститьРегистрыПоПредметуСнабжения

&НаСервере
Процедура ПометитьНаУдаление(ПредметСнабжения)
	
	СпрОб = ПредметСнабжения.ПолучитьОбъект();
	СпрОб.УстановитьПометкуУдаления(Истина); 

КонецПроцедуры // ПометитьНаУдаление

&НаКлиенте
Процедура ПослеЗакрытияВопросаВГруппу(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	ПреобразоватьВГруппуНаСервере(ДопПараметры);
	
	Элементы.Список.Обновить();

КонецПроцедуры

&НаСервере
Функция СсылкаЭтоГруппа(Элемент)
	Возврат (Элемент.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
КонецФункции

&НаСервере
Функция ЕстьРодительИзделие(ЭлементСсылка, ТипИзделие = Неопределено)
	
	Если ТипИзделие = Неопределено Тогда
		ТипИзделие = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	КонецЕсли; 
	
	Если ЭлементСсылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Родитель = ЭлементСсылка.Родитель;
	Если Родитель.Тип = ТипИзделие Тогда
		Возврат Истина;
	Иначе
		Возврат ЕстьРодительИзделие(Родитель, ТипИзделие);
	КонецЕсли; 
	
КонецФункции
 
&НаКлиенте
Процедура ПреобразоватьВГруппу(Команда)
	
	ТекДанные = Элементы.Список.ТекущаяСтрока;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаЭтоГруппа(ТекДанные) Тогда
		Сообщить("Выбранный элемент уже является группой! Преобразование в группу невозможно.");
		Возврат;
	КонецЕсли;
	
	Если ЕстьРодительИзделие(ТекДанные) Тогда
		Сообщить("Выбранный элемент входит в изделие! Преобразование в группу невозможно.");
		Возврат;
	КонецЕсли; 
	Если ЕстьВОчередиНаИзменение(ТекДанные) Тогда
		Сообщить("Изделие стоит в очереди на изменение, преобразование невозможно!");
		Возврат;
	КонецЕсли; 
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЭлементСтруктуры", ТекДанные);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВГруппу", ЭтаФорма, ДопПараметры);
	
	ТекстВопроса = "Преобразовать "+Строка(ТекДанные)+" в группу ?
	|ВЕЗДЕ, где встречается данное изделие, оно будет преобразовано в группу и будет очищена спецификация!";
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

// Преобразование в группу -- 	
#КонецОбласти

// Преобразование в изделие ++
#Область ПреобразованиеВИзделие

&НаСервере
Функция СсылкаЭтоИзделие(Элемент)
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СсылкаЭтоИзделие(Элемент);
КонецФункции

&НаСервере
Функция ЕстьПодчиненныеГруппы(ТекДанные)
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненныеГруппы(ТекДанные);
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоЗИП(Ссылка)
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЭтоЗИП(Ссылка);
КонецФункции

&НаСервере
Функция ЕстьВОчередиНаИзменение(Ссылка)
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьВОчередиНаИзменение(Ссылка);
КонецФункции

&НаСервере
Процедура ПреобразоватьВИзделиеНаСервере(ДопПараметры)
	
	НачатьТранзакцию();
	
	СправочникОбъект = ДопПараметры.ЭлементСтруктуры.ПолучитьОбъект();
	СправочникОбъект.ПреобразоватьВИзделие(ДопПараметры, Ложь);
	Попытка
		СправочникОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
	    Описание = ОписаниеОшибки();
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПС(РезультатЗакрытия, ДопПараметры) Экспорт

	Если ДопПараметры = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли; 
	
	// Тут выбрали нужный нам ПС
	Если ЕстьВОчередиНаИзменение(ДопПараметры.ЭлементСтруктуры) Тогда
		Сообщить("Изделие стоит в очереди на изменение, преобразование невозможно!");
		Возврат;
	КонецЕсли; 
	
	ДопПараметры.Вставить("ПредметСнабжения", РезультатЗакрытия);
	
	ПреобразоватьВИзделиеНаСервере(ДопПараметры);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаВИзделие(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПослеВыбораПС", ЭтаФорма, ДопПараметры);
	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаВыбора",, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПреобразоватьВИзделие(Команда)
	
	ТекДанные = Элементы.Список.ТекущаяСтрока;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СсылкаЭтоИзделие(ТекДанные) Тогда
		Сообщить("Текущий элемент это изделие, преобразование невозможно!");
		Возврат;
	КонецЕсли;
	Если ЕстьПодчиненныеГруппы(ТекДанные) Тогда
		Сообщить("Есть подчиненные группы, преобразование невозможно!");
		Возврат;
	КонецЕсли; 
	Если ЭтоЗИП(Элементы.Список.ТекущиеДанные.Родитель) Тогда
		Сообщить("Родитель с признаком ЗИП, преобразование невозможно!");
		Возврат;
	КонецЕсли; 
	// Проверка на наличие в очереди в процедуре: ПослеВыбораПС
	
	Режим = РежимДиалогаВопрос.ДаНет;
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЭлементСтруктуры", ТекДанные);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВИзделие", ЭтаФорма, ДопПараметры);
	
	ПоказатьВопрос(Оповещение, "Преобразовать "+Строка(ТекДанные)+" в изделие ?", Режим, 0);
	
КонецПроцедуры



// Преобразование в изделие --
#КонецОбласти


// Преобразование в изделие --

#Область НайтиДубли

&НаКлиенте
Процедура НайтиДублиПоНаименованию(Команда)
	
	настройкаПоискаДублей("Наименованию", "Обозначению"); 
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиДублиПоОбозначению(Команда)
	
	настройкаПоискаДублей("Обозначению", "Наименованию"); 

КонецПроцедуры

&НаКлиенте
Процедура настройкаПоискаДублей(ИмяПоляПоиска = "Наименованию", ИмяПоляНедоступности = "Обозначению", ОбновлениеСписка = Ложь)
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда 
		
		Если Не ОбновлениеСписка Тогда 
			
			Если ИмяПоляПоиска = "Наименованию" И Не ПоискПоНаименованию Тогда
				ПоискПоНаименованию = Истина;
				ПоискВключен		= Истина;
			ИначеЕсли ИмяПоляПоиска = "Наименованию" И ПоискПоНаименованию Тогда 
				ПоискПоНаименованию = Ложь;
				ПоискВключен		= Ложь;
			ИначеЕсли ИмяПоляПоиска = "Обозначению" И Не ПоискПоОбозначению Тогда 
				ПоискПоОбозначению 	= Истина;
				ПоискВключен		= Истина;
			ИначеЕсли ИмяПоляПоиска = "Обозначению" И ПоискПоОбозначению Тогда 
				ПоискПоОбозначению 	= Ложь;
				ПоискВключен		= Ложь;
			КонецЕсли;
			
			Если ПоискВключен Тогда
				ЗначениеПоиска = ТекДанные.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		ДублиНайдены = ЗапускПоискадублей();
		
		НастройкаОформленияПоискаДублей(ДублиНайдены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗапускПоискадублей()
	
	Ответ = Ложь;
	
	Если ПоискВключен Тогда
		
		ПараметрыДС = ПолучитьПараметрыДинСпискаДляПоискаДублей();
		
		Если Не ПараметрыДС.Свойство("МассивИзделий") Тогда
			Сообщить("Дубли не найдены.");
	        ПоискПоНаименованию = Ложь;
			ПоискПоОбозначению 	= Ложь;
			ПоискВключен 		= Ложь;
			
		Иначе
			ИзменитьЗапросДинамическогоСписка(Истина, ПараметрыДС);		
			Ответ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДинСпискаДляПоискаДублей()
	
	Ответ = Новый Структура();
	
	ТекстЗапроса = ПолучитьТекстЗапросаПоискаДублей();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса; 
	Запрос.Параметры.Вставить("Владелец",		Владелец);
	Запрос.Параметры.Вставить("ЭлементРодитель",ЗначениеПоиска);
	Запрос.Параметры.Вставить("ТипГруппа",		Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
	    МассивИзделий = Новый Массив;
		
	    МассивИзделий = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Ответ.Вставить("МассивИзделий", МассивИзделий);
		
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции // ПолучитьПараметрыДинСпискаДляПоискаДублей()

&НаСервере
Функция ПолучитьТекстЗапросаПоискаДублей()
 
	Ответ = "ВЫБРАТЬ
	|	СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	ВЫБОР
	|		КОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|			ТОГДА СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование
	|		ИНАЧЕ КаталогПредметовСнабжения.Наименование
	|	КОНЕЦ КАК Наименование
	|ПОМЕСТИТЬ ВТ_ВсеИзделия
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|	НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	|	И СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&ЭлементРодитель)
	|	И НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &ЭлементРодитель
	|	И НЕ СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = &ТипГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Обозначение,
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВсеИзделия.Ссылка) КАК Ссылка,
	|";
	
	Если ПоискПоНаименованию Тогда
		Ответ = Ответ + "
		|	ВТ_ВсеИзделия.Наименование КАК Наименование
		|";
	Иначе
		Ответ = Ответ + "
		|	ВТ_ВсеИзделия.Обозначение КАК Обозначение
		|";
	КонецЕсли;
	
	Ответ = Ответ + "
	|ПОМЕСТИТЬ ВТ_Дубли
	|ИЗ
	|	ВТ_ВсеИзделия КАК ВТ_ВсеИзделия
	|ГДЕ
	|";
	
	Если ПоискПоНаименованию Тогда
		Ответ = Ответ + "
		|	ВТ_ВсеИзделия.Наименование <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеИзделия.Наименование
		|";
	Иначе
		Ответ = Ответ + "
		|	ВТ_ВсеИзделия.Обозначение <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеИзделия.Обозначение
		|";
	КонецЕсли;
	
	Ответ = Ответ + "
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВсеИзделия.Ссылка) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеИзделия.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Дубли КАК ВТ_Дубли
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВсеИзделия КАК ВТ_ВсеИзделия
	|";
	
	Если ПоискПоНаименованию Тогда
		Ответ = Ответ + "
		|		ПО ВТ_Дубли.Наименование = ВТ_ВсеИзделия.Наименование";
	Иначе
		Ответ = Ответ + "
		|		ПО ВТ_Дубли.Обозначение = ВТ_ВсеИзделия.Обозначение";
	КонецЕсли;
	Возврат Ответ;	
 
 КонецФункции // ПолучитьТекстЗапросаПоискаДублей()

&НаСервере
Процедура ИзменитьЗапросДинамическогоСписка(АльтернативныйПоиск = Ложь, ПараметрыДС)
	
	ТекстУсловия = "
	|СправочникСтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В (&МассивИзделий)
	|";
		
	Если АльтернативныйПоиск Тогда
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "&УсловиеПоискаДублей", ТекстУсловия);
		Список.Параметры.УстановитьЗначениеПараметра("МассивИзделий", 	ПараметрыДС.МассивИзделий);
	Иначе
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, ТекстУсловия, "&УсловиеПоискаДублей");
		Список.Параметры.УстановитьЗначениеПараметра("УсловиеПоискаДублей", Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаОформленияПоискаДублей(ДублиНайдены)
	
	Если ПоискПоНаименованию Тогда
		ИмяТекОтбора= "Наименованию";
		ИмяБлока 	= "Обозначению";
	ИначеЕсли ПоискПоОбозначению Тогда
		ИмяТекОтбора= "Обозначению";
		ИмяБлока 	= "Наименованию";
	КонецЕсли;
	
	ИмяКнопки 				= "СписокКонтекстноеМенюНайтиДублиПо" + ИмяТекОтбора; 
	ИмяБлокируемойКнопки 	= "СписокКонтекстноеМенюНайтиДублиПо" + ИмяБлока; 
	
	Если ПоискВключен И ДублиНайдены Тогда
		Элементы[ИмяКнопки].Заголовок 	= "Отключить поиск дублей по " + нРег(ИмяТекОтбора);	
		Элементы[ИмяКнопки].Картинка 	= БиблиотекаКартинок.ОтменитьПоиск;
		
		Элементы[ИмяБлокируемойКнопки].Доступность = Ложь;	
		
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		Если ПоискПоНаименованию Тогда
			ВключитьГруппировкуДублей("Наименование");
		Иначе
			ВключитьГруппировкуДублей("Обозначение");
		КонецЕсли;
		
	Иначе
		Элементы.СписокКонтекстноеМенюНайтиДублиПоНаименованию.Заголовок 	= "Найти дубли по наименованию";
		Элементы.СписокКонтекстноеМенюНайтиДублиПоНаименованию.Картинка 	= БиблиотекаКартинок.УправлениеПоиском;
		Элементы.СписокКонтекстноеМенюНайтиДублиПоНаименованию.Доступность 	= Истина;
		
		Элементы.СписокКонтекстноеМенюНайтиДублиПоОбозначению.Заголовок 	= "Найти дубли по обозначению";
		Элементы.СписокКонтекстноеМенюНайтиДублиПоОбозначению.Картинка	 	= БиблиотекаКартинок.УправлениеПоиском;
		Элементы.СписокКонтекстноеМенюНайтиДублиПоОбозначению.Доступность 	= Истина;
		
		Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		
		ОтключитьГруппировкуДублей("Наименование");
		ОтключитьГруппировкуДублей("Обозначение");
				
		ИзменитьЗапросДинамическогоСписка(Ложь, Новый Структура());
		
		ПозиционированиеПослеУдаленияДублей(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьГруппировкуДублей (ИмяГруппировки)
	
	ГруппировкаСуществует = Ложь;
	
	Для каждого ЭлементНастроек Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
		Если ЭлементНастроек.Имя = ИмяГруппировки Тогда
			ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
			ГруппировкаСуществует = Истина;
		Иначе
			ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ГруппировкаСуществует Тогда
		НовГруппировка = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		НовГруппировка.Имя = ИмяГруппировки;
		
		ПолеПоле = НовГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
		ПолеПоле.Поле               = Новый ПолеКомпоновкиДанных(ИмяГруппировки);
		ПолеПоле.ТипГруппировки     = ТипГруппировкиКомпоновкиДанных.Элементы;
		ПолеПоле.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьГруппировкуДублей(ИмяГруппировки)
	
	Для каждого ЭлементНастроек Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
		Если ЭлементНастроек.Имя = ИмяГруппировки Тогда
			ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОтключитьГруппировкуДублей("Наименование");
	ОтключитьГруппировкуДублей("Обозначение");

КонецПроцедуры


// позиционирование после удаления дублей
// 
// 1. получаю все данные дин списка в тз
// 2. ищу в тз строки, которые выбраны на форме
// 3. получаю максимальный и минимальный индекс выделенных строк в тз
// 4. "шагаю" по тз вперед или назад, в поисках первого попавшегося кода
// 4.1 вперед, если следующий шаг это не конец таблицы, иначе назад
&НаСервере
Процедура ПозиционированиеПослеУдаленияДублей(ВернутьсяВГруппуРодителя = Ложь)
	
	Если ВернутьсяВГруппуРодителя Тогда
		Элементы.Список.ТекущаяСтрока = ЗначениеПоиска;
	Иначе
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		
		Если ВыделенныеСтроки.Количество() > 0 Тогда 
			
			ВсеДанныеДС = ДинамическийСписокВТаблицуЗначений();
			МаксИндекс  = ВсеДанныеДС.Количество()-1; 
			ПроходГрупп = 2;
			ПроходВперед= Истина;
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("ИндексСтрчки");
			
			НайденныеСтроки = Новый Массив;
			
			Для Каждого вСтрока Из ВыделенныеСтроки Цикл
				Если ПоискПоНаименованию И ЗначениеЗаполнено(вСтрока.Наименование) Тогда
					НайденныеСтроки = ВсеДанныеДС.НайтиСтроки(Новый Структура("Наименование", вСтрока.Наименование));
				ИначеЕсли ЗначениеЗаполнено(вСтрока.ПредметСнабжения.Обозначение) Тогда
					НайденныеСтроки = ВсеДанныеДС.НайтиСтроки(Новый Структура("Обозначение", вСтрока.ПредметСнабжения.Обозначение));
				КонецЕсли;
			КонецЦикла;
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Для Каждого вСтр Из НайденныеСтроки Цикл
					ИндексСтроки = ВсеДанныеДС.Индекс(вСтр);	
					нСтрока = ТЗ.Добавить();
					нСтрока.ИндексСтрчки = ИндексСтроки;
				КонецЦикла;
				
				ТЗ.Сортировать("ИндексСтрчки Возр");
				
				НужныйИндекс = ТЗ[ТЗ.Количество()-1].ИндексСтрчки+1;
				
				Если НужныйИндекс > МаксИндекс Тогда
					НужныйИндекс = ТЗ[0].ИндексСтрчки-1;
					ПроходВперед = Ложь;
				КонецЕсли;
				
				НужныйКод = ВсеДанныеДС[НужныйИндекс].Код; 
				
				Если ПустаяСтрока(НужныйКод) Тогда
					Для сч = 1 По ПроходГрупп Цикл
						Если ПроходВперед Тогда
							НужныйИндекс = НужныйИндекс + 1;
						Иначе
							НужныйИндекс = НужныйИндекс - 1;
						КонецЕсли;
						НужныйКод = ВсеДанныеДС[НужныйИндекс].Код; 
						Если Не ПустаяСтрока(НужныйКод) Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ВсеДанныеДС.Очистить();
				
				ВыделенныеСтроки.Очистить();
				
				Элементы.Список.ТекущаяСтрока = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.НайтиПоКоду(НужныйКод);
				
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	//ПозиционированиеПослеУдаленияДублей

&НаСервере
Функция ДинамическийСписокВТаблицуЗначений ()
	
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции	//ДинамическийСписокВТаблицуЗначений

#КонецОбласти