////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для общих процедур и функций.
// Создан отдельно вместо использования модуля ОбщегоНазначенияПереопределяемый 
// для максимального упрощения возможного обновления БСП.
// Савинов А.А. 10.03.2017
////////////////////////////////////////////////////////////////////////////////

#Область ИнформацияОбОшибках

// Процедура регистрации информации об ошибке, которую некому (или незачем) выводить на экран
// Параметры:
// Детали - Строка - Текстовое описание ошибки
// Приоритет - Перечисления.ПриоритетыОшибок
//
Процедура ЗарегистрироватьИнформациюОбОшибке(Детали, Приоритет = Неопределено) Экспорт

	МенеджерЗаписи = РегистрыСведений.ИнформацияОбОшибках.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	МенеджерЗаписи.UID = Новый УникальныйИдентификатор;
	МенеджерЗаписи.Приоритет = ?(ЗначениеЗаполнено(Приоритет), Приоритет, Перечисления.ПриоритетыОшибок.Низкий);
	МенеджерЗаписи.Детали = Детали;
	МенеджерЗаписи.Записать(Ложь);

КонецПроцедуры

#КонецОбласти

#Область Пользователи

// Процедура создания пользователя и пользователя ИБ для нового регламентного задания
// Предназначена для вызова из первого запуска при смене версии 
// Параметры:
// Имя - Строка
// Пароль - Строка
// МассивРолей - Массив
//
Процедура СоздатьПользователяДляРегламентногоЗадания(Имя, Пароль, МассивРолей) Экспорт

	НачатьТранзакцию();
	
	ПользовательРобота = Справочники.Пользователи.СоздатьЭлемент();
	ПользовательРобота.Наименование = Имя;
	
	ПользовательИБРобота = ПользователиИнформационнойБазы.СоздатьПользователя();
	ПользовательИБРобота.Имя = Имя;
	ПользовательИБРобота.ПолноеИмя = Имя;
	ПользовательИБРобота.АутентификацияСтандартная = Истина;
	ПользовательИБРобота.Пароль = Пароль;
	ПользовательИБРобота.ПоказыватьВСпискеВыбора = Ложь;
	ПользовательИБРобота.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
	
	Для каждого Роль Из МассивРолей Цикл
	
		ПользовательИБРобота.Роли.Добавить(Роль);	   
	
	КонецЦикла;
	
	Попытка
	
		ПользовательИБРобота.Записать();
	
	Исключение
		
		ОтменитьТранзакцию();
		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("Не удалось создать пользователя ИБ " + Имя + " для регламентного задания." + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
		Возврат;
	
	КонецПопытки;
	
	ПользовательРобота.ИдентификаторПользователяИБ = ПользовательИБРобота.УникальныйИдентификатор;
	ПользовательРобота.ОбменДанными.Загрузка = Истина;
	
	Попытка
	
		ПользовательРобота.Записать();
	
	Исключение
		
		ОтменитьТранзакцию();
		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("Не удалось создать пользователя " + Имя + " для регламентного задания." + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
		Возврат;
	
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();	

КонецПроцедуры

#КонецОбласти

#Область РеквизитыОбъектов

// Функция предназначена для получения значения реквизита объекта без использования объектной модели
// Параметры:
// Ссылка - ЛюбаяСсылка
// ИмяРеквизита - Строка
//
Функция ПолучитьЗначениеРеквизита(Знач Ссылка, Знач ИмяРеквизита) Экспорт

	Если Не ЗначениеЗаполнено(Ссылка) Или Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
	
		Возврат Неопределено;	
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.ИмяРеквизита КАК Значение
	|ИЗ
	|	ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяРеквизита", ИмяРеквизита);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", Ссылка.Метаданные().ПолноеИмя());
	
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат Неопределено;	
			
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Значение;
		
	Исключение
		
		Возврат Неопределено;
	
	КонецПопытки;	

КонецФункции // ПолучитьЗначениеРеквизита()

// Функция предназначена для получения структуры значений реквизитов объекта без использования объектной модели
// Параметры:
// Ссылка - ЛюбаяСсылка
// ИменаРеквизитов - Строка - Имена реквизитов через запятую (Например: "Код,Наименование,Дата")
//
Функция ПолучитьЗначенияРеквизитов(Знач Ссылка, Знач ИменаРеквизитов) Экспорт

	Если Не ЗначениеЗаполнено(Ссылка) Или Не ЗначениеЗаполнено(ИменаРеквизитов) Тогда
	
		Возврат Неопределено;	
	
	КонецЕсли;
	
	МассивИменРеквизитов = СтрРазделить(ИменаРеквизитов, ",", Ложь);
	
	Запрос = Новый Запрос;
	
	МассивТекстаЗапроса = Новый Массив;
	
	МассивТекстаЗапроса.Добавить("ВЫБРАТЬ ПЕРВЫЕ 1
	|	");
	
	Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
	
		МассивТекстаЗапроса.Добавить(СтрЗаменить("Таблица.ИмяРеквизита
		|	", "ИмяРеквизита", СокрЛП(ИмяРеквизита)));
		МассивТекстаЗапроса.Добавить(",");
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
	
	МассивТекстаЗапроса.Добавить(СтрЗаменить("ИЗ
	|	ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка", "ИмяТаблицы", Ссылка.Метаданные().ПолноеИмя()));
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат Неопределено;	
			
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврата = Новый Структура;
		
		ПоследнийИндекс = МассивИменРеквизитов.Количество() - 1;
		
		Для ИндексЭлементаМассива = 0 По ПоследнийИндекс Цикл
		
			СтруктураВозврата.Вставить(СокрЛП(МассивИменРеквизитов.Получить(ИндексЭлементаМассива)), Выборка.Получить(ИндексЭлементаМассива)); 
			
		КонецЦикла;
		
		Возврат СтруктураВозврата;
		
	Исключение
		
		Возврат Неопределено;
	
	КонецПопытки;	

КонецФункции // ПолучитьЗначенияРеквизитов()

#КонецОбласти

#Область ТабличныеЧастиОбъектов

// Функция предназначена для получения данных табличной части обеъкта без использования объектной модели 
// Параметры:
// Ссылка - ЛюбаяСсылка
// ИмяТабличнойЧасти - Строка
// ИменаРеквизитов - Строка - Имена реквизитов через запятую (Например: "Контрагент,Поставщик,Изготовитель")
//
Функция ПолучитьДанныеТабличнойЧастиОбъекта(Знач Ссылка, Знач ИмяТабличнойЧасти, Знач ИменаРеквизитов) Экспорт

	Если Не ЗначениеЗаполнено(Ссылка) Или Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Или Не ЗначениеЗаполнено(ИменаРеквизитов) Тогда
	
		Возврат Неопределено;	
	
	КонецЕсли;
	
	МассивИменРеквизитов = СтрРазделить(ИменаРеквизитов, ",", Ложь);
	
	Запрос = Новый Запрос;
	
	МассивТекстаЗапроса = Новый Массив;
	
	МассивТекстаЗапроса.Добавить("ВЫБРАТЬ
	|	");
	
	Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
	
		МассивТекстаЗапроса.Добавить(СтрЗаменить("Таблица.ИмяРеквизита
		|	", "ИмяРеквизита", СокрЛП(ИмяРеквизита)));
		МассивТекстаЗапроса.Добавить(",");
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
	
	МассивТекстаЗапроса.Добавить(СтрЗаменить("ИЗ
	|	ИмяТаблицы КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка", "ИмяТаблицы", Ссылка.Метаданные().ПолноеИмя() + "." + ИмяТабличнойЧасти));
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Попытка
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат РезультатЗапроса.Выгрузить();
		
	Исключение
		
		Возврат Неопределено;
	
	КонецПопытки;	

КонецФункции // ПолучитьТабличнуюЧастьОбъекта()

#КонецОбласти

#Область СтроковыеФункции

// Функция предназначена для получения строки с заменой символов/сочетаний символов русского языка символами/сочетаниями символов английского
// Параметры:
// ТекущаяСтрока - Строка
//
Функция ТранслитироватьРусВАнг(Знач ТекущаяСтрока) Экспорт
	
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ъе","ye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ъе","Ye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ье","ye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ье","Ye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ае","aye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ае","Aye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ее","eye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ее","Eye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ёе","eye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ёе","Eye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ие","iye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ие","Iye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ое","oye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ое","Oye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"юе","yeye"); ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Юе","Yeye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"эе","eye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Эе","Eye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"яё","yaye"); ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Яё","Yaye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ъё","ye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ъё","Ye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ьё","ye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ьё","Ye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"аё","aye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Аё","Aye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ёё","eye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ёё","Eye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ёё","eye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ёё","Eye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"иё","iye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Иё","Iye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"оё","oye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Оё","Oye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"юё","yeye"); ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Юё","Yeye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"эё","eye"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Эё","Eye");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"яё","yaye"); ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Яё","Yaye");
	
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"а","a"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"А","A");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"б","b"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Б","B");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"в","v"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"В","V");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"г","g"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Г","G");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"д","d"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Д","D");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"е","e"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Е","E");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ё","e"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ё","E");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ж","zh"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ж","Zh");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"з","z"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"З","Z");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"и","i"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"И","I");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"й","y"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Й","Y");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"к","k"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"К","K");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"л","l"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Л","L");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"м","m"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"М","M");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"н","n"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Н","N");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"о","o"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"О","O");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"п","p"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"П","P");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"р","r"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Р","R");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"с","s"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"С","S");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"т","t"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Т","T");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"у","u"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"У","U");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ф","f");		ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ф","F");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"х","kh");	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Х","Kh");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ц","ts");	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ц","Ts");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ч","ch");	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ч","Ch");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ш","sh");	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ш","Sh");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"щ","shch"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Щ","Shch");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ъ",""); 		ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ъ","");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ы","y"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ы","Y");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ь","");		ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ь","");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"э","e"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Э","E");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"ю","yu"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Ю","Yu");
	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"я","ya"); 	ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока,"Я","Ya");

	Возврат ТекущаяСтрока;
	
КонецФункции

// Функция предназначена для удаления из строки всех символов кроме букв кириллицы и латиницы и цифр
// Параметры:
// ТекущаяСтрока - Строка
// УдалитьБуквы - Булево
// УдалитьЦифры - Булево
//
Функция УдалитьИзСтрокиЛишниеСимволы(Знач ТекущаяСтрока, УдалитьБуквы = Ложь, УдалитьЦифры = Ложь) Экспорт

	Если УдалитьБуквы И УдалитьЦифры Тогда
	
		Возврат "";	
	
	КонецЕсли;
	
	RegExp = Новый COMОбъект("VBScript.RegExp");
	
	RegExp.MultiLine = Ложь; 
	RegExp.Global = Истина;
	RegExp.Pattern = "[^" + ?(УдалитьБуквы, "", "A-zА-я") + ?(УдалитьЦифры, "", "0-9") + "]";
	
	Возврат RegExp.Replace(ТекущаяСтрока, "");	

КонецФункции // УдалитьИзСтрокиЛишниеСимволы()

// Функция предназначена для удаления из строки переносов строк, табуляции и нескольких пробелов подряд
// Параметры:
// ТекущаяСтрока - Строка
//
Функция УдалитьИзСтрокиЛишниеПробелы(Знач ТекущаяСтрока) Экспорт

	RegExp = Новый COMОбъект("VBScript.RegExp");
	
	RegExp.MultiLine = Ложь; 
	RegExp.Global = Истина;
	RegExp.Pattern = "[\s]+";
	
	Возврат RegExp.Replace(ТекущаяСтрока, " ");	

КонецФункции // УдалитьИзСтрокиЛишниеСимволы()

// Процедура предназначена для обработки строковых полей справочников фоновым заданием
// Параметры:
// ИмяСправочника - Строка
// ИмяПоля - Строка
// АдресВременногоХранилища - Строка
// ОбработатьПереводы - Булево
//
Процедура НормализоватьЗначенияПоляСправочника(ИмяСправочника, ИмяПоля, АдресВременногоХранилища, ОбработатьПереводы = Ложь) Экспорт
	
	ОбщееКоличествоЭлементов 			= 0;
	КоличествоОбработанныхЭлементов 	= 0;
	КоличествоОбработанныхЭлементовПред = 0;
	КоличествоИзмененныхЭлементов 		= 0;
	КоличествоНеизмененныхЭлементов 	= 0;
	
	Если ОбработатьПереводы Тогда
	
		ЗапросПереводы = Новый Запрос;
		ЗапросПереводы.Текст = "ВЫБРАТЬ
		|	ДополнительныеНаименования.Владелец,
		|	ДополнительныеНаименования.ИмяРеквизита,
		|	ДополнительныеНаименования.Язык,
		|	ДополнительныеНаименования.Перевод
		|ИЗ
		|	РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
		|ГДЕ
		|	ДополнительныеНаименования.Владелец = &Владелец
		|	И ДополнительныеНаименования.ИмяРеквизита = &ИмяРеквизита";
	
	КонецЕсли;
	
	МВТ = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИмяСправочника.Ссылка,
	|	ИмяСправочника.ИмяПоля КАК ПолеДляОбработки
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.ИмяСправочника КАК ИмяСправочника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВТ.Ссылка) КАК КоличествоСсылок
	|ПОМЕСТИТЬ ВТ_Количество
	|ИЗ
	|	ВТ КАК ВТ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочника", ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоля", ИмяПоля);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
	РезультатЗапросаКоличество = МВТ.Таблицы.Получить(1).ПолучитьДанные();
	
	Если РезультатЗапросаКоличество.Пустой() Тогда
		
		Перейти ~Конец;	
	
	КонецЕсли;
	
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("ЗначениеПоля");
	ТЗРезультат.Колонки.Добавить("ЗначениеПоляНовое");
	ТЗРезультат.Колонки.Добавить("ЗначениеИзменено");
	
	ВыборкаКоличество = РезультатЗапросаКоличество.Выбрать();
	ВыборкаКоличество.Следующий();
	
	ОбщееКоличествоЭлементов = ВыборкаКоличество.КоличествоСсылок;
	
	РезультатЗапросаДанные = МВТ.Таблицы.Получить(0).ПолучитьДанные();
	
	ВыборкаДанные = РезультатЗапросаДанные.Выбрать();
	
	Пока ВыборкаДанные.Следующий() Цикл
		
		Если ОбработатьПереводы Тогда
			
			НовоеЗначениеПоля = ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеПробелы(ВыборкаДанные.ПолеДляОбработки);
		
			НеобходимоЗаписатьЭлемент = Не НовоеЗначениеПоля = ВыборкаДанные.ПолеДляОбработки;
			
			НеобходимоЗаписатьПереводы = Ложь;
			
			ЗапросПереводы.УстановитьПараметр("Владелец", ВыборкаДанные.Ссылка);
			ЗапросПереводы.УстановитьПараметр("ИмяРеквизита", ИмяПоля);
			
			РезультатЗапросаПереводы = ЗапросПереводы.Выполнить();
			
			Если Не РезультатЗапросаПереводы.Пустой() Тогда
			
				ВыборкаПереводы = РезультатЗапросаПереводы.Выбрать();
				
				Пока ВыборкаПереводы.Следующий() Цикл
				
					НовоеЗначениеПеревода = ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеПробелы(ВыборкаПереводы.Перевод);	
					
					Если Не НовоеЗначениеПеревода = ВыборкаПереводы.Перевод Тогда
					
						Если Не НеобходимоЗаписатьПереводы Тогда
						
							СоответствиеПереводов = Новый Соответствие;
							
							НеобходимоЗаписатьПереводы = Истина;
						
						КонецЕсли;
						
						СоответствиеПереводов.Вставить(ВыборкаПереводы.Язык, НовоеЗначениеПеревода); 
					
					КонецЕсли;
				
				КонецЦикла;
			
			КонецЕсли;
			
			Если НеобходимоЗаписатьЭлемент Или НеобходимоЗаписатьПереводы Тогда
				
				Попытка
					
					Если НеобходимоЗаписатьЭлемент Тогда
						
						НоваяСтрока = ТЗРезультат.Добавить();
						НоваяСтрока.ЗначениеПоля = ВыборкаДанные.ПолеДляОбработки;
						НоваяСтрока.ЗначениеПоляНовое = НовоеЗначениеПоля;
						
						СправочникОбъект = ВыборкаДанные.Ссылка.ПолучитьОбъект();
						Выполнить("СправочникОбъект." + ИмяПоля + " = НовоеЗначениеПоля;");
						СправочникОбъект.Записать();		
						
					КонецЕсли;
					
					Если НеобходимоЗаписатьПереводы Тогда
					
						ВыборкаПереводы.Сбросить();
						
						Пока ВыборкаПереводы.Следующий() Цикл
						
							НовоеЗначениеПеревода = СоответствиеПереводов.Получить(ВыборкаПереводы.Язык);
							
							Если Не НовоеЗначениеПеревода = Неопределено Тогда
								
								НоваяСтрока = ТЗРезультат.Добавить();
								НоваяСтрока.ЗначениеПоля = ВыборкаПереводы.Перевод;
								НоваяСтрока.ЗначениеПоляНовое = НовоеЗначениеПеревода;
								
								МенеджерЗаписи = РегистрыСведений.ДополнительныеНаименования.СоздатьМенеджерЗаписи();
								ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаПереводы,, "Перевод");
								МенеджерЗаписи.Перевод = НовоеЗначениеПеревода;
								
								МенеджерЗаписи.Записать(Истина);
							
							КонецЕсли;
						
						КонецЦикла;
					
					КонецЕсли;
					
					НоваяСтрока.ЗначениеИзменено = Истина;
					
					КоличествоИзмененныхЭлементов = КоличествоИзмененныхЭлементов + 1;
					
				Исключение
					
					КоличествоНеизмененныхЭлементов = КоличествоНеизмененныхЭлементов + 1;	
				
				КонецПопытки;		
			
			КонецЕсли;
		
		Иначе
			
			Если ЗначениеЗаполнено(ВыборкаДанные.ПолеДляОбработки) Тогда
				
				НовоеЗначениеПоля = ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеПробелы(ВыборкаДанные.ПолеДляОбработки);
				
				Если Не НовоеЗначениеПоля = ВыборкаДанные.ПолеДляОбработки Тогда
					
					НоваяСтрока = ТЗРезультат.Добавить();
					НоваяСтрока.ЗначениеПоля = ВыборкаДанные.ПолеДляОбработки;
					НоваяСтрока.ЗначениеПоляНовое = НовоеЗначениеПоля;
					
					Попытка
						
						СправочникОбъект = ВыборкаДанные.Ссылка.ПолучитьОбъект();
						Выполнить("СправочникОбъект." + ИмяПоля + " = НовоеЗначениеПоля;");
						СправочникОбъект.Записать();
						
						НоваяСтрока.ЗначениеИзменено = Истина;
						
						КоличествоИзмененныхЭлементов = КоличествоИзмененныхЭлементов + 1;
						
					Исключение
						
						КоличествоНеизмененныхЭлементов = КоличествоНеизмененныхЭлементов + 1;
						
					КонецПопытки;		
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;
		
		КоличествоОбработанныхЭлементов = КоличествоОбработанныхЭлементов + 1;
		
		Если КоличествоОбработанныхЭлементов < ОбщееКоличествоЭлементов И КоличествоОбработанныхЭлементов - КоличествоОбработанныхЭлементовПред >= ОбщееКоличествоЭлементов / 100 Тогда
			
			Прогресс = Окр(КоличествоОбработанныхЭлементов / ОбщееКоличествоЭлементов * 100);
			
			ТекстСообщения = Строка(Прогресс) + "," + ?(КоличествоИзмененныхЭлементов > 0, "Количество измененных элементов - " + Формат(КоличествоИзмененныхЭлементов, "ЧГ=") + ". ", "") + 
			?(КоличествоНеизмененныхЭлементов > 0, "Количество неизмененных элементов -  " + Формат(КоличествоНеизмененныхЭлементов, "ЧГ=") + ".", "");
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
			КоличествоОбработанныхЭлементовПред = КоличествоОбработанныхЭлементов;
		
		КонецЕсли;
	
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТЗРезультат, АдресВременногоХранилища);
	
	~Конец:
	
	ТекстСообщения = "100," + ?(КоличествоИзмененныхЭлементов > 0, "Количество измененных элементов - " + Формат(КоличествоИзмененныхЭлементов, "ЧГ=") + ". ", "") + 
	?(КоличествоНеизмененныхЭлементов > 0, "Количество неизмененных элементов -  " + Формат(КоличествоНеизмененныхЭлементов, "ЧГ=") + ".", "");
		
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();

КонецПроцедуры

// Функция предназначена для получения синонима строки (Например, "ОдинДваТри" -> "Один два три", а также "ОдинДва.Три" -> "Один два.Три")
// Параметры:
// ТекущаяСтрока - Строка
//
Функция ПолучитьСиноним(Знач ТекущаяСтрока) Экспорт
	
	МассивСтрокиВозврата = Новый Массив;
	
	ПозицияТочки = Найти(ТекущаяСтрока, ".");
	
	ЕстьТочки = ПозицияТочки > 0;
	
	Если ЕстьТочки Тогда
		
		Пока ПозицияТочки > 0 Цикл
			
			ЧастьСтроки = Лев(ТекущаяСтрока, ПозицияТочки - 1);
			
			МассивСтрокиВозврата.Добавить(Лев(ЧастьСтроки, 1));
			
			ДлинаСтроки = СтрДлина(ЧастьСтроки);
			
			Для Н = 2 По ДлинаСтроки Цикл
				
				ТекущийСимвол = Сред(ЧастьСтроки, Н, 1);
				
				НРегТекущийСимвол = НРег(ТекущийСимвол);
				
				Если Не ТекущийСимвол = НРегТекущийСимвол Тогда
					
					МассивСтрокиВозврата.Добавить(" ");
					
				КонецЕсли;
				
				МассивСтрокиВозврата.Добавить(НРегТекущийСимвол);
				
			КонецЦикла;	
			
			МассивСтрокиВозврата.Добавить(".");
			
			ТекущаяСтрока = Прав(ТекущаяСтрока, СтрДлина(ТекущаяСтрока) - ПозицияТочки);
			
			ПозицияТочки = Найти(ТекущаяСтрока, ".");
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокиВозврата.Добавить(Лев(ТекущаяСтрока, 1));
	
	ДлинаСтроки = СтрДлина(ТекущаяСтрока);
	
	Для Н = 2 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ТекущаяСтрока, Н, 1);
		
		НРегТекущийСимвол = НРег(ТекущийСимвол);
		
		Если Не ТекущийСимвол = НРегТекущийСимвол Тогда
			
			МассивСтрокиВозврата.Добавить(" ");
			
		КонецЕсли;
		
		МассивСтрокиВозврата.Добавить(НРегТекущийСимвол);
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСтрокиВозврата);
	
КонецФункции // ПолучитьСиноним()

// Функция предназначена для удаления пробелов слева и справа
//
Функция УдалитьИзСтрокиПробелыСлеваСправа(ТекущаяСтрока) Экспорт
	
	Возврат СокрЛП(ТекущаяСтрока)
	
КонецФункции

// Функция предназначена для очистки строки в случает если она равна одному из переданных в массие символов
//
Функция УдалитьИзСтрокиЛишниеСимволыИзМассиваСомволов(ТекущаяСтрока, МассивСимволов) Экспорт
	
	Для каждого Символ Из МассивСимволов Цикл
		Если СокрЛП(ТекущаяСтрока) = Символ Тогда
			ТекущаяСтрока = "";
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ТекущаяСтрока;
	
КонецФункции

#КонецОбласти

#Область ПрисоединенныеФайлы

// Функция предназначена для удаления присоединенного файла
//
Функция УдалитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ВладелецПрисоединенногоФайла) Экспорт

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ПрисоединенныйФайлОбъект.ОбменДанными.Загрузка = Истина;
	ПрисоединенныйФайлОбъект.ДополнительныеСвойства.Вставить("ПропуститьОбработкуЛогаЗагрузки");
	
	МенеджерЗаписиПрисоединенныеФайлы = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
	МенеджерЗаписиПрисоединенныеФайлы.ПрисоединенныйФайл = ПрисоединенныйФайл;
	
	МенеджерЗаписиНаличиеПрисоединенныхФайлов = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписиНаличиеПрисоединенныхФайлов.ОбъектСФайлами = ВладелецПрисоединенногоФайла;
	
	НачатьТранзакцию();
	
	Попытка
	
		ПрисоединенныйФайлОбъект.Удалить();
		МенеджерЗаписиПрисоединенныеФайлы.Удалить();
		МенеджерЗаписиНаличиеПрисоединенныхФайлов.Удалить();
	
	Исключение
		
		ОтменитьТранзакцию();
		Результат.Описание = "Не удалось удалить присоединенный файл." + Символы.ПС + ОписаниеОшибки();
		Возврат Результат;
	
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // УдалитьПрисоединенныйФайл()

#КонецОбласти

#Область ПоискИУдалениеДублей

// Процедура предназначена для логирования удаления дублей
// Вызывается из функции ОбщегоНазначения.ЗаменитьСсылки()
// Параметры:
// УспешныеЗамены - Соответствие
//
Процедура ОбработатьУдалениеДублей(УспешныеЗамены) Экспорт

	ИмяСправочника 	= Неопределено;
	Автор 			= ПараметрыСеанса.ТекущийПользователь;
	ДатаЗамены 		= ТекущаяДата();
	
	Для каждого Замена Из УспешныеЗамены Цикл
		
		Если ИмяСправочника = Неопределено Тогда
			
			ИмяСправочника = Замена.Ключ.Метаданные().Имя;	
			
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ИсторияУдаленияДублей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИмяСправочника 			= ИмяСправочника;
		МенеджерЗаписи.UIDЗамененногоЭлемента 	= Замена.Ключ.УникальныйИдентификатор();
		МенеджерЗаписи.UIDЗаменившегоЭлемента 	= Замена.Значение.УникальныйИдентификатор();
		МенеджерЗаписи.Автор					= Автор;
		МенеджерЗаписи.ДатаЗамены				= ДатаЗамены;
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура ПередЗаписьюСправочникаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		
		ИмяобъектаМетаданных = Источник.Метаданные().Имя;
		
		Если ОбщиеФункцииПовтИсп.ОбъектИмеетUID(ИмяобъектаМетаданных) Тогда
			
			Если Не ЗначениеЗаполнено(Источник.UID) Тогда
				
				УникальныйИдентификатор = Новый УникальныйИдентификатор;
				НоваяСсылка = Неопределено;
				Выполнить("НоваяСсылка = Справочники." + ИмяобъектаМетаданных + ".ПолучитьСсылку(УникальныйИдентификатор);");
				Источник.УстановитьСсылкуНового(НоваяСсылка);
				Источник.UID = Строка(УникальныйИдентификатор);
			
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписьюДокументаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ИмяобъектаМетаданных = Источник.Метаданные().Имя;		
	
	// UID
	Если ОбщиеФункцииПовтИсп.ОбъектИмеетUID(ИмяобъектаМетаданных) 	
		И Не ЗначениеЗаполнено(Источник.UID) Тогда			
			УникальныйИдентификатор = Новый УникальныйИдентификатор;		
			Источник.УстановитьСсылкуНового(Документы[ИмяобъектаМетаданных].ПолучитьСсылку(УникальныйИдентификатор));
			Источник.UID 			= Строка(УникальныйИдентификатор);		
	КонецЕсли;	// Если ОбщиеФункцииПовтИсп.ОбъектИмеетUID(ИмяобъектаМетаданных) 	
		
	// Автор
	Если ОбщиеФункцииПовтИсп.ОбъектИмеетАвтора(ИмяобъектаМетаданных)
		И Не ЗначениеЗаполнено(Источник.Автор) Тогда
		Источник.Автор =  Пользователи.ТекущийПользователь();
	КонецЕсли; // Если ОбщиеФункцииПовтИсп.ОбъектИмеетАвтора(ИмяобъектаМетаданных)
	
	// Дата создания
	Если ОбщиеФункцииПовтИсп.ОбъектИмеетДатуСоздания(ИмяобъектаМетаданных)
		И Не ЗначениеЗаполнено(Источник.ДатаСоздания) Тогда
		Источник.ДатаСоздания = ТекущаяДата();
	КонецЕсли; // Если ОбщиеФункцииПовтИсп.ОбъектИмеетДатуСоздания(ИмяобъектаМетаданных)
	
КонецПроцедуры // ПередЗаписьюДокументаПередЗаписью

Процедура ПриКопированииСправочникаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	ИмяобъектаМетаданных = Источник.Метаданные().Имя;
	
	Если ОбщиеФункцииПовтИсп.ОбъектИмеетUID(ИмяобъектаМетаданных) Тогда
		
		Источник.UID = "";		
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриКопированииДокументаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	ИмяобъектаМетаданных = Источник.Метаданные().Имя;
	
	Если ОбщиеФункцииПовтИсп.ОбъектИмеетUID(ИмяобъектаМетаданных) Тогда
		
		Источник.UID = "";		
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

// Функция предназначена для проверки возможности редактирования, если стоит РЛС только на изменение, то проверям 
// по регистрам доступа, т.к. в данном случает рлс проверяется при записи объекта
//
// Параметры:
// Массив - массив значений для проверки
Функция ПроверкаВозможностиИзменения(Массив) Экспорт
	
	Если НЕ ТипЗнч(Массив) = Тип("Массив") Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	// Пока ограничим только этой ролью
	Если НЕ РольДоступна("ПредставительКонтрагента") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияГруппДоступа.ЗначениеДоступа КАК ЗначениеДоступа
	|ИЗ
	|	РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
	|ГДЕ
	|	ЗначенияГруппДоступа.ЗначениеРазрешено
	|	И ЗначенияГруппДоступа.ЗначениеДоступа В(&ЗначениеДоступа)
	|	И ЗначенияГруппДоступа.ГруппаДоступа В
	|			(ВЫБРАТЬ
	|				ГруппыДоступаПользователи.Ссылка КАК Ссылка
	|			ИЗ
	|				Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|			ГДЕ
	|				ГруппыДоступаПользователи.Пользователь = &ТекПользователь)";
	
	Запрос.УстановитьПараметр("ТекПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("ЗначениеДоступа", Массив);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 	
		
КонецФункции

//++ 29.11.2017 Веденеев П.

//функция предназначена для проверки активности заданных фоновых заданий
//возвращает Истина - если одно из заданий активно, Ложь - в противном случае
//Параметры:
//СписокЗаданий - строка, состоящая из имен фоновых заданий (либо имен связанных с ними регламентных заданий), разделенных запятыми
Функция ПроверитьАктивностьФоновыхЗаданий(СписокЗаданий) Экспорт
	
	Результат = Ложь;
	
	МассивНаименованийЗаданий = СтрРазделить(СписокЗаданий, ",", Ложь);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно));
	
	Если АктивныеЗадания.Количество() = 0 Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Для каждого АктивноеЗадание Из АктивныеЗадания Цикл
		
		Если Не МассивНаименованийЗаданий.Найти(АктивноеЗадание.Наименование) = Неопределено Тогда //проверяем по наименованию фонового задания 
			
			Результат = Истина;
			Прервать;
			
		Иначе //если ничего не нашли - проверяем по регламентному заданию
			
			Если Не АктивноеЗадание.РегламентноеЗадание = Неопределено Тогда //если есть ссылка на регламентное задание - сразу проверяем по его имени
				
				Если Не МассивНаименованийЗаданий.Найти(АктивноеЗадание.РегламентноеЗадание.Метаданные.Имя) = Неопределено Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(АктивноеЗадание.Ключ) Тогда //если ссылки на задание нет, но есть ключ - проверяем по ключу
				
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(АктивноеЗадание.Ключ));
				
				Если Не РегламентноеЗадание = Неопределено 
					И Не МассивНаименованийЗаданий.Найти(РегламентноеЗадание.Метаданные.Имя) = Неопределено Тогда
					
					Результат = Истина;
					Прервать;
					
				КонецЕсли;					
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//-- 29.11.2017 Веденеев П.

// + 13.12.2017 15:52:12 Базунов Д.А. Задача Удаление ссылок на ПС из Регистров сведений: 

// Удаляет спецификации ПС и себя из составляющих частей
//
Функция УдалитьПредметСнабженияИзСпецификаций(ПредметСнабжения) Экспорт
	
	// СпецификацииПредметовСнабжения
	Набор = РегистрыСведений.СпецификацииПредметовСнабжения.СоздатьНаборЗаписей();
	Набор.Отбор.ПредметСнабжения.Установить(ПредметСнабжения);
	Набор.Записать();
	
	Набор = РегистрыСведений.СпецификацииПредметовСнабжения.СоздатьНаборЗаписей();
	Набор.Отбор.СоставляющаяЧасть.Установить(ПредметСнабжения);
	Набор.Записать();

	// СпецификацииПредметовСнабженияИстория
	Набор = РегистрыСведений.СпецификацииПредметовСнабженияИстория.СоздатьНаборЗаписей();
	Набор.Отбор.ПредметСнабжения.Установить(ПредметСнабжения);
	Набор.Записать();
	
	Набор = РегистрыСведений.СпецификацииПредметовСнабженияИстория.СоздатьНаборЗаписей();
	Набор.Отбор.СоставляющаяЧасть.Установить(ПредметСнабжения);
	Набор.Записать();
	
	// СпецификацииПредметовСнабженияИзменения
	Набор = РегистрыСведений.СпецификацииПредметовСнабженияИзменения.СоздатьНаборЗаписей();
	Набор.Отбор.ПредметСнабжения.Установить(ПредметСнабжения);
	Набор.Записать();
	
	Набор = РегистрыСведений.СпецификацииПредметовСнабженияИзменения.СоздатьНаборЗаписей();
	Набор.Отбор.СоставляющаяЧасть.Установить(ПредметСнабжения);
	Набор.Записать();
	
КонецФункции
 

//Параметры:
//	ПредметСнабжения - Ссылка на ПС
//  МассивРегистров  - массив с именами регистров
Функция УдалитьСсылкиНаПредметСнабженияИзРегистровСведений(ПредметСнабжения, МассивРегистров) Экспорт
	
	Для каждого ТекущийРегистр Из МассивРегистров Цикл
		
		Если ТекущийРегистр = "ЗначенияХарактеристикПредметовПоставки" Тогда
			ИмяИзмерения = "ПредметПоставки";
		ИначеЕсли ТекущийРегистр = "ЛогЗагрузки" Тогда
			ИмяИзмерения = "Объект1С";
		ИначеЕсли ТекущийРегистр = "СпецификацииПредметовСнабжения" ИЛИ 
				  ТекущийРегистр = "СпецификацииПредметовСнабженияИстория" ИЛИ 
				  ТекущийРегистр = "СпецификацииПредметовСнабженияИзменения" ИЛИ 
				  ТекущийРегистр = "ЦеныПредметовСнабжения" Тогда
			Продолжить;
		Иначе
			ИмяИзмерения = "ПредметСнабжения";
		КонецЕсли; 
		
		НаборЗаписей = РегистрыСведений[ТекущийРегистр].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[ИмяИзмерения].Установить(ПредметСнабжения);
		НаборЗаписей.Очистить();
		
	КонецЦикла; 
	
КонецФункции

// Функция - Записать перевод
//
// Параметры:
//  Владелец	 - ссылка - владелец перевода
//  ИмяРеквизита - строка - наименование реквизита перевода
//  Язык		 - спр. Языки - язык
//  Перевод		 - строка - перевод
// 
// Возвращаемое значение:
//   - 
//
&НаСервере
Функция ЗаписатьПеревод(Владелец, ИмяРеквизита, Язык, Перевод) Экспорт

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	НаборЗаписей = РегистрыСведений.ДополнительныеНаименования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(Владелец);
	НаборЗаписей.Отбор.ИмяРеквизита.Установить(ИмяРеквизита);
	НаборЗаписей.Отбор.Язык.Установить(Язык);
	НаборЗаписей.Прочитать();
	
	ЕстьЗаписи = НаборЗаписей.Количество() > 0;
	
	Если ЕстьЗаписи Тогда
	
		НаборЗаписей.Очистить();	
	
	КонецЕсли;
	

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Владелец = Владелец;
	НоваяЗапись.ИмяРеквизита = ИмяРеквизита;
	НоваяЗапись.Язык = Язык;
	НоваяЗапись.Перевод = Перевод;
	
	Попытка
	
		НаборЗаписей.Записать(ЕстьЗаписи);	
	
	Исключение
		
		Результат.Описание = ОписаниеОшибки();
		Возврат Результат;
	
	КонецПопытки;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // ЗаписатьПереводы()

// - 13.12.2017 15:52:12 Базунов Д.А. Задача: 

// + 27.03.2018 14:42:30 Базунов Д.А. Задача: 
Функция ДобавитьЭтапКЗаявке(Заявка, Этап, Дата) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЭтапыВыполненияЗаявки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заявка.Установить(Заявка);
	НаборЗаписей.Прочитать();
	
	НовСтрока = НаборЗаписей.Добавить();
	НовСтрока.Заявка = Заявка;
	НовСтрока.Этап   = Этап;
	НовСтрока.Период = Дата;
	
	Попытка
		НаборЗаписей.Записать();
		Возврат Истина;
	Исключение
	    ОпОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// - 27.03.2018 14:42:30 Базунов Д.А. Задача:


// ++ 21.05.2018 14:31:02 Базунов Д.А. Задача: 

// Находит и заменяет стрковые NSN в каталоге ПС на справочник ПредметыСнабженияНАТО 
//
Процедура ОбновлениеNSNВКаталогеПС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(ПредметыСнабженияНАТО.Ссылка) КАК Ссылка,
	|	ПредметыСнабженияНАТО.КодNSN КАК КодNSN
	|ПОМЕСТИТЬ ПредметыСнабженияНАТО
	|ИЗ
	|	Справочник.ПредметыСнабженияНАТО КАК ПредметыСнабженияНАТО
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредметыСнабженияНАТО.КодNSN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабжения.NSN КАК NSN,
	|	ПредметыСнабженияНАТО.Ссылка КАК ПСНАТО
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредметыСнабженияНАТО КАК ПредметыСнабженияНАТО
	|		ПО КаталогПредметовСнабжения.NSN = ПредметыСнабженияНАТО.КодNSN
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(КаталогПредметовСнабжения.NSN) = ТИП(СТРОКА)
	|	И НЕ ЕСТЬNULL(ПредметыСнабженияНАТО.Ссылка, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.NSN = Выборка.ПСНАТО;
		
		Попытка
			СпрОбъект.Записать();
		Исключение
		    Продолжить;
		КонецПопытки;
		
	КонецЦикла;  
	
КонецПроцедуры

// -- 21.05.2018 14:31:02 Базунов Д.А. Задача:

 


 










