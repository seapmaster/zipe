//////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗафиксироватьОшибку(ТекстОшибки, Результат)
	Результат = Неопределено;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Неизвестный вид чтения");		
КонецПроцедуры // ЗафиксироватьОшибку

Процедура ДобавитьРасширениеФайла(Результат, ИмяФайла)
	
	ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки = 0 Тогда
		ЗафиксироватьОшибку("Не удалось определить расширение файла", Результат);
	Иначе
		Расширение = Сред(ИмяФайла, ПозицияТочки + 1);
		Результат.Вставить("Расширение", Расширение);
	КонецЕсли; // Если ПозицияТочки = 0 Тогда
	
КонецПроцедуры // ДобавитьРасширениеФайла


///////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПодготовитьФайлКЧтению
//
// Описание: Упаковыввает файл для дальнейшего чтения на сервере
//
//
// Параметры:
//  ИмяФайла - Строка - Полное имя файла
//  ВидЧтения - Строка - Имя вида, в котором нужно произвести чтение,
//                       например, "ТабличныйДокумент".
//
// Возвращаемое значение: структура с описание файла или неопределено
//
Функция ПодготовитьФайлКЧтению(ИмяФайла, ВидЧтения)Экспорт
	
	Результат = Новый Структура;
	
	Если ВидЧтения = "ТабличныйДокумент" ТОгда
		
		Попытка
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		Исключение
			ЗафиксироватьОшибку("Неудачное чтение файла", Результат);
		КонецПопытки;
		
		// Расширение файла
		Если Не Результат = Неопределено Тогда
			ДобавитьРасширениеФайла(Результат, ИмяФайла);
		КонецЕсли; // Если Не Результат = Неопределено Тогда
		
		// Временное хранилище
		Если Не Результат = Неопределено Тогда
			АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
			Результат.Вставить("Адрес", АдресФайла);
		КонецЕсли; // Если Не Результат = Неопределено Тогда
		
	Иначе
		ЗафиксироватьОшибку("Неизвестный вид чтения", Результат);
	КонецЕсли; // Если ВидЧтения = "ТабличныйДокумент" ТОгда
		
	Возврат	Результат;
	
КонецФункции // ПрочитатьФайлВТабличныйДокумент

Функция ЗаписатьЛистыВОдинДокумент(ИмяФайла, МассивЛистов) Экспорт
	
	Результат = Истина;
	
	ПакетЛистов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого ОписаниеЛиста Из МассивЛистов Цикл
		НовыйЛист = ПакетЛистов.Состав.Добавить();
		НовыйЛист.Данные 		= ПоместитьВоВременноеХранилище(ОписаниеЛиста.Лист, Новый УникальныйИдентификатор);
		НовыйЛист.Наименование 	= ОписаниеЛиста.Наименование;
	КонецЦикла; // Для Каждого ОписаниеЛиста Из МассивЛистов Цикл
	
	Попытка
		ПакетЛистов.Записать(ИмяФайла, ТипФайлаПакетаОтображаемыхДокументов.XLSX);
	Исключение
		Результат = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при записи файла: " + ОписаниеОшибки());	
	КонецПопытки;
	
	Возврат	Результат;
	
КонецФункции // ЗаписатьЛистыВОдинДокумент
