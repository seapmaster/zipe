//////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область Служебные

Процедура ДобавитьОшибку(СтруктураОтвета, ОписаниеОшибки, Отказ = Неопределено)
	
	Если Не Отказ = Неопределено Тогда
		СтруктураОтвета.Вставить("Отказ", Отказ);
	КонецЕсли; // Если Не Отказ = Неопределено Тогда
	
	Если Не СтруктураОтвета.Свойство("Error") Тогда
		СтруктураОтвета.Вставить("Error", Новый Массив);
	КонецЕсли; // Если Не СтруктураОтвета.Свойство("Error") Тогда
	
	СтруктураОтвета.Error.Добавить(ОписаниеОшибки);
	
КонецПроцедуры // ДобавитьОшибку

Функция ПолучитьПоставщиков(СтруктураОтвета, ДанныеПоставщика)
	
	Результат = Новый Массив;
	Поставщик = Справочники.Организации.НайтиПоИНН(ДанныеПоставщика.TaxCode);
	Если Не ЗначениеЗаполнено(Поставщик) Тогда
		Поставщик = Справочники.Организации.Создать(
						ДанныеПоставщика.TaxCode,	
						ДанныеПоставщика.Name,	
						ДанныеПоставщика.Address);
	КонецЕсли; // Если Не ЗначениеЗаполнено(Результат) Тогда
	
	Если Не ЗначениеЗаполнено(Поставщик) Тогда
		ДобавитьОшибку(СтруктураОтвета, СтрШаблон("Поставщик с ИНН [%1] не найден", ДанныеПоставщика.TaxCode));
	Иначе
		Результат.Добавить(Поставщик);
	КонецЕсли; // Если Не ЗначениеЗаполнено(Результат) Тогда
	Возврат	Результат;
КонецФункции // ПолучитьПоставщиков

Функция ПолучитьОрганизацию(Наименование, ИНН, Адрес)
	Результат = Справочники.Организации.НайтиПоИНН(ИНН);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = Справочники.Организации.Создать(ИНН, Наименование, Адрес);
	КонецЕсли; // Если Не ЗначениеЗаполнено(Результат) Тогда
	Возврат	Результат;
КонецФункции // Получитьорганизацию

Функция ЧислоИзСтроки(Знач СтрокаЗначение) 
	Результат 	= 0;
	СтрокаЧисел = "";
	Если Не ПустаяСтрока(СтрокаЗначение) Тогда
		Для Индекс = 1 По СтрДлина(СтрокаЗначение) Цикл
			Символ = Сред(СтрокаЗначение, Индекс, 1);
			
			Если КодСимвола(Символ) >= 48 И КодСимвола(Символ) <= 57 Тогда 
				СтрокаЧисел = СтрокаЧисел + Символ;
			ИначеЕсли КодСимвола(Символ) = 44 Или КодСимвола(Символ) = 46 Тогда	// запятая
				СтрокаЧисел = СтрокаЧисел + ".";	
			КонецЕсли;	//Если КодСимвола(Символ) >= 48 И КодСимвола(Символ) <= 57 Тогда 
		КонецЦикла; // Для Индекс = 1 По СтрДлина(СтрокаЗначение) Цикл
	КонецЕсли; // Если Не ПустаяСтрока(СтрокаЗначение) Тогда
	Если СтрДлина(СтрокаЧисел) > 0 Тогда
		Результат = Число(СтрокаЧисел);
	КонецЕсли; // Если СтрДлина(СтрокаЧисел) > 0 Тогда
	Возврат Результат;
КонецФункции // ПолучитьЧислоИзСтроки

Функция ДатаИзСтроки(Знач СтрокаЗначение)
	
	Результат = Дата(1,1,1);
	
	Если Не ПустаяСтрока(СтрокаЗначение) Тогда
		Результат = Дата(СтрокаЗначение);	
	КонецЕсли; // Если Не ПустаяСтрока(СтрокаЗначение) Тогда
	
	Возврат	Результат;
	
КонецФункции // ДатаИзСтроки

Функция СтрокаИзСтруктуры(СтруктураИсточник)
	МассивПолей = Новый Массив;
	Для Каждого ОписаниеЭлемента Из СтруктураИсточник Цикл
		МассивПолей.Добавить(СтрШаблон("[%1 - %2]",ОписаниеЭлемента.Ключ,ОписаниеЭлемента.Значение));
	КонецЦикла; // Для Каждого ОписаниеЭлемента Из СтруктураИсточник Цикл
	Возврат	СтрСоединить(МассивПолей, "; ");
КонецФункции // СтрокаИзСтруктуры

 #КонецОбласти

#Область GetEquipmentProducers

Процедура ДобавитьДанныеИзготовителя(СтруктураОтвета, ПредметыСнабжения)
	
	EquipmentProducers = Новый Массив;
	
	Для Каждого СтрокаИзготовитель Из НайтиИзготовителей(ПредметыСнабжения) Цикл
		ОписаниеИзготовителя = Новый Структура;
		ОписаниеИзготовителя.Вставить("Name", 		СтрокаИзготовитель.Name);
		ОписаниеИзготовителя.Вставить("TaxCode",	СтрокаИзготовитель.TaxCode);
		ОписаниеИзготовителя.Вставить("Address",	ПолучитьАдрес(СтрокаИзготовитель.Контрагент));
		EquipmentProducers.Добавить(ОписаниеИзготовителя);
	КонецЦикла; // Для Каждого СтрокаИзготовитель Из НайтиИзготовителей(ПредметыСнабжения) Цикл
	
	СтруктураОтвета.Вставить("EquipmentProducers", EquipmentProducers);
	
КонецПроцедуры // ДобавитьДанныеИзготовителя

Функция НайтиИзготовителей(ПредметыСнабжения)
	Запрос  		= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
					|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент КАК Контрагент,
					|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент.Наименование КАК Name,
					|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент.ИНН КАК TaxCode
					|ИЗ
					|	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
					|ГДЕ
					|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка В(&ПредметыСнабжения)
					|	И КаталогПредметовСнабженияИзготовителиИПоставщики.Изготовитель
					|	И НЕ КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент.Наименование = """"
					|	И НЕ КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент.ИНН = """"";
	Запрос.УстановитьПараметр("ПредметыСнабжения", ПредметыСнабжения);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // НайтиИзготовителей

Функция ПолучитьАдрес(Контрагент)
	Возврат	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,Справочники.ВидыКонтактнойИнформации.ПочтовыйАдрес,ТекущаяДата());
КонецФункции // ПолучитьАдрес

#КонецОбласти

#Область SetEquipmentVendors

Функция ПроверкаСтруктуры_SetEquipmentVendors(СтруктураОтвет, СтруктураПараметров)
	
	Результат = Истина;
	
	Если Не СтруктураПараметров.Свойство("body") Тогда
		ДобавитьОшибку(СтруктураОтвет, "Отсутствует тело запроса", Истина);
		Возврат Ложь;
	КонецЕсли; // Если Не СтруктураПараметров.Свойство("body") Тогда
	
	СтруктураЗапроса = СтруктураПараметров.Body; 
	Если Не СтруктураЗапроса.Свойство("Item") Тогда
		ДобавитьОшибку(СтруктураОтвет, "Отсутствуют данные поставщиков", Истина);
		Возврат Ложь;
	Иначе
		
		Для Каждого ОписаниеЭлемента Из СтруктураЗапроса.Item Цикл
			
			// Код ОСК
			Если Не ОписаниеЭлемента.Свойство("USCCode") Тогда
				ДобавитьОшибку(СтруктураОтвет, "По позиции " + СтрокаИзСтруктуры(ОписаниеЭлемента) + " не заполнен код ОСК", Истина);
				Результат = Ложь;
				Продолжить;
			КонецЕсли; // Если Не ОписаниеЭлемента.Свойство("USCCode") Тогда
			
			// Поставщик
			Если Не ОписаниеЭлемента.Свойство("Vendor") Тогда
				ДобавитьОшибку(СтруктураОтвет, "У предмета снабжения [%1] не указан поставщик " + ОписаниеЭлемента.USCCode, Истина);
				Результат = Ложь;
				Продолжить;
			КонецЕсли; // Если Не ОписаниеЭлемента.Свойство("Vendor") Тогда
			
			// Данные поставщика
			ДанныеПоставщика = ОписаниеЭлемента.Vendor;
			
			// ИНН
			Если Не ДанныеПоставщика.Свойство("TaxCode") Тогда
				ДобавитьОшибку(СтруктураОтвет, "У поставщика по предмету снабжения [%1] не указан ИНН " + ОписаниеЭлемента.USCCode, Истина);
				Результат = Ложь;
				Продолжить;
			КонецЕсли; // Если Не ДанныеПоставщика.Свойство("TaxCode") Тогда
			
			// Наименование
			Если Не ДанныеПоставщика.Свойство("Name") Тогда
				ДобавитьОшибку(СтруктураОтвет, "У поставщика по предмету снабжения [%1] не указано Наименование " + ОписаниеЭлемента.USCCode, Истина);
				Результат = Ложь;
				Продолжить;
			КонецЕсли; // Если Не ДанныеПоставщика.Свойство("Name") Тогда
			
			// Адрес (поле необязательное)
			Если Не ДанныеПоставщика.Свойство("Address") Тогда
				ДанныеПоставщика.Вставить("Address");
			КонецЕсли; // Если Не ДанныеПоставщика.Свойство("Address") Тогда
			
		КонецЦикла; // Для Каждого ОписаниеЭлемента Из СтруктураЗапроса.Item Цикл
		
	КонецЕсли; // Если Не СтруктураПараметров.Свойство("Item") Тогда
	
	Возврат	Результат;
	
КонецФункции // ПроверкаСтруктуры_SetEquipmentVendors

Процедура ОбновитьПоставщиковПредметаСнабжения(СтруктураОтвета, Поставщики, ПредметыСнабжения, ОписаниеЭлемента)
	Для Каждого Предмет Из ПредметыСнабжения Цикл
		Если Не Справочники.КаталогПредметовСнабжения.ДобавитьПоставщиков(Предмет, Поставщики) Тогда
			ДобавитьОшибку(СтруктураОтвета, СтрШаблон("Не удалось добавить поставщиков предмету снабжения [%1]", ОписаниеЭлемента.USCCode));
		КонецЕсли; // Если Не Справочники.КаталогПредметовСнабжения.ДобавитьПоставщиков(Предмет, НовыеПоставщики) Тогда
	КонецЦикла; // Для Каждого Предмет Из ПредметыСнабжения Цикл
КонецПроцедуры // ОбновитьПоставщиковПредметаСнабжения

#КонецОбласти

#Область SetPrice

Функция ПроверкаСтруктуры_SetPrice(СтруктураОтвета, СтруктураПараметров)
	
	Результат = Истина;
	
	// body
	Если Не СтруктураПараметров.Свойство("body") Тогда
		ДобавитьОшибку(Результат, "Отсутствует тело запроса", Истина);
		Возврат Ложь;
	КонецЕсли; // Если Не СтруктураПараметров.Свойство("body") Тогда
	
	СтруктураЗапроса = СтруктураПараметров.body; 
	// Company
	Если Не СтруктураЗапроса.Свойство("Company") Или СтруктураЗапроса.Company = Неопределено Тогда
		ДобавитьОшибку(СтруктураОтвета, "Не заполнена организация", Истина);
		Возврат Ложь;
	КонецЕсли; // Если Не СтруктураЗапроса.Свойство("Company") Или СтруктураЗапроса.Company = Неопределено Тогда
	
	// Vendor
	Если Не СтруктураЗапроса.Свойство("Vendor") Или СтруктураЗапроса.Vendor = Неопределено Тогда
		ДобавитьОшибку(СтруктураОтвета, "Не заполнен контрагент", Истина);
		Возврат Ложь;
	КонецЕсли; // Если Не СтруктураЗапроса.Свойство("Vendor") Или СтруктураЗапроса.Vendor = Неопределено Тогда
		
	// PriceType 
	Если Не СтруктураЗапроса.Свойство("PriceType") Тогда
		ДобавитьОшибку(СтруктураОтвета, "Не указан тип контракта", Истина);
		Возврат Ложь;
	КонецЕсли; // Если Не СтруктураЗапроса.Совйство("PriceType") Тогда

	// CurrencyCode
	Если Не СтруктураЗапроса.Свойство("CurrencyCode") Тогда
		ДобавитьОшибку(СтруктураОтвета, "Не указана валюта контракта", Истина);
		Возврат Ложь;
	КонецЕсли; // Если Не СтруктураЗапроса.Совйство("CurrencyCode") Тогда
	
	// Contract
	Если Не СтруктураЗапроса.Свойство("Contract") Тогда
		ДобавитьОшибку(СтруктураОтвета, "Не указаны данные контракта");
	КонецЕсли; // Если Не СтруктураЗапроса.Свойство("Contract") Тогда
	
	// Item
	Если Не СтруктураЗапроса.Свойство("Item") Или СтруктураЗапроса.Item.Количество() = 0 Тогда
		ДобавитьОшибку(СтруктураОтвета, "Отсутствуют данные цен");
		Возврат Ложь;
	КонецЕсли; // Если Не СтруктураЗапроса.Свойство("Item") Или СтруктураЗапроса.Item.Количество() = 0 Тогда
	
	Если Не ТипЗнч(СтруктураЗапроса.Item) = Тип("Массив") Тогда
		ДобавитьОшибку(СтруктураОтвета, "Неверный тип блока [Item]");
		Возврат Ложь;
	КонецЕсли; // Если Не ТипЗнч(СтруктураЗапроса.Item) = Тип("Массив") Тогда
	
	Для Счет = -СтруктураЗапроса.Item.ВГраница() По 0 Цикл
		ОписаниеПредмета = СтруктураЗапроса.Item[-Счет];
		
		// USCCode
		Если Не ОписаниеПредмета.Свойство("USCCode") Тогда
			ДобавитьОшибку(СтруктураОтвета, "У предмета снабжения №[%1] не указан код ОСК", -Счет);
			СтруктураЗапроса.Item.Удалить(-Счет);
			Продолжить;
		КонецЕсли; // Если Не ОписаниеПредмета.Свойство("USCCode") Тогда
		
		// Price 
		Если Не ОписаниеПредмета.Свойство("Price") Тогда
			ДобавитьОшибку(СтруктураОтвета, СтрШаблон("У предмета снабжения [%1] не указана цена",ОписаниеПредмета.USCCode));
			СтруктураЗапроса.Item.Удалить(-Счет);
			Продолжить;
		КонецЕсли; // Если Не ОписаниеПредмета.Свойство("Price") Тогда
		
		// Count 
		Если Не ОписаниеПредмета.Свойство("Count") Тогда
			ДобавитьОшибку(СтруктураОтвета, СтрШаблон("У предмета снабжения [%1] не указано количество",ОписаниеПредмета.USCCode));
			СтруктураЗапроса.Item.Удалить(-Счет);
			Продолжить;
		КонецЕсли; // Если Не ОписаниеПредмета.Свойство("Count") Тогда
		
	КонецЦикла; // Для Счет = -СтруктураЗапроса.Item.ВГраница() По 0 Цикл
	
	Возврат	Результат;
	
КонецФункции // ПроверкаСтруктуры_SetPrice

Процедура СоздатьДокументКонтракт(СтруктураОтвета, СтруктураЗапроса)
	
	ДокументКонтракт = Документы.Контракт.СоздатьДокумент();
	Если Не ЗаполнитьШапкуКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
		Возврат;
	КонецЕсли; // Если Не ЗаполнитьШапкуКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
	Если Не ЗаполнитьПредметыСнабженияКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
		Возврат;
	КонецЕсли; // Если Не ЗаполнитьПредметыСнабженияКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
	
	Если ДокументКонтракт.ПредметыСнабжения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; // Если ДокументКонтракт.ПредметыСнабжения.Количество() = 0 Тогда
	
	Попытка
		ДокументКонтракт.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДобавитьОшибку(СтруктураОтвета, СтрШаблон("Не удалось провести документ контракт, по причине [%1]", ОписаниеОшибки()));	
	КонецПопытки;
	
КонецПроцедуры // СоздатьДокументКонтракт

Функция ЗаполнитьШапкуКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт)
	
	// Вид
	ДокументКонтракт.Вид = Перечисления.ВидыКонтрактов.КонтрактСПоставщиком;
	
	// Тип
	Если Не ЗаполитьТипКонтракта(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
		Возврат Ложь;
	КонецЕсли; // Если Не ЗаполитьТипКонтракта(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
	
	// Контрагент
	Если НЕ ЗнаполнитьКонтрагента(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
		Возврат Ложь;
	КонецЕсли; // Если НЕ ЗнаполнитьКонтрагента(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
	
	// Валюта
	Если Не ЗаполнитьВалютуКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
		Возврат Ложь;
	КонецЕсли; // Если Не ЗаполнитьВалютуКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
	
	// Статус
	ДокументКонтракт.Статус = Перечисления.СтатусыКонтрактов.Активен;
	
	// Данные контракта
	ЗаполнитьДанныеКонтракта(ДокументКонтракт, СтруктураЗапроса);
	
	// Организация
	Если Не ЗаполнитьОрганизациюКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
		Возврат Ложь;
	КонецЕсли; // Если Не ЗаполнитьОрганизациюКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт) Тогда
	
	// Дата
	Если ЗначениеЗаполнено(ДокументКонтракт.ДатаЗаключенияКонтракта) Тогда
		ДокументКонтракт.Дата = ДокументКонтракт.ДатаЗаключенияКонтракта;		
	Иначе
		ДокументКонтракт.Дата = ТекущаяДатаСеанса();		
	КонецЕсли; // Если ЗначениеЗаполнено(ДокументКонтракт.ДатаЗаключенияКонтракта) Тогда
	
	Возврат Истина;
	
КонецФункции // ЗаполнитьШапкуКонтракт

Функция ЗаполитьТипКонтракта(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт)
	
	Результат = Истина;
	
	Если СтруктураЗапроса.PriceType = "Offer" Тогда
		ДокументКонтракт.Тип = Перечисления.ТипыКонтрактов.КоммерческоеПредложение;
		
	ИначеЕсли СтруктураЗапроса.PriceType = "Approximate" Тогда
		ДокументКонтракт.Тип = Перечисления.ТипыКонтрактов.Договор;
		
	ИначеЕсли СтруктураЗапроса.PriceType = "Fix" Тогда
		ДокументКонтракт.Тип = Перечисления.ТипыКонтрактов.Договор;
		
	Иначе
		Результат = Ложь;
		ДобавитьОшибку(СтруктураОтвета, СтрШаблон("Неизвестный тип документа [%1]",СтруктураЗапроса.PriceType));
	КонецЕсли; // Если СтруктураЗапроса.PriceType = "Offer" Тогда
	
	Возврат Результат;
	
КонецФункции // ЗаполитьТипКонтракта

Функция ЗнаполнитьКонтрагента(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт)
	
	ДанныеКонтрагента			= СтруктураЗапроса.Vendor;
	ДокументКонтракт.Контрагент = ПолучитьОрганизацию(
									ДанныеКонтрагента.Name, 
									ДанныеКонтрагента.TaxCode, 
									ДанныеКонтрагента.Address);
	Если ЗначениеЗаполнено(ДокументКонтракт.Контрагент) Тогда
		Возврат Истина;
	Иначе
		ДобавитьОшибку(СтруктураОтвета, СтрШаблон("Не найден контрагент с ИНН [%1]", ДанныеКонтрагента.TaxCode)); 
		Возврат Ложь;
	КонецЕсли; // Если ЗначениеЗаполнено(ДокументКонтракт.Контрагент) Тогда
	
КонецФункции // ЗнаполнитьКонтрагента 

Функция ЗаполнитьВалютуКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт)
	
	ДокументКонтракт.Валюта = Справочники.ОКВ.НайтиПоКоду(СтруктураЗапроса.CurrencyCode, Истина);
	Если ЗначениеЗаполнено(ДокументКонтракт.Валюта) Тогда
		Возврат Истина;
	Иначе
		ДобавитьОшибку(СтруктураОтвета, СтрШаблон("Не найдена валюта с кодом [%1]",СтруктураЗапроса.CurrencyCode));
		Возврат Ложь;
	КонецЕсли;		 // Если ЗначениеЗаполнено(ДокументКонтракт.Валюта) Тогда
	
КонецФункции // ЗаполнитьВалютуКонтракт

Функция ЗаполнитьОрганизациюКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт)
	
	ДанныеОрганизация			 = СтруктураЗапроса.Company;
	ДокументКонтракт.Организация = ПолучитьОрганизацию(
									ДанныеОрганизация.Name,
									ДанныеОрганизация.TaxCode,
									"");
	Если ЗначениеЗаполнено(ДокументКонтракт.Организация) Тогда
		Возврат Истина;
	Иначе
		ДобавитьОшибку(СтруктураОтвета, СтрШаблон("Не найдена организация с ИНН [%1]", ДанныеОрганизация.TaxCode)); 
		Возврат Ложь;
	КонецЕсли; // Если ЗначениеЗаполнено(ДокументКонтракт.Организация) Тогда
	
КонецФункции // ЗаполнитьОрганизациюКонтракт

Функция ЗаполнитьПредметыСнабженияКонтракт(СтруктураОтвета, СтруктураЗапроса, ДокументКонтракт)
	
	Результат = Истина;
	
	Для Каждого ОписаниеПредмета Из СтруктураЗапроса.Item Цикл
		
		ПредметыСнабжения = Справочники.КаталогПредметовСнабжения.НайтиПоНомеруОСК(ОписаниеПредмета.USCCode);
		Если ПредметыСнабжения.Количество() = 0 Тогда
			ДобавитьОшибку(СтруктураОтвета, СтрШаблон("Предмет снабжения по коду ОСК [%1] не найден", ОписаниеПредмета.USCCode));
			Продолжить;
		КонецЕсли; // Если ПредметыСнабжения.Количество() = 0 Тогда
		
		Для Каждого Предмет Из ПредметыСнабжения Цикл
			
			Отбор = Новый Структура("ПредметСнабжения", Предмет);
			
			Если ДокументКонтракт.ПредметыСнабжения.НайтиСтроки(Отбор).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли; // Если ДокументКонтракт.ПредметыСнабжения.НайтиСтроки(Отбор).Количество() > 0 Тогда
			
			НоваяСтрока = ДокументКонтракт.ПредметыСнабжения.Добавить();
			НоваяСтрока.UID 				= Строка(Новый УникальныйИдентификатор);
			НоваяСтрока.ПредметСнабжения 	= Предмет;
			НоваяСтрока.Цена 				= ЧислоИзСтроки(ОписаниеПредмета.Price);
			НоваяСтрока.Количество 			= ЧислоИзСтроки(ОписаниеПредмета.Count);
			НоваяСтрока.КлючСвязи 			= Новый УникальныйИдентификатор;
			
			ЗаполнитьЕдиницуИзмеренияПС(СтруктураОтвета, НоваяСтрока, ОписаниеПредмета);
			
		КонецЦикла; // Для Каждого Предмет Из ПредметыСнабжения Цикл
		
	КонецЦикла; // Для Каждого ОписаниеПредмета Из СтруктураЗапроса.Item Цикл
	
	Возврат	Результат;
	
КонецФункции // ЗаполнитьПредметыСнабженияКонтракт

Функция ЗаполнитьЕдиницуИзмеренияПС(СтруктураОтвета, НоваяСтрока, ОписаниеПредмета)
	
	НоваяСтрока.ЕдиницаИзмерения = Справочники.ОКЕИ.НайтиПоКоду(ОписаниеПредмета.MeasureUnitCode, Истина);
	Если ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
		Возврат Истина;
	Иначе
		ДобавитьОшибку(СтруктураОтвета, 
			СтрШаблон("Для предмета снабжения [%1] не найдена единица измерения по коду [%2]",
				ОписаниеПредмета.USCCode,
				НоваяСтрока.ЕдиницаИзмерения));
		Возврат Ложь;
	КонецЕсли; // Если ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
	
КонецФункции // ЗаполнитьЕдиницуИзмеренияПС

Процедура ЗаполнитьДанныеКонтракта(ДокументКонтракт, СтруктураЗапроса)
	
	Если Не СтруктураЗапроса.Свойство("Contract") Тогда
		Возврат;
	КонецЕсли; // Если Не СтруктураЗапроса.Свойство("Contract") Тогда
	
	ДанныеКонтракта = СтруктураЗапроса.Contract;
	
	// Дата заключения контракта
	Если ДанныеКонтракта.Свойство("Date") Тогда 
		ДокументКонтракт.ДатаЗаключенияКонтракта = ДатаИзСтроки(ДанныеКонтракта.Date);
	КонецЕсли; // Если ДанныеКонтракта.Свойство("Date") Тогда 
	
	// Номер контракта
	Если ДанныеКонтракта.Свойство("Number") Тогда 
		ДокументКонтракт.НомерКонтракта = ДанныеКонтракта.Number;
	КонецЕсли; // Если ДанныеКонтракта.Свойство("Number") Тогда 
	
КонецПроцедуры // ЗаполнитьДанныеКонтракта

#КонецОбласти

///////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция GetEquipmentProducers(СтруктураПараметров) Экспорт
	
	Результат = Новый Структура("Отказ", Ложь);
	
	Если Не СтруктураПараметров.Свойство("USCCode") Тогда
		ДобавитьОшибку(Результат, "Не указан обязательный параметр запроса [USCCode]", Истина);	
		Возврат	Результат;
	КонецЕсли; // Если Не СтруктураПараметров.Свойство("USCCode") Тогда
	
	ПредметыСнабжения = Справочники.КаталогПредметовСнабжения.НайтиПоНомеруОСК(СтруктураПараметров.USCCode);
	Если ПредметыСнабжения.Количество() = 0 Тогда
		ДобавитьОшибку(Результат, СтрШаблон("Не найдено предметов снабжения с кодом ОСК [%1]", СтруктураПараметров.USCCode)); 
		Возврат	Результат;
	Иначе
		ДобавитьДанныеИзготовителя(Результат, ПредметыСнабжения);	
	КонецЕсли; // Если ПредметыСнабжения.Количество() = 0 Тогда
	
	Возврат	Результат;
	
КонецФункции // GetEquipmentProducers

Функция SetEquipmentVendors(СтруктураПараметров) Экспорт
	
	Результат = Новый Структура("Отказ", Ложь);
	
	Если Не ПроверкаСтруктуры_SetEquipmentVendors(Результат, СтруктураПараметров) Тогда
		Возврат Результат;
	КонецЕсли; // Если Не ПроверкаСтруктуры_SetEquipmentVendors(СтруктураПараметров) Тогда
	
	ЭлементыДляОбработки = СтруктураПараметров.Body.Item; 
	Для Каждого ОписаниеЭлемента Из ЭлементыДляОбработки Цикл
		
		ПредметыСнабжения = Справочники.КаталогПредметовСнабжения.НайтиПоНомеруОСК(ОписаниеЭлемента.USCCode);
		Если ПредметыСнабжения.Количество() = 0 Тогда
			ДобавитьОшибку(Результат, СтрШаблон("Не найдено предметов снабжения по коду ОСК [%1]", ОписаниеЭлемента.USCCode)); 
			Продолжить;
		КонецЕсли; // Если ПредметыСнабжения.Количество() = 0 Тогда
		
		Поставщики = ПолучитьПоставщиков(Результат, ОписаниеЭлемента.Vendor); 
		Если Поставщики.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; // Если Поставщики.Количество() = 0 Тогда
		
		ОбновитьПоставщиковПредметаСнабжения(Результат, Поставщики, ПредметыСнабжения, ОписаниеЭлемента);
		
	КонецЦикла; // Для Каждого ОписаниеЭлемента Из СтруктураЗапроса.Item Цикл
	
	Возврат	Результат;
	
КонецФункции // SetEquipmentVendors

Функция SetPrice(СтруктураПараметров) Экспорт
	
	Результат = Новый Структура("Отказ", Ложь);
	
	Если Не ПроверкаСтруктуры_SetPrice(Результат, СтруктураПараметров) Тогда
		Возврат Результат;
	КонецЕсли; // Если Не ПроверкаСтруктуры_SetPrice(Результат, СтруктураПараметров) Тогда
	
	СоздатьДокументКонтракт(Результат, СтруктураПараметров.body);
		
	Возврат	Результат;
	
КонецФункции // SetPrice
