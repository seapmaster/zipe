//////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область HTTP

Функция ПолучитьПараметрыСоединения()
	
	Результат = Неопределено;
	
	ОсновнаяНастройка = Справочники.НастройкиОбменаСХранилищемФайлов.Основная;
	Если Не ПустаяСтрока(ОсновнаяНастройка.Сервер) 
		И Не ПустаяСтрока(ОсновнаяНастройка.Логин) 
		И Не ПустаяСтрока(ОсновнаяНастройка.Пароль) 
		И Не ПустаяСтрока(ОсновнаяНастройка.Ресурс) Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Сервер",		ОсновнаяНастройка.Сервер);
		Результат.Вставить("Порт",			8008);
		Результат.Вставить("Пользователь",	ОсновнаяНастройка.Логин);
		Результат.Вставить("Пароль",		ОсновнаяНастройка.Пароль);
		Результат.Вставить("Ресурс",		ОсновнаяНастройка.Ресурс);
	Иначе
		ЗафиксироватьОшибкуВЖурнал("Основная настройка соединения некорректна");	
	КонецЕсли; // Если Не ПустаяСтрока(ОсновнаяНастройка.Адрес) Тогда
	
	Возврат	Результат;
	
КонецФункции // ПолучитьПараметрыСоединения

Функция ПолучитьСоединение(ПараметрыСоединения)
	
	Результат = Неопределено;
	
	Попытка
		Результат = Новый HTTPСоединение(
				ПараметрыСоединения.Сервер,
				ПараметрыСоединения.Порт,
				ПараметрыСоединения.Пользователь, 
				ПараметрыСоединения.Пароль,,15); 	
	Исключение
		ЗафиксироватьОшибкуВЖурнал(СтрШаблон("Неудачная попытка соединения [%1]",ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат	Результат;

КонецФункции // ПолучитьСоединение

Функция СформироватьЗапрос(АдресРесурса, Заголовки, ТелоЗапроса = Неопределено)
	
	Результат = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Если Не ТелоЗапроса = Неопределено Тогда
		Результат.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли; // Если Не ТелоЗапроса = Неопределено Тогда
	
	Возврат	Результат;
	
КонецФункции // СформироватьЗапрос

Функция ЗаголовкиПоУмолчанию()
	
	Результат = Новый Соответствие();
	Результат.Вставить("Content-Type","text/json; charset=utf-8");
	Возврат	Результат;
	
КонецФункции // ЗаголовкиПоУмолчанию

Функция ВыполнитьМетодСоединения(ТекущееСоединение, Метод, Запрос)
	
	Результат = Неопределено;
	
	Попытка
		HTTPОтвет = ТекущееСоединение.ВызватьHTTPМетод(Метод, Запрос);
		Результат = HTTPОтвет;		
	Исключение
		ЗафиксироватьОшибкуВЖурнал("Произошла сетевая ошибка");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ВыполнитьМетодСоединения

Функция ПодготовитьСтруктуруСоединения(Объект, МетодСервиса, ТелоЗапроса = Неопределено, ПараметрыЗапроса = Неопределено)

	Результат = Новый Структура;
	
	// Соединение
	ПараметрыСоединения = ПолучитьПараметрыСоединения();
	Если ПараметрыСоединения = Неопределено Тогда
		УвеличитьСчетчик(Объект, "Основная настройка соединения некорректна");
		Возврат Неопределено;
	КонецЕсли; // Если ПараметрыСоединения = Неопределено Тогда
		
	ТекущееСоединение = ПолучитьСоединение(ПараметрыСоединения);
	Если ТекущееСоединение = Неопределено Тогда
		УвеличитьСчетчик(Объект, "Неудачная попытка соединения, подробности в журнале регистрации");
		Возврат Неопределено;
	КонецЕсли; // Если ТекущееСоединение = Неопределено Тогда
	Результат.Вставить("ТекущееСоединение", ТекущееСоединение);	
	
	// Формирование адреса ресурса
	АдресРесурса 	= СтрШаблон("/%1/hs/FileProcess/V1/%2", ПараметрыСоединения.Ресурс, МетодСервиса);
						
	ПараметрыМассив = Новый Массив;
	Если Не ПараметрыЗапроса = Неопределено Тогда
		Для Каждого ОписаниеПараметра Из ПараметрыЗапроса Цикл
			ПараметрыМассив.Добавить(СтрШаблон("%1=%2", ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение));
		КонецЦикла; // Для Каждого ОписаниеПараметра Из ПараметрыЗапроса Цикл
	КонецЕсли; // Если Не ПараметрыЗапроса = Неопределено Тогда					
	
	Если ПараметрыМассив.Количество() > 0 Тогда
		АдресРесурса = АдресРесурса + "?" + СтрСоединить(ПараметрыМассив, "&");
	КонецЕсли; // Если ПараметрыМассив.Количество() > 0 Тогда
		
	// Формирование запроса						
	Результат.Вставить("Запрос", СформироватьЗапрос(АдресРесурса, ЗаголовкиПоУмолчанию(),ТелоЗапроса));
		
	Возврат Результат;
		
КонецФункции // ПодготовитьСтруктуруСоединения

#КонецОбласти

#Область Служебные

Процедура ЗафиксироватьОшибкиОбмена(СсылкаНаФайл, МассивОшибок)
	
	ОписаниеОшибки = СтрСоединить(МассивОшибок, "; ");
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		УвеличитьСчетчик(СсылкаНаФайл, "Обмен завершен ошибкой");
	Иначе
		УвеличитьСчетчик(СсылкаНаФайл, "Ошибки обмена: " + ОписаниеОшибки);
	КонецЕсли; // Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
КонецПроцедуры // ЗафиксироватьОшибкиОбмена

Процедура ЗафиксироватьОшибкуВЖурнал(ТекстОшибки)
	ЗаписьЖурналаРегистрации("ОбменСХранилищемФайлов", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
КонецПроцедуры // ЗафиксироватьОшибкуВЖурнал

Функция ПреобразоватьИзСтрокиJSON(СтрокаИсточник)
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаИсточник);
	
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ЗафиксироватьОшибкуВЖурнал("Ошибка чтения ответа");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПреобразоватьИзСтрокиJSON

Функция ПолучитьСтрокуJSON(СтруктураДанные)
	РезультатJSON 			= Новый ЗаписьJSON;
	РезультатJSON.УстановитьСтроку();
	ЗаписатьJSON(РезультатJSON, СтруктураДанные);
	СтрокаОтвета 			= РезультатJSON.Закрыть();
	Возврат СтрокаОтвета;
КонецФункции // ПолучитьСтрокуОтвета

Процедура УдалитьЗапись(Объект) Экспорт
	РегистрыСведений.РазборХранилищеФайлов.УдалитьЗапись(Объект);
КонецПроцедуры // УдалитьЗапись

Процедура УвеличитьСчетчик(Объект, ОписаниеОшибки) Экспорт
	РегистрыСведений.РазборХранилищеФайлов.УвеличитьСчетчик(Объект, ОписаниеОшибки);	
КонецПроцедуры // УвеличитьСчетчик

Функция ПолучитьТелоЗапросаОтправкиФайла(СсылкаНаФайл)

	СтруктураДанные = Новый Структура;
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СсылкаНаФайл);
	
	СтруктураДанные.Вставить("Extension", ДанныеФайла.Расширение);
	СтруктураДанные.Вставить("Data", СеарилизоватьДвоичныеДанные(ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла)));
	
	Возврат ПолучитьСтрокуJSON(СтруктураДанные);
	
КонецФункции // ПолучитьТелоЗапросаОтправкиФайла

Функция СеарилизоватьДвоичныеДанные(ДвоичныеДанные)

	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("BinaryData", ДвоичныеДанные);
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, СтруктураДанные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции // СеарилизоватьДвоичныеДанные

Функция ДесериализоватьДвоичныеДанные(ДанныеСтрокой)
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ДанныеСтрокой);
	
	Возврат СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("Структура"));
	
КонецФункции // ДесериализоватьДвоичныеДанные

Функция УдалитьДвоичныеДанные(СсылкаНаФайл)
	
	Результат = Истина;
	
	ПотокВПамяти = Новый ПотокВПамяти;
	ПустыеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();

	ДанныеФайла	= Новый Структура;
	ДанныеФайла.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ПустыеДанные));
	ДанныеФайла.Вставить("АдресВременногоХранилищаТекста", ПоместитьВоВременноеХранилище(ПустыеДанные));
	
	Попытка
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(СсылкаНаФайл, ДанныеФайла);
	Исключение
		УвеличитьСчетчик(СсылкаНаФайл, "Не удалось удалить двоичные данные файла");
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // УдалитьДвоичныеДанные

Процедура СообщитьПользователю(ТекстОшибки)
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);	
КонецПроцедуры // СообщитьОшибку

Функция ОбновитьДанныеФайла(СтруктураДанных, СсылкаНаФайл)
	
	Результат = Истина;
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ПустыеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
	ДанныеФайла	= Новый Структура;
	ДанныеФайла.Вставить("АдресФайлаВоВременномХранилище", 	ПоместитьВоВременноеХранилище(СтруктураДанных.BinaryData));	
	ДанныеФайла.Вставить("АдресВременногоХранилищаТекста",	ПоместитьВоВременноеХранилище(ПустыеДанные));
	
	Попытка
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(СсылкаНаФайл, ДанныеФайла);
	Исключение
		Результат = Ложь;
	КонецПопытки;
		
	Возврат Результат;
		
КонецФункции // ОбновитьДанныеФайла

#КонецОбласти

#Область ОчередьХранилищаФайлов

Функция ПолучитьОчередьНаОбработку(МаксимумПопыток, ВремяХраннения)
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
						|	РазборХранилищеФайлов.Объект
						|ИЗ
						|	РегистрСведений.РазборХранилищеФайлов КАК РазборХранилищеФайлов
						|ГДЕ
						|	РазборХранилищеФайлов.КоличествоПопыток <= &МаксимумПопыток
						|	И РазборХранилищеФайлов.ДатаДобавленияВОчередь < ДобавитьКДате(&ТекущаяДата, ЧАС, -&ВремяХраннения)";
	Запрос.УстановитьПараметр("МаксимумПопыток", 	МаксимумПопыток);
	Запрос.УстановитьПараметр("ВремяХраннения", 	ВремяХраннения);
	Запрос.УстановитьПараметр("ТекущаяДата", 		ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	
	Возврат ТаблицаРезультат.ВыгрузитьКолонку("Объект");

КонецФункции // ПолучитьОчередьНаОбработку

#КонецОбласти
 
Процедура ОбработатьФайл(СсылкаНаФайл)
			
	// Отправить файл в хранилище
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("FileID", Строка(СсылкаНаФайл.УникальныйИдентификатор()));
	
	ТелоЗапроса = ПолучитьТелоЗапросаОтправкиФайла(СсылкаНаФайл);
	СтруктураСоединения = ПодготовитьСтруктуруСоединения(СсылкаНаФайл,"PutFile", ТелоЗапроса, ПараметрыЗапроса);
	Если СтруктураСоединения = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если ТекущееСоединение = Неопределено Тогда
	
	// Выполенение запроса
	РезультатЗапроса = ВыполнитьМетодСоединения(СтруктураСоединения.ТекущееСоединение, "POST", СтруктураСоединения.Запрос);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если Результат = Неопределено Тогда
	
	// Разбор ответа
	Если РезультатЗапроса.КодСостояния < 200
		Или РезультатЗапроса.КодСостояния > 299 Тогда
		УвеличитьСчетчик(СсылкаНаФайл,
			СтрШаблон("Ошибка запроса к серверу, код состояния [%1]",РезультатЗапроса.КодСостояния));
		Возврат;
	КонецЕсли; // Если РезультатЗапроса.КодСостояния < 200
	
	// Получение тела ответа
	ТелоСтрокой = РезультатЗапроса.ПолучитьТелоКакСтроку();

	// Преобразование ответа
	Результат = ПреобразоватьИзСтрокиJSON(ТелоСтрокой);	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если Результат = Неопределено Тогда
	
	// Проверка наличия свойства
	Если Не Результат.Свойство("ResultCode") Тогда
		УвеличитьСчетчик(СсылкаНаФайл, "Не указан статус обмена");
		Возврат;
	КонецЕсли; // Если Не Результат.Свойство("ResultCode") Тогда
	
	// Проверка ResultCode	
	Если Не Результат.ResultCode = "0301" Тогда
		Если Результат.Свойство("Error") И ТипЗнч(Результат.Error) = Тип("Массив") Тогда
			ЗафиксироватьОшибкиОбмена(СсылкаНаФайл, Результат.Error);
		Иначе
			УвеличитьСчетчик(СсылкаНаФайл, "Обмен завершен ошибкой");
		КонецЕсли; // Если Результат.Свойство("Error") Тогда 
		Возврат;
	КонецЕсли; // Если Результат.ResultCode = "0301" Тогда 
		
	// Удалить двоичные данные из кеша
	Если Не УдалитьДвоичныеДанные(СсылкаНаФайл) Тогда
		Возврат;
	КонецЕсли; // Если Не УдалитьДвоичныеДанные(СсылкаНаФайл) Тогда
	
	УдалитьЗапись(СсылкаНаФайл);
	
КонецПроцедуры // ОбработатьФайл
 
///////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьОчередьХранилищаФайлов() Экспорт
	
	Если Не Константы.ВыгружатьФайлыВоВнешнееХранилище.Получить() Тогда
		Возврат;
	КонецЕсли; // Если Не Константы.ВыгружатьФайлыВоВнешнееХранилище.Получить() Тогда
	
	МаксимумПопыток = 5;
	ВремяХраннения	= Справочники.НастройкиОбменаСХранилищемФайлов.ВремяХраненияВКеше();
		
	Для Каждого ЭлементОчереди Из ПолучитьОчередьНаОбработку(МаксимумПопыток, ВремяХраннения) Цикл
		ОбработатьФайл(ЭлементОчереди);
	КонецЦикла; // Для Каждого ЭлементОчереди Из ПолучитьОчередьНаОбработку(МаксимумПопыток, ВремяХраннения) Цикл
	
КонецПроцедуры // ОбработатьОчередьХранилищаФайлов

Процедура ПоместитьДвоичныеДанныеИзХранилищаФайловВКеш(СсылкаНаФайл) Экспорт
	
	Если Не Константы.ВыгружатьФайлыВоВнешнееХранилище.Получить() Тогда
		Возврат;
	КонецЕсли; // Если Не Константы.ВыгружатьФайлыВоВнешнееХранилище.Получить() Тогда
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("FileID", Строка(СсылкаНаФайл.УникальныйИдентификатор()));
	
	СтруктураСоединения = ПодготовитьСтруктуруСоединения(СсылкаНаФайл, "GetFile",,ПараметрыЗапроса);
	Если СтруктураСоединения = Неопределено Тогда
		СообщитьПользователю("Соединение с хранилищем файлов не установлено");
		Возврат;
	КонецЕсли; // Если ТекущееСоединение = Неопределено Тогда
	
	// Выполенение запроса
	РезультатЗапроса = ВыполнитьМетодСоединения(СтруктураСоединения.ТекущееСоединение, "GET", СтруктураСоединения.Запрос);
	Если РезультатЗапроса = Неопределено Тогда
		СообщитьПользователю("Не удалось выполнить метод соединения");
		Возврат;
	КонецЕсли; // Если Результат = Неопределено Тогда
	
	// Разбор ответа
	Если РезультатЗапроса.КодСостояния < 200
		Или РезультатЗапроса.КодСостояния > 299 Тогда
			СообщитьПользователю(СтрШаблон("Ошибка выполнения запроса, код состояния[%1]",РезультатЗапроса.КодСостояния));
		Возврат;
	КонецЕсли; // Если РезультатЗапроса.КодСостояния < 200
	
	// Получение тела ответа
	ТелоСтрокой = РезультатЗапроса.ПолучитьТелоКакСтроку();

	// Преобразование ответа
	Результат = ПреобразоватьИзСтрокиJSON(ТелоСтрокой);	
	Если Результат = Неопределено Тогда
		СообщитьПользователю("Ошибка преобразования ответа");
		Возврат;
	КонецЕсли; // Если Результат = Неопределено Тогда
	
	// Проверка наличия свойства
	Если Не Результат.Свойство("ResultCode") Тогда
		СообщитьПользователю("В ответе отсутствует поле [ResultCode]");
		Возврат;
	КонецЕсли; // Если Не Результат.Свойство("ResultCode") Тогда
	
	Если Не Результат.ResultCode = "0201" Тогда
		СообщитьПользователю("Ошибка выполнения запроса");
		Возврат;
	КонецЕсли; // Если Результат.ResultCode = "0201" Тогда 
	
	Если Не Результат.Свойство("Data") Тогда
		СообщитьПользователю("В ответе отсутствует поле [Data]");
		Возврат;
	КонецЕсли; // Если Не Результат.Свойство("Data") Тогда
	
	Если Не Результат.Свойство("Extension") Тогда
		СообщитьПользователю("В ответе отсутствует поле [Extension]");
		Возврат;
	КонецЕсли; // Если Не Результат.Свойство("Extension") Тогда
	
	СтруктураДанных = ДесериализоватьДвоичныеДанные(Результат.Data); 
	Если Не СтруктураДанных.Свойство("BinaryData") Тогда
		СообщитьПользователю("В ответе отсутствует поле [BinaryData]");
		Возврат;
	КонецЕсли; // Если Не Результат.Data.Свойство("BinaryData") Тогда	
		
	// Обновитьм двоичные данные в кеше
	Если Не ОбновитьДанныеФайла(СтруктураДанных, СсылкаНаФайл) Тогда
		СообщитьПользователю("Не удалось обновить данные файла");
		Возврат;
	КонецЕсли; // Если Не ОбновитьДанныеФайла(СтруктураДанных, СсылкаНаФайл) Тогда
	
	РегистрыСведений.РазборХранилищеФайлов.ДобавитьЗапись(СсылкаНаФайл);
	
КонецПроцедуры // ПоместитьДвоичныеДанныеИзХранилищаФайловВКеш


