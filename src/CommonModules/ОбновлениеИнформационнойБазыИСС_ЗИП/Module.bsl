////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки ИСС_ЗИП.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ИСС_ЗИП";
	Описание.Версия = "1.0.10.1";
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ВыполнятьВсегдаПриСменеВерсии";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПервыйЗапуск";
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
	
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.1.3";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.СоздатьНаборыИсполнителейПоЗадачам";
	//Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	//Обработчик.Приоритет = 99;
	//Обработчик.НачальноеЗаполнение = Ложь;
	//Обработчик.РежимВыполнения = "Монопольно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.1.3";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.СоздатьЗаписиРезерваВремениПоЗадачам";
	//Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	//Обработчик.Приоритет = 99;
	//Обработчик.НачальноеЗаполнение = Истина;
	//Обработчик.РежимВыполнения = "Монопольно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.1.4";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнениеКлассификаторов";
	//Обработчик.НачальноеЗаполнение = Ложь;
	//Обработчик.РежимВыполнения = "Монопольно";

	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.1.4";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПеренумерацияСправочников";
	//Обработчик.НачальноеЗаполнение = Ложь;
	//Обработчик.РежимВыполнения = "Монопольно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.1.5";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.КонтактнаяИнформацияОбновлениеИБ";
	//Обработчик.НачальноеЗаполнение = Ложь;
	//Обработчик.РежимВыполнения = "Монопольно";
	//
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "1.0.1.5";
	//Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ОбновитьСуществующиеСтраныМира";
	//Обработчик.НачальноеЗаполнение = Ложь;
	//Обработчик.РежимВыполнения = "Монопольно";
	
	//+ 13.03.2017 11:07:38 Савинов Александр Задача: ОПЗ 2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.СоздатьРоботаОбработкаИзмененияСпецификацийПредметовСнабжения";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";	
	
	//- 13.03.2017 11:07:45 Савинов Александр Задача: ОПЗ 2
	
	//+ 15.03.2017 14:14:21 Базунов Дмитрий Задача: 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнениеКлассификаторов_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";	
		
	//- 15.03.2017 14:14:21 Базунов Дмитрий Задача: 
 
	//+ 23.03.2017 11:58:38 Савинов Александр Задача: ОПЗ 2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.СоздатьРоботаКорректировкаОписанийИерархииЭлементовСтруктурыЗаказов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";	
	
	//- 23.03.2017 11:58:40 Савинов Александр Задача: ОПЗ 2
	
	//+ 17.04.2017 14:47:11 Савинов Александр Задача: ОПЗ 2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.КонвертироватьДанныеКаталогаПредметовСнабжения";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";	
	
	//- 17.04.2017 14:47:13 Савинов Александр Задача: ОПЗ 2	
	
	//+ 10.05.2017 11:38:00 Савинов Александр Задача: ОПЗ 4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьUIDЭтаповВыполненияЗаявок";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	//- 10.05.2017 11:38:02 Савинов Александр Задача: ОПЗ 4
	
	//+ 11.05.2017 14:25:47 Базунов Дмитрий Задача: 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьКодыILMS";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	//- 11.05.2017 14:25:47 Базунов Дмитрий Задача: 
	
	//+ 25.05.2017 16:13:35 Савинов Александр Задача: ОПЗ 4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьUIDСправочниковВерсия13";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";	
	
	//- 25.05.2017 16:13:37 Савинов Александр Задача: ОПЗ 4
	
	//+ 25.05.2017 16:13:35 Савинов Александр Задача: ОПЗ 4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьUIDСправочниковВерсия14";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";	
	
	//- 25.05.2017 16:13:37 Савинов Александр Задача: ОПЗ 4
	
	//+ 29.05.2017 10:14:27 Савинов Александр Задача: ОПЗ 4
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.СоздатьРоботаЗаполнениеЗаведованийЭлементовСтруктурыКораблей";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	//- 29.05.2017 10:14:30 Савинов Александр Задача: ОПЗ 4
	
	//++ 24.07.2017 15:16:30 Веденеев Павел Задача: ОПЗ 2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьПризнакНаличияПодчиненныхЭлементовСтруктураЗаказаПоКомплектующимИзделиямИЗИП";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 24.07.2017 15:16:30 Веденеев Павел Задача: ОПЗ 2
	
	//++ 23.08.2017 17:03:00 Веденеев Павел Задача: ОПЗ 2
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.СкорректироватьОписанияИерархийЭлементовСтруктурыЗаказов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 23.08.2017 17:03:00 Веденеев Павел Задача: ОПЗ 2
	
	//++ 28.09.2017 17:03:00 Тычина Руслан Задача: При удалении дубликатов в регистре появлялись неуникальные значения по измерениям. В регистр добавлено измерение UID.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнениеUIDвЦенахПредметовСнабжения";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 28.09.2017 17:03:00 Тычина Руслан Задача: При удалении дубликатов в регистре появлялись неуникальные значения по измерениям. В регистр добавлено измерение UID.

	//++ 27.09.2017 12:23:00 Базунов Д. Задача: Очистка лишних символов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ОчисткаЛишнихСимволовПредметовСнабжения";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 27.09.2017 12:23:00 Базунов Д. Задача: Очистка лишних символов
	
	//++ 12.10.2017 10:12:00 Веденеев П. Задача: Заполнение регистра эталонных изделий
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьЭталонныеИзделияВСтруктуреЗаказов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 12.10.2017 10:12:00 Веденеев П. Задача: Заполнение регистра эталонных изделий
	
	//++ 11.11.2017 10:52:00 Тычина Р.В. Задача: Очистка данных удаленных объектов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ОчиститьДанныеУдаленныхОбъектов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 11.11.2017 10:52:00 Тычина Р.В. Задача: Очистка данных удаленных объектов
	
	//++ 16.11.2017 11:01:00 Веденеев П.А. Задача: Приведение наименований элементов структуры в соответствие с наименованиями предметов снабжения
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПривестиНаименованияЭлементовСтруктурыВСоответствиеСПредметамиСнабжения";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 16.11.2017 11:01:00 Веденеев П.А. Задача: Приведение наименований элементов структуры в соответствие с наименованиями предметов снабжения
	
	//++ 16.11.2017 11:01:00 Веденеев П.А. Задача: Конвертация ФНН предметов снабжения в 13-символьные значения без резделителей
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.КонвертироватьФНН";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 16.11.2017 11:01:00 Веденеев П.А. Задача: Конвертация ФНН предметов снабжения в 13-символьные значения без резделителей
	
	//++ 20.12.2017 11:51:00 Веденеев П.А. Задача: ОПЗ 6
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьВидыКодовПредметовСнабженияДляОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 20.12.2017 11:51:00 Веденеев П.А. Задача: ОПЗ 6
	
	//++ 25.12.2017 15:08:00 Веденеев П.А. Задача: ОПЗ 6
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УказатьХарактеристикуМассаДляОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	//-- 25.12.2017 15:08:00 Веденеев П.А. Задача: ОПЗ 6
	
	// + 10.01.2018 9:56:27 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьСостояниеСозданДляИсторииОбъектов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 10.01.2018 9:56:27 Базунов Д.А. Задача:
	
	// + 16.01.2018 15:17:00 Веденеев П.А. Задача: ОПЗ 1 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ОбновитьТранслитерацииОбозначений";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 16.01.2018 15:17:00 Веденеев П.А. Задача: ОПЗ 1
	
	// + 19.01.2018 14:56:57 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьСостояниеСозданДляСправочникаОрганизации";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 19.01.2018 14:56:57 Базунов Д.А. Задача:
	
	// + 23.01.2018 11:56:57 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьРолиИсполнителей";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 23.01.2018 11:56:57 Базунов Д.А. Задача:
	
	// + 23.01.2018 12:03:57 Веденеев П.А. Задача: исправление ошибки пустых составляющих частей и элементов структур 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УдалитьПустыеСоставныеЧастиИЭлементыСтруктур";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 23.01.2018 12:03:57 Веденеев П.А. Задача: исправление ошибки пустых составляющих частей и элементов структур
	
	// + 23.01.2018 13:44:09 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьШаблонПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 23.01.2018 13:44:09 Базунов Д.А. Задача:
	
	// + 24.01.2018 14:52:23 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.СоздатьИЗаполнитьШаблоныДляТочекМаршрута";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";	
	// - 24.01.2018 14:52:23 Базунов Д.А. Задача:
	
	// + 29.01.2018 17:17:00 Веденеев П.А. Задача: ОПЗ 2 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьСтатусыЦен";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 29.01.2018 17:17:00 Веденеев П.А. Задача: ОПЗ 2
	
	// + 12.02.2018 17:10:00 Веденеев П.А. Задача: ОПЗ 6 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьСистемыЭлементовСтруктуры";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 12.02.2018 17:10:00 Веденеев П.А. Задача: ОПЗ 6
	
	// + 12.02.2018 17:56:19 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьРольИсполнителяАдминистраторИССЗИПЭ";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 12.02.2018 17:56:19 Базунов Д.А. Задача: 
	
	// + 14.02.2018 17:53:15 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьСправочникЭтапыВыполненияПунктовЗаявок";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 14.02.2018 17:53:15 Базунов Д.А. Задача:
	
	// + 15.02.2018 11:08:37 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьСправочникЭтапыВыполненияЗаявок";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 15.02.2018 11:08:37 Базунов Д.А. Задача:
	
	// + 19.02.2018 10:37:23 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьЗначенияКонстант";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 19.02.2018 10:37:23 Базунов Д.А. Задача:

	// + 21.02.2018 15:25:12 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьЗначениеПоУмолчаниюЭтапВыполененияЗаявки";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 21.02.2018 15:25:12 Базунов Д.А. Задача:
	
	// + 26.02.2018 11:15:00 Веденеев П.А. Задача: ОПЗ 1 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьКлассыПоЕКПСУтвержденныхНаименований";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 26.02.2018 11:15:00 Базунов Д.А. Задача: ОПЗ 1
	
	// + 27.02.2018 17:12:21 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьРолиИсполнителейКП";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 27.02.2018 17:12:21 Базунов Д.А. Задача:
	
	// + 03.05.2018 14:50:00 Веденеев П.А. Задача:  
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьТипыСоставляющихЧастей";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 03.05.2018 14:50:00 Веденеев П.А. Задача:
	
	// + 03.05.2018 16:42:00 Веденеев П.А. Задача:  
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьКонстантыРазделовСпецификации";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 03.05.2018 16:42:00 Веденеев П.А. Задача:
	
	// + 15.05.2018 18:15:00 Веденеев П.А. Задача:  
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьРольИсполнителяОтветственныйЗаСтруктуруКорабля";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 15.05.2018 18:15:00 Веденеев П.А. Задача:
	
	// + 19.03.2018 14:10:47 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьАдресПубликацииИнформационнойБазыВИнтернете";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.8.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаменитьТекстШаблонов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 19.03.2018 14:10:47 Базунов Д.А. Задача:
	
	// + 24.03.2018 14:05:00 Веденеев П.А. Задача:
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьКонстантыЕдиницИзмерения";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 24.03.2018 14:05:00 Веденеев П.А. Задача:
	
	// + 27.03.2018 11:38:27 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьКонстантыЭтапов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 27.03.2018 11:38:27 Базунов Д.А. Задача:
	
	// + 27.03.2018 14:05:00 Веденеев П.А. Задача:
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьКонстантуДолларСША";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 27.03.2018 14:05:00 Веденеев П.А. Задача:
	
	// + 28.03.2018 11:21:00 Веденеев П.А. Задача:
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьКонстантуЕдиницаИзмеренияШтука";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 28.03.2018 11:21:00 Веденеев П.А. Задача:
	
	// + 28.03.2018 14:52:00 Веденеев П.А. Задача:
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПеренумероватьКонтракты";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 28.03.2018 14:52:00 Веденеев П.А. Задача:
	
	// + 27.03.2018 11:38:27 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьКонстантыЭтаповДляБП";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьРолиИсполнителейФормированиеЗаявки";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 27.03.2018 11:38:27 Базунов Д.А. Задача:
	
	// + 16.04.2018 10:20:00 Веденеев П.А. Задача:
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьТипЗаменыПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 16.04.2018 10:20:00 Веденеев П.А. Задача:
	
	// + Базунов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьNSNКаталогаПС";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - Базунов
	
	// + Базунов
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПеренастроитьРольПредставительДЗО";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - Базунов
	
	// ++ 04.05.2018 16:23:43 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.НастроитьРолиИсполнителей";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// -- 04.05.2018 16:23:43 Базунов Д.А. Задача:
	
	// + 16.05.2018 15:50:00 Веденеев П.А. Задача:
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПеренумероватьСправочникЯзыков";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// - 16.05.2018 15:50:00 Веденеев П.А. Задача:

	// ++ 24.05.2018 16:09:03 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьКонстантуЭтапЗаявкиНазначениеРДВТС";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	// -- 24.05.2018 16:09:03 Базунов Д.А. Задача:
	
	// + 29.06.2018 15:50:00 Веденеев П.А. Задача:
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьСлужебныйЗаказ";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Оперативно";
	// - 29.06.2018 15:50:00 Веденеев П.А. Задача:	
	
	// ++ 06.09.2018 16:02:12 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.15";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПеренестиКодыINCAT";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Оперативно";
	// -- 06.09.2018 16:02:12 Базунов Д.А. Задача:
	
	// ++ 25.09.2018 16:09:15 Базунов Д.А. Задача: 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьНачальникаОтделаЦенообразования";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Оперативно";
	// -- 25.09.2018 16:09:15 Базунов Д.А. Задача:
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьНомерКонтрактаПеренумероватьКонтракты";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ОчиститьРегистрСверткаДублейПредметовСнабженияВспомогательный";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ОчиститьСлужебныйЗаказ";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьНастройкиСохраненияРеквизитовПриОбъединенииДублей";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.УстановитьКонстантыДляРаботыСоСпецификациями";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПодготовитьРегистрыДляРаботыСоСпецификациями";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.9.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ПодготовитьРегламентныеЗаданияДляРаботыСоСпецификациями";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.10.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыИСС_ЗИП.ЗаполнитьРеквизитыРолиИсполнителей_1_0_10_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Монопольно";

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	// По умолчанию БСП сама определяет режим обновления - обновление, переход, начальное заполнение.
	// Здесь можно переопределить режим обновления принудительно.
	
	//РежимОбновленияДанных = "ОбновлениеВерсии";
	//СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	// Здесь можно добавить отдельные обработчики перехода с одной программы на другую.
	// Начальная инициализация и обработчики данных здесь не нужны, т.к. будут выполнены после в рамках обычного обновления.
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	// Код для первоначального заполнения информационной базы.
	
	//НачатьТранзакцию();
	//
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Процедура-обработчик обновления данных ИБ, которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
КонецПроцедуры

// Обработчик обновления ИСС_ЗИП 1.0.1.3
// Создает наборы исполнителей по всем задачам
//
Процедура СоздатьНаборыИсполнителейПоЗадачам() Экспорт
	
	//ЗаписьЖурналаРегистрации(НСтр("ru='Наборы исполнителей созданы и присвоены задачам'"), УровеньЖурналаРегистрации.Информация,,,);
	
КонецПроцедуры

// Обработчик обновления ИСС_ЗИП 1.0.1.3
// Создает резерв времени по задачам
//
Процедура СоздатьЗаписиРезерваВремениПоЗадачам() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru='Обновлены записи резерва времени по задачам'"), УровеньЖурналаРегистрации.Информация,,,);
	
КонецПроцедуры

#Область ИСС_ЗИП_1_0_1_4

// Ствим признак - Выбран для загрузки всех элементов классификатора
//
Процедура ОбходДерева(Дерево)
	
	Для каждого Элемент Из Дерево.Строки Цикл
		Элемент.Выбран = Истина;
		ОбходДерева(Элемент);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления ИСС_ЗИП 1.0.1.4
// Заполнение классификаторов
//
Процедура ЗаполнениеКлассификаторов() Экспорт
	
	// +++ Заполняем валюты из классификатора
	
	Валюты = Новый ТаблицаЗначений;
	Валюты.Колонки.Добавить("КодВалютыЦифровой");
	Валюты.Колонки.Добавить("КодВалютыБуквенный");
	Валюты.Колонки.Добавить("Наименование");
	Валюты.Колонки.Добавить("СтраныИТерритории");
	Валюты.Колонки.Добавить("Загружается");
	Валюты.Колонки.Добавить("ПараметрыПрописиНаРусском");
	
	// Заполняет список валют из макета ОКВ.
	КлассификаторXML = Справочники.ОКВ.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Для Каждого ЗаписьОКВ Из КлассификаторТаблица Цикл
		НоваяСтрока = Валюты.Добавить();
		НоваяСтрока.КодВалютыЦифровой         = ЗаписьОКВ.Code;
		НоваяСтрока.КодВалютыБуквенный        = ЗаписьОКВ.CodeSymbol;
		НоваяСтрока.Наименование              = ЗаписьОКВ.Name;
		НоваяСтрока.СтраныИТерритории         = ЗаписьОКВ.Description;
		НоваяСтрока.Загружается               = ЗаписьОКВ.RBCLoading;
		НоваяСтрока.ПараметрыПрописиНаРусском = ЗаписьОКВ.NumerationItemOptions;
	КонецЦикла;
	
	Для каждого ТекущиеДанные Из Валюты Цикл
		
		СтрокаВБазе = Справочники.ОКВ.НайтиПоКоду(ТекущиеДанные.КодВалютыЦифровой);
		Если ЗначениеЗаполнено(СтрокаВБазе) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Справочники.ОКВ.СоздатьЭлемент();
		НоваяСтрока.Код                       = ТекущиеДанные.КодВалютыЦифровой;
		НоваяСтрока.Наименование              = ТекущиеДанные.КодВалютыБуквенный;
		НоваяСтрока.НаименованиеПолное        = ТекущиеДанные.Наименование;
		НоваяСтрока.КраткоеНаименованиеСтранИТерриторий = ТекущиеДанные.СтраныИТерритории;
		НоваяСтрока.Записать();
		
	КонецЦикла;
	
	// --- Заполняем валюты из классификатора
	
	
	// +++ Заполняем ОКЕИ из классификатора
	
	Дерево = Справочники.ОКЕИ.ПолучитьДанныеКлассификатора();
	
	Дерево.Колонки.Добавить("Выбран",     Новый ОписаниеТипов("Булево"));
	Дерево.Колонки.Добавить("Существует", Новый ОписаниеТипов("Булево"));
	
	Соответствие = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК Ссылка,
	|	ЕдиницыИзмерения.Код КАК Код
	|ИЗ
	|	Справочник.ОКЕИ КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Код <> """"";
	Отбор = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(СокрЛП(Выборка.Код), Выборка.Ссылка);
	КонецЦикла;
	
	Справочники.ОКЕИ.ОбработатьДерево(Дерево, Отбор, Соответствие);
	
	СоответствиеЕдиниц = Новый ФиксированноеСоответствие(Соответствие);
	
	ОбходДерева(Дерево);
	
	Справочники.ОКЕИ.ОбработатьРезультатыПодбораНаСервере(Дерево, СоответствиеЕдиниц);
	
	// --- Заполняем ОКЕИ из классификатора
	
КонецПроцедуры
 
// Обработчик обновления ИСС_ЗИП 1.0.1.4
// Перенумерация
//
Процедура ПеренумерацияСправочников() Экспорт
	
	// Перенумерация, т.к. уменьшили длину кода справочников
	МассивСправочников = Новый Массив;
	МассивСправочников.Добавить("ТипыКораблей");
	МассивСправочников.Добавить("РангиКораблей");
	МассивСправочников.Добавить("КлассыИПодклассыКораблей");
	МассивСправочников.Добавить("Флоты");
	МассивСправочников.Добавить("РазделыСпецификацииЗИП");
	МассивСправочников.Добавить("ВидыРемонта");
	МассивСправочников.Добавить("ХарактеристикиПредметовСнабжения");
	МассивСправочников.Добавить("ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения");
	МассивСправочников.Добавить("ХарактеристикиКораблей");
	МассивСправочников.Добавить("ВооружениеКораблей");
	
	Для каждого Спр Из МассивСправочников Цикл
		
		Выборка = Справочники[Спр].Выбрать(,,, "Код ВОЗР");
		
		сч=1;
		ДлинаКода = Метаданные.Справочники[Спр].ДлинаКода;
		Пока Выборка.Следующий() Цикл
			
			СпрОб = Выборка.ПолучитьОбъект();
			СпрОб.Код = Прав("0000"+Строка(сч), ДлинаКода);
			
			Попытка
				СпрОб.Записать();
			Исключение
			    СпрОб.УстановитьНовыйКод();
				Попытка
					СпрОб.Записать();
				Исключение
				    Сообщить(ОписаниеОшибки());
				КонецПопытки;
			КонецПопытки;
			
			сч=сч+1;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

#Область ИСС_ЗИП_1_0_1_5

Процедура КонтактнаяИнформацияОбновлениеИБ() Экспорт
	
	// +++ Справочник "Пользователи"
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);		
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);		
	// --- Справочник "Пользователи"
	
	
	// +++ Справочник "Организации"
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдрес;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
    ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);		
	
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдрес;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
    ПараметрыВида.Порядок = 2;
	ПараметрыВида.НастройкиПроверки.ПроверятьПоФИАС = Истина;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);		
	
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.Телефон;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 3;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);		
	
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.Факс;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 4;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);		
	
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ЭлектроннаяПочта;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 5;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);		
	
    ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
    ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.WebСайт;
    ПараметрыВида.Используется = Истина;
    ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
    УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);		
	// --- Справочник "Организации"
	
КонецПроцедуры

// Вытащена из общего модуля УправлениеКонтактнойИнформациейСлужебный, изменена
Процедура ОбновитьСуществующиеСтраныМира() Экспорт
	
	Добавлять = Истина;
	
	Фильтр = Новый Структура("Код");
	
	// Сравнивать в запросе нельзя из-за возможной регистронезависимости базы данных.
	ТаблицаКлассификатора = Справочники.ОКСМ.ТаблицаКлассификатора();
	
	Для Каждого СтрокаКлассификатора Из ТаблицаКлассификатора Цикл
		Фильтр.Код = СтрокаКлассификатора.Код;
		Выборка = Справочники.ОКСМ.Выбрать(,, Фильтр);
		СтранаНайдена = Выборка.Следующий();
		Если Не СтранаНайдена И Добавлять Тогда
			// Добавление страны
			Страна = Справочники.ОКСМ.СоздатьЭлемент();
		ИначеЕсли СтранаНайдена И (
			Выборка.Наименование <> СтрокаКлассификатора.Наименование
			Или Выборка.БуквенныйКодАльфа2 <> СтрокаКлассификатора.КодАльфа2
			Или Выборка.БуквенныйКодАльфа3 <> СтрокаКлассификатора.КодАльфа3
			Или Выборка.ПолноеНаименованиеСтраны <> СтрокаКлассификатора.НаименованиеПолное) Тогда
			// Изменение страны
			Страна = Выборка.ПолучитьОбъект();
		Иначе
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Если Не Страна.ЭтоНовый() Тогда
				ЗаблокироватьДанныеДляРедактирования(Страна.Ссылка);
			КонецЕсли;
			//ЗаполнитьЗначенияСвойств(Страна, СтрокаКлассификатора, "Код, Наименование, БуквенныйКодАльфа2, БуквенныйКодАльфа3, ПолноеНаименованиеСтраны");
			Страна.Код = СтрокаКлассификатора.Код;
			Страна.Наименование = СтрокаКлассификатора.Наименование;
			Страна.БуквенныйКодАльфа2 = СтрокаКлассификатора.КодАльфа2;
			Страна.БуквенныйКодАльфа3 = СтрокаКлассификатора.КодАльфа3;
			Страна.ПолноеНаименованиеСтраны = СтрокаКлассификатора.НаименованиеПолное;
			Страна.ДополнительныеСвойства.Вставить("НеПроверятьУникальность");
			Страна.Записать();
			
		Исключение
			Инфо = ИнформацияОбОшибке();
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

 

#КонецОбласти 

#Область ИСС_ЗИП_1_0_1_7

Процедура СоздатьРоботаОбработкаИзмененияСпецификацийПредметовСнабжения() Экспорт

	Если Не ПользователиИнформационнойБазы.НайтиПоИмени("Обработка изменения спецификаций предметов снабжения") = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Метаданные.Роли.ОбработкаИзмененияСпецификацийПредметовСнабжения);
	
	ОбщиеФункцииСервер.СоздатьПользователяДляРегламентногоЗадания("Обработка изменения спецификаций предметов снабжения", "ОбработкаИзмененияСпецификацийПредметовСнабжения", МассивРолей);

КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_1_8

Процедура ЗаполнениеКлассификаторов_2() Экспорт 
	
	Справочники.ОКАТО.ЗаполнитьИзКлассификатора();
	
	Справочники.ОКВЭД2.ЗаполнитьИзКлассификатора();
	
	Справочники.ОКПД2.ЗаполнитьИзКлассификатора();
	
	Справочники.УтвержденныеНаименованияПредметовСнабжения.ЗаполнитьИзКлассификатора();
	
	Справочники.ЕКПС.ЗаполнитьИзКлассификатора();
	
	Справочники.ТНВЭД.ЗаполнитьИзКлассификатора();
		
КонецПроцедуры
 
#КонецОбласти

#Область ИСС_ЗИП_1_0_1_9

Процедура СоздатьРоботаКорректировкаОписанийИерархииЭлементовСтруктурыЗаказов() Экспорт

	Если Не ПользователиИнформационнойБазы.НайтиПоИмени("Корректировка описаний иерархии элементов структуры заказов") = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Метаданные.Роли.КорректировкаОписанийИерархииЭлементовСтруктурыЗаказов);
	
	ОбщиеФункцииСервер.СоздатьПользователяДляРегламентногоЗадания("Корректировка описаний иерархии элементов структуры заказов", "КорректировкаОписанийИерархииЭлементовСтруктурыЗаказов", МассивРолей);

КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_1_10

Процедура КонвертироватьДанныеКаталогаПредметовСнабжения() Экспорт

	КонвертироватьОбозначениеТранслитированное();
	
	КонвертироватьПереводНаименования();
	
КонецПроцедуры

Процедура КонвертироватьОбозначениеТранслитированное()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка,
	|	КаталогПредметовСнабжения.УдалитьСерийныйНомер
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.УдалитьСерийныйНомер = """"
	|			И НЕ КаталогПредметовСнабжения.УдалитьСерийныйНомер = """"""""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Критический = Перечисления.ПриоритетыОшибок.Критический;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ПредметСнабженияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПредметСнабженияОбъект.ОбозначениеТранслитированное = Выборка.УдалитьСерийныйНомер;
		
		Попытка
		
			ПредметСнабженияОбъект.Записать();
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("КонвертироватьОбозначениеТранслитированное()" + Символы.ПС + Строка(Выборка.Ссылка) + Символы.ПС + ОписаниеОшибки(), Критический);
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура КонвертироватьПереводНаименования()

	// + 05.04.2018 14:40:10 Базунов Д.А. Задача: 
	// Удалены эти реквизиты
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	КаталогПредметовСнабжения.Ссылка,
	//|	ВЫБОР
	//|		КОГДА КаталогПредметовСнабжения.УдалитьНаименованиеINCAT = """"
	//|				ИЛИ КаталогПредметовСнабжения.УдалитьНаименованиеINCAT = """"""""
	//|			ТОГДА КаталогПредметовСнабжения.УдалитьУтвержденноеНаименованиеНаАнглийском
	//|		ИНАЧЕ КаталогПредметовСнабжения.УдалитьНаименованиеINCAT
	//|	КОНЕЦ КАК Перевод
	//|ИЗ
	//|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	//|ГДЕ
	//|	(НЕ КаталогПредметовСнабжения.УдалитьНаименованиеINCAT = """"
	//|				И НЕ КаталогПредметовСнабжения.УдалитьНаименованиеINCAT = """"""""
	//|			ИЛИ НЕ КаталогПредметовСнабжения.УдалитьУтвержденноеНаименованиеНаАнглийском = """"
	//|				И НЕ КаталогПредметовСнабжения.УдалитьУтвержденноеНаименованиеНаАнглийском = """""""")";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//
	//	Возврат;	
	//
	//КонецЕсли;
	//
	//Английский = Справочники.Языки.Английский;
	//
	//Критический = Перечисления.ПриоритетыОшибок.Критический;
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//
	//	МенеджерЗаписи = РегистрыСведений.ДополнительныеНаименования.СоздатьМенеджерЗаписи();
	//	МенеджерЗаписи.Владелец = Выборка.Ссылка;
	//	МенеджерЗаписи.ИмяРеквизита = "Наименование";
	//	МенеджерЗаписи.Язык = Английский;
	//	МенеджерЗаписи.Перевод = Выборка.Перевод;
	//	
	//	Попытка
	//	
	//		МенеджерЗаписи.Записать(Ложь);	
	//	
	//	Исключение
	//		
	//		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("КонвертироватьПереводНаименования()" + Символы.ПС + Строка(Выборка.Ссылка) + Символы.ПС + ОписаниеОшибки(), Критический);
	//				
	//	КонецПопытки;
	//
	//КонецЦикла;

	// - 05.04.2018 14:40:10 Базунов Д.А. Задача:
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_1_11

Процедура ЗаполнитьUIDЭтаповВыполненияЗаявок() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения КАК ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ЭтапОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		ЭтапОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			ЭтапОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDЭтаповВыполненияЗаявок()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_1_12
Процедура ЗаполнитьКодыILMS() Экспорт
	
	Справочники.ОКЕИ.ЗаполнитьКодыILMS();
		
КонецПроцедуры
#КонецОбласти 

#Область ИСС_ЗИП_1_0_1_13

Процедура ЗаполнитьUIDСправочниковВерсия13() Экспорт

	ЗаполнитьUIDКатегорийЗаявокНаПоставкуПС();
	
	ЗаполнитьUIDИностранныхЗаказчиков();
	
	ЗаполнитьUIDПользователей();
	
	ЗаполнитьUIDОКВ();
	
	ЗаполнитьUIDОрганизаций();

КонецПроцедуры

Процедура ЗаполнитьUIDКатегорийЗаявокНаПоставкуПС() 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КатегорииЗаявокНаПоставкуПС.Ссылка
	|ИЗ
	|	Справочник.КатегорииЗаявокНаПоставкуПС КАК КатегорииЗаявокНаПоставкуПС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDКатегорийЗаявокНаПоставкуПС()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьUIDИностранныхЗаказчиков() 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИностранныеЗаказчики.Ссылка
	|ИЗ
	|	Справочник.ИностранныеЗаказчики КАК ИностранныеЗаказчики";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDИностранныхЗаказчиков()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьUIDПользователей() 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDПользователей()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьUIDОКВ() 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОКВ.Ссылка
	|ИЗ
	|	Справочник.ОКВ КАК ОКВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDОКВ()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьUIDОрганизаций() 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDОрганизаций()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_1_14

Процедура ЗаполнитьUIDСправочниковВерсия14() Экспорт
	
	ЗаполнитьUIDПредметовСнабжения();
	
	ЗаполнитьUIDСтруктурыКораблейПоКомплектующимИЗИП();
	
	ЗаполнитьUIDОКЕИ();
	
КонецПроцедуры

Процедура ЗаполнитьUIDПредметовСнабжения() 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDПредметовСнабжения()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьUIDСтруктурыКораблейПоКомплектующимИЗИП() 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDСтруктурыКораблейПоКомплектующимИЗИП()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьUIDОКЕИ() 

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОКЕИ.Ссылка
	|ИЗ
	|	Справочник.ОКЕИ КАК ОКЕИ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDОКЕИ()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_1_15

Процедура СоздатьРоботаЗаполнениеЗаведованийЭлементовСтруктурыКораблей() Экспорт

	Если Не ПользователиИнформационнойБазы.НайтиПоИмени("Заполнение заведований подчиненных элементов структуры кораблей") = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Метаданные.Роли.ЗаполнениеЗаведованийЭлементовСтруктурыКораблей);
	
	ОбщиеФункцииСервер.СоздатьПользователяДляРегламентногоЗадания("Заполнение заведований подчиненных элементов структуры кораблей", "ЗаполнениеЗаведованийПодчиненныхЭлементовСтруктурыКораблей", МассивРолей);

КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_1_16

Процедура ЗаполнитьПризнакНаличияПодчиненныхЭлементовСтруктураЗаказаПоКомплектующимИзделиямИЗИП() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Ссылка
	|ПОМЕСТИТЬ втРодители
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРодители.Ссылка КАК Ссылка
	|ИЗ
	|	втРодители КАК втРодители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО (втРодители.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|				И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;	
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();	
		СпрОбъект.UID = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		СпрОбъект.ЕстьПодчиненные = Истина;
		
		Попытка
		
			СпрОбъект.Записать();	
		
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDОКЕИ()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
			Возврат;	
		
		КонецПопытки;
	
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_1_17

&НаСервере
Процедура СкорректироватьОписанияИерархийЭлементовСтруктурыЗаказов() Экспорт
	
	ТаблицаФактическихОписанийИерархии = Новый ТаблицаЗначений;
	ТаблицаФактическихОписанийИерархии.Колонки.Добавить("ЭлементСтруктуры", Новый ОписаниеТипов("СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП"));
	ТаблицаФактическихОписанийИерархии.Колонки.Добавить("ОписаниеИерархии", Новый ОписаниеТипов("Строка"));
	ТаблицаФактическихОписанийИерархии.Колонки.Добавить("Система", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП1
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП1.Родитель
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП1.Ссылка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	ДеревоЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СтруктураЗаказаПустаяСсылка = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
	
	ДобавитьФактическиеОписанияИерархии(ДеревоЗапроса.Строки,ТаблицаФактическихОписанийИерархии,СтруктураЗаказаПустаяСсылка,,СтруктураЗаказаПустаяСсылка);
	
	ОписаниеИерархийНаборЗаписей = РегистрыСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.СоздатьНаборЗаписей();
	
	Попытка
		
		ОписаниеИерархийНаборЗаписей.Загрузить(ТаблицаФактическихОписанийИерархии);
		ОписаниеИерархийНаборЗаписей.Записать();
		
	Исключение
		
		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнитьUIDОКЕИ()" + Символы.ПС + ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Критический);
		
	КонецПопытки;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФактическиеОписанияИерархии(СтрокиДерева, ТаблицаФактическихОписанийИерархии, РодительЭлемента, ОписаниеИерархии = "", СтруктураЗаказаПустаяСсылка)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не СтрокаДерева.Ссылка = РодительЭлемента И Не РодительЭлемента = СтруктураЗаказаПустаяСсылка Тогда
			
			СтрокаФактическоеОписаниеИерархии = ТаблицаФактическихОписанийИерархии.Добавить();
			СтрокаФактическоеОписаниеИерархии.ЭлементСтруктуры = СтрокаДерева.Ссылка;
			СтрокаФактическоеОписаниеИерархии.ОписаниеИерархии = ОписаниеИерархии;
			//++ 12.02.2018 Веденеев П. // добавление описания системы корабля
			ПозицияРазделителя = СтрНайти(ОписаниеИерархии, "/");
			СтрокаФактическоеОписаниеИерархии.Система = ?(ПозицияРазделителя > 1, Лев(ОписаниеИерархии, ПозицияРазделителя - 1), ОписаниеИерархии);
			//-- 12.02.2018 Веденеев П. // добавление описания системы корабля
			
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			Если СтрокаДерева.Ссылка = РодительЭлемента Тогда
				
				ТекущееОписаниеИерархии = ОписаниеИерархии;
				
			Иначе
				
				ОписаниеРодительскихУровней = ?(ЗначениеЗаполнено(ОписаниеИерархии),ОписаниеИерархии + "/","");
				ТекущееОписаниеИерархии = ОписаниеРодительскихУровней + СтрокаДерева.Наименование;
				
			КонецЕсли;
			
			ДобавитьФактическиеОписанияИерархии(СтрокаДерева.Строки,ТаблицаФактическихОписанийИерархии,СтрокаДерева.Ссылка,ТекущееОписаниеИерархии,СтруктураЗаказаПустаяСсылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_4_2
Процедура ЗаполнениеUIDвЦенахПредметовСнабжения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковЦен.Ссылка КАК Ссылка,
		|	ВводНачальныхОстатковЦен.Проведен КАК Проведен
		|ИЗ
		|	Документ.ВводНачальныхОстатковЦен КАК ВводНачальныхОстатковЦен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контракт.Ссылка,
		|	Контракт.Проведен
		|ИЗ
		|	Документ.Контракт КАК Контракт";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Если ВыборкаДетальныеЗаписи.Проведен Тогда
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ИСС_ЗИП_1_0_4_3
Процедура ОчисткаЛишнихСимволовПредметовСнабжения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабжения.Наименование КАК Наименование,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	КаталогПредметовСнабжения.НомерОСК КАК НомерОСК
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивСимволов = Новый Массив;
	МассивСимволов.Добавить("""""");
	МассивСимволов.Добавить("""");
	МассивСимволов.Добавить(".");
	сч=0;
	
	Пока Выборка.Следующий() Цикл
		
		НовНаименование 		= ОбщиеФункцииСервер.УдалитьИзСтрокиПробелыСлеваСправа(Выборка.Наименование);
		НовОбозначение 			= ОбщиеФункцииСервер.УдалитьИзСтрокиПробелыСлеваСправа(Выборка.Обозначение);
		НовДокументНаПоставку 	= ОбщиеФункцииСервер.УдалитьИзСтрокиПробелыСлеваСправа(Выборка.ДокументНаПоставку);
		
		//НовНаименование 		= ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеСимволыИзМассиваСомволов(НовНаименование, МассивСимволов);
		НовОбозначение 			= ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеСимволыИзМассиваСомволов(НовОбозначение, МассивСимволов);
		НовДокументНаПоставку 	= ОбщиеФункцииСервер.УдалитьИзСтрокиЛишниеСимволыИзМассиваСомволов(НовДокументНаПоставку, МассивСимволов);
		
		НужноЗаписать = Ложь;
		СтруРеквизитов = Новый Структура;
		Если СтрНайти(Выборка.НомерОСК, "ОСК-") > 0 Тогда
			СтруРеквизитов.Вставить("НомерОСК", СтрЗаменить(Выборка.НомерОСК, "ОСК-", ""));
			НужноЗаписать = Истина;
		КонецЕсли; 
		Если НЕ НовНаименование = Выборка.Наименование Тогда
			СтруРеквизитов.Вставить("Наименование", НовНаименование);
			НужноЗаписать = Истина;
		КонецЕсли; 
		Если НЕ НовОбозначение = Выборка.Обозначение Тогда
			СтруРеквизитов.Вставить("Обозначение", НовОбозначение);
			НужноЗаписать = Истина;
		КонецЕсли; 
		Если НЕ НовДокументНаПоставку = Выборка.ДокументНаПоставку Тогда
			СтруРеквизитов.Вставить("ДокументНаПоставку", НовДокументНаПоставку);
			НужноЗаписать = Истина;
		КонецЕсли; 
		
		Если НужноЗаписать Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для каждого Рекв Из СтруРеквизитов Цикл
				СправочникОбъект[Рекв.Ключ] = Рекв.Значение;
			КонецЦикла; 
			СправочникОбъект.Записать();
		КонецЕсли; 
		сч=сч+1;
	КонецЦикла;  	
	
КонецПроцедуры
#КонецОбласти

#Область ИСС_ЗИП_1_0_4_4

Процедура ЗаполнитьЭталонныеИзделияВСтруктуреЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	МАКСИМУМ(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка) КАК ЭлементСтруктурыЗаказа
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = СпецификацииПредметовСнабжения.ПредметСнабжения
	|			И (НЕ СпецификацииПредметовСнабжения.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))
	|			И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	|			И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПредметовСнабжения.ПредметСнабжения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	ЭталонныеИзделияВСтруктуреЗаказовНаборЗаписей = РегистрыСведений.ЭталонныеИзделияВСтруктуреЗаказов.СоздатьНаборЗаписей();
	ЭталонныеИзделияВСтруктуреЗаказовНаборЗаписей.Загрузить(ТаблицаЗапроса);
	ЭталонныеИзделияВСтруктуреЗаказовНаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_4_5

Процедура ОчиститьДанныеУдаленныхОбъектов() Экспорт
	
	// + 05.04.2018 14:45:11 Базунов Д.А. Задача: 
	
	// Удалены эти справочники
	
	//МассивОбъектов = Новый Массив;
	//МассивОбъектов.Добавить(Метаданные.Справочники.Удалить_ЗИП);
	//МассивОбъектов.Добавить(Метаданные.Справочники.Удалить_ВедомостиЗИП);
	//
	//Для каждого ТекОбъект Из МассивОбъектов Цикл
	//	
	//	ЭтоСправочник = Метаданные.Справочники.Содержит(ТекОбъект);
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Спр.Ссылка
	//	|ИЗ
	//	|	" + ТекОбъект.ПолноеИмя() + " КАК Спр
	//	|ГДЕ 
	//	|	НЕ Спр.Предопределенный
	//	|";
	//	
	//	Результат = Запрос.Выполнить();
	//	
	//	Если НЕ Результат.Пустой() Тогда
	//		
	//		Сч = 0;
	//		НачатьТранзакцию();
	//		
	//		Выборка = Результат.Выбрать();
	//		
	//		Пока Выборка.Следующий() Цикл
	//			
	//			Сч = Сч + 1;
	//			
	//			НЗ = РегистрыСведений.ЛогЗагрузки.СоздатьНаборЗаписей();
	//			НЗ.Отбор.Объект1С.Установить(Выборка.Ссылка); 
	//			НЗ.Записать(Истина);
	//			
	//			НЗ = РегистрыСведений.ИсторияИзмененияРеквизитовОбъектов.СоздатьНаборЗаписей();
	//			НЗ.Отбор.Объект.Установить(Выборка.Ссылка); 
	//			НЗ.Записать(Истина);
	//			
	//			НЗ = РегистрыСведений.ИсторияИзмененияРеквизитовТабличныхЧастей.СоздатьНаборЗаписей();
	//			НЗ.Отбор.Объект.Установить(Выборка.Ссылка); 
	//			НЗ.Записать(Истина);
	//			
	//			НЗ = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьНаборЗаписей();
	//			НЗ.Отбор.ОбъектСФайлами.Установить(Выборка.Ссылка); 
	//			НЗ.Записать(Истина);
	//			
	//			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//			Если Не СправочникОбъект = Неопределено Тогда
	//				СправочникОбъект.Удалить();
	//			КонецЕсли; 
	//			
	//			Если Сч % 1000 = 0 ИЛИ Сч = Выборка.Количество() Тогда
	//				
	//				ЗафиксироватьТранзакцию();
	//				
	//				Если НЕ Сч = Выборка.Количество() Тогда
	//					
	//					НачатьТранзакцию();
	//					
	//				КонецЕсли; 
	//				
	//			КонецЕсли; 
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли; 
	//	
	//КонецЦикла; 
	
	// - 05.04.2018 14:45:11 Базунов Д.А. Задача:

КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_4_6

Процедура ПривестиНаименованияЭлементовСтруктурыВСоответствиеСПредметамиСнабжения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	КаталогПредметовСнабжения.Ссылка КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование КАК НаименованиеЭлементаСтруктуры,
	|	КаталогПредметовСнабжения.Наименование КАК НаименованиеПредметаСнабжения
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|			И (НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредметСнабжения";
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОчередьНаборЗаписей = РегистрыСведений.ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП.СоздатьНаборЗаписей();
	
	Выборка = РезультатЗапроса.Выбрать();
		
	Пока Выборка.СледующийПоЗначениюПоля("ПредметСнабжения") Цикл
		
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.НаименованиеЭлементаСтруктуры = Выборка.НаименованиеПредметаСнабжения Тогда //было нужно сравнение с учетом регистра. в запросе не работает
				
				ОчередьЗапись = ОчередьНаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ОчередьЗапись, Выборка);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОчередьНаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_4_7

Процедура КонвертироватьФНН() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабжения.УдалитьФНН КАК УдалитьФНН
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.УдалитьФНН = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредметСнабженияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПредметСнабженияОбъект.ФНН = СтрЗаменить(Выборка.УдалитьФНН, "-", "");
		ПредметСнабженияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_4_8

Процедура ЗаполнитьВидыКодовПредметовСнабженияДляОтчетов() Экспорт
	
	ВидКодовNSN = Перечисления.ВидыКодовПредметовСнабженияДляОтчетов.NSN;
	
	Выборка = Справочники.Флоты.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ФлотОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФлотОбъект.ВидКодовПредметовСнабженияДляОтчетов = ВидКодовNSN;
		ФлотОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_6_1

Процедура УказатьХарактеристикуМассаДляОтчетов() Экспорт
	
	ХарактеристикаСсылка = Справочники.ХарактеристикиПредметовСнабжения.НайтиПоНаименованию("Масса", Истина);
	
	Константы.МассаДляОтчетов.Установить(ХарактеристикаСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_0

Процедура УстановитьСостояниеСозданДляИсторииОбъектов() Экспорт
	
	Набор = РегистрыСведений.ИсторияИзмененияРеквизитовОбъектов.СоздатьНаборЗаписей();
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.Записать();
	
	Набор = РегистрыСведений.ИсторияИзмененияРеквизитовТабличныхЧастей.СоздатьНаборЗаписей();
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.Записать();

	// Справочники
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заказы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Заказы КАК Заказы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрофилиГруппДоступа.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		ИсторияИзмененияОбъектовПривилегированный.sp_ЗаполнитьКлючиСвязиВТабличныхЧастях(СпрОб);
		СпрОб.ОбменДанными.Загрузка = Истина;
		СпрОб.Записать();

		ИсторияИзмененияОбъектовПривилегированный.sp_ИсторияИзмененияОбъектовПриЗаписи(СпрОб);
		
	КонецЦикла;  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Контракт.Ссылка
	|ИЗ
	|	Документ.Контракт КАК Контракт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокОб = Выборка.Ссылка.ПолучитьОбъект();
		ИсторияИзмененияОбъектовПривилегированный.sp_ЗаполнитьКлючиСвязиВТабличныхЧастях(ДокОб);
		ДокОб.ОбменДанными.Загрузка = Истина;
		ДокОб.Записать();

		ИсторияИзмененияОбъектовПривилегированный.sp_ИсторияИзмененияОбъектовПриЗаписи(ДокОб);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_1

Процедура ОбновитьТранслитерацииОбозначений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	КаталогПредметовСнабжения.ОбозначениеТранслитированное КАК ОбозначениеТранслитированное
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	(НЕ КаталогПредметовСнабжения.Обозначение = """"
	|			ИЛИ НЕ КаталогПредметовСнабжения.ОбозначениеТранслитированное = """")";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПриоритетОшибки = Перечисления.ПриоритетыОшибок.Средний;
	
	Пока Выборка.Следующий() Цикл
		
		ТранслитерацияОбозначения = ОбщиеФункцииКлиентСервер.ТранслитироватьОбозначениеРусВАнг(Выборка.Обозначение);
		
		Если Не ТранслитерацияОбозначения = Выборка.ОбозначениеТранслитированное Тогда
			
			ПредметСнабженияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПредметСнабженияОбъект.ОбозначениеТранслитированное = ТранслитерацияОбозначения;
			
			Попытка
				
				ПредметСнабженияОбъект.Записать();
				
			Исключение
				
				ОписаниеОшибки = "Не удалось записать предмет снабжения " + Строка(Выборка.Ссылка) + Символы.ПС + ИнформацияОбОшибке().Описание;
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ОписаниеОшибки, ПриоритетОшибки);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_2

Процедура УстановитьСостояниеСозданДляСправочникаОрганизации() Экспорт
	
	//Набор = РегистрыСведений.ИсторияИзмененияРеквизитовОбъектов.СоздатьНаборЗаписей();
	//Набор.ОбменДанными.Загрузка = Истина;
	//Набор.Записать();
	//
	//Набор = РегистрыСведений.ИсторияИзмененияРеквизитовТабличныхЧастей.СоздатьНаборЗаписей();
	//Набор.ОбменДанными.Загрузка = Истина;
	//Набор.Записать();

	// Справочники
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// Очищаем
		Набор = РегистрыСведений.ИсторияИзмененияРеквизитовОбъектов.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Выборка.Ссылка);
		Набор.Записать();
		
		Набор = РегистрыСведений.ИсторияИзмененияРеквизитовТабличныхЧастей.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(Выборка.Ссылка);
		Набор.Записать();
		
		СпрОб = Выборка.Ссылка.ПолучитьОбъект();
		ИсторияИзмененияОбъектовПривилегированный.sp_ЗаполнитьКлючиСвязиВТабличныхЧастях(СпрОб);
		СпрОб.ОбменДанными.Загрузка = Истина;
		СпрОб.Записать();

		ИсторияИзмененияОбъектовПривилегированный.sp_ИсторияИзмененияОбъектовПриЗаписи(СпрОб);
		
	КонецЦикла;  
			
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_3

Процедура УстановитьРолиИсполнителей() Экспорт
	
	ВсеОбъектыАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
	
	РольОбъект = Справочники.РолиИсполнителей.СпециалистПоВедениюБДЗИПЭ.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();
	
	РольОбъект = Справочники.РолиИсполнителей.РуководительПроектаЗИПЭ.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();	
	
	ЭлементСправочника = Справочники.РолиИсполнителей.Выбрать();
	Пока ЭлементСправочника.Следующий() Цикл
		Если ЭлементСправочника.Назначение.Количество() = 0 Тогда
			РольОбъект = ЭлементСправочника.ПолучитьОбъект();
			РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
			РольОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_4

Процедура УдалитьПустыеСоставныеЧастиИЭлементыСтруктур() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СпецификацииМенеджер = РегистрыСведений.СпецификацииПредметовСнабжения;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СпецификацииМенеджерЗаписи = СпецификацииМенеджер.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(СпецификацииМенеджерЗаписи, Выборка);
			
			Попытка
			
				СпецификацииМенеджерЗаписи.Удалить();
				
			Исключение
				
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Средний);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = """"
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РезультатУдаления = СтруктураЗаказаСервер.УдалитьЭлементСтруктурыЗаказа(Выборка.Ссылка);
			
			Если Не РезультатУдаления.Выполнено Тогда
				
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(РезультатУдаления.Описание, Перечисления.ПриоритетыОшибок.Средний);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_5

Процедура ЗаполнитьШаблонПоУмолчанию() Экспорт
	
	ШаблонОбъект = Справочники.ШаблоныСообщений.ШаблонПоУмолчанию.ПолучитьОбъект();
	ШаблонОбъект.Назначение = "Задача";
	ШаблонОбъект.ПолноеИмяТипаПараметраВводаНаОсновании = "Задача.ЗадачаИсполнителя";
	ШаблонОбъект.ПредназначенДляЭлектронныхПисем = Истина;
	ШаблонОбъект.ПредназначенДляВводаНаОсновании = Истина;
	ШаблонОбъект.ТекстШаблонаПисьма = "
		|[ЗадачаИсполнителя.НаименованиеЗадачи]
		|
		|Точка маршрута: [ЗадачаИсполнителя.ТочкаМаршрута]
		|
		|Исполнитель: [ЗадачаИсполнителя.Исполнитель]
		|Автор: [ЗадачаИсполнителя.Автор]";
	ШаблонОбъект.ТекстШаблонаПисьмаHTML = "
		|<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p>[ЗадачаИсполнителя.НаименованиеЗадачи]<br><br>Точка маршрута: [ЗадачаИсполнителя.ТочкаМаршрута]<br>Исполнитель: [ЗадачаИсполнителя.Исполнитель]<br>Автор: [ЗадачаИсполнителя.Автор]<br>Для просмотра дополнительной информации перейдите по ссылке<br><a href=""[ЗадачаИсполнителя.ВнешняяСсылкаНаОбъект]"">[ЗадачаИсполнителя.ВнешняяСсылкаНаОбъект]</a></p>
		|</body>
		|</html>";
	ШаблонОбъект.ТемаПисьма = "Направленная задача";
	ШаблонОбъект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	
	ШаблонОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_6
 
Процедура СоздатьИЗаполнитьШаблоныДляТочекМаршрута() Экспорт
	
	ШаблонПисьмаHTML = " 
		|<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p>ШаблонТекстаЗамена<br>Для просмотра дополнительной информации перейдите по ссылке<br><a href=""[ЗадачаИсполнителя.ВнешняяСсылкаНаОбъект]"">[ЗадачаИсполнителя.ВнешняяСсылкаНаОбъект]</a></p>
		|</body>
		|</html>";
	
	НаборСоответсвие = РегистрыСведений.СоответствиеТочекБизнесПроцессаШаблонам.СоздатьНаборЗаписей();
	
	// ПолучениеДанныхСпециалистом ++
	ШаблонОбъект = Справочники.ШаблоныСообщений.СоздатьЭлемент();
	//ШаблонОбъект.Код = "000000002";
	ШаблонОбъект.Наименование = "ПолучениеДанныхСпециалистом";
	ШаблонОбъект.Назначение = "Задача";
	ШаблонОбъект.ПолноеИмяТипаПараметраВводаНаОсновании = "Задача.ЗадачаИсполнителя";
	ШаблонОбъект.ПредназначенДляЭлектронныхПисем = Истина;
	ШаблонОбъект.ПредназначенДляВводаНаОсновании = Истина;
	ШаблонОбъект.ТемаПисьма = "Полученны данные от КСУ НСИ";
	ШаблонОбъект.ТекстШаблонаПисьма = "
		|Получены данные от КСУ НСИ
		|
		|[ЗадачаИсполнителя.ВнешняяСсылкаНаОбъект]";
	ТекущийШаблонПисьмаHTML = ШаблонПисьмаHTML;
	ТекущийШаблонПисьмаHTML = СтрЗаменить(ТекущийШаблонПисьмаHTML, "ШаблонТекстаЗамена", "<br>Получены данные от КСУ НСИ.<br>");
	ШаблонОбъект.ТекстШаблонаПисьмаHTML = ТекущийШаблонПисьмаHTML;
	ШаблонОбъект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	ШаблонОбъект.Записать();
	
	// Добавление в регистр соответствие ++
	НовСтрока = НаборСоответсвие.Добавить();
	НовСтрока.Точка = БизнесПроцессы.ОтправкаВКСУНСИНаПоискПоКоду.ТочкиМаршрута.ПолучениеДанныхСпециалистом;
	НовСтрока.ШаблонСообщения = ШаблонОбъект.Ссылка;
	
	НовСтрока = НаборСоответсвие.Добавить();
	НовСтрока.Точка = БизнесПроцессы.ОтправкаВКСУНСИНаКлассификацию.ТочкиМаршрута.ПолучениеДанныхСпециалистом;
	НовСтрока.ШаблонСообщения = ШаблонОбъект.Ссылка;
	// Добавление в регистр соответствие --
	
	// ПолучениеДанныхСпециалистом --
	
	
	// ПолучениеДанныхРуководителем ++
	ШаблонОбъект = Справочники.ШаблоныСообщений.СоздатьЭлемент();
	//ШаблонОбъект.Код = "000000003";
	ШаблонОбъект.Наименование = "ПолучениеДанныхРуководителем";
	ШаблонОбъект.Назначение = "Задача";
	ШаблонОбъект.ПолноеИмяТипаПараметраВводаНаОсновании = "Задача.ЗадачаИсполнителя";
	ШаблонОбъект.ПредназначенДляЭлектронныхПисем = Истина;
	ШаблонОбъект.ПредназначенДляВводаНаОсновании = Истина;
	ШаблонОбъект.ТемаПисьма = "Обновление справочников по данным, полученным от КСУ НСИ";
	ШаблонОбъект.ТекстШаблонаПисьма = "
		|В информационно-справочной системе ведения базы данных ЗИП произведено обновление содержимого справочников и классификаторов.
		|
		|[ЗадачаИсполнителя.ВнешняяСсылкаНаОбъект]";
	ТекущийШаблонПисьмаHTML = ШаблонПисьмаHTML;
	ТекущийШаблонПисьмаHTML = СтрЗаменить(ТекущийШаблонПисьмаHTML, "ШаблонТекстаЗамена", "<br>В информационно-справочной системе ведения базы данных ЗИП произведено обновление содержимого справочников и классификаторов.<br>");
	ШаблонОбъект.ТекстШаблонаПисьмаHTML = ТекущийШаблонПисьмаHTML;
	ШаблонОбъект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	ШаблонОбъект.Записать();
	
	// Добавление в регистр соответствие ++
	НовСтрока = НаборСоответсвие.Добавить();
	НовСтрока.Точка = БизнесПроцессы.ОтправкаВКСУНСИНаПоискПоКоду.ТочкиМаршрута.ПолучениеДанныхРуководителем;
	НовСтрока.ШаблонСообщения = ШаблонОбъект.Ссылка;
	
	НовСтрока = НаборСоответсвие.Добавить();
	НовСтрока.Точка = БизнесПроцессы.ОтправкаВКСУНСИНаКлассификацию.ТочкиМаршрута.ПолучениеДанныхРуководителем;
	НовСтрока.ШаблонСообщения = ШаблонОбъект.Ссылка;
	// Добавление в регистр соответствие --

	// ПолучениеДанныхРуководителем --
	
	
	// ОповещениеОбАкцептовании ++
	ШаблонОбъект = Справочники.ШаблоныСообщений.СоздатьЭлемент();
	//ШаблонОбъект.Код = "000000004";
	ШаблонОбъект.Наименование = "ОповещениеОбАкцептовании";
	ШаблонОбъект.Назначение = "Задача";
	ШаблонОбъект.ПолноеИмяТипаПараметраВводаНаОсновании = "Задача.ЗадачаИсполнителя";
	ШаблонОбъект.ПредназначенДляЭлектронныхПисем = Истина;
	ШаблонОбъект.ПредназначенДляВводаНаОсновании = Истина;
	ШаблонОбъект.ТемаПисьма = "Положительное решение (акцепт) корректировке справочников";
	ШаблонОбъект.ТекстШаблонаПисьма = "
		|Изменение справочника (классификатора) согласовано
		|
		|[ЗадачаИсполнителя.ВнешняяСсылкаНаОбъект]";
	ТекущийШаблонПисьмаHTML = ШаблонПисьмаHTML;
	ТекущийШаблонПисьмаHTML = СтрЗаменить(ТекущийШаблонПисьмаHTML, "ШаблонТекстаЗамена", "<br>Изменение справочника (классификатора) согласовано.<br>");
	ШаблонОбъект.ТекстШаблонаПисьмаHTML = ТекущийШаблонПисьмаHTML;
	ШаблонОбъект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	ШаблонОбъект.Записать();
	
	// Добавление в регистр соответствие ++
	НовСтрока = НаборСоответсвие.Добавить();
	НовСтрока.Точка = БизнесПроцессы.ОтправкаВКСУНСИНаПоискПоКоду.ТочкиМаршрута.ОповещениеОбАкцептовании;
	НовСтрока.ШаблонСообщения = ШаблонОбъект.Ссылка;
	
	НовСтрока = НаборСоответсвие.Добавить();
	НовСтрока.Точка = БизнесПроцессы.ОтправкаВКСУНСИНаКлассификацию.ТочкиМаршрута.ОповещениеОбАкцептовании;
	НовСтрока.ШаблонСообщения = ШаблонОбъект.Ссылка;
	// Добавление в регистр соответствие --

	// ОповещениеОбАкцептовании --	
	
	
	// ОповещениеОбОтклонении ++
	ШаблонОбъект = Справочники.ШаблоныСообщений.СоздатьЭлемент();
	//ШаблонОбъект.Код = "000000005";
	ШаблонОбъект.Наименование = "ОповещениеОбОтклонении";
	ШаблонОбъект.Назначение = "Задача";
	ШаблонОбъект.ПолноеИмяТипаПараметраВводаНаОсновании = "Задача.ЗадачаИсполнителя";
	ШаблонОбъект.ПредназначенДляЭлектронныхПисем = Истина;
	ШаблонОбъект.ПредназначенДляВводаНаОсновании = Истина;
	ШаблонОбъект.ТемаПисьма = "Отрицательное решение по корректировке справочников";
	ШаблонОбъект.ТекстШаблонаПисьма = "
		|Изменение справочника (классификатора) отклонено по причине [ЗадачаИсполнителя.Описание]
		|
		|[ЗадачаИсполнителя.ВнешняяСсылкаНаОбъект]";
	ТекущийШаблонПисьмаHTML = ШаблонПисьмаHTML;
	ТекущийШаблонПисьмаHTML = СтрЗаменить(ТекущийШаблонПисьмаHTML, "ШаблонТекстаЗамена", "<br>Изменение справочника (классификатора) отклонено по причине [ЗадачаИсполнителя.РезультатВыполнения].<br>");
	ШаблонОбъект.ТекстШаблонаПисьмаHTML = ТекущийШаблонПисьмаHTML;
	ШаблонОбъект.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	ШаблонОбъект.Записать();
	
	// Добавление в регистр соответствие ++
	НовСтрока = НаборСоответсвие.Добавить();
	НовСтрока.Точка = БизнесПроцессы.ОтправкаВКСУНСИНаПоискПоКоду.ТочкиМаршрута.ОповещениеОбОтклонении;
	НовСтрока.ШаблонСообщения = ШаблонОбъект.Ссылка;
	
	НовСтрока = НаборСоответсвие.Добавить();
	НовСтрока.Точка = БизнесПроцессы.ОтправкаВКСУНСИНаКлассификацию.ТочкиМаршрута.ОповещениеОбОтклонении;
	НовСтрока.ШаблонСообщения = ШаблонОбъект.Ссылка;
	// Добавление в регистр соответствие --

	// ОповещениеОбОтклонении --	
	
	
	НаборСоответсвие.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_7

Процедура ЗаполнитьСтатусыЦен() Экспорт
	
	ОбработатьВводНачальныхОстатковЦен();
	ОбработатьКонтракты();
	
КонецПроцедуры

Процедура ОбработатьВводНачальныхОстатковЦен()
	
	Выборка = Документы.ВводНачальныхОстатковЦен.Выбрать();
	
	СтатусАктивен = Перечисления.СтатусыКонтрактов.Активен;
	
	Пока Выборка.Следующий() Цикл
		
		ВводОстатковОбъект = Выборка.ПолучитьОбъект();
		
		Для каждого СтрокаЦена Из ВводОстатковОбъект.Цены Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаЦена.Статус) Тогда
				
				СтрокаЦена.Статус = СтатусАктивен;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РежимЗаписи = ?(ВводОстатковОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		Попытка
			
			ВводОстатковОбъект.Записать(РежимЗаписи);
			
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Средний);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьКонтракты()
	
	СтатусАктивен = Перечисления.СтатусыКонтрактов.Активен;
	
	ВыборкаКонтракты = Документы.Контракт.Выбрать();
	
	Пока ВыборкаКонтракты.Следующий() Цикл
		
		КонтрактОбъект = ВыборкаКонтракты.ПолучитьОбъект();
		КонтрактОбъект.Статус = СтатусАктивен;
		
		РежимЗаписи = ?(КонтрактОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		
		Попытка
			
			КонтрактОбъект.Записать(РежимЗаписи);
			
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Средний);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_8

Процедура ЗаполнитьСистемыЭлементовСтруктуры() Экспорт
	
	ОписанияИерархииНаборЗаписей = РегистрыСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.СоздатьНаборЗаписей();
	ОписанияИерархииНаборЗаписей.Прочитать();
	
	Для каждого ОписанияИерархииЗапись Из ОписанияИерархииНаборЗаписей Цикл
		
		ОписаниеИерархии = ОписанияИерархииЗапись.ОписаниеИерархии;
		ПозицияРазделителя = СтрНайти(ОписаниеИерархии, "/");
		ОписанияИерархииЗапись.Система = ?(ПозицияРазделителя > 1, Лев(ОписаниеИерархии, ПозицияРазделителя - 1), ОписаниеИерархии);
		
	КонецЦикла;
	
	ОписанияИерархииНаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_7_9

Процедура УстановитьРольИсполнителяАдминистраторИССЗИПЭ() Экспорт
	
	ВсеОбъектыАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
	
	РольОбъект = Справочники.РолиИсполнителей.АдминистраторИССЗИПЭ.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	
	РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	
	РольОбъект.Записать();	
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_0

Процедура ЗаполнитьСправочникЭтапыВыполненияПунктовЗаявок() Экспорт
	
	НовыйЭлемент = Справочники.ЭтапыВыполненияПунктовЗаявок.СоздатьЭлемент();
	НовыйЭлемент.Наименование = "Пункт взят на проработку";
	НовыйЭлемент.Записать();
	НовыйЭлемент = Справочники.ЭтапыВыполненияПунктовЗаявок.СоздатьЭлемент();
	НовыйЭлемент.Наименование = "Пункт включен в контракт";
	НовыйЭлемент.Записать();
	НовыйЭлемент = Справочники.ЭтапыВыполненияПунктовЗаявок.СоздатьЭлемент();
	НовыйЭлемент.Наименование = "Пункт закрыт по результатам тендера";
	НовыйЭлемент.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_1

Процедура ЗаполнитьСправочникЭтапыВыполненияЗаявок() Экспорт
	
	СпрЭтапы = Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения;
	
	Выборка = СпрЭтапы.Выбрать();
	Пока Выборка.Следующий() Цикл
		Выборка.ПолучитьОбъект().Удалить();
	КонецЦикла; 
	
	Массив = Новый Массив;	
	Массив.Добавить("Новая заявка");
	Массив.Добавить("Заявка сформирована Заказчиком");
	Массив.Добавить("Заявка утверждена Заказчиком");
	Массив.Добавить("Регистрация заявки в ОСК");
	Массив.Добавить("Заявка направлена в ФСВТС России");
	Массив.Добавить("Получено поручение ФСВТС России о проработке");
	Массив.Добавить("Направлен запрос КП на предприятия");
	Массив.Добавить("Получены КП от предприятий");
	Массив.Добавить("Сформированы экспортные цены");
	Массив.Добавить("Экспортные цены направлены на согласование в ФСВТС России");
	Массив.Добавить("Экспортные цены с ФСВТС согласованы");
	Массив.Добавить("КП доставлено Заказчику");
	Массив.Добавить("Принято участие в тендере");
	Массив.Добавить("Получено приглашение о проведении переговоров");
	Массив.Добавить("Переговоры проведены");
	Массив.Добавить("Контракт подписан");
	Массив.Добавить("Договора ОСК с ДЗО подписаны");
	Массив.Добавить("Договора ДЗО с поставщиками подписаны");
	Массив.Добавить("Имущество получено на склад ДЗО");
	Массив.Добавить("Лицензия ДЗО на вывоз имущества получена");
	Массив.Добавить("Имущество ДЗО Заказчику отправлено");
	Массив.Добавить("Имущество получено Заказчиком");
	Массив.Добавить("Оплата по Контракту произведена");
	Массив.Добавить("Претензия получена и зарегистрирована");
	Массив.Добавить("Проверка обоснованности претензий");
	Массив.Добавить("Рекламация зарегистрирована и сформирована");
	Массив.Добавить("Заседание комиссии по рекламации проведено");
	Массив.Добавить("Заявка выполнена");
	
	Для каждого Элем Из Массив Цикл
		НовыйЭлемент = СпрЭтапы.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Элем;
		НовыйЭлемент.НаименованиеДляСайта = Элем;
		НовыйЭлемент.Записать();
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_2

Процедура УстановитьЗначенияКонстант() Экспорт
	
	Константы.ЗначениеПоУмолчаниюПричинаВыбораПредметаСнабженияДляЗИП.Установить(Справочники.ПричиныВыбораПредметаСнабженияДляЗИП.НайтиПоКоду(8));
	Константы.ЗначениеПоУмолчаниюРазделСпецификацииЗИП.Установить(Справочники.РазделыСпецификацииЗИП.НайтиПоКоду(21));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_3

Процедура УстановитьЗначениеПоУмолчаниюЭтапВыполененияЗаявки() Экспорт
	
	Константы.ЗначениеПоУмолчаниюЭтапВыполененияЗаявки.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("04"));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_4

Процедура ЗаполнитьКлассыПоЕКПСУтвержденныхНаименований() Экспорт
	
	// + 05.04.2018 14:41:25 Базунов Д.А. Задача: 
	// Удален реквизит "УдалитьКлассПоЕКПС"
	
	//СоответствиеСозданныхКлассов = Новый Соответствие;
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	УтвержденныеНаименованияПредметовСнабжения.Ссылка КАК Ссылка,
	//|	ЕСТЬNULL(ЕКПС.Ссылка, НЕОПРЕДЕЛЕНО) КАК КлассПоЕКПС
	//|	УтвержденныеНаименованияПредметовСнабжения.УдалитьКлассПоЕКПС КАК КодКласса
	//|ИЗ
	//|	Справочник.УтвержденныеНаименованияПредметовСнабжения КАК УтвержденныеНаименованияПредметовСнабжения
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕКПС КАК ЕКПС
	//|		ПО УтвержденныеНаименованияПредметовСнабжения.УдалитьКлассПоЕКПС = ЕКПС.Код";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//
	//ЕКПСМенеджер = Справочники.ЕКПС;
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	Если Выборка.КлассПоЕКПС = Неопределено Тогда
	//		
	//		КлассПоЕКПС = СоответствиеСозданныхКлассов.Получить(Выборка.КодКласса);
	//		
	//		Если КлассПоЕКПС = Неопределено Тогда
	//			
	//			ЕКПСОбъект = ЕКПСМенеджер.СоздатьЭлемент();
	//			ЕКПСОбъект.Родитель = ЕКПСМенеджер.НайтиПоКоду("00" + Лев(Выборка.КодКласса,2));
	//			ЕКПСОбъект.Код = КлассПоЕКПС.Родитель; //Выборка.КодКласса;
	//			ЕКПСОбъект.Наименование = КлассПоЕКПС.Родитель;  // Выборка.КодКласса;
	//			ЕКПСОбъект.Записать();
	//			
	//			КлассПоЕКПС = ЕКПСОбъект.Ссылка;
	//			
	//			СоответствиеСозданныхКлассов.Вставить(КлассПоЕКПС.Родитель, КлассПоЕКПС);
	//			
	//		КонецЕсли;
	//		
	//	Иначе
	//		
	//		КлассПоЕКПС = Выборка.КлассПоЕКПС;
	//		
	//	КонецЕсли;
	//	
	//	УтвержденныеНаименованияОбъект = Выборка.Ссылка.ПолучитьОбъект();
	//	УтвержденныеНаименованияОбъект.КлассПоЕКПС = КлассПоЕКПС;
	//	УтвержденныеНаименованияОбъект.Записать();
	//	
	//КонецЦикла;
	// - 05.04.2018 14:41:25 Базунов Д.А. Задача:
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_5

Процедура УстановитьРолиИсполнителейКП() Экспорт
	
	ВсеОбъектыАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
	
	МассивРолей = Новый Массив;
	
	РольОбъект = Справочники.РолиИсполнителей.ПредставительДЗО.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();
	МассивРолей.Добавить(РольОбъект.Ссылка);
	
	РольОбъект = Справочники.РолиИсполнителей.РуководительПроектаВТС.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();	
	МассивРолей.Добавить(РольОбъект.Ссылка);
		
	Для каждого Роль Из МассивРолей Цикл
		Если Роль.Назначение.Количество() = 0 Тогда
			РольОбъект = Роль.ПолучитьОбъект();
			РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
			РольОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_6

Процедура ЗаполнитьТипыСоставляющихЧастей() Экспорт
	
	ТипСЧ = Справочники.РазделыСпецификацииЗИП.НайтиПоНаименованию("СЧ");
	
	Константы.ЗначениеПоУмолчаниюРазделСпецификацииЗИП.Установить(ТипСЧ);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	СпецификацииПредметовСнабжения.Тип КАК Тип
	|ПОМЕСТИТЬ втСпецификации
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	НЕ СпецификацииПредметовСнабжения.Тип В
	|				(ВЫБРАТЬ
	|					РазделыСпецификацииЗИП.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.РазделыСпецификацииЗИП КАК РазделыСпецификацииЗИП
	|				ГДЕ
	|					НЕ РазделыСпецификацииЗИП.Ссылка = &ТипСЧ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	СоставляющаяЧасть,
	|	ЗИП,
	|	Тип
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ТипСоставляющейЧасти КАК Тип,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП
	|ПОМЕСТИТЬ втСтруктураЗаказа
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ТипСоставляющейЧасти В
	|			(ВЫБРАТЬ
	|				РазделыСпецификацииЗИП.Ссылка КАК Ссылка
	|			ИЗ
	|				Справочник.РазделыСпецификацииЗИП КАК РазделыСпецификацииЗИП
	|			ГДЕ
	|				НЕ РазделыСпецификацииЗИП.Наименование = ""СЧ"")
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	втСтруктураЗаказа.Ссылка КАК Ссылка,
	|	втСтруктураЗаказа.Тип КАК Тип,
	|	втСтруктураЗаказа.ЗИП КАК ЗИП
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО втСтруктураЗаказа.Родитель = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|			И (СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие))
	|			И (НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК СоставляющаяЧасть,
	|	втПредметыСнабжения.ЗИП КАК ЗИП,
	|	МАКСИМУМ(втПредметыСнабжения.Тип) КАК Тип
	|ПОМЕСТИТЬ втСпецификацияПоСтруктуре
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО втПредметыСнабжения.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|			И (СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие))
	|			И (НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	втПредметыСнабжения.ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения,
	|	втПредметыСнабжения.ЗИП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	СоставляющаяЧасть,
	|	ЗИП,
	|	Тип
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСпецификации.ПредметСнабжения КАК ПредметСнабжения,
	|	втСпецификации.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	втСпецификации.ЗИП КАК ЗИП,
	|	ВЫБОР
	|		КОГДА НЕ втСпецификацияПоСтруктуре.Тип ЕСТЬ NULL
	|			ТОГДА втСпецификацияПоСтруктуре.Тип
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ втСпецификации.Тип = ЗНАЧЕНИЕ(Справочник.РазделыСпецификацииЗИП.ПустаяСсылка)
	|						И НЕ втСпецификации.Тип = &ТипСЧ
	|					ТОГДА &ТипСЧ
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК Тип
	|ПОМЕСТИТЬ втРезультатБезФильтрации
	|ИЗ
	|	втСпецификации КАК втСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСпецификацияПоСтруктуре КАК втСпецификацияПоСтруктуре
	|		ПО втСпецификации.ПредметСнабжения = втСпецификацияПоСтруктуре.ПредметСнабжения
	|			И втСпецификации.СоставляющаяЧасть = втСпецификацияПоСтруктуре.СоставляющаяЧасть
	|			И втСпецификации.ЗИП = втСпецификацияПоСтруктуре.ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультатБезФильтрации.ПредметСнабжения КАК ПредметСнабжения,
	|	втРезультатБезФильтрации.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	втРезультатБезФильтрации.ЗИП КАК ЗИП,
	|	втРезультатБезФильтрации.Тип КАК Тип
	|ИЗ
	|	втРезультатБезФильтрации КАК втРезультатБезФильтрации
	|ГДЕ
	|	НЕ втРезультатБезФильтрации.Тип = НЕОПРЕДЕЛЕНО
	|ИТОГИ ПО
	|	ПредметСнабжения";
	Запрос.УстановитьПараметр("ТипСЧ", ТипСЧ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СпецификацияМенеджер = РегистрыСведений.СпецификацииПредметовСнабжения;
	СпецификацияОчередьИзмененийМенеджер = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений;
	
	ВыборкаПредметСнабжения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПредметСнабжения.Следующий() Цикл
		
		ВнесеныИзменения = Ложь;
		
		ВыборкаСоставляющаяЧасть = ВыборкаПредметСнабжения.Выбрать();
		
		Пока ВыборкаСоставляющаяЧасть.Следующий() Цикл
			
			СпецификацияМенеджерЗаписи = СпецификацияМенеджер.СоздатьМенеджерЗаписи();
			СпецификацияМенеджерЗаписи.ПредметСнабжения = ВыборкаСоставляющаяЧасть.ПредметСнабжения;
			СпецификацияМенеджерЗаписи.СоставляющаяЧасть = ВыборкаСоставляющаяЧасть.СоставляющаяЧасть;
			СпецификацияМенеджерЗаписи.ЗИП = ВыборкаСоставляющаяЧасть.ЗИП;
			СпецификацияМенеджерЗаписи.Прочитать();
			
			Если СпецификацияМенеджерЗаписи.Выбран() Тогда
				
				СпецификацияМенеджерЗаписи.Тип = ВыборкаСоставляющаяЧасть.Тип;
				СпецификацияМенеджерЗаписи.Записать();
				
				ВнесеныИзменения = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВнесеныИзменения Тогда
			
			СпецификацияОчередьИзмененийМенеджерЗаписи = СпецификацияОчередьИзмененийМенеджер.СоздатьМенеджерЗаписи();
			СпецификацияОчередьИзмененийМенеджерЗаписи.Период = ТекущаяДата();
			СпецификацияОчередьИзмененийМенеджерЗаписи.ПредметСнабжения = ВыборкаПредметСнабжения.ПредметСнабжения;
			СпецификацияОчередьИзмененийМенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_7

Процедура ЗаполнитьКонстантыРазделовСпецификации() Экспорт
	
	  Константы.РазделСпецификацииЗИП.Установить(Справочники.РазделыСпецификацииЗИП.НайтиПоНаименованию("Запаcные части"));
	  Константы.РазделСпецификацииИзделие.Установить(Справочники.РазделыСпецификацииЗИП.НайтиПоНаименованию("Изделие"));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_8

Процедура УстановитьРольИсполнителяОтветственныйЗаСтруктуруКорабля() Экспорт
	
	ВсеОбъектыАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
	
	МассивРолей = Новый Массив;
	
	РольОбъект = Справочники.РолиИсполнителей.ОтветственныйЗаСтруктуруКорабля.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();	
	МассивРолей.Добавить(РольОбъект.Ссылка);
	
	Для каждого Роль Из МассивРолей Цикл
		
		Если Роль.Назначение.Количество() = 0 Тогда
			
			РольОбъект = Роль.ПолучитьОбъект();
			РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
			РольОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_8_9

Процедура УстановитьАдресПубликацииИнформационнойБазыВИнтернете() Экспорт
	
	ПутьКБазе = СоединенияИБКлиентСервер.ПутьКИнформационнойБазе();
	ПутьКБазе = СтрЗаменить(ПутьКБазе, "\", "/");
	ПутьКБазе = СтрЗаменить(ПутьКБазе, """", "");
	
	Константы.АдресПубликацииИнформационнойБазыВИнтернете.Установить("e1c://server/"+ПутьКБазе);
		
КонецПроцедуры

Процедура ЗаменитьТекстШаблонов() Экспорт
	
	СпрВыборка = Справочники.ШаблоныСообщений.Выбрать();
	
	Пока СпрВыборка.Следующий() Цикл
		СпрОбъект = СпрВыборка.ПолучитьОбъект();
		СпрОбъект.ТекстШаблонаПисьмаHTML = СтрЗаменить(СпрОбъект.ТекстШаблонаПисьмаHTML, "[ОбщиеРеквизиты.АдресПубликацииНаВебСервере]", "");
		СпрОбъект.ТекстШаблонаПисьма = СтрЗаменить(СпрОбъект.ТекстШаблонаПисьма, "[ОбщиеРеквизиты.АдресПубликацииНаВебСервере]", "");
		СпрОбъект.Записать();
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти

#Область ИСС_ЗИП_1_0_9_1

Процедура ЗаполнитьКонстантыЕдиницИзмерения() Экспорт
	
	Константы.ОсновнаяВалюта.Установить(Справочники.ОКВ.НайтиПоКоду("643"));
	Константы.ЕдиницаИзмеренияДень.Установить(Справочники.ОКЕИ.НайтиПоКоду("359"));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_2

Процедура УстановитьКонстантыЭтапов() Экспорт
	
	Константы.ЭтапЗаявкиПриСтартеБизнесПроцесса.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("07"));
	Константы.ЭтапЗаявкиПриЗавершенииБизнесПроцесса.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("08"));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_3

Процедура ЗаполнитьКонстантуДолларСША() Экспорт
	
	Константы.ДолларСША.Установить(Справочники.ОКВ.НайтиПоКоду("840"));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_4

Процедура ЗаполнитьКонстантуЕдиницаИзмеренияШтука() Экспорт
	
	Константы.ЕдиницаИзмеренияШтука.Установить(Справочники.ОКЕИ.НайтиПоКоду("796"));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_5

Процедура ПеренумероватьКонтракты() Экспорт
	
	ВыборкаКонтракты = Документы.Контракт.Выбрать( , , , "Дата");
	
	Пока ВыборкаКонтракты.Следующий() Цикл
		
		КонтрактОбъект = ВыборкаКонтракты.ПолучитьОбъект();
		КонтрактОбъект.УстановитьНовыйНомер();
		КонтрактОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_7

Процедура УстановитьКонстантыЭтаповДляБП() Экспорт
	
	Константы.ЭтапЗаявкиСформированаЗаявкаЗаказчиком.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("03"));
	Константы.ЭтапЗаявкиОпределениеОтветственногоДЗО.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("07"));
	Константы.ЭтапЗаявкиАкцептованиеДЗО.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("08"));
	Константы.ЭтапЗаявкиФормированиеПредварительныхВнешнихЦен.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("10"));
	Константы.ЭтапЗаявкиКорректировкаВнешнихЦен.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("11"));
	
КонецПроцедуры

Процедура УстановитьРолиИсполнителейФормированиеЗаявки() Экспорт
	
	ВсеОбъектыАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
	
	МассивРолей = Новый Массив;
	
	РольОбъект = Справочники.РолиИсполнителей.РуководительДепартаментаВТС.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();
	МассивРолей.Добавить(РольОбъект.Ссылка);
	
	РольОбъект = Справочники.РолиИсполнителей.СпециалистДепартаментаЭкономики.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();	
	МассивРолей.Добавить(РольОбъект.Ссылка);
		
	Для каждого Роль Из МассивРолей Цикл
		Если Роль.Назначение.Количество() = 0 Тогда
			РольОбъект = Роль.ПолучитьОбъект();
			РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
			РольОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_8

Процедура УстановитьТипЗаменыПоУмолчанию() Экспорт
	
	Константы.ТипЗаменыПоУмолчанию.Установить(Справочники.ТипыЗаменыПредметаСнабженияАналогом.НайтиПоКоду("F"));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_9

Процедура ЗаполнитьNSNКаталогаПС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка КАК СсылкаПС,
	|	ПредметыСнабженияНАТО.Ссылка КАК СсылкаНАТО
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПредметыСнабженияНАТО КАК ПредметыСнабженияНАТО
	|		ПО КаталогПредметовСнабжения.NSN = ПредметыСнабженияНАТО.КодNSN
	|			И КаталогПредметовСнабжения.Обозначение = ПредметыСнабженияНАТО.RN
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.NSN = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОб = Выборка.СсылкаПС.ПолучитьОбъект();
		СпрОб.NSN = Выборка.СсылкаНАТО;
		СпрОб.Записать();
		
	КонецЦикла;  
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_10

Процедура ПеренастроитьРольПредставительДЗО() Экспорт
	
	РольОбъект = Справочники.РолиИсполнителей.ПредставительДЗО.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Ложь;
	РольОбъект.ИспользуетсяСОбъектамиАдресации = Истина;
	РольОбъект.ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.Организации;
	//РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();	
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_11

Процедура НастроитьРолиИсполнителей() Экспорт
	
	ВсеОбъектыАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;
	
	МассивРолей = Новый Массив;
	
	РольОбъект = Справочники.РолиИсполнителей.СпециалистПоВедениюБДЗИПЭ.ПолучитьОбъект();
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();
	МассивРолей.Добавить(РольОбъект.Ссылка);
	
	РольОбъект = Справочники.РолиИсполнителей.РуководительПроектаЗИПЭ.ПолучитьОбъект();
	РольОбъект.ТипыОсновногоОбъектаАдресации = ВсеОбъектыАдресации;
	РольОбъект.Записать();	
	МассивРолей.Добавить(РольОбъект.Ссылка);
		
	Для каждого Роль Из МассивРолей Цикл
		Если Роль.Назначение.Количество() = 0 Тогда
			РольОбъект = Роль.ПолучитьОбъект();
			РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
			РольОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_12

Процедура ПеренумероватьСправочникЯзыков() Экспорт
	
	ЯзыкОбъект = Справочники.Языки.Английский.ПолучитьОбъект();
	ЯзыкОбъект.Код = "01";
	ЯзыкОбъект.Записать();
	
	ЯзыкОбъект = Справочники.Языки.Русский.ПолучитьОбъект();
	ЯзыкОбъект.Код = "02";
	ЯзыкОбъект.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Языки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Языки КАК Языки
	|ГДЕ
	|	НЕ Языки.Предопределенный";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЯзыкОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЯзыкОбъект.УстановитьНовыйКод();
		ЯзыкОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_13

Процедура УстановитьКонстантуЭтапЗаявкиНазначениеРДВТС() Экспорт
	
	Константы.ЭтапЗаявкиНазначениеРДВТС.Установить(Справочники.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.НайтиПоКоду("03"));
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_14

Процедура УстановитьСлужебныйЗаказ() Экспорт
	 
	ПроектыВыборка = Справочники.ПроектыКораблей.Выбрать();
	ПроектыВыборка.Следующий();
	
	ЗаказОбъект = Справочники.Заказы.СоздатьЭлемент();
	ЗаказОбъект.Владелец = ПроектыВыборка.Ссылка;
	ЗаказОбъект.Наименование = "Служебный";
	ЗаказОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		ЗаказОбъект.Записать();
		Константы.СлужебныйЗаказ.Установить(ЗаказОбъект.Ссылка);
	Исключение
	    ЗаписьЖурналаРегистрации("Обновление ИСС-ЗИП", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Заказы,, "Описание ошибки: "+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_15

Процедура ПеренестиКодыINCAT() Экспорт
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабжения.INCAT КАК INCAT
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.INCAT = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("КодINCAT");
	
	
	НаборЗаписей = РегистрыСведений.КодыINCAT.СоздатьНаборЗаписей();
	НаборЗаписейПредст = РегистрыСведений.КодыINCATПредставление.СоздатьНаборЗаписей();

	Пока Выборка.Следующий() Цикл
		
		ПредметСнабжения = Выборка.Ссылка;
		
		// КодыINCAT
		НовСтр = НаборЗаписей.Добавить();
		НовСтр.ПредметСнабжения = ПредметСнабжения;
		НовСтр.КодINCAT 	    = Выборка.INCAT;
		НовСтр.Основной			= Истина;
		
		НовСтр = НаборЗаписейПредст.Добавить();
		НовСтр.ПредметСнабжения = ПредметСнабжения;
		НовСтр.Представление    = Выборка.INCAT;
				
	КонецЦикла;  
	
	Попытка
		НаборЗаписей.Записать();
		НаборЗаписейПредст.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_16

Процедура УстановитьНачальникаОтделаЦенообразования() Экспорт
	
	Константы.НачальникОтделаЦенообразования.Установить(Справочники.Пользователи.НайтиПоНаименованию("Туровский")); // Туровский Д.Ю.
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_17

Процедура УстановитьНомерКонтрактаПеренумероватьКонтракты() Экспорт
	
	ВыборкаКонтракты = Документы.Контракт.Выбрать( , , , "Дата");
	Первый = Истина;
	Пока ВыборкаКонтракты.Следующий() Цикл
		
		КонтрактОбъект = ВыборкаКонтракты.ПолучитьОбъект();
		КонтрактОбъект.НомерКонтракта = КонтрактОбъект.Номер;

		Если Первый Тогда
			Первый = Ложь;
			КонтрактОбъект.Номер = "000000001";
		Иначе
			КонтрактОбъект.УстановитьНовыйНомер("000000");
		КонецЕсли;				
		
		КонтрактОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИСС_ЗИП_1_0_9_19

Процедура ОчиститьСлужебныйЗаказ() Экспорт
	СтруктураЗаказаСервер.ОчиститьСтруктуруСлужебногоЗаказа();	
КонецПроцедуры // ОчисткаСлужебногоКорабля   

Процедура ОчиститьРегистрСверткаДублейПредметовСнабженияВспомогательный() Экспорт
	НаборЗаписей = РегистрыСведений.СверткаДублейПредметовСнабженияВспомогательный.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
КонецПроцедуры // ОчиститьРегистрСверткаДублейПредметовСнабженияВспомогательный

Процедура ПодготовитьРегистрыДляРаботыСоСпецификациями() Экспорт
	ЗаполнитьНовыйРегистрСпецификацияПС();
КонецПроцедуры // ПодготовитьРегистрыДляРаботыСоСпецификациями

Процедура ЗаполнитьНастройкиСохраненияРеквизитовПриОбъединенииДублей() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСохраненияРеквизитовПриОбъединенииДублей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиСохраненияРеквизитовПриОбъединенииДублей КАК НастройкиСохраненияРеквизитовПриОбъединенииДублей";
	
	Если Запрос.Выполнить().Пустой() Тогда
		НастройкаОбъект = Справочники.НастройкиСохраненияРеквизитовПриОбъединенииДублей.СоздатьЭлемент();
		НастройкаОбъект.УстановитьНовыйКод();
		НастройкаОбъект.ИмяОбъекта 			= "КаталогПредметовСнабжения";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "НомерОСК";
		НоваяСтрока.Представление 			= "Номер ОСК";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "Обозначение";
		НоваяСтрока.Представление 			= "Обозначение";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "ОбозначениеТранслитированное";
		НоваяСтрока.Представление 			= "Обозначение транслитированное";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "ДокументНаПоставку";
		НоваяСтрока.Представление 			= "Документ на поставку";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "NSN";
		НоваяСтрока.Представление 			= "NSN";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "INCAT";
		НоваяСтрока.Представление 			= "INCAT";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "ФНН";
		НоваяСтрока.Представление 			= "ФНН";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "Шифр";
		НоваяСтрока.Представление 			= "Шифр/Марка";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "ТабличнаяЧасть.ИзготовителиИПоставщики";
		НоваяСтрока.Представление 			= "Табличная часть: Изготовители и поставщики";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "ТабличнаяЧасть.Характеристики";
		НоваяСтрока.Представление 			= "Табличная часть: Характеристики";
		
		НастройкаОбъект.Записать();
		
		НастройкаОбъект = Справочники.НастройкиСохраненияРеквизитовПриОбъединенииДублей.СоздатьЭлемент();
		НастройкаОбъект.УстановитьНовыйКод();
		НастройкаОбъект.ИмяОбъекта 			= "СтруктураЗаказаПоКомплектующимИзделиямИЗИП";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "ЗИП";
		НоваяСтрока.Представление 			= "ЗИП";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "Количество";
		НоваяСтрока.Представление 			= "Количество в изделии";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "КоличествоВЗИПБорт";
		НоваяСтрока.Представление 			= "ЗИП Борт";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "КоличествоВЗИПБаза";
		НоваяСтрока.Представление 			= "ЗИП Б";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "КоличествоВЗИПДЭ";
		НоваяСтрока.Представление 			= "ЗИП ДЭ";
		НоваяСтрока 						= НастройкаОбъект.Реквизиты.Добавить();
		НоваяСтрока.Имя 					= "КоличествоВЗИПР";
		НоваяСтрока.Представление 			= "ЗИП Р";
		
		НастройкаОбъект.Записать();  
	КонецЕсли; 	
КонецПроцедуры // ЗаполнитьНастройкиСохраненияРеквизитовПриОбъединенииДублей

Процедура ЗаполнитьНовыйРегистрСпецификацияПС() 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	МАКСИМУМ(СпецификацииПредметовСнабжения.ЗИП) КАК ЗИП,
	|	МАКСИМУМ(СпецификацииПредметовСнабжения.Количество) КАК Количество,
	|	МИНИМУМ(СпецификацииПредметовСнабжения.НомерПозиции) КАК НомерПозиции,
	|	МАКСИМУМ(СпецификацииПредметовСнабжения.Тип) КАК Тип,
	|	МАКСИМУМ(СпецификацииПредметовСнабжения.ПричинаВыбораДляЗИП) КАК ПричинаВыбораДляЗИП
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПредметовСнабжения.ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть";  	
	РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	НаборЗаписей = РегистрыСведений.СпецификацииПС.СоздатьНаборЗаписей();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);				
	КонецЦикла;	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();  	
КонецПроцедуры // ЗаполнитьНовыйРегистрСпецификацияПС

Процедура УстановитьКонстантыДляРаботыСоСпецификациями() Экспорт
	Константы.МаксимальноеКоличествоУровнейВложенностиСпецификации.Установить(20);
КонецПроцедуры // УстановитьКонстантыДляРаботыСоСпецификациями

Процедура ПодготовитьРегламентныеЗаданияДляРаботыСоСпецификациями() Экспорт
	МассивРегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ОбработкаИзмененияСпецификацийПредметовСнабжения));
	Если МассивРегЗадания.Количество() > 0 Тогда
		РегламентноеЗаданиеДляОтключения = МассивРегЗадания[0];	
		РегламентноеЗаданиеДляОтключения.Использование = Ложь;
		РегламентноеЗаданиеДляОтключения.Записать();		
	КонецЕсли; 
	МассивРегЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ИзменениеСпецификацииЭталонныхЭлементов));
	Если МассивРегЗадания.Количество() > 0 Тогда
		РегламентноеЗаданиеДляОтключения = МассивРегЗадания[0];	
		РегламентноеЗаданиеДляОтключения.Использование = Ложь;
		РегламентноеЗаданиеДляОтключения.Записать();		
	КонецЕсли; 
КонецПроцедуры // ПодготовитьРегламентныеЗаданияДляРаботыСоСпецификациями

#КонецОбласти

#Область ИСС_ЗИП_1_0_10_1

Процедура ОбновитьРоль(Роль)
	РольОбъект 									= Роль.ПолучитьОбъект();
	РольОбъект.ИспользуетсяБезОбъектовАдресации = Истина;
	РольОбъект.ИспользуетсяСОбъектамиАдресации 	= Ложь;
	РольОбъект.ТипыОсновногоОбъектаАдресации 	= ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ВсеОбъектыАдресации;;
	
	РольОбъект.Назначение.Очистить();
	РольОбъект.Назначение.Добавить().ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
	
	РольОбъект.Записать();
КонецПроцедуры // ОбновитьРоль

Процедура ЗаполнитьРеквизитыРолиИсполнителей_1_0_10_1() Экспорт
	Роли = Новый Массив;
	Роли.Добавить(Справочники.РолиИсполнителей.ФС_ВТС_ОтветственныйЗаРегистрацияЗаявки);
	Роли.Добавить(Справочники.РолиИсполнителей.ФС_ВТС_РуководительРегиональногоОтдела);
	Роли.Добавить(Справочники.РолиИсполнителей.ФС_ВТС_СогласующийРаспрелелениеЗаявки);
	Роли.Добавить(Справочники.РолиИсполнителей.ФС_ВТС_Эксперт);
	Для Каждого Роль Из Роли Цикл
		ОбновитьРоль(Роль);
	КонецЦикла; // Для Каждого Роль Из Роли Цикл	
КонецПроцедуры // ЗаполнитьРеквизитыРолиИсполнителей_1_0_10_1

#КонецОбласти

#КонецОбласти
