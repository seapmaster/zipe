#Область ПрограммныйИнтерфейс_РаботаСДеревомПроцессовИЗадач

// Разворачивает дерево процессов и задач.
//
// Параметры:
//   Форма - УправляемаяФорма - форма с деревом процессов и задач.
//
Процедура РазвернутьДеревоПроцессовИЗадач(Форма) Экспорт
	
	ЭлементыДерева = Форма.ДеревоЗадач.ПолучитьЭлементы();
	
	Для каждого Строка ИЗ ЭлементыДерева Цикл
		Форма.Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обработки оповещений для форм содержащих
// дерево процессов и задач.
//
Процедура ОбработкаОповещенияДляДереваЗадач(
		ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
	Если (ИмяСобытия = "ЗадачаИзменена" И Источник <> Форма)
		Или ИмяСобытия = "БизнесПроцессИзменен"
		Или (ИмяСобытия = "ИзменилсяФлаг" И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя"))
		Или (ИмяСобытия = "ЗаписьКонтроля" И ЗначениеЗаполнено(Параметр.Предмет))
		Или (ИмяСобытия = "Перенаправление_ЗадачаИсполнителя") Тогда
		
		Форма.ОбновитьДеревоПроцессовЗадач();
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки события ПриАктивизацииСтроки для дерева процессов и задач.
//
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент, Форма) Экспорт
	
	Если Форма.Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		Форма.ТекущаяСтрокаВДереве = Форма.Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки события Выбор для дерева процессов и задач.
//
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.ДеревоЗадачНомерФлага Тогда
		ВыбраннаяСтрока = Форма.Элементы.ДеревоЗадач.ТекущаяСтрока;
		СтрокаТаблицы = Форма.ДеревоЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьТекущуюСтрокуДереваЗадач(Форма);
	
КонецПроцедуры

// Процедура обработки события ПередНачаломИзменения для дерева процессов и задач.
//
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ, Форма) Экспорт
	
	Отказ = Истина;
	
	ОткрытьТекущуюСтрокуДереваЗадач(Форма);
	
КонецПроцедуры

// Процедура обработки события Выбор для списка активных задач.
//
Процедура СписокАктивныхЗадачВыбор(
	Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущийЭлемент = Форма.Элементы.СписокАктивныхЗадачНомерФлага Тогда
		ВыбраннаяСтрока = Форма.Элементы.СписокАктивныхЗадач.ТекущаяСтрока;
		СтрокаТаблицы = Форма.СписокАктивныхЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(СтрокаТаблицы.Ссылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьЗадачуСпискаАктивныхЗадач(Форма);
	
КонецПроцедуры

// Процедура обработки события ПриАктивизацииСтроки для списка активных задач.
//
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент, Форма) Экспорт
	
	Если Форма.Элементы.СписокАктивныхЗадач.ТекущиеДанные <> Неопределено Тогда
		
		Форма.ТекущаяСтрокаВСпискеАктивныхЗадач = 
			Форма.Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки события ПередНачаломИзменения для списка активных задач.
//
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ, Форма) Экспорт
	
	Отказ = Истина;
	
	ОткрытьЗадачуСпискаАктивныхЗадач(Форма);
	
КонецПроцедуры

// Устанавливает флаг для текущей задаче в таблице.
//
// Параметры:
//   Форма - УправляемаяФорма
//   Флаг - ПеречислениеСсылка.ФлагиОбъектов
//   ИмяТаблицы - Строка - имя таблицы с задачами в форме.
//
Процедура УстановитьФлаги(Форма, Флаг, ИмяТаблицы = "") Экспорт
	
	ВыделенныеСтроки = Новый Массив;
	
	ТаблицаФормы = Форма.Элементы[ИмяТаблицы];
	
	МассивВыделенныхСтрок = ТаблицаФормы.ВыделенныеСтроки;
	Для Каждого Стр Из МассивВыделенныхСтрок Цикл
		СтрокаДерева = Форма[ИмяТаблицы].НайтиПоИдентификатору(Стр);
		ВыделенныеСтроки.Добавить(СтрокаДерева.Ссылка);
	КонецЦикла;
	
	РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(ВыделенныеСтроки, Флаг);
	
КонецПроцедуры

// Находит и устанавливает текущей строкой в дереве "процессов и задач", в списке активных задач,
// процесс или задачу, по которых была открыта форма иерархии процессов и задач.
//
// Параметры:
//   Предмет - процесс или задача по которых была открыта форма иерархии процессов и задач.
//    - БизнесПроцессСсылка
//    - ЗадачаСсылка.ЗадачаИсполнителя
//   Форма - УправляемаяФорма - форма с списком активных задач.
//
Процедура ПерейтиКТекущемуОбъекту(Предмет, Форма) Экспорт
	
	Форма.ТекущаяСтрокаВДереве = Предмет;
	Форма.ТекущаяСтрокаВСпискеАктивныхЗадач = Предмет;
	
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(Форма.ДеревоЗадач.ПолучитьЭлементы(), Форма);
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтрокуВСпискеАктивныхЗадач(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСДеревомПроцессовИЗадач

// Открывает процесс или задачу соответствующую текущей строке дерева процессов и задач.
//
// Параметры:
//   Форма - УправляемаяФорма - форма с деревом процессов и задач.
//
Процедура ОткрытьТекущуюСтрокуДереваЗадач(Форма)
	
	Если Форма.Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Форма.Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка) = 
				Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			БизнесПроцессыИЗадачиКлиент.
				ОткрытьФормуВыполненияЗадачи(Форма.Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		Иначе
			ПоказатьЗначение(, Форма.Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Открывает текущую задачу списка СписокАктивныхЗадач
//
// Параметры:
//   Форма - УправляемаяФорма - форма с списком активных задач.
//
Процедура ОткрытьЗадачуСпискаАктивныхЗадач(Форма)
	
	Если Форма.Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Форма.Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти
