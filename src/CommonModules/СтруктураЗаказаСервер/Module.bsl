
////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для процедур и функций работы со структурой заказов.
// Савинов А.А. 10.03.2017
////////////////////////////////////////////////////////////////////////////////

#Область СпецификацииПредметовСнабжения

//++ 29.10.2017 Веденеев П. //изменен механизм изменения спецификаций
#Область СпецификацииПредметовСнабженияНовое

// Функция предназначена для записи спецификации предмета снабжения
Функция ЗаписатьСпецификациюПредметаСнабжения(ПредметСнабжения, ТаблицаСпецификации) Экспорт
	
	//++ 11.10.2017 Веденеев П. //убраны попытки
	
	//запись в регистр спецификаций
	
	Если ТаблицаСпецификации.Колонки.Найти("ПредметСнабжения") = Неопределено Тогда
		
		ТаблицаСпецификации.Колонки.Добавить("ПредметСнабжения", Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения"));
		
	КонецЕсли;
	
	ТаблицаСпецификации.ЗаполнитьЗначения(ПредметСнабжения, "ПредметСнабжения");
	
	СпецификацииНаборЗаписей = РегистрыСведений.СпецификацииПредметовСнабжения.СоздатьНаборЗаписей();
	СпецификацииНаборЗаписей.Отбор.ПредметСнабжения.Установить(ПредметСнабжения);
	СпецификацииНаборЗаписей.Загрузить(ТаблицаСпецификации);
	
	//НачатьТранзакцию();
	
	//Попытка
		
		СпецификацииНаборЗаписей.Записать();
		
	//Исключение
		
		//ОтменитьТранзакцию();
	//	ТекстОписания = "Не удалось записать изменения спецификации." + Символы.ПС + ОписаниеОшибки();
	//	Возврат Новый Структура("Выполнено, Описание", Ложь, ТекстОписания);
		
	//КонецПопытки;
	
	//запись в регистр изменений
	СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
	СпецификацииОчередьИзменений.Период = ТекущаяДата();
	СпецификацииОчередьИзменений.ПредметСнабжения = ПредметСнабжения;
	
	//Попытка
		
		СпецификацииОчередьИзменений.Записать();
		
	//Исключение
	//	
	//	//ОтменитьТранзакцию();
	//	ТекстОписания = "Не удалось записать изменения спецификации." + Символы.ПС + ОписаниеОшибки();
	//	Возврат Новый Структура("Выполнено, Описание", Ложь, ТекстОписания);
	//	
	//КонецПопытки;
	
	//фиксация транзакции
	//ЗафиксироватьТранзакцию();
	
	Возврат Новый Структура("Выполнено, Описание", Истина, "");
	
КонецФункции

// Процедура регламентного задания, предназначенная для изменения эталонных элементов структуры заказов по предметам снабжения и ЗИП
// после изменения спецификации предметов снабжения
Процедура ОбработатьИзмененияСпецификацийЭталонныхЭлементовСтруктурыЗаказа() Экспорт
	
	ОбработатьИзмененияСпецификацийПредметовСнабжения(Ложь);
	
КонецПроцедуры

// Процедура регламентного задания, предназначенная для изменения структуры заказов по предметам снабжения и ЗИП
// после изменения спецификации предметов снабжения
//
Процедура ОбработатьИзмененияСпецификацийПредметовСнабжения(ЭталонОбработан = Истина) Экспорт
	
	//++ 29.11.2017 Веденеев П. //прекращение выполнения задания при работающем удалении дубликатов
	Если ОбщиеФункцииСервер.ПроверитьАктивностьФоновыхЗаданий("Поиск и удаление дублей: Удаление дублей") Тогда
		
		Возврат;
		
	КонецЕсли;
	//-- 29.11.2017 Веденеев П. //прекращение выполнения задания при работающем удалении дубликатов
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	СпецификацииПредметовСнабженияОчередьИзмененийСрезПоследних.Период КАК Период,
	|	СпецификацииПредметовСнабженияОчередьИзмененийСрезПоследних.ПредметСнабжения КАК ПредметСнабжения
	|ПОМЕСТИТЬ втОчередь
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений.СрезПоследних КАК СпецификацииПредметовСнабженияОчередьИзмененийСрезПоследних
	|ГДЕ
	|	СпецификацииПредметовСнабженияОчередьИзмененийСрезПоследних.ЭталонОбработан = &ЭталонОбработан
	|	И НЕ СпецификацииПредметовСнабженияОчередьИзмененийСрезПоследних.НеОбрабатывать
	|	И НЕ СпецификацииПредметовСнабженияОчередьИзмененийСрезПоследних.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОчередь.Период КАК Период,
	|	втОчередь.ПредметСнабжения КАК ПредметСнабжения,
	|	ЕСТЬNULL(ЭталонныеИзделияВСтруктуреЗаказов.ЭлементСтруктурыЗаказа, НЕОПРЕДЕЛЕНО) КАК Эталон
	|ИЗ
	|	втОчередь КАК втОчередь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭталонныеИзделияВСтруктуреЗаказов КАК ЭталонныеИзделияВСтруктуреЗаказов
	|		ПО втОчередь.ПредметСнабжения = ЭталонныеИзделияВСтруктуреЗаказов.ПредметСнабжения";
	Запрос.УстановитьПараметр("ЭталонОбработан", ЭталонОбработан);
	
	//++ 30.10.2017 Веденеев П. //если значение соответствующей константы > 0, то изменяем количество элементов в выборке
	КоличествоЭлементовКОбработке = Константы.КоличествоОбрабатываемыхИзмененийСпецификации.Получить();
	
	Если КоличествоЭлементовКОбработке > 0 Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "10", Формат(КоличествоЭлементовКОбработке, "ЧГ=0"));
		
	КонецЕсли;
	//++ 30.10.2017 Веденеев П. //если значение соответствующей константы > 0, то изменяем количество элементов в выборке
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЭталонОбработан И Выборка.Эталон = Неопределено Тогда //если эталона почему-то нет - присваиваем
			
			Эталон = ПолучитьЭталон(Выборка.ПредметСнабжения);
						
			Если Эталон = Неопределено Тогда //нет ни одного элемента структуры заказа по данному предмету снабжения. удаляем элемент из очереди
				
				ИзменитьСтатусОбработкиПредметСнабжения(Выборка.ПредметСнабжения, Ложь, Выборка.Период);
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			Эталон = Выборка.Эталон;
			
		КонецЕсли;
		
		//++ 14.12.2017 Веденеев П. //новый механизм изменения структур заказов
		ОбработатьСтруктурыЗаказов(Выборка.ПредметСнабжения, ЭталонОбработан, Эталон);
	//	РезультатОбработки = ОбработатьИзмененияСпецификации(Выборка.ПредметСнабжения, ЭталонОбработан, Эталон);
		//-- 14.12.2017 Веденеев П. //новый механизм изменения структур заказов
		//++ 03.07.2018 Веденеев П. //сворачивание временно отключено
		РезультатСворачивания = Истина;//СвернутьПодчиненныеЭлементыВСтруктурахЗаказов(Выборка.ПредметСнабжения, ЭталонОбработан, Эталон);
		//-- 03.07.2018 Веденеев П. //сворачивание временно отключено
		// Базунов Д. ++
		РезультатУдаленияПодчиненных = УдалитьПодчиненныеЭлементыПредметаСнабжения(Выборка.ПредметСнабжения, ЭталонОбработан, Эталон);
		// Базунов Д. --
		
		Если РезультатСворачивания И РезультатУдаленияПодчиненных Тогда	
			
			ИзменитьСтатусОбработкиПредметСнабжения(Выборка.ПредметСнабжения, ЭталонОбработан, Выборка.Период);
			
		//ИначеЕсли РезультатОбработки.НеОбрабатывать Тогда
		//	
		//	УстановитьФлагИсключенияИзОбработки(Выборка.ПредметСнабжения, Выборка.Период, РезультатОбработки.ОписаниеОшибки);
			
		КонецЕсли;
		
		Если ЭталонОбработан Тогда
			
			ОбработатьЗаписьРегистраЭталонов(Выборка.ПредметСнабжения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//процедура устанавливает флаг исключения из обработки
Процедура УстановитьФлагИсключенияИзОбработки(ПредметСнабжения, Период, ОписаниеОшибки)
	
	СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
	СпецификацииОчередьИзменений.Период = Период;
	СпецификацииОчередьИзменений.ПредметСнабжения = ПредметСнабжения;
	
	СпецификацииОчередьИзменений.Прочитать();
	
	Если СпецификацииОчередьИзменений.Выбран() Тогда
		
		СпецификацииОчередьИзменений.НеОбрабатывать = Истина;
		СпецификацииОчередьИзменений.ОписаниеОшибки = ОписаниеОшибки;
		
		СпецификацииОчередьИзменений.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

//процедура удаляет запись по предмету снабжения из регистра эталонов, если у предмета снабжения очистилась спецификация
Процедура ОбработатьЗаписьРегистраЭталонов(ПредметСнабжения)
	
	СпецификацииНаборЗаписей = РегистрыСведений.СпецификацииПредметовСнабжения.СоздатьНаборЗаписей();
	СпецификацииНаборЗаписей.Отбор.ПредметСнабжения.Установить(ПредметСнабжения);
	СпецификацииНаборЗаписей.Прочитать();
	
	Если СпецификацииНаборЗаписей.Количество() = 0 Тогда
		
		ЭталоныМенеджерЗаписи = РегистрыСведений.ЭталонныеИзделияВСтруктуреЗаказов.СоздатьМенеджерЗаписи();
		ЭталоныМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
		ЭталоныМенеджерЗаписи.Прочитать();
		
		Если ЭталоныМенеджерЗаписи.Выбран() Тогда
			
			ЭталоныМенеджерЗаписи.Удалить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//функция сворачивает элементы с одними и теми же ключевыми значениями в структурах заказов
Функция СвернутьПодчиненныеЭлементыВСтруктурахЗаказов(ПредметСнабжения, ЭталонОбработан, Эталон)
	
	//ДОДЕЛАТЬ - ОТКЛЮЧИТЬ СВОРАЧИВАНИЕ ЛИБО КАК-ТО ОГРАНИЧИТЬ ЭЛЕМЕНТАМИ, НЕ ВКЛЮЧЕННЫМИ В РЕГИСТР СВЕРТКИ
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктуры
	|ПОМЕСТИТЬ втЭлементыКИзменению
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	&Условие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭлементыКИзменению.ЭлементСтруктуры КАК ЭлементСтруктуры,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК СоставляющаяЧасть,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ТипСоставляющейЧасти КАК ТипСоставляющейЧасти,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ПОМЕСТИТЬ втСтруктурыЭлементовКИзменению
	|ИЗ
	|	втЭлементыКИзменению КАК втЭлементыКИзменению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО втЭлементыКИзменению.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
	|ГДЕ
	|	НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктуры,
	|	СоставляющаяЧасть,
	|	ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтруктурыЭлементовКИзменению.ЭлементСтруктуры КАК ЭлементСтруктуры,
	|	втСтруктурыЭлементовКИзменению.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	втСтруктурыЭлементовКИзменению.ЗИП КАК ЗИП,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСтруктурыЭлементовКИзменению.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ втДублирующиесяСоставныеЧасти
	|ИЗ
	|	втСтруктурыЭлементовКИзменению КАК втСтруктурыЭлементовКИзменению
	|
	|СГРУППИРОВАТЬ ПО
	|	втСтруктурыЭлементовКИзменению.ЭлементСтруктуры,
	|	втСтруктурыЭлементовКИзменению.СоставляющаяЧасть,
	|	втСтруктурыЭлементовКИзменению.ЗИП
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСтруктурыЭлементовКИзменению.Ссылка) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтруктурыЭлементовКИзменению.ЭлементСтруктуры КАК ЭлементСтруктуры,
	|	втСтруктурыЭлементовКИзменению.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	втСтруктурыЭлементовКИзменению.ЗИП КАК ЗИП,
	|	втСтруктурыЭлементовКИзменению.Ссылка КАК Ссылка,
	|	втСтруктурыЭлементовКИзменению.ТипСоставляющейЧасти КАК ТипСоставляющейЧасти,
	|	втСтруктурыЭлементовКИзменению.Количество КАК Количество,
	|	втСтруктурыЭлементовКИзменению.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втСтруктурыЭлементовКИзменению.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втСтруктурыЭлементовКИзменению.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	втСтруктурыЭлементовКИзменению.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ИЗ
	|	втСтруктурыЭлементовКИзменению КАК втСтруктурыЭлементовКИзменению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДублирующиесяСоставныеЧасти КАК втДублирующиесяСоставныеЧасти
	|		ПО втСтруктурыЭлементовКИзменению.ЭлементСтруктуры = втДублирующиесяСоставныеЧасти.ЭлементСтруктуры
	|			И втСтруктурыЭлементовКИзменению.СоставляющаяЧасть = втДублирующиесяСоставныеЧасти.СоставляющаяЧасть
	|			И втСтруктурыЭлементовКИзменению.ЗИП = втДублирующиесяСоставныеЧасти.ЗИП
	|ИТОГИ ПО
	|	ЭлементСтруктуры,
	|	СоставляющаяЧасть,
	|	ЗИП";
	
	ТекстУсловия = ?(ЭталонОбработан, "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения" 
	+ Символы.ПС + "	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон", "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("Эталон", Эталон);
	
	Результат = Истина;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДеревоЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаЭлемент Из ДеревоЗапроса.Строки Цикл
		
		Для каждого СтрокаСЧ Из СтрокаЭлемент.Строки Цикл
			
			Для каждого СтрокаЗИП Из СтрокаСЧ.Строки Цикл
				
				СтрокиСсылок = СтрокаЗИП.Строки;
				ИндексКрайнейСтроки = СтрокиСсылок.Количество() - 1;
				
				//НачатьТранзакцию();
				
				ОсновнойЭлемент = СтрокиСсылок[0].Ссылка.ПолучитьОбъект();
				
				УдалениеПроизведено = Истина;
				
				Для Сч = 1 По ИндексКрайнейСтроки Цикл
					
					СтрокаСсылки = СтрокиСсылок[Сч];
					
					ОсновнойЭлемент.Количество 	 	   = Макс(ОсновнойЭлемент.Количество, СтрокаСсылки.Количество);
					ОсновнойЭлемент.КоличествоВЗИПБорт = Макс(ОсновнойЭлемент.КоличествоВЗИПБорт, СтрокаСсылки.КоличествоВЗИПБорт);
					ОсновнойЭлемент.КоличествоВЗИПБаза = Макс(ОсновнойЭлемент.КоличествоВЗИПБаза, СтрокаСсылки.КоличествоВЗИПБаза);
					ОсновнойЭлемент.КоличествоВЗИПДЭ   = Макс(ОсновнойЭлемент.КоличествоВЗИПДЭ, СтрокаСсылки.КоличествоВЗИПДЭ);
					ОсновнойЭлемент.КоличествоВЗИПР    = Макс(ОсновнойЭлемент.КоличествоВЗИПР, СтрокаСсылки.КоличествоВЗИПР);
					
					Если Не ЗначениеЗаполнено(ОсновнойЭлемент.ТипСоставляющейЧасти) Тогда
						
						ОсновнойЭлемент.ТипСоставляющейЧасти = СтрокаСсылки.ТипСоставляющейЧасти;
						
					КонецЕсли;
						
					РезультатУдаления = УдалитьЭлементСтруктурыЗаказа(СтрокаСсылки.Ссылка); // Результат = Новый Структура("Выполнено, Описание", Истина, "");
						
					Если Не РезультатУдаления.Выполнено Тогда 
						
						//ОтменитьТранзакцию();
						УдалениеПроивзедено = Ложь;
						Результат = Ложь;
						ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(РезультатУдаления.Описание, Перечисления.ПриоритетыОшибок.Средний);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если УдалениеПроизведено Тогда
					
					Попытка
						
						ОсновнойЭлемент.Записать();
						
					Исключение
						
						//ОтменитьТранзакцию();
						УдалениеПроивзедено = Ложь;
						Результат = Ложь;
						ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Средний);
						
					КонецПопытки;
						
				КонецЕсли;
				
				//ЗафиксироватьТранзакцию();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//функция присваивает и возвращает эталон
Функция ПолучитьЭталон(ПредметСнабжения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Эталон = Выборка.Ссылка;
	
	ЭталоныМенеджерЗаписи = РегистрыСведений.ЭталонныеИзделияВСтруктуреЗаказов.СоздатьМенеджерЗаписи();
	ЭталоныМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
	ЭталоныМенеджерЗаписи.ЭлементСтруктурыЗаказа = Эталон;
			
	ЭталоныМенеджерЗаписи.Записать();
			
	Возврат Эталон;
	
КонецФункции

//процедура ставит флаг об обработке эталона либо удаляет предмет снабжения из очереди
Процедура ИзменитьСтатусОбработкиПредметСнабжения(ПредметСнабжения, УдалитьИзОчереди, Период)
	
	Если УдалитьИзОчереди Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпецификацииПредметовСнабженияОчередьИзменений.Период КАК Период,
		|	СпецификацииПредметовСнабженияОчередьИзменений.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений КАК СпецификацииПредметовСнабженияОчередьИзменений
		|ГДЕ
		|	СпецификацииПредметовСнабженияОчередьИзменений.Период <= &Период
		|	И СпецификацииПредметовСнабженияОчередьИзменений.ПредметСнабжения = &ПредметСнабжения";
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
		
		Пока Выборка.Следующий() Цикл
			
			СпецификацииОчередьИзменений.Период = Выборка.Период;
			СпецификацииОчередьИзменений.ПредметСнабжения = Выборка.ПредметСнабжения;
			СпецификацииОчередьИзменений.Прочитать();
			
			Если СпецификацииОчередьИзменений.Выбран() Тогда
					
				СпецификацииОчередьИзменений.Удалить();
										
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
		СпецификацииОчередьИзменений.Период = Период;
		СпецификацииОчередьИзменений.ПредметСнабжения = ПредметСнабжения;
		
		СпецификацииОчередьИзменений.Прочитать();
		
		Если СпецификацииОчередьИзменений.Выбран() Тогда
			
			СпецификацииОчередьИзменений.ЭталонОбработан = Истина;
			
			СпецификацииОчередьИзменений.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//функция приводит деревья элементов структур заказов в соответствие со спецификацией предмета снабжения
//возвращает результат обработки
Функция ОбработатьИзмененияСпецификации(ПредметСнабжения, ЭталонОбработан, Эталон)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктуры,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование КАК Заведование
	|ПОМЕСТИТЬ втЭлементыКИзменению
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	&Условие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	СпецификацииПредметовСнабжения.Тип КАК Тип
	|ПОМЕСТИТЬ втСпецификация
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭлементыКИзменению.ЭлементСтруктуры КАК ЭлементСтруктуры,
	|	втСпецификация.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	втСпецификация.ЗИП КАК ЗИП,
	|	втСпецификация.Тип КАК Тип,
	|	втЭлементыКИзменению.Владелец КАК Владелец,
	|	втЭлементыКИзменению.Заведование КАК Заведование
	|ПОМЕСТИТЬ втНоваяСпецификацияЭлементов
	|ИЗ
	|	втЭлементыКИзменению КАК втЭлементыКИзменению,
	|	втСпецификация КАК втСпецификация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктуры,
	|	СоставляющаяЧасть,
	|	ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭлементыКИзменению.ЭлементСтруктуры КАК ЭлементСтруктуры,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК СоставляющаяЧасть,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	втЭлементыКИзменению.Владелец КАК Владелец,
	|	втЭлементыКИзменению.Заведование КАК Заведование
	|ПОМЕСТИТЬ втСтараяСпецификацияЭлементов
	|ИЗ
	|	втЭлементыКИзменению КАК втЭлементыКИзменению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО втЭлементыКИзменению.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктуры,
	|	СоставляющаяЧасть,
	|	ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втНоваяСпецификацияЭлементов.ЭлементСтруктуры, втСтараяСпецификацияЭлементов.ЭлементСтруктуры) КАК ЭлементСтруктуры,
	|	ЕСТЬNULL(втНоваяСпецификацияЭлементов.СоставляющаяЧасть, втСтараяСпецификацияЭлементов.СоставляющаяЧасть) КАК СоставляющаяЧасть,
	|	ЕСТЬNULL(втНоваяСпецификацияЭлементов.ЗИП, втСтараяСпецификацияЭлементов.ЗИП) КАК ЗИП,
	|	втНоваяСпецификацияЭлементов.Тип КАК Тип,
	|	втСтараяСпецификацияЭлементов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА втНоваяСпецификацияЭлементов.ЭлементСтруктуры ЕСТЬ NULL
	|			ТОГДА ""Удален""
	|		КОГДА втСтараяСпецификацияЭлементов.ЭлементСтруктуры ЕСТЬ NULL
	|			ТОГДА ""Добавлен""
	|	КОНЕЦ КАК ВидИзменения,
	|	ЕСТЬNULL(втНоваяСпецификацияЭлементов.Владелец, втСтараяСпецификацияЭлементов.Владелец) КАК Владелец,
	|	ЕСТЬNULL(втНоваяСпецификацияЭлементов.Заведование, втСтараяСпецификацияЭлементов.Заведование) КАК Заведование
	|ИЗ
	|	втНоваяСпецификацияЭлементов КАК втНоваяСпецификацияЭлементов
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСтараяСпецификацияЭлементов КАК втСтараяСпецификацияЭлементов
	|		ПО втНоваяСпецификацияЭлементов.ЭлементСтруктуры = втСтараяСпецификацияЭлементов.ЭлементСтруктуры
	|			И втНоваяСпецификацияЭлементов.СоставляющаяЧасть = втСтараяСпецификацияЭлементов.СоставляющаяЧасть
	|			И втНоваяСпецификацияЭлементов.ЗИП = втСтараяСпецификацияЭлементов.ЗИП
	|ГДЕ
	|	(втНоваяСпецификацияЭлементов.ЭлементСтруктуры ЕСТЬ NULL
	|			ИЛИ втСтараяСпецификацияЭлементов.ЭлементСтруктуры ЕСТЬ NULL)";
	
	ТекстУсловия = ?(ЭталонОбработан, "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения" 
	+ Символы.ПС + "	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон"
	+ Символы.ПС + "	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП", "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("Эталон", Эталон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("Выполнено, НеОбрабатывать, ОписаниеОшибки", Истина, Ложь, "");
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 20000 Тогда //обработка более двух тысяч элементов спецификации может быть вызвана проблемами и ими же чревата //Веденеев 31.10.2017
		
		Результат.Выполнено = Ложь;
		Результат.НеОбрабатывать = Истина;
		Результат.ОписаниеОшибки = "Спецификация предмета снабжения " + Строка(ПредметСнабжения)+ " имеет " + Выборка.Количество() + " элементов";
		
		Возврат Результат;
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидИзменения = "Удален" Тогда
			
			РезультатУдаления = УдалитьЭлементСтруктурыЗаказа(Выборка.Ссылка);
			
			Если Не РезультатУдаления.Выполнено Тогда
				
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(РезультатУдаления.Описание, Перечисления.ПриоритетыОшибок.Средний);
				Результат.Выполнено = Ложь;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если Выборка.ВидИзменения = "Добавлен" Тогда
			
			ЦепочкаПредметовСнабжения = Новый Массив;
			ЦепочкаПредметовСнабжения = ЗаполнитьЦепочкуПредметовСнабжения(Выборка.ЭлементСтруктуры, ЦепочкаПредметовСнабжения);
			
			РезультатСоздания = СоздатьЭлементСтруктурыЗаказа(ЦепочкаПредметовСнабжения, Выборка.Владелец, Выборка.ЭлементСтруктуры, ,Выборка.Заведование , Выборка.СоставляющаяЧасть, Выборка.ЗИП);
			
			Если Не РезультатСоздания.Выполнено Тогда
				
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(РезультатСоздания.Описание, Перечисления.ПриоритетыОшибок.Средний);
				Результат.Выполнено = Ложь;
				
				Если РезультатСоздания.НеОбрабатывать Тогда
					
					Результат.НеОбрабатывать = Истина;
					Результат.ОписаниеОшибки = РезультатСоздания.ОписаниеОшибки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьПодчиненныеЭлементыПредметаСнабжения(ПредметСнабжения, ЭталонОбработан, Эталон)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктуры
	|ПОМЕСТИТЬ втЭлементыКИзменению
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	 СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП
	|	 И &Условие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктуры
	|;
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	втЭлементыКИзменению КАК втЭлементыКИзменению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО втЭлементыКИзменению.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель";
	
	ТекстУсловия = ?(ЭталонОбработан, "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения" 
	+ Символы.ПС + "	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон", "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("Эталон", Эталон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Истина;
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатУдаления = УдалитьЭлементСтруктурыЗаказа(Выборка.Ссылка);
		
		Если Не РезультатУдаления.Выполнено Тогда
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(РезультатУдаления.Описание, Перечисления.ПриоритетыОшибок.Средний);
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;  
	
	Возврат Результат;
	
КонецФункции
 
#КонецОбласти
//-- 29.10.2017 Веденеев П. //изменен механизм изменения спецификаций

//++ 24.10.2017 Веденеев П. //обработка удаления дубликатов

//функция сворачивает составные части в структурах заказов родителя, если они встречаются там более 1 раза
Функция СвернутьДублирующиесяСоставныеЧасти(ПредметСнабжения, СоставляющаяЧасть, ЗИП, ЭталонОбработан, Эталон)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Родитель
	|ПОМЕСТИТЬ втЭлементыСтруктуры
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	&Условие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭлементыСтруктуры.Родитель КАК Родитель,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ПОМЕСТИТЬ втРодителиИСоставляющиеЧасти
	|ИЗ
	|	втЭлементыСтруктуры КАК втЭлементыСтруктуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО втЭлементыСтруктуры.Родитель = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП = &ЗИП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРодителиИСоставляющиеЧасти.Родитель КАК Родитель,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втРодителиИСоставляющиеЧасти.Ссылка) КАК КоличествоСсылок,
	|	МАКСИМУМ(втРодителиИСоставляющиеЧасти.КоличествоВЗИПБорт) КАК КоличествоВЗИПБорт,
	|	МАКСИМУМ(втРодителиИСоставляющиеЧасти.КоличествоВЗИПБаза) КАК КоличествоВЗИПБаза,
	|	МАКСИМУМ(втРодителиИСоставляющиеЧасти.КоличествоВЗИПДЭ) КАК КоличествоВЗИПДЭ,
	|	МАКСИМУМ(втРодителиИСоставляющиеЧасти.КоличествоВЗИПР) КАК КоличествоВЗИПР,
	|	МАКСИМУМ(втРодителиИСоставляющиеЧасти.Количество) КАК Количество
	|ПОМЕСТИТЬ втРодителиКСворачиванию
	|ИЗ
	|	втРодителиИСоставляющиеЧасти КАК втРодителиИСоставляющиеЧасти
	|
	|СГРУППИРОВАТЬ ПО
	|	втРодителиИСоставляющиеЧасти.Родитель
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втРодителиИСоставляющиеЧасти.Ссылка) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРодителиИСоставляющиеЧасти.Родитель КАК Родитель,
	|	втРодителиИСоставляющиеЧасти.Ссылка КАК Ссылка,
	|	втРодителиКСворачиванию.Количество КАК Количество,
	|	втРодителиКСворачиванию.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втРодителиКСворачиванию.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втРодителиКСворачиванию.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	втРодителиКСворачиванию.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ИЗ
	|	втРодителиИСоставляющиеЧасти КАК втРодителиИСоставляющиеЧасти
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРодителиКСворачиванию КАК втРодителиКСворачиванию
	|		ПО втРодителиИСоставляющиеЧасти.Родитель = втРодителиКСворачиванию.Родитель
	|ИТОГИ ПО
	|	Родитель";
	
	ТекстУсловия = ?(ЭталонОбработан, "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения" 
	+ Символы.ПС + "	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон", "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("СоставляющаяЧасть", СоставляющаяЧасть);
	Запрос.УстановитьПараметр("ЗИП", ЗИП);
	Запрос.УстановитьПараметр("Эталон", Эталон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	ДеревоЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаРодитель Из ДеревоЗапроса.Строки Цикл
		
		СтрокиСсылок = СтрокаРодитель.Строки;
		
		//сохранение данных в элемент, сочтенный оригиналом
		
		ЭталоннаяСтрока = СтрокиСсылок[0];
		
		ЭталонныйЭлемент = ЭталоннаяСтрока.Ссылка.ПолучитьОбъект();
		ЭталонныйЭлемент.Наименование = Строка(ЭталонныйЭлемент.ПредметСнабжения);
		ЭталонныйЭлемент.Количество = ЭталоннаяСтрока.Количество;
		ЭталонныйЭлемент.КоличествоВЗИПБорт = ЭталоннаяСтрока.КоличествоВЗИПБорт;
		ЭталонныйЭлемент.КоличествоВЗИПБаза = ЭталоннаяСтрока.КоличествоВЗИПБаза;
		ЭталонныйЭлемент.КоличествоВЗИПДЭ = ЭталоннаяСтрока.КоличествоВЗИПДЭ;
		ЭталонныйЭлемент.КоличествоВЗИПР = ЭталоннаяСтрока.КоличествоВЗИПР;
		
		Попытка
			
			ЭталонныйЭлемент.Записать();
			
		Исключение
			
			Результат.Выполнено = Ложь;
			Результат.Описание = ОписаниеОшибки();
			Возврат Результат;
			
		КонецПопытки;
		
		//удаление элементов, сочтенных дубликатами 
		
		ИндексКрайнейСтроки = СтрокиСсылок.Количество() - 1;
		
		Для Сч = 1 По ИндексКрайнейСтроки Цикл
			
			СтрокаСсылок = СтрокиСсылок[Сч];
			
			РезультатУдаления = УдалитьЭлементСтруктурыЗаказа(СтрокаСсылок.Ссылка);
			
			Если Не РезультатУдаления.Выполнено Тогда
				
				Возврат РезультатУдаления;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//функции производят обработку после удаления дубликатов
Функция ОбработатьУдалениеДубликатовПредметовСнабжения(ПредметСнабжения, СоставляющаяЧасть, ЗИП, ЭталонОбработан, Эталон)
	
	Если ЗначениеЗаполнено(СоставляющаяЧасть) Тогда
		
		Возврат ОбработатьИнтерактивноеУдалениеДубликатовПредметовСнабжения(ПредметСнабжения, СоставляющаяЧасть, ЗИП, ЭталонОбработан, Эталон);
		
	Иначе
		
		Возврат ОбработатьОбновлениеСпецификацииПредметовСнабжения(ПредметСнабжения, ЭталонОбработан, Эталон);
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьИнтерактивноеУдалениеДубликатовПредметовСнабжения(ПредметСнабжения, СоставляющаяЧасть, ЗИП, ЭталонОбработан, Эталон)
	
	Запрос = Новый Запрос;
	
	Если ЭталонОбработан Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втРодителиБезЭталона
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения
		|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
		|ИЗ
		|	втРодителиБезЭталона КАК втРодителиБезЭталона
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|		ПО втРодителиБезЭталона.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП = &ЗИП
		|ИТОГИ ПО
		|	Родитель";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Эталон
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП = &ЗИП
		|ИТОГИ ПО
		|	Родитель";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("СоставляющаяЧасть", СоставляющаяЧасть);
	Запрос.УстановитьПараметр("ЗИП", ЗИП);
	Запрос.УстановитьПараметр("Эталон", Эталон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Структура("Выполнено, Описание", Истина, "");
		
	КонецЕсли;
	
	ДеревоЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаРодитель Из ДеревоЗапроса.Строки Цикл
		
		СтрокиСсылок = СтрокаРодитель.Строки;
		
		//один элемент просто удаляем
		
		Если СтрокиСсылок.Количество() = 1 Тогда
			
			РезультатУдаления = УдалитьЭлементСтруктурыЗаказа(СтрокиСсылок[0].Ссылка);
			
			Если Не РезультатУдаления.Выполнено Тогда
				
				Возврат РезультатУдаления;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//если более одного элемента - схлопываем
		ЭталонныйЭлемент = СтрокиСсылок[0].Ссылка.ПолучитьОбъект();
		ИндексКрайнейСтроки = СтрокиСсылок.Количество() - 1;
		
		ЭталонныйЭлемент.Наименование = Строка(ЭталонныйЭлемент.ПредметСнабжения);
		
		Для Сч = 1 По ИндексКрайнейСтроки Цикл
			
			СтрокаСсылок = СтрокиСсылок[Сч];
			
			ЭталонныйЭлемент.Количество = Макс(ЭталонныйЭлемент.Количество, СтрокаСсылок.Количество);
			ЭталонныйЭлемент.КоличествоВЗИПБорт = Макс(ЭталонныйЭлемент.КоличествоВЗИПБорт, СтрокаСсылок.КоличествоВЗИПБорт);
			ЭталонныйЭлемент.КоличествоВЗИПБаза = Макс(ЭталонныйЭлемент.КоличествоВЗИПБаза, СтрокаСсылок.КоличествоВЗИПБаза);
			ЭталонныйЭлемент.КоличествоВЗИПДЭ = Макс(ЭталонныйЭлемент.КоличествоВЗИПДЭ, СтрокаСсылок.КоличествоВЗИПДЭ);
			ЭталонныйЭлемент.КоличествоВЗИПР = Макс(ЭталонныйЭлемент.КоличествоВЗИПР, СтрокаСсылок.КоличествоВЗИПР);
			
			РезультатУдаления = УдалитьЭлементСтруктурыЗаказа(СтрокаСсылок.Ссылка);
			
			Если Не РезультатУдаления.Выполнено Тогда
				
				Возврат РезультатУдаления;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			
			ЭталонныйЭлемент.Записать();
			
		Исключение
			
			Возврат Новый Структура("Выполнено, Описание", Ложь, ОписаниеОшибки());
			
		КонецПопытки
		
	КонецЦикла;
	
	Возврат Новый Структура("Выполнено, Описание", Истина, ""); 
	
КонецФункции

Функция ОбработатьОбновлениеСпецификацииПредметовСнабжения(ПредметСнабжения, ЭталонОбработан, Эталон)
	
	Запрос = Новый Запрос;		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование КАК Заведование
	|ПОМЕСТИТЬ втЭлементыСтруктуры
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	&Условие
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП
	|ПОМЕСТИТЬ втСпецификацияРодителя
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Родитель КАК Ссылка,
	|	ВложенныйЗапрос.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	ВложенныйЗапрос.ЗИП КАК ЗИП,
	|	ВложенныйЗапрос.Владелец КАК Владелец,
	|	ВложенныйЗапрос.Заведование КАК Заведование
	|ИЗ
	|	(ВЫБРАТЬ
	|		втЭлементыСтруктуры.Ссылка КАК Родитель,
	|		втСпецификацияРодителя.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|		втСпецификацияРодителя.ЗИП КАК ЗИП,
	|		втЭлементыСтруктуры.Владелец КАК Владелец,
	|		втЭлементыСтруктуры.Заведование КАК Заведование
	|	ИЗ
	|		втЭлементыСтруктуры КАК втЭлементыСтруктуры,
	|		втСпецификацияРодителя КАК втСпецификацияРодителя
	|	ГДЕ
	|		НЕ (втЭлементыСтруктуры.Ссылка, втСпецификацияРодителя.СоставляющаяЧасть, втСпецификацияРодителя.ЗИП) В
	|					(ВЫБРАТЬ
	|						СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель,
	|						СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения,
	|						СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП
	|					ИЗ
	|						Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП)) КАК ВложенныйЗапрос";
	
	ТекстУсловия = ?(ЭталонОбработан, "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения" 
	+ Символы.ПС + "	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон", "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("Эталон", Эталон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Новый Структура("Выполнено, Описание", Истина, "");
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦепочкаПредметовСнабжения = Новый Массив;
		ЦепочкаПредметовСнабжения = ЗаполнитьЦепочкуПредметовСнабжения(Выборка.Ссылка, ЦепочкаПредметовСнабжения);
		
		РезультатСозданияЭлементаСтруктурыЗаказа = СоздатьЭлементСтруктурыЗаказа(ЦепочкаПредметовСнабжения, Выборка.Владелец, Выборка.Ссылка, , Выборка.Заведование, Выборка.СоставляющаяЧасть, Выборка.ЗИП);
		
		Если Не РезультатСозданияЭлементаСтруктурыЗаказа.Выполнено Тогда
			
			Возврат РезультатСозданияЭлементаСтруктурыЗаказа;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Выполнено, Описание", Истина, "");
	
КонецФункции

//-- 24.10.2017 Веденеев П. //обработка удаления дубликатов

// Функция предназначена для удаления записей регистра сведений Спецификации предметов снабжения изменения после их обработки
// Параметры:
// Выборка - ВыборкаРезультатЗапроса
//
Функция ИзменитьУдалитьЗаписьИзмененияСпецификации(ПредметСнабжения, СоставляющаяЧасть, ЗИП, Период, ЭталонОбработан)

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабженияИзменения.Период,
	|	СпецификацииПредметовСнабженияИзменения.ПредметСнабжения,
	|	СпецификацииПредметовСнабженияИзменения.СоставляющаяЧасть,
	|	СпецификацииПредметовСнабженияИзменения.ЗИП,
	|	СпецификацииПредметовСнабженияИзменения.Количество,
	|	СпецификацииПредметовСнабженияИзменения.ВидИзменения,
	|	СпецификацииПредметовСнабженияИзменения.Тип
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабженияИзменения КАК СпецификацииПредметовСнабженияИзменения
	|ГДЕ
	|	СпецификацииПредметовСнабженияИзменения.Период <= &Период
	|	И СпецификацииПредметовСнабженияИзменения.ПредметСнабжения = &ПредметСнабжения
	|	И СпецификацииПредметовСнабженияИзменения.СоставляющаяЧасть = &СоставляющаяЧасть
	|	И СпецификацииПредметовСнабженияИзменения.ЗИП = &ЗИП";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("СоставляющаяЧасть", СоставляющаяЧасть);
	Запрос.УстановитьПараметр("ЗИП", ЗИП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.Выполнено = Истина;
		Возврат Результат;	
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.СпецификацииПредметовСнабженияИзменения.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		
		Попытка
			
			Если Не ЭталонОбработан Тогда
				
				МенеджерЗаписи.ЭталонОбработан = Истина;
				МенеджерЗаписи.Записать();
				
			Иначе
				
				МенеджерЗаписи.Удалить();
				
			КонецЕсли;
			
		Исключение
			
			Результат.Описание = "Не удалось изменить/удалить запись изменения спецификации." + Символы.ПС + ОписаниеОшибки();
			Возврат Результат;
			
		КонецПопытки;	
		
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // УдалитьЗаписьИзмененияСпецификации()

// Функция предназначена для получения информации о наличии спецификации у предмета снабжения
// Параметры:
// ПредметСнабжения - Справочники.КаталогПредметовСнабжения
//
Функция ПредметСнабженияИмеетСпецификацию(ПредметСнабжения) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпецификацииПредметовСнабжения.ПредметСнабжения
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();		

КонецФункции // ПредметСнабженияИмеетСпецификацию()

// Функция предназначена для заполнения цепочки предметов снабжения, которая требуется при рекурсивном создании элементов
// для того, чтобы не создать подчиненные элементы для элемента структуры во второй раз
// Параметры:
// ЭлементСтруктурыЗаказа - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// ЦепочкаПредметовСнабжения - Массив
//
Функция ЗаполнитьЦепочкуПредметовСнабжения(ЭлементСтруктурыЗаказа, ЦепочкаПредметовСнабжения)
	
	ЦепочкаПредметовСнабжения.Добавить(ЭлементСтруктурыЗаказа.ПредметСнабжения);

	Родитель = ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ЭлементСтруктурыЗаказа, "Родитель");
	
	Если ЗначениеЗаполнено(Родитель) Тогда
	
		ПредметСнабжения = ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Родитель, "ПредметСнабжения");
		
		Если ЗначениеЗаполнено(ПредметСнабжения) Тогда
		
			//+ 27.11.2017 13:36:17 Базунов Д.А. Задача: 
			//ЦепочкаПредметовСнабжения.Добавить(ПредметСнабжения);
			//- 27.11.2017 13:36:17 Базунов Д.А. Задача: 
			ЦепочкаПредметовСнабжения = ЗаполнитьЦепочкуПредметовСнабжения(Родитель, ЦепочкаПредметовСнабжения);
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ЦепочкаПредметовСнабжения;

КонецФункции // ЗаполнитьЦепочкуПредметовСнабжения()

//++ 29.09.2017 Веденеев П. // функции массового редактирования спецификаций

//функция обрабатывает единичное изменение спецификации (обрабатывает только удаление и добавление!)
Функция ОбработатьИзменениеСпецификации(ПредметСнабжения, СоставляющаяЧасть, ЗИП, ВидИзменения) Экспорт
	
	РезультатОбработки = Новый Структура("Выполнено, Описание", Истина, "");
	
	//изменения в регистре спецификаций
	СпецификацииМенеджерЗаписи = РегистрыСведений.СпецификацииПредметовСнабжения.СоздатьМенеджерЗаписи();
	СпецификацииМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
	СпецификацииМенеджерЗаписи.СоставляющаяЧасть = СоставляющаяЧасть;
	СпецификацииМенеджерЗаписи.ЗИП = ЗИП;
	
	СпецификацииМенеджерЗаписи.Прочитать();
	
	Если ВидИзменения = Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление Тогда
		
		Если СпецификацииМенеджерЗаписи.Выбран() Тогда
						
			СпецификацииМенеджерЗаписи.Удалить();
			
		Иначе //элемента и так нет. изменения не нужны
			
			Возврат РезультатОбработки; 
			
		КонецЕсли;	
		
	Иначе
		
		Если СпецификацииМенеджерЗаписи.Выбран() Тогда //запись уже присутствует. изменения не нужны
			
			Возврат РезультатОбработки;
			
		Иначе
			
			СпецификацииМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
			СпецификацииМенеджерЗаписи.СоставляющаяЧасть = СоставляющаяЧасть;
			СпецификацииМенеджерЗаписи.ЗИП = ЗИП;
			
			//++ 19.02.2018 Веденеев П. //добавление значений по умолчанию
			СпецификацииМенеджерЗаписи.Количество = 1;
			СпецификацииМенеджерЗаписи.Тип = Константы.ЗначениеПоУмолчаниюРазделСпецификацииЗИП.Получить();
			СпецификацииМенеджерЗаписи.ПричинаВыбораДляЗИП = Константы.ЗначениеПоУмолчаниюПричинаВыбораПредметаСнабженияДляЗИП.Получить();
			//++ 19.02.2018 Веденеев П. //добавление значений по умолчанию
			
		КонецЕсли;
				
		СпецификацииМенеджерЗаписи.Записать();
					
	КонецЕсли;
	
	//изменения в регистре истории
	//СпецификацииИсторияМенеджерЗаписи = РегистрыСведений.СпецификацииПредметовСнабженияИстория.СоздатьМенеджерЗаписи();
	//СпецификацииИсторияМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
	//СпецификацииИсторияМенеджерЗаписи.СоставляющаяЧасть = СоставляющаяЧасть;
	//СпецификацииИсторияМенеджерЗаписи.ЗИП = ЗИП;
	//СпецификацииИсторияМенеджерЗаписи.Период = ТекущаяДата();
	//СпецификацииИсторияМенеджерЗаписи.СведенияОбИзменениях = Строка(ВидИзменения);
	//СпецификацииИсторияМенеджерЗаписи.Автор = ПараметрыСеанса.ТекущийПользователь;
	//
	//Попытка
	//	
	//	СпецификацииИсторияМенеджерЗаписи.Записать();
	//	
	//Исключение
	//	
	//	//ОтменитьТранзакцию();
	//	
	//	РезультатОбработки.Вставить("Выполнено", Ложь);
	//	РезультатОбработки.Вставить("Описание", ОписаниеОшибки());
	//	Возврат РезультатОбработки;
	//	
	//КонецПопытки;
	
	//изменения в регистре изменений
	//ЭталоныМенеджерЗаписи = РегистрыСведений.ЭталонныеИзделияВСтруктуреЗаказов.СоздатьМенеджерЗаписи();
	//ЭталоныМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
	//ЭталоныМенеджерЗаписи.Прочитать();
	//
	//Если Не ЭталоныМенеджерЗаписи.Выбран() Тогда //эталона нет - в очередь не встаем
	//	
	//	Возврат РезультатОбработки;
	//	
	//КонецЕсли;
	//
	//СпецификацииИзмененияМенеджерЗаписи = РегистрыСведений.СпецификацииПредметовСнабженияИзменения.СоздатьМенеджерЗаписи();
	//СпецификацииИзмененияМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
	//СпецификацииИзмененияМенеджерЗаписи.СоставляющаяЧасть = СоставляющаяЧасть;
	//СпецификацииИзмененияМенеджерЗаписи.ЗИП = ЗИП;
	//СпецификацииИзмененияМенеджерЗаписи.Период = ТекущаяДата();
	//СпецификацииИзмененияМенеджерЗаписи.ВидИзменения = ВидИзменения;
	СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
	СпецификацииОчередьИзменений.Период = ТекущаяДата();
	СпецификацииОчередьИзменений.ПредметСнабжения = ПредметСнабжения;	
		
	СпецификацииОчередьИзменений.Записать();
			
	Возврат РезультатОбработки;
	
КонецФункции

//процедура заполняет дерево составляющих частей предмета снабжения
Процедура ЗаполнитьДеревоСпецификации(ПредметСнабжения, СтрокиДерева, МаксимальнаяВложенность, СчитанныеЭлементы = Неопределено) Экспорт
	
	Если СчитанныеЭлементы = Неопределено Тогда //проверка на зацикливание
		
		СчитанныеЭлементы = Новый Массив;
			
	КонецЕсли;
	
	СчитанныеЭлементы.Добавить(ПредметСнабжения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	СпецификацииПредметовСнабжения.Количество КАК Количество
	|ПОМЕСТИТЬ втСоставляющиеЧасти
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|	И НЕ СпецификацииПредметовСнабжения.СоставляющаяЧасть В (&СчитанныеЭлементы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СоставляющаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Наименование КАК Наименование,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втСоставляющиеЧасти.ЗИП КАК ЗИП,
	|	втСоставляющиеЧасти.Количество КАК Количество,
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка
	|ИЗ
	|	втСоставляющиеЧасти КАК втСоставляющиеЧасти
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО втСоставляющиеЧасти.СоставляющаяЧасть = КаталогПредметовСнабжения.Ссылка";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("СчитанныеЭлементы", СчитанныеЭлементы); //проверка на зацикливание
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
		
		МаксимальныйИндекс = СчитанныеЭлементы.ВГраница();
		
		Если МаксимальныйИндекс + 1 < МаксимальнаяВложенность И Не Выборка.ЗИП Тогда
			
			ЗаполнитьДеревоСпецификации(Выборка.Ссылка, СтрокаДерева.Строки, МаксимальнаяВложенность, СчитанныеЭлементы);
			
			Если Не СчитанныеЭлементы[МаксимальныйИндекс] = ПредметСнабжения Тогда
				
				СчитанныеЭлементы.Удалить(МаксимальныйИндекс);
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//функция проверяет вхождение заданного в предмета снабжения в полную спецификацию одного из элементов массива предметов снабжения
//возвращает истина - есть вхождение, ложь - вхождений не обнаружено
Функция ВходитВСпецификацииПредметовСнабжения(ПредметСнабжения, ВладельцыСпецификаций, МассивПроверенных = Неопределено) Экспорт
	
	Если МассивПроверенных = Неопределено Тогда
		
		МассивПроверенных = Новый Массив;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	ВЫБОР
	|		КОГДА СпецификацииПредметовСнабжения.СоставляющаяЧасть = &ПредметСнабжения
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьВхождения
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения В(&ВладельцыСпецификаций)
	|	И НЕ СпецификацииПредметовСнабжения.ПредметСнабжения В (&МассивПроверенных)
	|	И НЕ СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|	И НЕ СпецификацииПредметовСнабжения.ЗИП
	|ИТОГИ
	|	МАКСИМУМ(ЕстьВхождения)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("МассивПроверенных", МассивПроверенных);
	Запрос.УстановитьПараметр("ВладельцыСпецификаций", ВладельцыСпецификаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаИтог = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам).Строки[0];
	
	Если СтрокаИтог.ЕстьВхождения Тогда
		
		Возврат Истина;
		
	Иначе
		
		Для каждого Стр Из ВладельцыСпецификаций Цикл
			
			Если МассивПроверенных.Найти(Стр) = Неопределено Тогда
				
				МассивПроверенных.Добавить(Стр);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НовыеВладельцыСпецификаций = СтрокаИтог.Строки.ВыгрузитьКолонку("СоставляющаяЧасть");
		
		Результат = ВходитВСпецификацииПредметовСнабжения(ПредметСнабжения, НовыеВладельцыСпецификаций, МассивПроверенных);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции //? возможно нуждается в оптимизации для поиска по большим массивам данных
//-- 29.09.2017 Веденеев П. // функции массового редактирования спецификаций

//функция возвращает дерево спецификации эталонного элемента
Функция ПолучитьДеревоСпецификацииЭталонногоЭлемента(ЭталонныйЭлемент, ЗИП = Ложь) Экспорт
	
	//++ 06.03.2018 Веденеев П. //добавлен выбор типа составляющей части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип КАК Тип,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ТипСоставляющейЧасти КАК ТипСоставляющейЧасти
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЗИП
	|				ТОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В (&ЭталонныйЭлемент)
	|			ИНАЧЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ (&ЭталонныйЭлемент)
	|		КОНЕЦ
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Ссылка КАК Ссылка,
	|	втПредметыСнабжения.Тип КАК Тип,
	|	втПредметыСнабжения.ЗИП КАК ЗИП,
	|	втПредметыСнабжения.ТипСоставляющейЧасти КАК ТипСоставляющейЧасти,
	|	МИНИМУМ(ЕСТЬNULL(СпецификацииПредметовСнабженияИзменения.ЭталонОбработан, ИСТИНА)) КАК ЭталонОбработан
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений КАК СпецификацииПредметовСнабженияИзменения
	|		ПО втПредметыСнабжения.ПредметСнабжения = СпецификацииПредметовСнабженияИзменения.ПредметСнабжения
	|
	|СГРУППИРОВАТЬ ПО
	|	втПредметыСнабжения.ПредметСнабжения,
	|	втПредметыСнабжения.Ссылка,
	|	втПредметыСнабжения.Тип,
	|	втПредметыСнабжения.ЗИП,
	|	втПредметыСнабжения.ТипСоставляющейЧасти
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("ЗИП", ЗИП);
	Запрос.УстановитьПараметр("ЭталонныйЭлемент", ЭталонныйЭлемент);
	
	ДеревоСпецификации = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ДеревоСпецификации;
	
КонецФункции

#КонецОбласти

#Область СтруктураЗаказаПоКомплектующимИзделиямИЗИП

// Функция предназначена для проверки наличия и пометки на удаление элементов структуры заказов, связанных с удаленной составной частью спецификации
// Параметры:
// ПредметСнабжения - Справочники.КаталогПредметовСнабжения
// СоставляющаяЧасть - Справочники.КаталогПредметовСнабжения
//
Функция УдалитьЭлементыСтруктурыЗаказов(ПредметСнабжения, СоставляющаяЧасть, ЭталонОбработан, Эталон)

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	// Осуществляем поиск следующим образом:
	// Сначала находим элементы структуры заказов, предметом снабжения которых является удаляемая составляющая часть
	// Затем среди них оставляем те, предметом снабжения родителей которых является предмет снабжения спецификации
	
	Запрос = Новый Запрос;
	
	Если ЭталонОбработан Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос.Родитель КАК Родитель
		|ПОМЕСТИТЬ ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
		|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ДобавленИзСпецификации КАК ДобавленИзСпецификации
		|	ИЗ
		|		Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|	ГДЕ
		|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть) КАК ВложенныйЗапрос
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации КАК ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|		ПО ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.Родитель = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения";
		Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Эталон
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть";
		Запрос.УстановитьПараметр("Эталон", Эталон);
		
	КонецЕсли;

	Запрос.УстановитьПараметр("СоставляющаяЧасть", СоставляющаяЧасть);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.Выполнено = Истина;
		Возврат Результат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//++ 28.09.2017 Веденеев П.  - заменяем пометку удаления на непосредственное удаление
		//РезультатПометкиНаУдаление = ПометитьНаУдалениеЭлементСтруктурыЗаказа(Выборка.Ссылка);
		РезультатПометкиНаУдаление = УдалитьЭлементСтруктурыЗаказа(Выборка.Ссылка);
		//-- 28.09.2017 Веденеев П.  - заменяем пометку удаления на непосредственное удаление
		
		Если Не РезультатПометкиНаУдаление.Выполнено Тогда
		
			Результат.Описание = РезультатПометкиНаУдаление.Описание;
			Возврат Результат;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Возврат Результат;

КонецФункции // ПометитьНаУдалениеЭлементыСтруктурыЗаказов()

//++ 28.09.2017 Веденеев П. //процедуры и функции непосредственного удаления элементов структуры заказов
#Область УдалениеЭлементовСтруктурыЗаказов

//Функция предназначена для непосредственного удаления элемента структуры заказа и всех подчиненных элементов
//также удаляет все значимые ссылки на удаляемые элементы
// ++ 18.07.2018 15:25:19 Базунов Д.А. Задача: 
// Добавил ПривилегированныйРежим
// -- 18.07.2018 15:25:19 Базунов Д.А. Задача:
Функция УдалитьЭлементСтруктурыЗаказа(ЭлементСтруктурыЗаказа, ПривилегированныйРежим = Ложь) Экспорт
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	//++ 24.01.2018 Веденеев П. //удаление экземпляров элемента и информации об экземплярах - текст запроса и выборка изменены
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втЭлементыСтруктуры
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&ЭлементСтруктурыЗаказа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭлементыСтруктуры.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ЭкземплярыКомплектующихИзделийКорабля.Ссылка, НЕОПРЕДЕЛЕНО) КАК Экземпляр
	|ИЗ
	|	втЭлементыСтруктуры КАК втЭлементыСтруктуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭкземплярыКомплектующихИзделийКорабля КАК ЭкземплярыКомплектующихИзделийКорабля
	|		ПО втЭлементыСтруктуры.Ссылка = ЭкземплярыКомплектующихИзделийКорабля.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ
	|ИТОГИ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("ЭлементСтруктурыЗаказа", ЭлементСтруктурыЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	// ++ 18.07.2018 15:28:26 Базунов Д.А. Задача: 
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли; 
	// -- 18.07.2018 15:28:26 Базунов Д.А. Задача:
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		//++ 24.01.2018 Веденеев П. //удаление экземпляров элемента и информации об экземплярах
		
		ВыборкаЭкземпляров = Выборка.Выбрать();
		
		Пока ВыборкаЭкземпляров.Следующий() Цикл
			
			Если ВыборкаЭкземпляров.Экземпляр = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РезультатУдаленияСсылок = УдалитьИнформациюОбЭкземпляреИзделия(ВыборкаЭкземпляров.Экземпляр);
			
			Если Не РезультатУдаленияСсылок.Выполнено Тогда
				
				ОтменитьТранзакцию();
				
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(РезультатУдаленияСсылок.Описание, Перечисления.ПриоритетыОшибок.Критический);
				
				Возврат РезультатУдаленияСсылок;
				
			КонецЕсли;
			
			ЭкземплярОбъект = ВыборкаЭкземпляров.Экземпляр.ПолучитьОбъект();
			
			Попытка
				
				ЭкземплярОбъект.Удалить();
				
			Исключение
				
				Результат.Выполнено = Ложь;
				Результат.Описание = "Не удалось удалить элемент структуры заказа " + Символы.ПС + ОписаниеОшибки();
				
				ОтменитьТранзакцию();
				
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(Результат.Описание, Перечисления.ПриоритетыОшибок.Критический);
				
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЦикла;
		
		//-- 24.01.2018 Веденеев П. //удаление экземпляров элемента и информации об экземплярах
		
		РезультатУдаленияСсылок = УдалитьСсылкиИзРегистровСведений(Выборка.Ссылка);
		
		Если Не РезультатУдаленияСсылок.Выполнено Тогда
			
			ОтменитьТранзакцию();
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(РезультатУдаленияСсылок.Описание, Перечисления.ПриоритетыОшибок.Критический);
			
			Возврат РезультатУдаленияСсылок;
			
		КонецЕсли;
		
		СтруктураЗаказаПоКомплектующимИзделиямИЗИПОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			
			СтруктураЗаказаПоКомплектующимИзделиямИЗИПОбъект.Удалить();
			
		Исключение
			
			Результат.Выполнено = Ложь;
			Результат.Описание = "Не удалось удалить элемент структуры заказа " + Символы.ПС + ОписаниеОшибки();
			
			ОтменитьТранзакцию();
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(Результат.Описание, Перечисления.ПриоритетыОшибок.Критический);
			
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	// ++ 18.07.2018 15:28:14 Базунов Д.А. Задача: 
	Если ПривилегированныйРежим И ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	// -- 18.07.2018 15:28:14 Базунов Д.А. Задача:
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция УдалитьСсылкиИзРегистровСведений(Ссылка)
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	Попытка
		
		УдалитьСсылкиИзРегистраСведений("ЛогЗагрузки", "Объект1С", Ссылка);
		УдалитьСсылкиИзРегистраСведений("ДополнительныеНаименования", "Владелец", Ссылка);
		УдалитьСсылкиИзРегистраСведений("ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП", "ЭлементСтруктуры", Ссылка);
		УдалитьСсылкиИзРегистраСведений("ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии", "ЭлементСтруктуры", Ссылка);
		УдалитьСсылкиИзРегистраСведений("ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных", "ЭлементСтруктуры", Ссылка);
		УдалитьСсылкиИзРегистраСведений("СтруктураЗаказаРегистрацияРодителей", "ЭлементСтруктурыЗаказа", Ссылка);
		//++ 29.06.2018 Веденеев П. //добавлен новый регистр
		УдалитьСсылкиИЗРегистраСведений("СверткаДублейПредметовСнабженияВспомогательный", "ЭлементСтруктурыОригинал", Ссылка);
		УдалитьСсылкиИЗРегистраСведений("СверткаДублейПредметовСнабженияВспомогательный", "ЭлементСтруктурыДубликат", Ссылка);
		//-- 29.06.2018 Веденеев П. //добавлен новый регистр
		
	Исключение
		
		Результат.Выполнено = Ложь;
		Результат.Описание = "Не удалось удалить элемент структуры заказа " + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//++ 24.01.2018 Веденеев П. //удаление экземпляров элемента и информации об экземплярах
&НаСервере
Функция УдалитьИнформациюОбЭкземпляреИзделия(Ссылка)
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	Попытка
		
		УдалитьСсылкиИЗРегистраСведений("ИсторияТОиРЭкземпляровКомплектующихИзделийКорабля", "Экземпляр", Ссылка);
		УдалитьСсылкиИЗРегистраСведений("НаработкаЭкземляровКомплектующихИзделийКорабля", "Экземпляр", Ссылка);
		УдалитьСсылкиИЗРегистраСведений("СвязанныеИзделияЭкземпляровКомплектующихИзделийКорабля", "Экземпляр", Ссылка);
		УдалитьСсылкиИЗРегистраСведений("СвязанныеИзделияЭкземпляровКомплектующихИзделийКорабля", "СвязанноеИзделие", Ссылка);
		
	Исключение
		
		Результат.Выполнено = Ложь;
		Результат.Описание = "Не удалось удалить элемент структуры заказа " + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//-- 24.01.2018 Веденеев П. //удаление экземпляров элемента и информации об экземплярах

&НаСервере
Процедура УдалитьСсылкиИзРегистраСведений(ИмяРегистра, ИмяИзмерения, Ссылка)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор[ИмяИзмерения].Установить(Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти
//-- 28.09.2017 Веденеев П. //процедуры и функции непосредственного удаления элементов структуры заказов

// Функция предназначена для проверки наличия и пометки на удаление элементов структуры заказов, связанных с удаленной составной частью спецификации

// Функция предназначена для пометки на удаление элемента структуры заказа, а также рекурсивного вызова в случае нахождения подчиненных элементов
// Параметры:
// ЭлементСтруктурыЗаказа - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
//
Функция ПометитьНаУдалениеЭлементСтруктурыЗаказа(ЭлементСтруктурыЗаказа, ПропуститьЭлемент = Ложь)

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	Если Не ПропуститьЭлемент Тогда
		
		// Пометим на удаление элемент структуры заказа
		
		ЭлементСтруктурыЗаказаОбъект = ЭлементСтруктурыЗаказа.ПолучитьОбъект();
		ЭлементСтруктурыЗаказаОбъект.ПометкаУдаления = Истина;
		
		Попытка
			
			ЭлементСтруктурыЗаказаОбъект.Записать();
			
		Исключение
			
			Результат.Описание = "Не удалось установить пометку на удаление для элемента структуры заказа." + Символы.ПС + ОписаниеОшибки();
			Возврат Результат;
			
		КонецПопытки;	
		
	КонецЕсли;
	
	// Проверим наличие подчиненных элементов
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ДобавленИзСпецификации КАК ДобавленИзСпецификации
	|	ИЗ
	|		Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|	ГДЕ
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ДобавленИзСпецификации";
	
	Запрос.УстановитьПараметр("Родитель", ЭлементСтруктурыЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.Выполнено = Истина;
		Возврат Результат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		РезультатПометкиНаУдаление = ПометитьНаУдалениеЭлементСтруктурыЗаказа(Выборка.Ссылка);
		
		Если Не РезультатПометкиНаУдаление.Выполнено Тогда
		
			Результат.Описание = РезультатПометкиНаУдаление.Описание;
			Возврат Результат;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Возврат Результат;

КонецФункции // ПометитьНаУдалениеЭлементСтруктурыЗаказа()

// Функция предназначена для создания подчиненных элементов на основании составной частью спецификации для элементов структуры заказов, связанных с предметом снабжения 
// Параметры:
// ПредметСнабжения - Справочники.КаталогПредметовСнабжения
// СоставляющаяЧасть - Справочники.КаталогПредметовСнабжения
// Тип - Справочники.РазделыСпецификацииЗИП
//
Функция СоздатьЭлементыСтруктурыЗаказов(ПредметСнабжения, СоставляющаяЧасть, ЗИП, Количество, Тип, НомерПозиции, ЭталонОбработан, Эталон)

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	Запрос = Новый Запрос;
	
	Если ЭталонОбработан Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование КАК Заведование,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец
		|ПОМЕСТИТЬ втРодители
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРодители.Ссылка КАК Ссылка,
		|	втРодители.Заведование КАК Заведование,
		|	втРодители.Владелец КАК Владелец,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК СоставляющаяЧастьСуществует
		|ПОМЕСТИТЬ втПроверкаНаличияСоставляющейЧасти
		|ИЗ
		|	втРодители КАК втРодители
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|		ПО втРодители.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
		|
		|СГРУППИРОВАТЬ ПО
		|	втРодители.Ссылка,
		|	втРодители.Заведование,
		|	втРодители.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СоставляющаяЧастьСуществует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПроверкаНаличияСоставляющейЧасти.Ссылка КАК Ссылка,
		|	втПроверкаНаличияСоставляющейЧасти.Заведование КАК Заведование,
		|	втПроверкаНаличияСоставляющейЧасти.Владелец КАК Владелец
		|ИЗ
		|	втПроверкаНаличияСоставляющейЧасти КАК втПроверкаНаличияСоставляющейЧасти
		|ГДЕ
		|	НЕ втПроверкаНаличияСоставляющейЧасти.СоставляющаяЧастьСуществует";
		Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование КАК Заведование,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец
		|ПОМЕСТИТЬ втРодители
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРодители.Ссылка КАК Ссылка,
		|	втРодители.Заведование КАК Заведование,
		|	втРодители.Владелец КАК Владелец,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК СоставляющаяЧастьСуществует
		|ПОМЕСТИТЬ втПроверкаНаличияСоставляющейЧасти
		|ИЗ
		|	втРодители КАК втРодители
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|		ПО втРодители.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
		|
		|СГРУППИРОВАТЬ ПО
		|	втРодители.Ссылка,
		|	втРодители.Заведование,
		|	втРодители.Владелец
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СоставляющаяЧастьСуществует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПроверкаНаличияСоставляющейЧасти.Ссылка КАК Ссылка,
		|	втПроверкаНаличияСоставляющейЧасти.Заведование КАК Заведование,
		|	втПроверкаНаличияСоставляющейЧасти.Владелец КАК Владелец
		|ИЗ
		|	втПроверкаНаличияСоставляющейЧасти КАК втПроверкаНаличияСоставляющейЧасти
		|ГДЕ
		|	НЕ втПроверкаНаличияСоставляющейЧасти.СоставляющаяЧастьСуществует";
		Запрос.УстановитьПараметр("Эталон", Эталон);
		
	КонецЕсли;
	
	//++26.09.2017 Веденеев П - исключаем из выборки элементы
	Запрос.УстановитьПараметр("СоставляющаяЧасть", СоставляющаяЧасть);
	//--26.09.2017 Веденеев П - исключаем из выборки элементы
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.Выполнено = Истина;
		Возврат Результат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦепочкаПредметовСнабжения = Новый Массив;
		ЦепочкаПредметовСнабжения = ЗаполнитьЦепочкуПредметовСнабжения(Выборка.Ссылка, ЦепочкаПредметовСнабжения);
		
		РезультатСозданияЭлементаСтруктурыЗаказа = СоздатьЭлементСтруктурыЗаказа(ЦепочкаПредметовСнабжения, Выборка.Владелец, Выборка.Ссылка, , Выборка.Заведование, СоставляющаяЧасть, ЗИП, Количество, Тип, НомерПозиции);		
		
		Если Не РезультатСозданияЭлементаСтруктурыЗаказа.Выполнено Тогда
			
			Результат.Описание = РезультатСозданияЭлементаСтруктурыЗаказа.Описание;
			Возврат Результат;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // СоздатьЭлементыСтруктурыЗаказов()

//+ 22.11.2017 17:38:27 Базунов Д.А. Задача: 
&НаСервере
Функция ПолучитьМассивВсехРодителейВверх(ПредметСнабжения, Массив = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть = &СоставляющаяЧасть
	|	И НЕ СпецификацииПредметовСнабжения.ЗИП";
	Запрос.УстановитьПараметр("СоставляющаяЧасть", ПредметСнабжения);
	
	Если Массив = Неопределено Тогда
		Массив = Новый Массив;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Массив.Найти(Выборка.ПредметСнабжения) = Неопределено Тогда
			Массив.Добавить(Выборка.ПредметСнабжения);
			ПолучитьМассивВсехРодителейВверх(Выборка.ПредметСнабжения, Массив);
		Иначе
			Стоп = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции

//- 22.11.2017 17:38:27 Базунов Д.А. Задача: 

// Функция предназначена для создания элемента структуры заказа, а также рекурсивного вызова в случае нахождения составных частей спецификации его предмета снабжения
// Параметры:
// ЦепочкаПредметовСнабжения - Массив
// Родитель - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// Заведование - Справочники.БоевыеЧасти
// Тип - Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля
// СоставляющаяЧасть - Справочники.КаталогПредметовСнабжения
// Количество - Число
// КоличествоВЗИПБорт - Число
// КоличествоВЗИПБаза - Число
// КоличествоВЗИПДЭ - Число
// КоличествоВЗИПР - Число
//
Функция СоздатьЭлементСтруктурыЗаказа(ЦепочкаПредметовСнабжения, Владелец, Родитель = Неопределено, ЭлементСтруктурыЗаказа = Неопределено, Заведование, СоставляющаяЧасть, ЗИП = Ложь, Количество = Неопределено, ТипСоставляющейЧасти = Неопределено, НомерПозиции = Неопределено, СоздатьКорневойЭлемент = Истина)
	
	// Параметр Родитель заполняется при вызове из функции СоздатьЭлементыСтруктурыЗаказов() и рекурсивном вызове
	// Параметр ЭлементСтруктурыЗаказа заполняется при вызове из функции СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказа()
	
	Результат = Новый Структура("Выполнено, Описание, НеОбрабатывать, ОписаниеОшибки", Ложь, "", Ложь, "");
	
	Если НЕ ЗИП И НЕ ЦепочкаПредметовСнабжения.Найти(СоставляющаяЧасть) = Неопределено Тогда
		
		ОписаниеЦепочки = "";
		ВГраница = ЦепочкаПредметовСнабжения.ВГраница();
		
		Пока ВГраница >= 0 Цикл
			
			ЭлементЦепочки = ЦепочкаПредметовСнабжения.Получить(ВГраница);
			ОписаниеЦепочки = ОписаниеЦепочки + Строка(ЭлементЦепочки)+"("+Строка(ЭлементЦепочки.Код)+")"+ "\";
			ВГраница=ВГраница-1;
			
		КонецЦикла;
		
		СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
		СпецификацииОчередьИзменений.Период = ТекущаяДата();
		СпецификацииОчередьИзменений.ПредметСнабжения = ?(Родитель = Неопределено, СоставляющаяЧасть, Родитель.ПредметСнабжения);
		СпецификацииОчередьИзменений.НеОбрабатывать = Истина;
		СпецификацииОчередьИзменений.ОписаниеОшибки = "Обнаружено зацикливание: " + ОписаниеЦепочки + Строка(СоставляющаяЧасть)+"("+Строка(СоставляющаяЧасть.Код)+")";
		СпецификацииОчередьИзменений.Записать();

		//Результат.Выполнено = Ложь;
		//Результат.НеОбрабатывать = Истина;
		//Результат.ОписаниеОшибки = "Обнаружено зацикливание в спецификации: " + ОписаниеЦепочки + Строка(СоставляющаяЧасть)+"("+Строка(СоставляющаяЧасть.Код)+")";
		Результат.Выполнено = Истина;
		Возврат Результат;		
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Родитель) Тогда 
		
		НовыйЭлементСтруктуры = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		НовыйЭлементСтруктуры.Наименование 				= Строка(СоставляющаяЧасть);
		НовыйЭлементСтруктуры.Владелец                  = Владелец;
		НовыйЭлементСтруктуры.Родитель 					= Родитель;
		НовыйЭлементСтруктуры.Тип 						= Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
		НовыйЭлементСтруктуры.Заведование 				= Заведование;
		НовыйЭлементСтруктуры.ПредметСнабжения 			= СоставляющаяЧасть;
//+++ SP 20171011 11.10.2017 Тычина Р.В. //Закоментировал. В структуре количество задается всегда вручную
		//НовыйЭлементСтруктуры.Количество 				= Количество;
//--- SP 20171011 11.10.2017 Тычина Р.В. //Закоментировал. В структуре количество задается всегда вручную
		
//		НовыйЭлементСтруктуры.ДобавленИзСпецификации 	= Истина; ++ 25.10.17 Веденеев П. - отключается использование признака
		НовыйЭлементСтруктуры.ТипСоставляющейЧасти		= ТипСоставляющейЧасти;
		НовыйЭлементСтруктуры.НомерПозицииСпецификации	= НомерПозиции;
		НовыйЭлементСтруктуры.ЗИП						= ЗИП;
		
		Попытка
			
			НовыйЭлементСтруктуры.Записать();
			
		Исключение
			
			Результат.Описание = "Не удалось создать новый элемент структуры заказа." + Символы.ПС + ОписаниеОшибки();
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Если текущая составляющая часть уже есть в цепочке предметов снабжения, для элемента структуры заказа не будут создаваться подчиненные элементы
	//++ 01.11.2017 Веденеев П. //изменен механизм защиты от зацикливания
	Если ЗИП Тогда
		
		Результат.Выполнено = Истина;
		Возврат Результат;		
		
	КонецЕсли;
	//-- 01.11.2017 Веденеев П. //изменен механизм защиты от зацикливания
	
	Если ЦепочкаПредметовСнабжения.Количество() > 10 Тогда //при количестве уровней вложенности больше 10 прерываем обработку //Веденеев 31.10.2017
		
		Результат.Выполнено = Ложь;
		Результат.НеОбрабатывать = Истина;
		Результат.ОписаниеОшибки = "Одна из ветвей дерева содержит более 10 уровней";
		Возврат Результат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	СпецификацииПредметовСнабжения.Количество КАК Количество,
	|	СпецификацииПредметовСнабжения.Тип КАК Тип,
	|	СпецификацииПредметовСнабжения.НомерПозиции КАК НомерПозиции,
	|	ВЫБОР
	|		КОГДА СпецификацииПредметовСнабжения.СоставляющаяЧасть В (&ЦепочкаПредметовСнабжения)
	|				И НЕ(СпецификацииПредметовСнабжения.СоставляющаяЧасть = &ПредметСнабжения
	|						И СпецификацииПредметовСнабжения.ЗИП)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Зацикливание
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", СоставляющаяЧасть);
	Запрос.УстановитьПараметр("ЦепочкаПредметовСнабжения", ЦепочкаПредметовСнабжения); //++ 01.11.2017 Веденеев П. //изменен механизм защиты от зацикливания
	
	//++ 01.11.2017 Веденеев П. //изменен механизм защиты от зацикливания
	//Если ЦепочкаПредметовСнабжения.Найти(СоставляющаяЧасть) = Неопределено Тогда
	//	
	//	ЦепочкаПредметовСнабжения.Добавить(СоставляющаяЧасть);
	//	
	//КонецЕсли;
	//-- 01.11.2017 Веденеев П. //изменен механизм защиты от зацикливания
	
	//+ 10.11.2017 16:48:32 Базунов Д.А. Задача: 
	ЦепочкаПредметовСнабженияКопия = Новый Массив;
	
	Для каждого ЭлементЦепочки Из ЦепочкаПредметовСнабжения Цикл
		
		ЦепочкаПредметовСнабженияКопия.Добавить(ЭлементЦепочки);
		
	КонецЦикла; 
	
	ЦепочкаПредметовСнабженияКопия.Добавить(СоставляющаяЧасть);
	//- 10.11.2017 16:48:32 Базунов Д.А. Задача: 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Результат.Выполнено = Истина;
		Возврат Результат;	
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		//+ 10.11.2017 16:49:17 Базунов Д.А. Задача: 
		//МаксимальныйИндекс = ЦепочкаПредметовСнабжения.ВГраница();
		//- 10.11.2017 16:49:17 Базунов Д.А. Задача: 
		
		//Если Выборка.Зацикливание Тогда //++ 08.11.2017 Веденеев П. 
		//	
		//	ОписаниеЦепочки = "";
		//	
		//	Для каждого ЭлементЦепочки Из ЦепочкаПредметовСнабжения Цикл
		//		
		//		ОписаниеЦепочки = ОписаниеЦепочки + Строка(ЭлементЦепочки) + "\";
		//		
		//	КонецЦикла;
		//	
		//	СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
		//	СпецификацииОчередьИзменений.Период = ТекущаяДата();
		//	СпецификацииОчередьИзменений.ПредметСнабжения = СоставляющаяЧасть;
		//	СпецификацииОчередьИзменений.НеОбрабатывать = Истина;
		//	СпецификацииОчередьИзменений.ОписаниеОшибки = "Обнаружено зацикливание: " + ОписаниеЦепочки + Строка(Выборка.СоставляющаяЧасть);
		//	СпецификацииОчередьИзменений.Записать();
		//	Продолжить;
		//	
		//КонецЕсли;
		
		РезультатСозданияЭлементаСтруктурыЗаказа = СоздатьЭлементСтруктурыЗаказа(ЦепочкаПредметовСнабженияКопия, Владелец, 
		?(ЗначениеЗаполнено(ЭлементСтруктурыЗаказа), ЭлементСтруктурыЗаказа, НовыйЭлементСтруктуры.Ссылка),, Заведование, Выборка.СоставляющаяЧасть, 
		Выборка.ЗИП, Выборка.Количество, Выборка.Тип, Выборка.НомерПозиции);
		
		//+ 10.11.2017 16:48:55 Базунов Д.А. Задача: 
		//++ 01.11.2017 Веденеев П. //изменен механизм защиты от зацикливания
		//Если Не ЦепочкаПредметовСнабжения[МаксимальныйИндекс] = СоставляющаяЧасть Тогда
		//		
		//	ЦепочкаПредметовСнабжения.Удалить(МаксимальныйИндекс);
		//		
		//КонецЕсли;
		//-- 01.11.2017 Веденеев П. //изменен механизм защиты от зацикливания
		//- 10.11.2017 16:48:55 Базунов Д.А. Задача: 
		
		Если Не РезультатСозданияЭлементаСтруктурыЗаказа.Выполнено Тогда
			
			Результат.Описание = РезультатСозданияЭлементаСтруктурыЗаказа.Описание;
			Результат.НеОбрабатывать = РезультатСозданияЭлементаСтруктурыЗаказа.НеОбрабатывать;
			Результат.ОписаниеОшибки = РезультатСозданияЭлементаСтруктурыЗаказа.ОписаниеОшибки;
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // СоздатьЭлементСтруктурыЗаказа()

//++ 11.12.2017 Веденеев П. //функция, создающая дерево элемента структуры с использованием транзакции при создании каждой отдельной ветви
#Область СозданиеЭлементовСтруктурыВТранзакции

//функция создает элементы структуры заказа, соответствующие составляющим частям переданного предмета снабжение и элемент, соотв. самому ПС (при необходимости)
//возвращает результат создания элементов
Функция СоздатьЭлементыСтруктурыЗаказаВТранзакции(ЦепочкаПредметовСнабжения, Владелец, Родитель, Заведование, СоставляющаяЧасть, ЗИП = Ложь, ТипСоставляющейЧасти = Неопределено, НомерПозиции = Неопределено, ПервыйВызов = Истина)
	
	Результат = Новый Структура("Выполнено, Описание, НеОбрабатывать, ОписаниеОшибки", Истина, "", Ложь, "");
	
	Если Не ЗИП И Не ЦепочкаПредметовСнабжения.Найти(СоставляющаяЧасть) = Неопределено Тогда
		
		ОписаниеОшибки = "Обнаружено зацикливание: " + СформироватьОписаниеЦепочки(ЦепочкаПредметовСнабжения, СоставляющаяЧасть);
		
		Если ПервыйВызов Тогда
			
			Результат.Выполнено = Ложь;
			Результат.НеОбрабатывать = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;
			
		Иначе
			
			ПоместитьВОчередьОбновленияСпецификации(Родитель.ПредметСнабжения, , Истина, ОписаниеОшибки);
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЦепочкаПредметовСнабжения.Количество() > 10 Тогда //при количестве уровней вложенности больше 10 прерываем обработку
		
		ОписаниеОшибки = "Одна из ветвей дерева содержит более 10 уровней: " + СформироватьОписаниеЦепочки(ЦепочкаПредметовСнабжения);
		
		Если ПервыйВызов Тогда
			
			Результат.Выполнено = Ложь;
			Результат.НеОбрабатывать = Истина;
			Результат.ОписаниеОшибки = ОписаниеОшибки;
			Возврат Результат;
			
		Иначе
			
			ПоместитьВОчередьОбновленияСпецификации(СоставляющаяЧасть, , Истина, ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПервыйВызов Тогда //при первом вызове функции из процедуры обновления структур создаем корневой элемент
		
		РезультатСоздания = ВыполнитьСозданиеЭлементаСтруктуры(Владелец, Родитель,СоставляющаяЧасть, ЗИП, Заведование, ТипСоставляющейЧасти, НомерПозиции);
		
		Если Не РезультатСоздания.Выполнено Тогда
			
			ЗаполнитьЗначенияСвойств(Результат, РезультатСоздания);
			Возврат Результат;
			
		КонецЕсли;
		
		Родитель = РезультатСоздания.Ссылка;
				
	КонецЕсли;
	
	Если ЗИП Тогда //если это ЗИП, то подчиненные элементы создавать не нужно
		
		Возврат Результат;
	
	КонецЕсли;
	
	//создаем подчиненные элементы
	
	//создаем непосредственных потомков
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных; //блокируем корневой элемент от прочих изменений
		ЭлементБлокировки = Блокировка.Добавить("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
		ЭлементБлокировки.ИсточникДанных = ПолучитьБлокируемыеЭлементыСтруктуры(Родитель);
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
	
	Исключение //превышено время ожидания - попробуем в следующий раз
		
		ПоместитьВОчередьОбновленияСпецификации(СоставляющаяЧасть);
		
	КонецПопытки;
			
	//получаем составляющие части корневого элемента
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	СпецификацииПредметовСнабжения.Количество КАК Количество,
	|	СпецификацииПредметовСнабжения.Тип КАК Тип,
	|	СпецификацииПредметовСнабжения.НомерПозиции КАК НомерПозиции,
	|	НЕОПРЕДЕЛЕНО КАК ЭлементСтруктурыЗаказа
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения";
	Запрос.УстановитьПараметр("ПредметСнабжения", СоставляющаяЧасть);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОтменитьТранзакцию();
		Возврат Результат;
		
	КонецЕсли;
	
	//создаем цепочку предметов снабжения с корневым элементом
	НоваяЦепочкаПредметовСнабжения = Новый Массив;
	
	Для каждого ЭлементЦепочки Из ЦепочкаПредметовСнабжения Цикл
		
		НоваяЦепочкаПредметовСнабжения.Добавить(ЭлементЦепочки);
		
	КонецЦикла;
	
	НоваяЦепочкаПредметовСнабжения.Добавить(СоставляющаяЧасть);
		
	Таблица = РезультатЗапроса.Выгрузить();
	ТекущийИндекс = Таблица.Количество() - 1;
	
	ВсеЭлементыСозданы = Истина;
	
	Пока ТекущийИндекс >= 0  Цикл
		
		СтрокаТаблицы = Таблица[ТекущийИндекс];
		
		Если Не СтрокаТаблицы.ЗИП И Не НоваяЦепочкаПредметовСнабжения.Найти(СтрокаТаблицы.СоставляющаяЧасть) = Неопределено Тогда //зацикливание
			
			 ПоместитьВОчередьОбновленияСпецификации(СоставляющаяЧасть, , Истина, ОписаниеОшибки);
			 Продолжить;
			
		КонецЕсли;
		
		РезультатСоздания = ВыполнитьСозданиеЭлементаСтруктуры(Владелец, Родитель, СтрокаТаблицы.СоставляющаяЧасть, СтрокаТаблицы.ЗИП, Заведование, ТипСоставляющейЧасти, НомерПозиции);
		
		Если Не РезультатСоздания.Выполнено Тогда //если создать элемент не удалось, то отменяем транзакцию
			
			ВсеЭлементыСозданы = Ложь;
			ОтменитьТранзакцию();
			
			ПоместитьВОчередьОбновленияСпецификации(СоставляющаяЧасть);
			Прервать;
			
		ИначеЕсли СтрокаТаблицы.ЗИП Тогда //исключим ЗИПы из создания подчиненных
			
			Таблица.Удалить(ТекущийИндекс);
			
		Иначе
			
			СтрокаТаблицы.ЭлементСтруктурыЗаказа = РезультатСоздания.Ссылка;
			
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс - 1;
		
	КонецЦикла;
	
	Если ВсеЭлементыСозданы Тогда
			
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		Возврат Результат;
		
	КонецЕсли;
	
	//продолжим создание подчиненных элементов
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		СоздатьЭлементыСтруктурыЗаказаВТранзакции(НоваяЦепочкаПредметовСнабжения, Владелец, СтрокаТаблицы.ЭлементСтруктурыЗаказа, Заведование, СтрокаТаблицы.СоставляющаяЧасть, Ложь, , , Ложь); 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//функция возвращает результат запроса, содержащий элементы, которые требуется заблокировать
Функция ПолучитьБлокируемыеЭлементыСтруктуры(Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Родитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Родитель", Родитель);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти
//-- 11.12.2017 Веденеев П. //функция, создающая дерево элемента структуры с использованием транзакции при создании каждой отдельной ветви

// Функция предназначена для добавления или пометки на удаление подчиненных элементов структуры заказа на основании признака ЗИП составной части спецификации 
// Параметры:
// ПредметСнабжения - Справочники.КаталогПредметовСнабжения
// СоставляющаяЧасть - Справочники.КаталогПредметовСнабжения
// Тип - Справочники.РазделыСпецификацииЗИП
//
Функция ИзменитьПризнакЗИПЭлементаСтруктурыЗаказа(ПредметСнабжения, СоставляющаяЧасть, ЗИП, ЭталонОбработан, Эталон)

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	// Осуществляем поиск следующим образом:
	// Сначала находим элементы структуры заказов, предметом снабжения которых является составляющая часть, у которой изменился признак ЗИП
	// Затем среди них оставляем те, предметом снабжения родителей которых является предмет снабжения спецификации
	Запрос = Новый Запрос;
	
	Если ЭталонОбработан Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование КАК Заведование,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП
		|ПОМЕСТИТЬ ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП = &НеЗИП
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.Ссылка КАК Ссылка,
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.Заведование КАК Заведование,
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.Владелец КАК Владелец,
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации КАК ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|		ПО ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.Родитель = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения";
		Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование КАК Заведование,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Эталон
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП = &НеЗИП";
		Запрос.УстановитьПараметр("Эталон", Эталон);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СоставляющаяЧасть", СоставляющаяЧасть);
	//++26.09.2017 Веденеев П - исключаем из выборки элементы, у которых признак ЗИП уже изменен (отрицательное условие для возможности использовать индекс) 
	Запрос.УстановитьПараметр("НеЗИП", Не ЗИП); 
	//--26.09.2017 Веденеев П - исключаем из выборки элементы, у которых признак ЗИП уже изменен (отрицательное условие для возможности использовать индекс)
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.Выполнено = Истина;
		Возврат Результат;	
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗИП Тогда // Необходимо пометить на удаление подчиненные элементы
		
			РезультатПометкиНаУдаление = ПометитьНаУдалениеЭлементСтруктурыЗаказа(Выборка.Ссылка, Истина);	
			
			Если Не РезультатПометкиНаУдаление.Выполнено Тогда
				
				Результат.Описание = РезультатПометкиНаУдаление.Описание;
				Возврат Результат;
				
			КонецЕсли;	
		
		Иначе // Необходимо добавить подчиненные элементы
		
			РезультатСозданияПодчиненныхЭлементов = СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказа(Выборка.Ссылка, Выборка.Владелец, Выборка.Заведование, Выборка.ПредметСнабжения);		
			
			Если Не РезультатСозданияПодчиненныхЭлементов.Выполнено Тогда
				
				Результат.Описание = РезультатСозданияПодчиненныхЭлементов.Описание;
				Возврат Результат;
				
			КонецЕсли;	
		
		КонецЕсли;
		
		СтруктураЗаказаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтруктураЗаказаОбъект.ЗИП = ЗИП;
		
		Попытка
		
			СтруктураЗаказаОбъект.Записать();	
		
		Исключение
			
			Результат.Описание = "Не удалось изменить признак ЗИП для " + Строка(Выборка.Ссылка) + Символы.ПС + ОписаниеОшибки();
			Возврат Результат;
		
		КонецПопытки;
		
	КонецЦикла;	
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // ИзменитьПризнакЗИПЭлементаСтруктурыЗаказа()

// Функция предназначена для изменения количества элемента структуры заказа
// Параметры:
// ПредметСнабжения - Справочники.КаталогПредметовСнабжения
// СоставляющаяЧасть - Справочники.КаталогПредметовСнабжения
// Количество - Число
// КоличествоВЗИПБорт - Число
// КоличествоВЗИПБаза - Число
// КоличествоВЗИПДЭ - Число
// КоличествоВЗИПР - Число
//
Функция ИзменитьПрочиеРеквизитыЭлементаСтруктурыЗаказов(ПредметСнабжения, СоставляющаяЧасть, Количество, Тип, НомерПозиции, ЭталонОбработан, Эталон)

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	// Осуществляем поиск следующим образом:
	// Сначала находим элементы структуры заказов, предметом снабжения которых является составляющая часть, у которой изменилось количество
	// Затем среди них оставляем те, предметом снабжения родителей которых является предмет снабжения спецификации
	
	Если ЭталонОбработан Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель
		|ПОМЕСТИТЬ ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.Ссылка
		|ИЗ
		|	ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации КАК ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|		ПО ВТ_ВсеЭлементыСтуктурыСоставляющейЧастиСпецификации.Родитель = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения";	
		Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Эталон";	
		Запрос.УстановитьПараметр("Эталон", Эталон);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СоставляющаяЧасть", СоставляющаяЧасть);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.Выполнено = Истина;
		Возврат Результат;	
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ЭлементСтруктурыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
//+++ SP 20171011 11.10.2017 Тычина Р.В. //Закоментировал. В структуре количество задается всегда вручную
		//ЭлементСтруктурыОбъект.Количество 				= Количество;
//--- SP 20171011 11.10.2017 Тычина Р.В. //Закоментировал. В структуре количество задается всегда вручную
		
		ЭлементСтруктурыОбъект.ТипСоставляющейЧасти 	= Тип;
		ЭлементСтруктурыОбъект.НомерПозицииСпецификации	= НомерПозиции;
		
		Попытка
		
			ЭлементСтруктурыОбъект.Записать();
		
		Исключение
			
			Результат.Описание = "Не удалось изменить элемент структуры заказа." + Символы.ПС + ОписаниеОшибки();
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // ИзменитьПрочиеРеквизитыЭлементаСтруктурыЗаказов()

// Функция предназначена для создания подчиненных элементов, связанных с предметом снабжения, для элемента структуры заказа 
// Параметры:
// ЭлементСтруктурыЗаказа - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// Владелец - Справочники.Заказы
// Заведование - Справочники.БоевыеЧасти
// ПредметСнабжения - Справочники.КаталогПредметовСнабжения
//
Функция СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказа, Владелец, Заведование, ПредметСнабжения) Экспорт
	
	ЦепочкаПредметовСнабжения = Новый Массив;
	ЦепочкаПредметовСнабжения = ЗаполнитьЦепочкуПредметовСнабжения(ЭлементСтруктурыЗаказа, ЦепочкаПредметовСнабжения);
	
	Возврат СоздатьЭлементСтруктурыЗаказа(ЦепочкаПредметовСнабжения, Владелец,, ЭлементСтруктурыЗаказа, Заведование, ПредметСнабжения);				

КонецФункции // СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказа()

// Функция предназначена для создания подчиненных элементов, связанных с предметом снабжения, для элемента структуры заказа в фоне 
// Параметры:
// ЭлементСтруктурыЗаказа - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// Владелец - Справочники.Заказы
// Заведование - Справочники.БоевыеЧасти
// ПредметСнабжения - Справочники.КаталогПредметовСнабжения
//
Процедура СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказаВФоне(ЭлементСтруктурыЗаказа, Владелец, Заведование, ПредметСнабжения) Экспорт

	РезультатСозданияПодчиненныхЭлементов = СоздатьПодчиненныеЭлементыДляЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказа, Владелец, Заведование, ПредметСнабжения);
	
	Если Не РезультатСозданияПодчиненныхЭлементов.Выполнено Тогда
		
		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(РезультатСозданияПодчиненныхЭлементов.Описание, Перечисления.ПриоритетыОшибок.Критический);
		
	КонецЕсли;		

КонецПроцедуры

// Функция предназначена для записи дополнительного наименования для элемента структуры заказа с типом "Группа", либо для предмета снабжения
// Параметры:
// Владелец - Справочники.КаталогПредметовСнабжения, Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// Язык - Справочники.Языки
// Наименование - Строка
//
Функция ЗаписатьДополнительноеНаименование(Владелец, Язык, Наименование) Экспорт
	
	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	НаборЗаписей = РегистрыСведений.ДополнительныеНаименования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(Владелец);
	НаборЗаписей.Отбор.ИмяРеквизита.Установить("Наименование");
	НаборЗаписей.Отбор.Язык.Установить(Язык);
	НаборЗаписей.Прочитать();
	
	ЕстьЗапись = НаборЗаписей.Количество() > 0;
	
	Если ЕстьЗапись Тогда
	
		НаборЗаписей.Очистить();		
	
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Владелец 		= Владелец;
	НоваяЗапись.ИмяРеквизита 	= "Наименование";
	НоваяЗапись.Язык 			= Язык;
	НоваяЗапись.Перевод 		= Наименование;
	
	Попытка
	
		НаборЗаписей.Записать(ЕстьЗапись);	
	
	Исключение
		
		Результат.Описание = "Не удалось записать наименование (доп.)" + Символы.ПС + ОписаниеОшибки();
		Возврат Результат;
	
	КонецПопытки;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	
	
КонецФункции // ЗаписатьДополнительноеНаименование()

// Функция предназначена для получения дополнительного наименования для элемента структуры заказа с типом "Группа", либо для предмета снабжения
// Параметры:
// Владелец - Справочники.КаталогПредметовСнабжения, Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
//
Функция ПолучитьДополнительноеНаименование(Владелец, Язык = Неопределено) Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеНаименования.Перевод
	|ИЗ
	|	РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
	|ГДЕ
	|	ДополнительныеНаименования.Владелец = &Владелец
	|	И ДополнительныеНаименования.ИмяРеквизита = ""Наименование""
	|	И ДополнительныеНаименования.Язык = &Язык";
	
	Если ЗначениеЗаполнено(Язык) Тогда
		
		Запрос.УстановитьПараметр("Язык", Язык);	
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ДополнительныеНаименования.Язык = &Язык", "");	
	
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат "";	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Перевод;

КонецФункции // ПолучитьДополнительноеНаименование()

// Функция предназначена для формирования описания иерархии элемента структуры заказа по комплектующим и ЗИП
// Параметры:
// РодительЭлемента - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
//
Функция СформироватьОписаниеИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП(РодительЭлемента) Экспорт

	МассивНаименованийРеверс = Новый Массив;
	
	ПервыйШагЦиклаПройден = Ложь;
	
	Пока Истина Цикл
		
		Если ПервыйШагЦиклаПройден Тогда
		
			Родитель = ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Родитель, "Родитель");	
		
		Иначе
			
			Родитель = РодительЭлемента;
			
			ПервыйШагЦиклаПройден = Истина;		
		
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(Родитель) Тогда
		
			Прервать;	
		
		КонецЕсли;
		
		МассивНаименованийРеверс.Добавить(Строка(Родитель));
	
	КонецЦикла;	
	
	КоличествоНаименований = МассивНаименованийРеверс.Количество();
	
	МассивНаименований = Новый Массив;
	
	Для Н = 1 По КоличествоНаименований Цикл
	
		МассивНаименований.Добавить(МассивНаименованийРеверс.Получить(КоличествоНаименований - Н));	
	
	КонецЦикла;	
	
	Возврат СтрСоединить(МассивНаименований, "/"); 

КонецФункции // СформироватьОписаниеИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП()

// Функция предназначена для получения описания иерархии элемента структуры заказа по комплектующим и ЗИП
// Параметры:
// ЭлементСтруктуры - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
//
Функция ПолучитьОписаниеИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП(ЭлементСтруктуры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии
	|ИЗ
	|	РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры = &ЭлементСтруктуры";
	
	Запрос.УстановитьПараметр("ЭлементСтруктуры", ЭлементСтруктуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат "";	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ОписаниеИерархии;

КонецФункции // ПолучитьОписаниеИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП()

// Функция предназначена для записи описания иерархии элемента структуры заказа по комплектующим и ЗИП,
// а также при наличии подчиненных элементов создании записи в служебном регистре для отложенного формирования описаний иерархии для них
// Параметры:
// ЭлементСтруктуры - Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// ОписаниеИерархии - Строка
// ПерваяЗапись - Булево
// ПропуститьПроверкуПодчиненных - Булево - Признак записи элемента в очередь для обновления подчиненных. Устанавливается Истина при вызове робота обработки очереди
//
Функция ЗаписатьОписаниеИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП(ЭлементСтруктуры, ОписаниеИерархии, ПерваяЗапись, ПропуститьПроверкуПодчиненных = Ложь) Экспорт

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	// Запишем описание иерархии
	
	МенеджерЗаписи = РегистрыСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭлементСтруктуры = ЭлементСтруктуры;
	
	Попытка
	
		Если ЗначениеЗаполнено(ОписаниеИерархии) Тогда
		
			МенеджерЗаписи.ОписаниеИерархии = ОписаниеИерархии;
			
			//++ 12.02.2018 Веденеев П. // добавление описания системы корабля
			ПозицияРазделителя = СтрНайти(ОписаниеИерархии, "/");
			МенеджерЗаписи.Система = ?(ПозицияРазделителя > 1, Лев(ОписаниеИерархии, ПозицияРазделителя - 1), ОписаниеИерархии);
			//-- 12.02.2018 Веденеев П. // добавление описания системы корабля
			
			МенеджерЗаписи.Записать(Не ПерваяЗапись);
		
		Иначе
		
			МенеджерЗаписи.Удалить();	
		
		КонецЕсли;	
	
	Исключение
		
		Результат.Описание = "Не удалось записать описание иерархии." + Символы.ПС + ОписаниеОшибки();
		Возврат Результат;
	
	КонецПопытки;
	
	// При необходимости скормим роботу элемент для формирования описаний иерархии его подчиненных элементов
	
	Если Не ПерваяЗапись И Не ПропуститьПроверкуПодчиненных Тогда
		
		//++ 2017090102 02.09.2017 Веденеев П. //отключить проверку наличия подчиненных при записи
	
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		//|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
		//|ИЗ
		//|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		//|ГДЕ
		//|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель";
		//
		//Запрос.УстановитьПараметр("Родитель", ЭлементСтруктуры);
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//Если Не РезультатЗапроса.Пустой() Тогда
		
			// Определим уровень вложенности элемента
			
			Уровень = 1;
			
			ПозицияСимвола = Найти(ОписаниеИерархии, "/");
			
			Пока ПозицияСимвола > 0 Цикл
			
				Уровень = Уровень + 1;
				
				ОписаниеИерархии = Прав(ОписаниеИерархии, СтрДлина(ОписаниеИерархии) - ПозицияСимвола);
				
				ПозицияСимвола = Найти(ОписаниеИерархии, "/");
			
			КонецЦикла;
			
			НаборЗаписей = РегистрыСведений.ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЭлементСтруктуры.Установить(ЭлементСтруктуры);
			НаборЗаписей.Прочитать();
			
			ЕстьЗаписи = НаборЗаписей.Количество() > 0;
			
			Если ЕстьЗаписи Тогда
				
				Если НаборЗаписей.Получить(0).Уровень = Уровень Тогда
				
					Результат.Выполнено = Истина;
					Возврат Результат;	
				
				КонецЕсли;
			
				НаборЗаписей.Очистить();		
			
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ЭлементСтруктуры = ЭлементСтруктуры;
			НоваяЗапись.Уровень = Уровень;
			
			Попытка
			
				НаборЗаписей.Записать(ЕстьЗаписи);	
			
			Исключение
				
				Результат.Описание = "Не удалось записать описание иерархии." + Символы.ПС + ОписаниеОшибки();
				Возврат Результат;	
			
			КонецПопытки;
		
		//КонецЕсли;
		
		//-- 2017090102 02.09.2017 Веденеев П. //отключить проверку наличия подчиненных при записи
	
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

//++ 2017090102 02.09.2017 Веденеев П. //удаление элементов без подчиненных из очереди обновления описаний иерархии
&НаСервере
Процедура УдалитьЭлементыБезПодчиненныхИзОчередиОбновленияОписанийИерархии()
	
	//++ 10.11.2017 Веденеев П //убрана блокировка, замена всего регистра заменена на построчное удаление, убрана попытка
	
	//НачатьТранзакцию();
	
	//заблокируем таблицу очереди на время удаления лишних элементов
	//Блокировка = Новый БлокировкаДанных;
	//ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии");
	//ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//Блокировка.Заблокировать();
	
	//ищем в очереди элементы с подчиненными и перезаписываем регистр, оставляя только их (быстрее, чем удалять лишние по одному)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.ЭлементСтруктуры КАК ЭлементСтруктуры
	|ИЗ
	|	РегистрСведений.ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии КАК ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОчередьМенеджер = РегистрыСведений.ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии;
	
	Пока Выборка.Следующий() Цикл
		
		ОчередьНаборЗаписей = ОчередьМенеджер.СоздатьНаборЗаписей();
		ОчередьНаборЗаписей.Отбор.ЭлементСтруктуры.Установить(Выборка.ЭлементСтруктуры);
		ОчередьНаборЗаписей.Записать();
		
	КонецЦикла;
	
//	НаборЗаписей = РегистрыСведений.ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.СоздатьНаборЗаписей();
//	НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
	
//	Попытка
		
//		НаборЗаписей.Записать();
		//ЗафиксироватьТранзакцию();
		
//	Исключение
		
		//ОтменитьТранзакцию();
//		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("Не удалось очистить очередь на изменение описаний иерархии "+Символы.ПС+ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Средний);
		
//	КонецПопытки;
	
КонецПроцедуры
//-- 2017090102 02.09.2017 Веденеев П. //удаление элементов без подчиненных из очереди обновления описаний иерархии

// Процедура предназначена для корректировки описания иерархии подчиненных элементов структуры заказа по комплектующим и ЗИП
//
Процедура КорректировкаОписанийИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП() Экспорт
	
	//++ 2017090102 02.09.2017 Веденеев П. //удаление элементов без подчиненных из очереди обновления описаний иерархии
	УдалитьЭлементыБезПодчиненныхИзОчередиОбновленияОписанийИерархии();
	//-- 2017090102 02.09.2017 Веденеев П. //удаление элементов без подчиненных из очереди обновления описаний иерархии

	Запрос = Новый Запрос; //++ 2017082201 22.08.2017 Веденеев П. //корректировка запроса для учета изменений корневых элементов (соединение в запросе изменено на левое)
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.ЭлементСтруктуры КАК ЭлементСтруктуры,
	|	ЕСТЬNULL(ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии, """") КАК ОписаниеИерархии
	|ИЗ
	|	РегистрСведений.ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии КАК ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|		ПО ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.ЭлементСтруктуры = ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.Уровень";

	Пока Истина Цикл // Ищем по одному, поскольку в процессе обработки могут быть удалены подчиненные подчиненных
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат;	
			
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		РезультатКорректировкиПодчиненныхЭлементов = СкорректироватьОписаниеИерархииПодчиненныхЭлементов(Выборка.ЭлементСтруктуры, Выборка.ОписаниеИерархии);
		
		Если Не РезультатКорректировкиПодчиненныхЭлементов.Выполнено Тогда
		
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("Не удалось скорректировать описание иерархии подчиненных элементов." + Символы.ПС + РезультатКорректировкиПодчиненныхЭлементов.Описание, Перечисления.ПриоритетыОшибок.Средний);
			Возврат;
		
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭлементСтруктуры = Выборка.ЭлементСтруктуры;
		МенеджерЗаписи.Удалить();
		
	КонецЦикла;	

КонецПроцедуры

// Функция предназначена для корректировки описания иерархии элементов структуры кораблей
// Параметры:
// ЭлементСтруктуры - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// ОписаниеИерархии - Строка
//
Функция СкорректироватьОписаниеИерархииПодчиненныхЭлементов(ЭлементСтруктуры, ОписаниеИерархии)
	
	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель";
	
	Запрос.УстановитьПараметр("Родитель", ЭлементСтруктуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		//++ 2017082201 22.08.2017 Веденеев П. //корректировка запроса для учета изменений корневых элементов
		ОписаниеРодительскихУровней = ?(ЗначениеЗаполнено(ОписаниеИерархии),ОписаниеИерархии + "/","");
		
		ТекущееОписаниеИерархии = ОписаниеРодительскихУровней + Строка(ЭлементСтруктуры);
		//-- 2017082201 22.08.2017 Веденеев П. //корректировка запроса для учета изменений корневых элементов
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Записываем новое описание иерархии
			
			РезультатЗаписиОписанияИерархии = ЗаписатьОписаниеИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП(Выборка.Ссылка, ТекущееОписаниеИерархии, Ложь, Истина); 
			
			Если Не РезультатЗаписиОписанияИерархии.Выполнено Тогда
			
				Результат.Описание = ТекущееОписаниеИерархии + Символы.ПС + ОписаниеОшибки();
				Возврат Результат;
			
			КонецЕсли;
			
			// При наличии элемента в очереди удаляем его из нее, чтобы не наткнуться на него снова
			
			НаборЗаписей = РегистрыСведений.ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЭлементСтруктуры.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
			
				НаборЗаписей.Очистить();
				
				Попытка
				
					НаборЗаписей.Записать(Истина);
				
				Исключение
					
					Результат.Описание = ТекущееОписаниеИерархии + Символы.ПС + ОписаниеОшибки();
					Возврат Результат;	
				
				КонецПопытки;
			
			КонецЕсли;
			
			// Продолжаем обработку
			
			РезультатКорректировкиПодчиненныхЭлементов = СкорректироватьОписаниеИерархииПодчиненныхЭлементов(Выборка.Ссылка, ТекущееОписаниеИерархии);
			
			Если Не РезультатКорректировкиПодчиненныхЭлементов.Выполнено Тогда
				
				Результат.Описание = РезультатКорректировкиПодчиненныхЭлементов.Описание;
				Возврат Результат;
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	
	
КонецФункции // СкорректироватьОписаниеИерархииПодчиненныхЭлементов()

// Функция предназначена получения данных для "схлопывания" количеств у элементов структуры кораблей после удаления дублей
// Параметры:
// ТаблицаЭлементовСтруктурыКораблей - ТаблицаЗначений
//
Функция ПолучитьДанныеДляСверткиЭлементовСтруктурыКораблей(ТаблицаЭлементовСтруктурыКораблей) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаЭлементовСтруктурыКораблей.Замененный КАК Замененный,
	|	ТаблицаЭлементовСтруктурыКораблей.Заменивший
	|ПОМЕСТИТЬ ВТ_ТаблицаЭлементовСтруктурыКораблей
	|ИЗ
	|	&ТаблицаЭлементовСтруктурыКораблей КАК ТаблицаЭлементовСтруктурыКораблей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Замененный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТаблицаЭлементовСтруктурыКораблей.Заменивший КАК Заменивший
	|ПОМЕСТИТЬ ВТ_Основные
	|ИЗ
	|	ВТ_ТаблицаЭлементовСтруктурыКораблей КАК ВТ_ТаблицаЭлементовСтруктурыКораблей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заменивший
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Основные.Заменивший КАК Заменивший,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ПОМЕСТИТЬ ВТ_КоличестваОсновных
	|ИЗ
	|	ВТ_Основные КАК ВТ_Основные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО ВТ_Основные.Заменивший = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заменивший,
	|	Количество,
	|	КоличествоВЗИПБорт,
	|	КоличествоВЗИПБаза,
	|	КоличествоВЗИПДЭ,
	|	КоличествоВЗИПР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заменивший КАК Заменивший,
	|	МАКСИМУМ(ВложенныйЗапрос.Количество) КАК Количество,
	|	МАКСИМУМ(ВложенныйЗапрос.КоличествоВЗИПБорт) КАК КоличествоВЗИПБорт,
	|	МАКСИМУМ(ВложенныйЗапрос.КоличествоВЗИПБаза) КАК КоличествоВЗИПБаза,
	|	МАКСИМУМ(ВложенныйЗапрос.КоличествоВЗИПДЭ) КАК КоличествоВЗИПДЭ,
	|	МАКСИМУМ(ВложенныйЗапрос.КоличествоВЗИПР) КАК КоличествоВЗИПР
	|ПОМЕСТИТЬ ВТ_Свертка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТаблицаЭлементовСтруктурыКораблей.Заменивший КАК Заменивший,
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|	ИЗ
	|		ВТ_ТаблицаЭлементовСтруктурыКораблей КАК ВТ_ТаблицаЭлементовСтруктурыКораблей
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|			ПО ВТ_ТаблицаЭлементовСтруктурыКораблей.Замененный = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_КоличестваОсновных.Заменивший,
	|		ВТ_КоличестваОсновных.Количество,
	|		ВТ_КоличестваОсновных.КоличествоВЗИПБорт,
	|		ВТ_КоличестваОсновных.КоличествоВЗИПБаза,
	|		ВТ_КоличестваОсновных.КоличествоВЗИПДЭ,
	|		ВТ_КоличестваОсновных.КоличествоВЗИПР
	|	ИЗ
	|		ВТ_КоличестваОсновных КАК ВТ_КоличестваОсновных) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Заменивший
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заменивший,
	|	Количество,
	|	КоличествоВЗИПБорт,
	|	КоличествоВЗИПБаза,
	|	КоличествоВЗИПДЭ,
	|	КоличествоВЗИПР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Свертка.Заменивший,
	|	ВТ_Свертка.Количество,
	|	ВТ_Свертка.КоличествоВЗИПБорт,
	|	ВТ_Свертка.КоличествоВЗИПБаза,
	|	ВТ_Свертка.КоличествоВЗИПДЭ,
	|	ВТ_Свертка.КоличествоВЗИПР
	|ИЗ
	|	ВТ_Свертка КАК ВТ_Свертка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличестваОсновных КАК ВТ_КоличестваОсновных
	|		ПО ВТ_Свертка.Заменивший = ВТ_КоличестваОсновных.Заменивший
	|			И ВТ_Свертка.Количество = ВТ_КоличестваОсновных.Количество
	|			И ВТ_Свертка.КоличествоВЗИПБорт = ВТ_КоличестваОсновных.КоличествоВЗИПБорт
	|			И ВТ_Свертка.КоличествоВЗИПБаза = ВТ_КоличестваОсновных.КоличествоВЗИПБаза
	|			И ВТ_Свертка.КоличествоВЗИПДЭ = ВТ_КоличестваОсновных.КоличествоВЗИПДЭ
	|			И ВТ_Свертка.КоличествоВЗИПР = ВТ_КоличестваОсновных.КоличествоВЗИПР
	|ГДЕ
	|	ВТ_КоличестваОсновных.Заменивший ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ТаблицаЭлементовСтруктурыКораблей", ТаблицаЭлементовСтруктурыКораблей);
	
	Возврат Запрос.Выполнить();	

КонецФункции // ПолучитьДанныеДляСверткиЭлементовСтруктурыКораблей()

// Функция предназначена для записи элемента структуры при изменении заведования в регистр, по данным которого в дальнейшем
// будет производиться заполнение заведования подчиненных.
// Параметры:
// ЭлементСтруктуры - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// Заведование - СправочникСсылка.БоевыеЧасти
//
Функция ЗаписатьЭлементСтруктурыДляЗаполненияЗаведованияПодчиненных(ЭлементСтруктуры, Заведование) Экспорт
	
	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	НаборЗаписей = РегистрыСведений.ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлементСтруктуры.Установить(ЭлементСтруктуры);
	НаборЗаписей.Прочитать();
	
	ЕстьЗапись = НаборЗаписей.Количество() > 0;
	
	Если ЕстьЗапись Тогда
	
		НаборЗаписей.Очистить();	
	
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ЭлементСтруктуры 	= ЭлементСтруктуры;
	НоваяЗапись.Заведование 		= Заведование;
	
	Попытка
	
		НаборЗаписей.Записать(ЕстьЗапись);	
	
	Исключение
		
		Результат.Описание = "Не удалось записать элемент структуры для заполнения заведования подчиненных." + Символы.ПС + ОписаниеОшибки();
		Возврат Результат;
	
	КонецПопытки;
	
	Результат.Выполнено = Истина;
	Возврат Результат;

КонецФункции // ЗаписатьЭлементСтруктурыДляЗаполненияЗаведованияПодчиненных()

// Процедура предназначена для заполнения заведований подчиненных элементов структуры кораблей, у которых оно не заполнено
//
Процедура ЗаполнениеЗаведованийПодчиненныхЭлементовСтруктурыКораблей() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных.ЭлементСтруктуры,
	|	ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных.Заведование
	|ИЗ
	|	РегистрСведений.ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных КАК ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		РезультатЗаполненияЗаведованияПодчиненных = ЗаполнитьЗаведованиеПодчиненных(Выборка.ЭлементСтруктуры, Выборка.Заведование);	
		
		Если РезультатЗаполненияЗаведованияПодчиненных.Выполнено Тогда
		
			РезультатУдаленияЗаписи = УдалитьЗаписьЭлементаСтруктурыКораблейИзОчередиДляОбновленияЗаведованияПодчиненных(Выборка.ЭлементСтруктуры);	
			
			Если Не РезультатУдаленияЗаписи.Выполнено Тогда
			
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнениеЗаведованийПодчиненныхЭлементовСтруктурыКораблей(). " + Строка(Выборка.ЭлементСтруктуры) + Символы.ПС + РезультатУдаленияЗаписи.Описание, Перечисления.ПриоритетыОшибок.Критический);
				Возврат;	
			
			КонецЕсли;
			
		Иначе
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("ЗаполнениеЗаведованийПодчиненныхЭлементовСтруктурыКораблей(). " + Строка(Выборка.ЭлементСтруктуры) + Символы.ПС + РезультатЗаполненияЗаведованияПодчиненных.Описание, Перечисления.ПриоритетыОшибок.Критический);
			Возврат;
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Функция предназначена для заполнения заведования на подчиненные элементы, у которых оно не заполнено.
// Параметры:
// ЭлементСтруктуры - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// Заведование - СправочникСсылка.БоевыеЧасти
//
Функция ЗаполнитьЗаведованиеПодчиненных(ЭлементСтруктуры, Заведование) 

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование = ЗНАЧЕНИЕ(Справочник.БоевыеЧасти.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Родитель", ЭлементСтруктуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Результат.Выполнено = Истина;
		Возврат Результат;	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ЭлементСтруктурыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭлементСтруктурыОбъект.Заведование = Заведование;
		ЭлементСтруктурыОбъект.ДополнительныеСвойства.Вставить("ОбновлениеЗаведования");
		
		Попытка
		
			ЭлементСтруктурыОбъект.Записать();	
		
		Исключение
			
			Результат.Описание = "Не удалось заполнить заведование подчиненных элементов." + Символы.ПС + ОписаниеОшибки();
			Возврат Результат;
		
		КонецПопытки;
		
		РезультатПродолжения = ЗаполнитьЗаведованиеПодчиненных(Выборка.Ссылка, Заведование);
		
		Если Не РезультатПродолжения.Выполнено Тогда
		
			Результат.Описание = РезультатПродолжения.Описание;
			Возврат Результат;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // ЗаполнитьЗаведованиеПодчиненных()

// Функция предназначена для удаления записи элемента структуры для заполнения заведования подчиненных.
// Параметры:
// ЭлементСтруктуры - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
//
Функция УдалитьЗаписьЭлементаСтруктурыКораблейИзОчередиДляОбновленияЗаведованияПодчиненных(ЭлементСтруктуры)

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	НаборЗаписей = РегистрыСведений.ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлементСтруктуры.Установить(ЭлементСтруктуры);
	
	Попытка
	
		НаборЗаписей.Записать(Истина);	
	
	Исключение
		
		Результат.Описание = "Не удалось удалить запись элемента структуры для заполнения заведования подчиненных." + Символы.ПС + ОписаниеОшибки();
		Возврат Результат;	
		
	КонецПопытки;
	
	Результат.Выполнено = Истина;
	Возврат Результат;	

КонецФункции // УдалитьЗаписьЭлементаСтруктурыКораблейИзОчередиДляОбновленияЗаведованияПодчиненных()

//++ 05.07.2018 Веденеев П. //процедура очистки служебного корабля от обработанных элементов
Процедура ОчиститьСтруктуруСлужебногоЗаказа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В
	|				(ВЫБРАТЬ
	|					СверткаДублейПредметовСнабженияВспомогательный.ЭлементСтруктурыДубликат КАК ЭлементСтруктурыДубликат
	|				ИЗ
	|					РегистрСведений.СверткаДублейПредметовСнабженияВспомогательный КАК СверткаДублейПредметовСнабженияВспомогательный)";
	Запрос.УстановитьПараметр("Владелец", Константы.СлужебныйЗаказ.Получить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УдалитьЭлементСтруктурыЗаказа(Выборка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры
//-- 05.07.2018 Веденеев П. //процедура очистки служебного корабля от обработанных элементов

//++ 2017072401 24.07.2017 Веденеев П. //регистрация изменения наличия/отсутствия подченных элементов у предыдущего и текущего родителей

//++ 15.11.2017 Веденеев П. //обновление наименований элементов структуры заказа
#Область ОбновлениеНаименованийЭлементовСтруктурЗаказов

//процедура предназначена для обновления наименований элементов структур заказов в соответствии с наименованиями их предметов снабжения
Процедура ОбновитьНаименованияЭлементовСтруктурЗаказов() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	ОчередьОбновленияНаименованийКомплектующихИзделийИЗИПСрезПоследних.ПредметСнабжения КАК ПредметСнабжения,
	|	КаталогПредметовСнабжения.Наименование КАК Наименование,
	|	ОчередьОбновленияНаименованийКомплектующихИзделийИЗИПСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	РегистрСведений.ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП.СрезПоследних КАК ОчередьОбновленияНаименованийКомплектующихИзделийИЗИПСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО ОчередьОбновленияНаименованийКомплектующихИзделийИЗИПСрезПоследних.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаименованиеИзменено,
	|	втПредметыСнабжения.Наименование КАК Наименование,
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Период КАК Период,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование КАК НаименованиеЭлементаСтруктуры
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО втПредметыСнабжения.ПредметСнабжения = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения
	|			И (НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа))
	|ИТОГИ
	|	МАКСИМУМ(НаименованиеИзменено),
	|	МАКСИМУМ(Период)
	|ПО
	|	ПредметСнабжения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ВыборкаПС = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПС.Следующий() Цикл
		
		Если Не ВыборкаПС.НаименованиеИзменено Тогда
			
			УдалитьЭлементИзОчередиИзмененияНаименований(ВыборкаПС.Период, ВыборкаПС.ПредметСнабжения);
			Продолжить;
			
		КонецЕсли;
		
		ИзменениеУспешно = Истина;
		
		Выборка = ВыборкаПС.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.Наименование = Выборка.НаименованиеЭлементаСтруктуры Тогда //сравнение в запросе невозможно в связи с необходимостью сравнивать строки в разных регистрах
				
				СтруктураЗаказаОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СтруктураЗаказаОбъект.Наименование = Выборка.Наименование;
				
				Попытка
					
					СтруктураЗаказаОбъект.Записать();
					
				Исключение
					
					ИзменениеУспешно = Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзменениеУспешно Тогда
			
			УдалитьЭлементИзОчередиИзмененияНаименований(ВыборкаПС.Период, ВыборкаПС.ПредметСнабжения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЭлементИзОчередиИзмененияНаименований(Период, ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП.Период КАК Период,
	|	ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП.ПредметСнабжения КАК ПредметСнабжения
	|ИЗ
	|	РегистрСведений.ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП КАК ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП
	|ГДЕ
	|	ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП.Период <= &Период
	|	И ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП.ПредметСнабжения = &ПредметСнабжения";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОчередьМенеджер = РегистрыСведений.ОчередьОбновленияНаименованийКомплектующихИзделийИЗИП;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОчередьМенеджерЗаписи = ОчередьМенеджер.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ОчередьМенеджерЗаписи, Выборка);
		ОчередьМенеджерЗаписи.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
//++ 15.11.2017 Веденеев П. //обновление наименований элементов структуры заказа

//процедура предназначена для регламентного обновления информации о наличии подчиненных элементов у элементов структуры заказа
Процедура ОбновитьИнформациюОНаличииПодчиненныхЭлементов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаРегистрацияРодителей.ЭлементСтруктурыЗаказа КАК ЭлементСтруктурыЗаказа,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные КАК ЕстьПодчиненныеСправочник
	|ПОМЕСТИТЬ втСтатусНаличияПодчиненныхВСправочнике
	|ИЗ
	|	РегистрСведений.СтруктураЗаказаРегистрацияРодителей КАК СтруктураЗаказаРегистрацияРодителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО СтруктураЗаказаРегистрацияРодителей.ЭлементСтруктурыЗаказа = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктурыЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втСтатусНаличияПодчиненныхВСправочнике.ЭлементСтруктурыЗаказа,
	|	втСтатусНаличияПодчиненныхВСправочнике.ЕстьПодчиненныеСправочник КАК ЕстьПодчиненныеСправочник,
	|	НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка ЕСТЬ NULL  КАК ЕстьПодчиненныеФакт
	|ПОМЕСТИТЬ втТекущийСтатусНаличияПодчиненных
	|ИЗ
	|	втСтатусНаличияПодчиненныхВСправочнике КАК втСтатусНаличияПодчиненныхВСправочнике
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО втСтатусНаличияПодчиненныхВСправочнике.ЭлементСтруктурыЗаказа = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
	|
	|СГРУППИРОВАТЬ ПО
	|	втСтатусНаличияПодчиненныхВСправочнике.ЭлементСтруктурыЗаказа,
	|	втСтатусНаличияПодчиненныхВСправочнике.ЕстьПодчиненныеСправочник,
	|	НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕстьПодчиненныеСправочник,
	|	ЕстьПодчиненныеФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТекущийСтатусНаличияПодчиненных.ЭлементСтруктурыЗаказа,
	|	втТекущийСтатусНаличияПодчиненных.ЕстьПодчиненныеФакт КАК ЕстьПодчиненные,
	|	ВЫБОР
	|		КОГДА втТекущийСтатусНаличияПодчиненных.ЕстьПодчиненныеСправочник = втТекущийСтатусНаличияПодчиненных.ЕстьПодчиненныеФакт
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИзменитьСтатус
	|ИЗ
	|	втТекущийСтатусНаличияПодчиненных КАК втТекущийСтатусНаличияПодчиненных";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураЗаказаРегистрацияРодителейНаборЗаписей = РегистрыСведений.СтруктураЗаказаРегистрацияРодителей.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			Если Выборка.ИзменитьСтатус Тогда
				СтруктураЗаказаОбъект = Выборка.ЭлементСтруктурыЗаказа.ПолучитьОбъект();
				СтруктураЗаказаОбъект.ЕстьПодчиненные = Выборка.ЕстьПодчиненные;
				СтруктураЗаказаОбъект.Записать();
			КонецЕсли;
			СтруктураЗаказаРегистрацияРодителейНаборЗаписей.Отбор.ЭлементСтруктурыЗаказа.Установить(Выборка.ЭлементСтруктурыЗаказа);
			СтруктураЗаказаРегистрацияРодителейНаборЗаписей.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
			
КонецПроцедуры

//-- 2017072401 24.07.2017 Веденеев П. //регистрация изменения наличия/отсутствия подченных элементов у предыдущего и текущего родителей

#КонецОбласти

#Область РедактированиеСтруктурыКораблей

// Процедура предназначена для копирования элементов структуры одного корабля в структуру другого
// Параметры:
// МассивСсылокИсточников - Массив
// СсылкаПриемник - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// СсылкаВладелец - СправочникСсылка.Заказы
// АдресВременногоХранилища - Строка
//
Процедура СкопироватьЭлементыСтруктуры(МассивСсылокИсточников, ВладелецИсточников, СсылкаПриемник, СсылкаВладелец, АдресВременногоХранилища) Экспорт

	ЧислоКопируемыхЭлементов = 0;
	
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
	
		ЧислоКопируемыхЭлементов = ЧислоКопируемыхЭлементов + ОценитьЧислоРедактируемыхЭлементов(СсылкаИсточник,ВладелецИсточников);	
	
	КонецЦикла;
	
	//ВыполнятьВТранзакции = ЧислоКопируемыхЭлементов < 100000;
	//++ 04.07.2018 Веденеев П. //возвращение копирования ветки и транзакции
	ВыполнятьВТранзакции = Истина;//Ложь;
	ТекстСообщения = "";
	//-- 04.07.2018 Веденеев П. //возвращение копирования ветки и транзакции
	
	ЧислоСкопированныхЭлементов = 0;
	
	//++ 24.10.2017 Веденеев П. //изменение спецификации
	ТипГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	
	ПредметСнабжения = СсылкаПриемник.ПредметСнабжения;
	ЕстьПредметСнабжения = ЗначениеЗаполнено(ПредметСнабжения) И Не СсылкаПриемник.Тип = ТипГруппа;
	//-- 24.10.2017 Веденеев П. //изменение спецификации
	
	Если ВыполнятьВТранзакции Тогда
	
		НачатьТранзакцию();
		
		//++ 04.07.2018 Веденеев П. //устанавливаем блокировку во избежание пересечения с регламентным заданием
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировкиДанныхСтруктураЗаказаИсточник = БлокировкаДанных.Добавить("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
		ЭлементБлокировкиДанныхСтруктураЗаказаИсточник.ИсточникДанных = ПолучитьИсточникДанныхДляБлокировкиПриКопировании(СсылкаПриемник, МассивСсылокИсточников);
		ЭлементБлокировкиДанныхСтруктураЗаказаИсточник.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		Если ЕстьПредметСнабжения Тогда
			
			ЭлементБлокировкиДанныхСпецификация = БлокировкаДанных.Добавить("РегистрСведений.СпецификацииПредметовСнабжения");
			ЭлементБлокировкиДанныхСпецификация.УстановитьЗначение("ПредметСнабжения", ПредметСнабжения);
			
		КонецЕсли;
		
		Попытка
			
			БлокировкаДанных.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = "Один из обрабатываемых объектов заблокирован другим процессом. Попробуйте повторить попытку позже";
			Перейти ~Конец;
			
		КонецПопытки;
		//-- 04.07.2018 Веденеев П. //устанавливаем блокировку во избежание пересечения с регламентным заданием
	
	КонецЕсли;
		
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
	
		РезультатКопирования = СкопироватьЭлементСтруктуры(СсылкаИсточник, ВладелецИсточников, СсылкаПриемник, СсылкаВладелец, ЧислоКопируемыхЭлементов, ЧислоСкопированныхЭлементов);
		
		Если Не РезультатКопирования.Выполнено Тогда
			
			Если ВыполнятьВТранзакции Тогда
				
				ОтменитьТранзакцию();	
				
			КонецЕсли;
			
			Перейти ~Конец;
		
		КонецЕсли;
		
		//++ 24.10.2017 Веденеев П. //изменение спецификации
		СоставляющаяЧасть = СсылкаИсточник.ПредметСнабжения;
		
		Если ЕстьПредметСнабжения И ЗначениеЗаполнено(СоставляющаяЧасть) И Не СсылкаИсточник.Тип = ТипГруппа Тогда
			
			РезультатКопирования = ОбработатьИзменениеСпецификации(ПредметСнабжения, СоставляющаяЧасть, СсылкаИсточник.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Добавление);
			
			Если Не РезультатКопирования.Выполнено Тогда
				
				Если ВыполнятьВТранзакции Тогда
					
					ОтменитьТранзакцию();	
					
				КонецЕсли;
				
				Перейти ~Конец;
				
			КонецЕсли;
			
		КонецЕсли;
		//-- 24.10.2017 Веденеев П. //изменение спецификации
	
	КонецЦикла;
	
	Если ВыполнятьВТранзакции Тогда
	
		ЗафиксироватьТранзакцию();	
	
	КонецЕсли;
	
	~Конец:
	
	Если ТекстСообщения = "" Тогда
	
		ТекстСообщения = "100," + ?(ЧислоСкопированныхЭлементов > 0, "Число скопированных элементов - " + Формат(ЧислоСкопированныхЭлементов, "ЧГ=") + ". ", "");
		
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
	ПоместитьВоВременноеХранилище(РезультатКопирования, АдресВременногоХранилища);	

КонецПроцедуры // СкопироватьЭлементыСтруктуры()

//++ 04.07.2018 Веденеев П. //получем все элементы блокируемых при копировании веток
Функция ПолучитьИсточникДанныхДляБлокировкиПриКопировании(СсылкаПриемник, МассивСсылокИсточников)
	
	МассивСсылок = Новый Массив;
	
	Если ЗначениеЗаполнено(СсылкаПриемник) Тогда
		
		МассивСсылок.Добавить(СсылкаПриемник);
		
	КонецЕсли;
	
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
		
		МассивСсылок.Добавить(СсылкаИсточник);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&Ссылки)";
	Запрос.УстановитьПараметр("Ссылки", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции
//-- 04.07.2018 Веденеев П. //получем все элементы блокируемых при копировании вет

// Функция предназначена для оценки числа редактируемых элементов
// Параметры:
// РедактируемыйЭлемент - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
//
Функция ОценитьЧислоРедактируемыхЭлементов(РедактируемыйЭлемент,РедактируемыйЭлементВладелец = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ Истина
	|	";
	
	Если ЗначениеЗаполнено(РедактируемыйЭлемент) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&Ссылка)";
		Запрос.УстановитьПараметр("Ссылка", РедактируемыйЭлемент);
		
	КонецЕсли; 
	
	Если НЕ РедактируемыйЭлементВладелец = Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", РедактируемыйЭлементВладелец);
		
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;	

КонецФункции // ОценитьЧислоРедактируемыхЭлементов()

// Функция предназначена для выполнения шага копирования элементов структуры одного корабля в структуру другого
// Параметры: 
// КопируемыйЭлемент - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// Родитель - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП 
// Владелец - СправочникСсылка.Заказы
// ЧислоКопируемыхЭлементов - Число
// ЧислоСкопированныхЭлементов - Число
// ЧислоСкопированныхЭлементовПред - Число
//
Функция СкопироватьЭлементСтруктуры(КопируемыйЭлемент, КопируемыйЭлементВладелец, Родитель, Владелец, ЧислоКопируемыхЭлементов, ЧислоСкопированныхЭлементов, ЧислоСкопированныхЭлементовПред = 0)

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	Если ЗначениеЗаполнено(КопируемыйЭлемент) Тогда
		
		//НовыйЭлемент = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		//ЗаполнитьЗначенияСвойств(НовыйЭлемент, КопируемыйЭлемент,, "Ссылка,Родитель,Владелец,Заведование,Код,UID");
		
		НовыйЭлемент = КопируемыйЭлемент.Скопировать();
		НовыйЭлемент.Владелец = Владелец;
		
		НовыйЭлемент.Родитель = Родитель; //++ 18.10.2017 Веденеев П. - устранение ошибки с добавлением в корень
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			
			НовыйЭлемент.Заведование 	= ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Родитель, "Заведование");
			
		КонецЕсли;
		
		Попытка
			
			НовыйЭлемент.Записать();
			
		Исключение
			
			Результат.Описание = "Не удалось скопировать элемент " + Строка(КопируемыйЭлемент) + Символы.ПС + ОписаниеОшибки();
			Перейти ~Конец;
			
		КонецПопытки;
		
		ТипГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
		
		//++ 04.07.2018 Веденеев П. //добавление самого элемента в очередь отключается, изменение спецификации родителя в очередь наличествует в головной процедуре
		//Если ЗначениеЗаполнено(НовыйЭлемент.ПредметСнабжения) И Не НовыйЭлемент.Тип = ТипГруппа Тогда
		//	
		//	Если Не НовыйЭлемент.ЗИП Тогда
		//		
		//		СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
		//		СпецификацииОчередьИзменений.Период = ТекущаяДата();
		//		СпецификацииОчередьИзменений.ПредметСнабжения = НовыйЭлемент.ПредметСнабжения;
		//		СпецификацииОчередьИзменений.Записать();
		//		
		//	КонецЕсли;
		//	
		//	Если ЗначениеЗаполнено(НовыйЭлемент.Родитель.ПредметСнабжения) 
		//		И Не НовыйЭлемент.Родитель.Тип = ТипГруппа Тогда
		//		
		//		ОбработатьИзменениеСпецификации(НовыйЭлемент.Родитель.ПредметСнабжения, НовыйЭлемент.ПредметСнабжения, НовыйЭлемент.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Добавление);
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		//-- 04.07.2018 Веденеев П. //добавление самого элемента в очередь отключается, изменение спецификации родителя в очередь наличествует в головной процедуре
		
		СсылкаНовогоЭлемента = НовыйЭлемент.Ссылка;
		
		Если НовыйЭлемент.Тип = ТипГруппа Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&НовыйЭлемент КАК Владелец,
			|	""Наименование"" КАК Язык,
			|	ДополнительныеНаименования.Язык,
			|	ДополнительныеНаименования.Перевод
			|ИЗ
			|	РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
			|ГДЕ
			|	ДополнительныеНаименования.Владелец = &КопируемыйЭлемент
			|	И ДополнительныеНаименования.ИмяРеквизита = ""Наименование""";
			
			Запрос.УстановитьПараметр("НовыйЭлемент", СсылкаНовогоЭлемента);
			Запрос.УстановитьПараметр("КопируемыйЭлемент", КопируемыйЭлемент);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				НаборЗаписей = РегистрыСведений.ДополнительныеНаименования.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Владелец.Установить(СсылкаНовогоЭлемента);
				
				НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
				
				Попытка
					
					НаборЗаписей.Записать(Ложь);	
					
				Исключение
					
					Результат.Описание = "Не удалось скопировать переводы элемента " + Строка(КопируемыйЭлемент) + Символы.ПС + ОписаниеОшибки();
					Перейти ~Конец;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЧислоСкопированныхЭлементов = ЧислоСкопированныхЭлементов + 1;
		
		Если ЧислоСкопированныхЭлементов < ЧислоКопируемыхЭлементов И ЧислоСкопированныхЭлементов - ЧислоСкопированныхЭлементовПред >= ЧислоКопируемыхЭлементов / 100 Тогда
			
			Прогресс = Окр(ЧислоСкопированныхЭлементов / ЧислоКопируемыхЭлементов * 100);
			
			ТекстСообщения = Строка(Прогресс) + "," + ?(ЧислоСкопированныхЭлементов > 0, "Число скопированных элементов - " + Формат(ЧислоСкопированныхЭлементов, "ЧГ=") + ". ", "");
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
			ЧислоСкопированныхЭлементовПред = ЧислоСкопированныхЭлементов;	
			
		КонецЕсли;
		
	Иначе	
		
		//Такое возможно когда выбирается все дерево целиком, тогда копируемый элемент будет пустой и копировать его не надо.
		СсылкаНовогоЭлемента = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
		
	КонецЕсли; 

	//++ 04.07.2018 Веденеев П. //возвращаем рекурсивное копирование всего дерева
	//Если НовыйЭлемент.Тип = ТипГруппа Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель 
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Родитель", КопируемыйЭлемент);
		Запрос.УстановитьПараметр("Владелец", КопируемыйЭлементВладелец);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				РезультатПродолжения = СкопироватьЭлементСтруктуры(Выборка.Ссылка, КопируемыйЭлементВладелец, СсылкаНовогоЭлемента, Владелец, ЧислоКопируемыхЭлементов, ЧислоСкопированныхЭлементов, ЧислоСкопированныхЭлементовПред);
				
				Если Не РезультатПродолжения.Выполнено Тогда
					
					Результат = РезультатПродолжения;	
					Перейти ~Конец;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	//КонецЕсли;
	//-- 04.07.2018 Веденеев П. //возвращаем рекурсивное копирование всего дерева
	
	Результат.Выполнено = Истина;
	
	~Конец:
		
	Возврат Результат;	

КонецФункции // СкопироватьЭлементСтруктуры()

// Функция предназначена для переноса элементов структуры одного корабля
// Параметры:
// МассивСсылокИсточников - Массив
// СсылкаПриемник - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
//
Функция ПеренестиЭлементыСтруктуры(МассивСсылокИсточников, СсылкаПриемник) Экспорт

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	ЧислоКопируемыхЭлементов = 0;
	
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
	
		ЧислоКопируемыхЭлементов = ЧислоКопируемыхЭлементов + ОценитьЧислоРедактируемыхЭлементов(СсылкаИсточник);	
	
	КонецЦикла;
	
	Результат.Вставить("ЧислоПереносимыхЭлементов", ЧислоКопируемыхЭлементов);
	
	//НачатьТранзакцию();
	
	//++ 24.10.2017 Веденеев П. //изменение спецификации
	ТипГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	
	ПредметСнабжения = СсылкаПриемник.ПредметСнабжения;
	ЕстьПредметСнабжения = ЗначениеЗаполнено(ПредметСнабжения) И Не СсылкаПриемник.Тип = ТипГруппа;
	//-- 24.10.2017 Веденеев П. //изменение спецификации
	
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
		
		//++ 24.10.2017 Веденеев П. //изменение спецификации
		ПредметСнабженияИсточник = СсылкаИсточник.Родитель.ПредметСнабжения;
		ЕстьПредметСнабженияИсточник = ЗначениеЗаполнено(ПредметСнабженияИсточник) И Не СсылкаИсточник.Родитель.Тип = ТипГруппа;
		//-- 24.10.2017 Веденеев П. //изменение спецификации
		
		ПереносимыйЭлементОбъект = СсылкаИсточник.ПолучитьОбъект();
		ПереносимыйЭлементОбъект.Родитель = СсылкаПриемник;
		
		Попытка
			
			ПереносимыйЭлементОбъект.Записать();
			
		Исключение
			
			//ОтменитьТранзакцию();
			Результат.Описание = "Не удалось перенести элемент " + Строка(СсылкаИсточник) + Символы.ПС + ОписаниеОшибки();
			Перейти ~Конец;
			
		КонецПопытки;
		
		//++ 24.10.2017 Веденеев П. //изменение спецификации
		СоставляющаяЧасть = СсылкаИсточник.ПредметСнабжения;
		
		Если ЗначениеЗаполнено(СоставляющаяЧасть) И Не СсылкаИсточник.Тип = ТипГруппа Тогда
			
			Если ЕстьПредметСнабжения Тогда //добавление в спецификацию приемника
				
				РезультатПереноса = ОбработатьИзменениеСпецификации(ПредметСнабжения, СоставляющаяЧасть, СсылкаИсточник.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Добавление);
				
				Если Не РезультатПереноса.Выполнено Тогда
					
					//ОтменитьТранзакцию();
					Результат.Описание = "Не удалось перенести элемент " + Строка(СсылкаИсточник) + Символы.ПС + РезультатПереноса.Описание;
					Перейти ~Конец;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьПредметСнабженияИсточник Тогда //удаление из спецификации родителя источника
				
				РезультатПереноса = ОбработатьИзменениеСпецификации(ПредметСнабженияИсточник, СоставляющаяЧасть, СсылкаИсточник.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление);
				
				Если Не РезультатПереноса.Выполнено Тогда
					
					//ОтменитьТранзакцию();
					Результат.Описание = "Не удалось перенести элемент " + Строка(СсылкаИсточник) + Символы.ПС + РезультатПереноса.Описание;
					Перейти ~Конец;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		//-- 24.10.2017 Веденеев П. //изменение спецификации
		
	КонецЦикла;
	
	//ЗафиксироватьТранзакцию();
	
	Результат.Выполнено = Истина;
	
	~Конец:
	
	Возврат Результат;	

КонецФункции // ПеренестиЭлементыСтруктуры()

Функция СкопироватьРеквизиты(ОригиналОбъект,РеквизитыОригинала,РеквизитыДубликата)
	
	РеквизитыИзменены = Ложь;
	
	Если Не ЗначениеЗаполнено(РеквизитыОригинала.Количество) И ЗначениеЗаполнено(РеквизитыДубликата.Количество) Тогда
		
		ОригиналОбъект.Количество = РеквизитыДубликата.Количество;
		РеквизитыИзменены = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыОригинала.КоличествоВЗИПБорт) И ЗначениеЗаполнено(РеквизитыДубликата.КоличествоВЗИПБорт) Тогда
		
		ОригиналОбъект.КоличествоВЗИПБорт = РеквизитыДубликата.КоличествоВЗИПБорт;
		РеквизитыИзменены = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыОригинала.КоличествоВЗИПБаза) И ЗначениеЗаполнено(РеквизитыДубликата.КоличествоВЗИПБаза) Тогда
		
		ОригиналОбъект.КоличествоВЗИПБаза = РеквизитыДубликата.КоличествоВЗИПБаза;
		РеквизитыИзменены = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыОригинала.КоличествоВЗИПДЭ) И ЗначениеЗаполнено(РеквизитыДубликата.КоличествоВЗИПДЭ) Тогда
		
		ОригиналОбъект.КоличествоВЗИПДЭ = РеквизитыДубликата.КоличествоВЗИПДЭ;
		РеквизитыИзменены = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыОригинала.КоличествоВЗИПР) И ЗначениеЗаполнено(РеквизитыДубликата.КоличествоВЗИПР) Тогда
		
		ОригиналОбъект.КоличествоВЗИПР = РеквизитыДубликата.КоличествоВЗИПР;
		РеквизитыИзменены = Истина;
		
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

// Процедура предназначена для объединения элементов структуры одного корабля
// Параметры:
// МассивСсылокИсточников - Массив
// СсылкаПриемник - СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
// АдресВременногоХранилища - Строка
//
Процедура ОбъединитьЭлементыСтруктуры(МассивСсылокИсточников, СсылкаПриемник, АдресВременногоХранилища) Экспорт
		
	Оригинал = СсылкаПриемник;

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	ЧислоКопируемыхЭлементов = 0;
	
	Для каждого Дубликат Из МассивСсылокИсточников Цикл
	
		ЧислоКопируемыхЭлементов = ЧислоКопируемыхЭлементов + ОценитьЧислоРедактируемыхЭлементов(Дубликат);	
	
	КонецЦикла;
	
	ЧислоСкопированныхЭлементов = 0;
	ЧислоСкопированныхЭлементовПред = 0;
	
	//НачатьТранзакцию();     
	
	//++ 24.10.2017 Веденеев П. //изменение спецификации
	ТипГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	
	ПредметСнабжения = Оригинал.ПредметСнабжения;
	ЕстьПредметСнабжения = ЗначениеЗаполнено(ПредметСнабжения) И Не Оригинал.Тип = ТипГруппа;
	//-- 24.10.2017 Веденеев П. //изменение спецификации
	
	Для каждого Дубликат Из МассивСсылокИсточников Цикл
		
		// 1. Заполнение реквизитов оригинала.
		
		РеквизитыОригинала = ОбщиеФункцииСервер.ПолучитьЗначенияРеквизитов(Оригинал, "Количество,КоличествоВЗИПБорт,КоличествоВЗИПБаза,КоличествоВЗИПДЭ,КоличествоВЗИПР");
		
		Если Не ЗначениеЗаполнено(РеквизитыОригинала.Количество) Или 
			Не ЗначениеЗаполнено(РеквизитыОригинала.КоличествоВЗИПБорт) Или 
			Не ЗначениеЗаполнено(РеквизитыОригинала.КоличествоВЗИПБаза) Или 
			Не ЗначениеЗаполнено(РеквизитыОригинала.КоличествоВЗИПДЭ) Или 
			Не ЗначениеЗаполнено(РеквизитыОригинала.КоличествоВЗИПР) Тогда
			
			РеквизитыДубликата = ОбщиеФункцииСервер.ПолучитьЗначенияРеквизитов(Дубликат, "Количество,КоличествоВЗИПБорт,КоличествоВЗИПБаза,КоличествоВЗИПДЭ,КоличествоВЗИПР");
			
			ОригиналОбъект = Оригинал.ПолучитьОбъект();
			
			РеквизитыИзменены = СкопироватьРеквизиты(ОригиналОбъект,РеквизитыОригинала,РеквизитыДубликата);
			
			Если РеквизитыИзменены Тогда
				
				Попытка
					
					ОригиналОбъект.Записать();
					
				Исключение
					
					//ОтменитьТранзакцию();
					Результат.Описание = "Не удалось объединить элементы " + Строка(Дубликат) + " и " + Строка(Оригинал) + Символы.ПС + ОписаниеОшибки();
					Перейти ~Конец;					
					
				КонецПопытки;
				
				ЧислоСкопированныхЭлементов = 1;
				
				Если ЧислоСкопированныхЭлементов < ЧислоКопируемыхЭлементов И ЧислоСкопированныхЭлементов - ЧислоСкопированныхЭлементовПред >= ЧислоКопируемыхЭлементов / 100 Тогда
					
					Прогресс = Цел(ЧислоСкопированныхЭлементов / ЧислоКопируемыхЭлементов * 100); // Базунов Окр -> Цел
					
					ТекстСообщения = Строка(Прогресс) + "," + ?(ЧислоСкопированныхЭлементов > 0, "Число скопированных элементов - " + Формат(ЧислоСкопированныхЭлементов, "ЧГ=") + ". ", "");
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщения;
					Сообщение.Сообщить();
					
					ЧислоСкопированныхЭлементовПред = ЧислоСкопированныхЭлементов;	
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//++ 08.11.2017 Тычина Р.В. //Копирование реквизитов подчиненных элоементов
		
		ЗапросПоПодчиненным = Новый Запрос;
		ЗапросПоПодчиненным.Текст = "ВЫБРАТЬ
		|	ЭлементыОригинала.Ссылка КАК ОригиналСЧ,
		|	ЭлементыДубликата.Ссылка КАК ДубликатСЧ
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК ЭлементыОригинала
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК ЭлементыДубликата
		|		ПО ЭлементыОригинала.ПредметСнабжения = ЭлементыДубликата.ПредметСнабжения
		|			И (ЭлементыОригинала.Количество <> ЭлементыДубликата.Количество
		|			ИЛИ ЭлементыОригинала.КоличествоВЗИПБорт <> ЭлементыДубликата.КоличествоВЗИПБорт
		|			ИЛИ ЭлементыОригинала.КоличествоВЗИПБаза <> ЭлементыДубликата.КоличествоВЗИПБаза
		|			ИЛИ ЭлементыОригинала.КоличествоВЗИПДЭ <> ЭлементыДубликата.КоличествоВЗИПДЭ
		|			ИЛИ ЭлементыОригинала.КоличествоВЗИПР <> ЭлементыДубликата.КоличествоВЗИПР)
		|ГДЕ
		|	ЭлементыДубликата.Родитель = &Дубликат
		|	И ЭлементыОригинала.Родитель = &Оригинал";
		
		ЗапросПоПодчиненным.УстановитьПараметр("Оригинал",Оригинал);
		ЗапросПоПодчиненным.УстановитьПараметр("Дубликат",Дубликат);
		
		ВыборкаПоПодчиненным = ЗапросПоПодчиненным.Выполнить().Выбрать();
		
		Пока ВыборкаПоПодчиненным.Следующий() Цикл
			
			РеквизитыОригиналаСЧ = ОбщиеФункцииСервер.ПолучитьЗначенияРеквизитов(ВыборкаПоПодчиненным.ОригиналСЧ, "Количество,КоличествоВЗИПБорт,КоличествоВЗИПБаза,КоличествоВЗИПДЭ,КоличествоВЗИПР");
			
			РеквизитыДубликатаСЧ = ОбщиеФункцииСервер.ПолучитьЗначенияРеквизитов(ВыборкаПоПодчиненным.ДубликатСЧ, "Количество,КоличествоВЗИПБорт,КоличествоВЗИПБаза,КоличествоВЗИПДЭ,КоличествоВЗИПР");
			ОригиналСЧОбъект = ВыборкаПоПодчиненным.ОригиналСЧ.ПолучитьОбъект();
			
			РеквизитыСЧИзменены = СкопироватьРеквизиты(ОригиналСЧОбъект,РеквизитыОригиналаСЧ,РеквизитыДубликатаСЧ);
			
			Если РеквизитыСЧИзменены Тогда
				
				Попытка
					
					ОригиналСЧОбъект.Записать();
					
				Исключение
					
					//ОтменитьТранзакцию();
					Результат.Описание = "Не удалось объединить составные части " + Строка(ВыборкаПоПодчиненным.ДубликатСЧ) + " и " + Строка(ВыборкаПоПодчиненным.ОригиналСЧ) + Символы.ПС + ОписаниеОшибки();
					Перейти ~Конец;					
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		//-- 08.11.2017 Тычина Р.В. //Копирование реквизитов подчиненных элоементов
		
		//22.11.2018 Начало
		
		// 2. Перенос ближайших подчиненных.
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
		//|ИЗ
		//|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		//|ГДЕ
		//|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель";
		//
		//Запрос.УстановитьПараметр("Родитель", Дубликат);
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//Если Не РезультатЗапроса.Пустой() Тогда
		//	
		//	Выборка = РезультатЗапроса.Выбрать();
		//	
		//	Пока Выборка.Следующий() Цикл
		//		
		//		//++ 24.10.2017 Веденеев П. //изменение спецификации
		//		
		//		СоставляющаяЧасть = Выборка.Ссылка.ПредметСнабжения;
		//		
		//		Если ЕстьПредметСнабжения И ЗначениеЗаполнено(СоставляющаяЧасть) И Не Выборка.Ссылка.Тип = ТипГруппа Тогда
		//			
		//			РезультатУдаленияДубликата = ОбработатьИзменениеСпецификации(ПредметСнабжения, СоставляющаяЧасть, Выборка.Ссылка.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Добавление);
		//			
		//			Если Не РезультатУдаленияДубликата.Выполнено Тогда
		//				
		//				//ОтменитьТранзакцию();
		//				Результат.Описание = РезультатУдаленияДубликата.Описание;
		//				Перейти ~Конец;
		//				
		//			КонецЕсли;
		//			
		//		Иначе
		//			
		//			ЭлементСтруктуры = Выборка.Ссылка.ПолучитьОбъект();
		//			ЭлементСтруктуры.Родитель = Оригинал;
		//			ЭлементСтруктуры.Владелец = Оригинал.Владелец; //++ 18.10.2017 Веденеев П. //устранение бага с разными владельцами
		//			
		//			Попытка
		//				
		//				ЭлементСтруктуры.Записать();	
		//				
		//			Исключение
		//				
		//				//ОтменитьТранзакцию();
		//				Результат.Описание = "Не удалось перенести подчиненные элементы дубликата " + Строка(Дубликат) + Символы.ПС + ОписаниеОшибки();
		//				Перейти ~Конец;
		//				
		//			КонецПопытки;
		//			
		//		КонецЕсли;
		//		
		//		//-- 24.10.2017 Веденеев П. //изменение спецификации
		//		
		//		ЧислоСкопированныхЭлементов = ЧислоСкопированныхЭлементов + ОценитьЧислоРедактируемыхЭлементов(Выборка.Ссылка); 
		//		
		//		Если ЧислоСкопированныхЭлементов < ЧислоКопируемыхЭлементов И ЧислоСкопированныхЭлементов - ЧислоСкопированныхЭлементовПред >= ЧислоКопируемыхЭлементов / 100 Тогда
		//			
		//			Прогресс = Цел(ЧислоСкопированныхЭлементов / ЧислоКопируемыхЭлементов * 100); // Базунов Окр -> Цел
		//			
		//			ТекстСообщения = Строка(Прогресс) + "," + ?(ЧислоСкопированныхЭлементов > 0, "Число скопированных элементов - " + Формат(ЧислоСкопированныхЭлементов, "ЧГ=") + ". ", "");
		//			
		//			Сообщение = Новый СообщениеПользователю;
		//			Сообщение.Текст = ТекстСообщения;
		//			Сообщение.Сообщить();
		//			
		//			ЧислоСкопированныхЭлементовПред = ЧислоСкопированныхЭлементов;	
		//			
		//		КонецЕсли;
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		//22.11.2018 Конец
		
		//++ 24.10.2017 Веденеев П. //изменение спецификации
		РодительДубликата = Дубликат.Родитель;
		ПредметСнабженияРодителя = РодительДубликата.ПредметСнабжения;
		ПредметСнабженияДубликата = Дубликат.ПредметСнабжения;
		
		Если ЗначениеЗаполнено(ПредметСнабженияРодителя) И Не РодительДубликата.Тип = ТипГруппа 
			И ЗначениеЗаполнено(ПредметСнабженияДубликата) И Не Дубликат.Тип = ТипГруппа
			И Не Оригинал.Родитель.ПредметСнабжения = ПредметСнабженияРодителя Тогда
			
			РезультатУдаленияДубликата = ОбработатьИзменениеСпецификации(ПредметСнабженияРодителя, ПредметСнабженияДубликата, Дубликат.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление);
			
			Если Не РезультатУдаленияДубликата.Выполнено Тогда
				
				//ОтменитьТранзакцию();
				Результат.Описание = РезультатУдаленияДубликата.Описание;
				Перейти ~Конец;
				
			КонецЕсли;
			
		КонецЕсли;
				
		//-- 24.10.2017 Веденеев П. //изменение спецификации
		
		// 3. Удаление дубликата (Веденеев П. 29.09.2017 - неопсредственное удаление элемента вместо установки пометки)
		
		РодительОригинала = Оригинал.Родитель;
		ПредметСнабженияРодителяОригинала = РодительОригинала.ПредметСнабжения;
		
		//Нельзя удалять дубликат в случае:
		//1. элементы входят в одно изделие, иначе будет удален из самого себя;
		//2. оригинал и дубликат это один и тот же элемент.
		//Можно удалять если родитель дубликата - группа 
		
		Если 
		//1. элементы входят в одно изделие, иначе будет удален из самого себя:
		(ЗначениеЗаполнено(ПредметСнабженияРодителя) И Не РодительДубликата.Тип = ТипГруппа 
		И ЗначениеЗаполнено(ПредметСнабженияРодителяОригинала) И Не РодительОригинала.Тип = ТипГруппа
		И Не ПредметСнабженияРодителяОригинала = ПредметСнабженияРодителя
		
		//2. оригинал и дубликат это один и тот же элемент, иначе будет удален он сам:
		И НЕ Оригинал = Дубликат 
		//И ЗначениеЗаполнено(ПредметСнабжения) И Не Дубликат.Тип = ТипГруппа 
		//И ЗначениеЗаполнено(ПредметСнабженияДубликата) И Не Оригинал.Тип = ТипГруппа
		//И Не ПредметСнабжения = ПредметСнабженияДубликата
		
		//Можно удалять если родитель дубликата - группа или корень:
		ИЛИ (РодительДубликата.Тип = ТипГруппа Или РодительДубликата.Пустая()) //++ 20.11.2017 Веденеев П. //добавлено удаление из корня 
		
		// ++ 26.07.2018 10:43:48 Базунов Д.А. Задача:
		// Удаление элементов структуры с одинаковым ПС
		) ИЛИ
		(
			ЗначениеЗаполнено(ПредметСнабженияРодителя) И Не РодительДубликата.Тип = ТипГруппа 
			И ЗначениеЗаполнено(ПредметСнабженияРодителяОригинала) И Не РодительОригинала.Тип = ТипГруппа
			И ПредметСнабженияРодителяОригинала = ПредметСнабженияРодителя // один родитель
			И НЕ Оригинал = Дубликат 									   // разные элементы структуры
			И Оригинал.ЗИП                                                 // Оба ЗИП, т.е. нижний уровень
			И Дубликат.ЗИП
		)
		// -- 26.07.2018 10:43:48 Базунов Д.А. Задача:
		ИЛИ
		(
			ЗначениеЗаполнено(ПредметСнабженияРодителя) И Не РодительДубликата.Тип = ТипГруппа 
			И ЗначениеЗаполнено(ПредметСнабженияРодителяОригинала) И Не РодительОригинала.Тип = ТипГруппа
			И ПредметСнабженияРодителяОригинала = ПредметСнабженияРодителя // один родитель
			И НЕ Оригинал = Дубликат 									   // разные элементы структуры
			И НЕ Оригинал.ЗИП                                 
			И НЕ Дубликат.ЗИП
		)
		Тогда
		
			РезультатУдаленияДубликата = УдалитьЭлементСтруктурыЗаказа(Дубликат);
		
			Если Не РезультатУдаленияДубликата.Выполнено Тогда
				
				//ОтменитьТранзакцию();
				Результат.Описание = РезультатУдаленияДубликата.Описание;
				Перейти ~Конец;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	//фиксация транзакции
	
	//ЗафиксироватьТранзакцию();
	Результат.Выполнено = Истина;
	
	~Конец:
	
	ТекстСообщения = "100," + ?(ЧислоСкопированныхЭлементов > 0, "Число скопированных элементов - " + Формат(ЧислоСкопированныхЭлементов, "ЧГ=") + ". ", "");
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
	ПоместитьВоВременноеХранилище(Результат, АдресВременногоХранилища);

КонецПроцедуры // ОбъединитьЭлементыСтруктуры() 

#КонецОбласти

//++ 31.12.2017 Веденеев П. //новый механизм обработки изменений в структурах заказов
#Область ОбновлениеСтруктурЗаказов

//процедура выбирает элементы структуры заказа и передает в процедуру анализа и обработки изменений
Процедура ОбработатьСтруктурыЗаказов(ПредметСнабжения, ЭталонОбработан, Эталон)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Эталон", Эталон);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктуры,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Заведование КАК Заведование
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &СлужебныйЗаказ");
	////++ 29.06.2018 Веденеев П. //добавлено исключение для элементов структуры служебного корабля
	//ДОДЕЛАТЬ - А НУЖНО ЛИ ЭТО ИСКЛЮЧЕНИЕ. МБ ЭТИ ЭЛЕМЕНТЫ ТОЖЕ ПОНАДОБИТСЯ ОБРАБАТЫВАТЬ?
	//ДОДЕЛАТЬ - ЧТО ДЕЛАТЬ, ЕСЛИ ИЗМЕНЕНИЯ СПЕЦИФИКАЦИИ ПРОИЗОЙДУТ У ПОДЧИНЕННЫХ ЭЛЕМЕНТОВ?
	Запрос.УстановитьПараметр("СлужебныйЗаказ", Константы.СлужебныйЗаказ.Получить());
	////-- 29.06.2018 Веденеев П. //добавлено исключение для элементов структуры служебного корабля
	
	Отбор = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	
	Если ЭталонОбработан Тогда
		
		Отбор.Добавить("СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения");
		Отбор.Добавить("НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон");
		
		Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
		
	Иначе
				
		Отбор.Добавить("СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Эталон");
		
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦепочкаПредметовСнабжения = Новый Массив;
		ЦепочкаПредметовСнабжения = ЗаполнитьЦепочкуПредметовСнабжения(Выборка.ЭлементСтруктуры, ЦепочкаПредметовСнабжения);
		
		ПривестиСтруктуруЗаказаВСоответствиеСоСпецификацией(ЦепочкаПредметовСнабжения, Выборка.ЭлементСтруктуры, Выборка.Владелец, Выборка.Заведование, ПредметСнабжения, ЭталонОбработан);
		
	КонецЦикла;
	
КонецПроцедуры

//++ 03.07.2018 Веденеев П. //перенос информации с удаленных при удалении дублей веток
Функция СкопироватьИнформациюСУдаленныхВеток(ЭлементСтруктуры, Владелец)
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СверткаДублейПредметовСнабженияВспомогательный.ЭлементСтруктурыДубликат КАК ЭлементСтруктурыДубликат
	|ИЗ
	|	РегистрСведений.СверткаДублейПредметовСнабженияВспомогательный КАК СверткаДублейПредметовСнабженияВспомогательный
	|ГДЕ
	|	СверткаДублейПредметовСнабженияВспомогательный.ЭлементСтруктурыОригинал = &ЭлементСтруктуры";
	Запрос.УстановитьПараметр("ЭлементСтруктуры", ЭлементСтруктуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатКопирования = СкопироватьПодчиненныеЭлементы(ЭлементСтруктуры, Выборка.ЭлементСтруктурыДубликат, Владелец);
		
		Если РезультатКопирования.Выполнено Тогда
			
			СверткаДублейНаборЗаписей = РегистрыСведений.СверткаДублейПредметовСнабженияВспомогательный.СоздатьНаборЗаписей();
			СверткаДублейНаборЗаписей.Отбор.ЭлементСтруктурыОригинал.Установить(ЭлементСтруктуры);
			СверткаДублейНаборЗаписей.Отбор.ЭлементСтруктурыДубликат.Установить(Выборка.ЭлементСтруктурыДубликат);
			СверткаДублейНаборЗаписей.Записать();
			
		Иначе
			
			Возврат РезультатКопирования;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СкопироватьПодчиненныеЭлементы(ЭлементСтруктуры, ЭлементСтруктурыДубликат, Владелец)
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель";
	Запрос.УстановитьПараметр("Родитель", ЭлементСтруктурыДубликат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПодчиненныйЭлемент = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ПодчиненныйЭлемент, Выборка.Ссылка, , "Ссылка, Родитель, Владелец, Код");
		ПодчиненныйЭлемент.Владелец = Владелец;
		ПодчиненныйЭлемент.Родитель = ЭлементСтруктуры;
		
		Попытка
			
			ПодчиненныйЭлемент.Записать();
			
		Исключение
			
			Результат.Выполнено = Ложь;
			Результат.Описание = ОписаниеОшибки();
			Возврат Результат;
			
		КонецПопытки;
		
		РезультатКопирования = СкопироватьПодчиненныеЭлементы(ПодчиненныйЭлемент.Ссылка, Выборка.Ссылка, Владелец);
		
		Если Не РезультатКопирования.Выполнено Тогда
			
			Возврат РезультатКопирования;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
//++ 03.07.2018 Веденеев П. //перенос информации с удаленных при удалении дублей веток

//процедура приводит структуру переданного элемента в соответствие со спецификацией его предмета снабжения
Процедура ПривестиСтруктуруЗаказаВСоответствиеСоСпецификацией(ЦепочкаПредметовСнабжения, ЭлементСтруктуры, Владелец, Заведование, ПредметСнабжения, ЭталонОбработан = Ложь)
		
	НачатьТранзакцию(); //анализ и изменение производим в транзакции
	
	Блокировка = Новый БлокировкаДанных;
	
	//блокируем спецификацию и элемент структуры
	ЭлементБлокировкиСпецификация = Блокировка.Добавить("РегистрСведений.СпецификацииПредметовСнабжения");
	ЭлементБлокировкиСпецификация.УстановитьЗначение("ПредметСнабжения", ПредметСнабжения);
	
	ЭлементБлокировкиЭлементСтруктуры = Блокировка.Добавить("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
	ЭлементБлокировкиЭлементСтруктуры.УстановитьЗначение("Ссылка", ЭлементСтруктуры);
	
	Попытка 
	
		Блокировка.Заблокировать();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПоместитьВОчередьОбновленияСпецификации(ПредметСнабжения, ЭталонОбработан, , "Превышено время ожидания блокировки");
		Возврат;
		
	КонецПопытки;
	
	//получает состав элемента структуры
	СоставЭлементаСтруктуры = ПолучитьСоставЭлементаСтруктуры(ЭлементСтруктуры);
	
	Если Не СоставЭлементаСтруктуры.Пустой() Тогда //блокируем подчиненные элементы
		
		ЭлементБлокировкиСоставЭлементаСтруктуры = Блокировка.Добавить("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
		ЭлементБлокировкиСоставЭлементаСтруктуры.ИсточникДанных = СоставЭлементаСтруктуры;
		ЭлементБлокировкиСоставЭлементаСтруктуры.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		
		Попытка 
			
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПоместитьВОчередьОбновленияСпецификации(ПредметСнабжения, ЭталонОбработан, , "Превышено время ожидания блокировки");
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	//++ 29.06.2018 Веденеев П. //проверяем наличие структур дубликатов с заменными ссылками. при наличии - срисовываем дерево
	РезультатКопирования = СкопироватьИнформациюСУдаленныхВеток(ЭлементСтруктуры, Владелец);
	
	Если Не РезультатКопирования.Выполнено Тогда
		
		ОтменитьТранзакцию();
		ПоместитьВОчередьОбновленияСпецификации(ПредметСнабжения, ЭталонОбработан, , РезультатКопирования.Описание);
		Возврат;
		
	КонецЕсли;
	//-- 29.06.2018 Веденеев П. //проверяем наличие структур дубликатов с заменными ссылками. при наличии - срисовываем дерево
	
	//++ 02.03.2018 Веденеев П. //добавлена проверка расхождения данных о типе составляющей части
	//анализируем изменения спецификации. значения поля ВидИзменения: 
	//0 - элемента нет в спецификации (удалить из структуры), 1 - элемента нет в структуре заказа (добавить в структуру)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставЭлементаСтруктуры.Ссылка КАК Ссылка,
	|	СоставЭлементаСтруктуры.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СоставЭлементаСтруктуры.ЗИП КАК ЗИП,
	|	СоставЭлементаСтруктуры.Тип КАК Тип
	|ПОМЕСТИТЬ втСоставЭлементаСтруктуры
	|ИЗ
	|	&СоставЭлементаСтруктуры КАК СоставЭлементаСтруктуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СоставЭлементаСтруктуры.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|	ЕСТЬNULL(СоставЭлементаСтруктуры.СоставляющаяЧасть, СпецификацияПредметаСнабжения.СоставляющаяЧасть) КАК СоставляющаяЧасть,
	|	ЕСТЬNULL(СоставЭлементаСтруктуры.ЗИП, СпецификацияПредметаСнабжения.ЗИП) КАК ЗИП,
	|	ВЫБОР
	|		КОГДА СпецификацияПредметаСнабжения.СоставляющаяЧасть ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА СоставЭлементаСтруктуры.СоставляющаяЧасть ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ВидИзменения,
	|	ЕСТЬNULL(СпецификацияПредметаСнабжения.Тип, СоставЭлементаСтруктуры.Тип) КАК ТипСоставляющейЧасти
	|ИЗ
	|	втСоставЭлементаСтруктуры КАК СоставЭлементаСтруктуры
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|			СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|			СпецификацииПредметовСнабжения.Тип КАК Тип
	|		ИЗ
	|			РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|		ГДЕ
	|			СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|			И НЕ СпецификацииПредметовСнабжения.СоставляющаяЧасть = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)) КАК СпецификацияПредметаСнабжения
	|		ПО СоставЭлементаСтруктуры.СоставляющаяЧасть = СпецификацияПредметаСнабжения.СоставляющаяЧасть
	|			И СоставЭлементаСтруктуры.ЗИП = СпецификацияПредметаСнабжения.ЗИП
	|ГДЕ
	|	(СоставЭлементаСтруктуры.СоставляющаяЧасть ЕСТЬ NULL
	|			ИЛИ СпецификацияПредметаСнабжения.СоставляющаяЧасть ЕСТЬ NULL
	|			ИЛИ НЕ ЕСТЬNULL(СоставЭлементаСтруктуры.Тип, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(СпецификацияПредметаСнабжения.Тип, НЕОПРЕДЕЛЕНО))";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("СоставЭлементаСтруктуры", СоставЭлементаСтруктуры.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда //расхождений нет
		
		ЗафиксироватьТранзакцию(); //++ 03.07.2018 Веденеев П. //фиксация транзакции на случай переноса копирования веток дубликатов
		Возврат;
		
	КонецЕсли;
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	//обходим таблицу, вносим изменения
	
	Ошибка = Ложь;
	
	ТекущийИндекс = ТаблицаЗапроса.Количество() - 1;
	
	Пока ТекущийИндекс >= 0 Цикл
		
		СтрокаТаблицы = ТаблицаЗапроса[ТекущийИндекс];
		
		Если СтрокаТаблицы.ВидИзменения = 0 Тогда
			
			РезультатУдаления = УдалитьЭлементСтруктурыЗаказа(СтрокаТаблицы.Ссылка);
			
			Если РезультатУдаления.Выполнено Тогда
				
				ТаблицаЗапроса.Удалить(ТекущийИндекс);
				
			Иначе
				
				ОтменитьТранзакцию();
				Ошибка = Истина;
				ПоместитьВОчередьОбновленияСпецификации(ПредметСнабжения, ЭталонОбработан, , РезультатУдаления.Описание);
				Прервать;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.ВидИзменения = 1 Тогда
			
			Если Не СтрокаТаблицы.ЗИП И Не ЦепочкаПредметовСнабжения.Найти(СтрокаТаблицы.СоставляющаяЧасть) = Неопределено Тогда
				
				ОписаниеОшибки = "Обнаружено зацикливание: " + СформироватьОписаниеЦепочки(ЦепочкаПредметовСнабжения, СтрокаТаблицы.СоставляющаяЧасть);
				ПоместитьВОчередьОбновленияСпецификации(ПредметСнабжения, ЭталонОбработан, Истина, ОписаниеОшибки);
				ТаблицаЗапроса.Удалить(ТекущийИндекс);
				ТекущийИндекс = ТекущийИндекс - 1;
				Продолжить;
				
			КонецЕсли;
			
			РезультатДобавления = ВыполнитьСозданиеЭлементаСтруктуры(Владелец, ЭлементСтруктуры, 
				СтрокаТаблицы.СоставляющаяЧасть, СтрокаТаблицы.ЗИП, Заведование, СтрокаТаблицы.ТипСоставляющейЧасти); 
			
			Если РезультатДобавления.Выполнено Тогда
				
				Если СтрокаТаблицы.ЗИП Тогда
					
					ТаблицаЗапроса.Удалить(ТекущийИндекс);
					
				Иначе
					
					СтрокаТаблицы.Ссылка = РезультатДобавления.Ссылка;
					
				КонецЕсли; 
				
			Иначе
				
				ОтменитьТранзакцию();
				Ошибка = Истина;
				ПоместитьВОчередьОбновленияСпецификации(ПредметСнабжения, ЭталонОбработан, , РезультатДобавления.Описание);
				Прервать;
				
			КонецЕсли;
			
		Иначе //++ 20.04.2018 Веденеев П. //обновление значений реквизитов элементов структуры
			
			РезультатОбновления = ВыполнитьОбновлениеЗначенийРеквизитовЭлементовСтруктуры(СтрокаТаблицы);
			
			Если РезультатОбновления.Выполнено Тогда
				
				ТаблицаЗапроса.Удалить(ТекущийИндекс);
				
			Иначе
				
				ОтменитьТранзакцию();
				Ошибка = Истина;
				ПоместитьВОчередьОбновленияСпецификации(ПредметСнабжения, ЭталонОбработан, , РезультатУдаления.Описание);
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийИндекс = ТекущийИндекс - 1;
		
	КонецЦикла;
	
	Если Ошибка Тогда
		
		Возврат;
		
	Иначе
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	//защита от зацикливания
	ГраницаЦепочки = ЦепочкаПредметовСнабжения.Количество();
	НоваяЦепочкаПредметовСнабжения = Новый Массив;
	
	Для каждого ЭлементЦепочки Из ЦепочкаПредметовСнабжения Цикл
		
		НоваяЦепочкаПредметовСнабжения.Добавить(ЭлементЦепочки);
		
	КонецЦикла;
	
	//обходим созданные составные части и вызываем процедуру уже для них
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		НоваяЦепочкаПредметовСнабжения.Добавить(СтрокаТаблицы.СоставляющаяЧасть);
		
		ПривестиСтруктуруЗаказаВСоответствиеСоСпецификацией(НоваяЦепочкаПредметовСнабжения, СтрокаТаблицы.Ссылка, Владелец, Заведование, СтрокаТаблицы.СоставляющаяЧасть);
		
		НоваяЦепочкаПредметовСнабжения.Удалить(ГраницаЦепочки);
		
	КонецЦикла;
	
КонецПроцедуры

//функция приводит значение реквизитов элемента структуры в соответствие со спецификацией (например, типа составляющей части)
//при необходимости обновления значений прочих реквизитов так же задействовать этот механизм
Функция ВыполнитьОбновлениеЗначенийРеквизитовЭлементовСтруктуры(СтрокаТаблицы)
	
	Результат = Новый Структура("Выполнено, Описание, Ссылка", Истина, "", Неопределено);
	
	ЭлементСтруктурыЗаказа = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
	ЭлементСтруктурыЗаказа.ТипСоставляющейЧасти = СтрокаТаблицы.ТипСоставляющейЧасти;
	
	Попытка
		
		ЭлементСтруктурыЗаказа.Записать();
		Результат.Ссылка = ЭлементСтруктурыЗаказа.Ссылка;
		
	Исключение
		
		Результат.Выполнено = Ложь;
		Результат.Описание = "Не изменить элемент структуры заказа " + Строка(СтрокаТаблицы.Ссылка) + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;	
	
КонецФункции

//функция создает элемент справочника структуры заказов
//возвращает результат создания элементов
Функция ВыполнитьСозданиеЭлементаСтруктуры(Владелец, Родитель, СоставляющаяЧасть, ЗИП, Заведование = Неопределено, ТипСоставляющейЧасти = Неопределено, НомерПозиции = Неопределено)
	
	Результат = Новый Структура("Выполнено, Описание, Ссылка", Истина, "", Неопределено);
	
	ЭлементСтруктурыЗаказа = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
	ЭлементСтруктурыЗаказа.Наименование = Строка(СоставляющаяЧасть);
	ЭлементСтруктурыЗаказа.Владелец = Владелец;
	ЭлементСтруктурыЗаказа.Родитель = Родитель;
	ЭлементСтруктурыЗаказа.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	ЭлементСтруктурыЗаказа.ЗИП = ЗИП;
	ЭлементСтруктурыЗаказа.Заведование = Заведование;
	ЭлементСтруктурыЗаказа.ПредметСнабжения = СоставляющаяЧасть;
	ЭлементСтруктурыЗаказа.ТипСоставляющейЧасти	= ТипСоставляющейЧасти;
	ЭлементСтруктурыЗаказа.НомерПозицииСпецификации	= НомерПозиции;
	
	Попытка
		
		ЭлементСтруктурыЗаказа.Записать();
		Результат.Ссылка = ЭлементСтруктурыЗаказа.Ссылка;
		
	Исключение
		
		Результат.Выполнено = Ложь;
		Результат.Описание = "Не удалось создать новый элемент структуры заказа " + Строка(СоставляющаяЧасть) + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//процедуры записывает предмет снабжения в очередь на обновление спецификации
Процедура ПоместитьВОчередьОбновленияСпецификации(ПредметСнабжения, ЭталонОбработан = Ложь, НеОбрабатывать = Ложь, ОписаниеОшибки = "")
	
	СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
	СпецификацииОчередьИзменений.Период = ТекущаяДата();
	СпецификацииОчередьИзменений.ПредметСнабжения = ПредметСнабжения;
	СпецификацииОчередьИзменений.ЭталонОбработан = ЭталонОбработан;
	СпецификацииОчередьИзменений.НеОбрабатывать = НеОбрабатывать;
	СпецификацииОчередьИзменений.ОписаниеОшибки = ОписаниеОшибки;
	СпецификацииОчередьИзменений.Записать();
	
КонецПроцедуры

//функция возвращает результат запроса, содержащий предметы снабжения подчиненных элементов заданного элемента структуры
Функция ПолучитьСоставЭлементаСтруктуры(ЭлементСтруктуры)
	
	//++ 02.03.2018 Веденеев П. //добавлен тип составляющей части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК СоставляющаяЧасть,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ТипСоставляющейЧасти КАК Тип
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &ЭлементСтруктуры
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)";
	Запрос.УстановитьПараметр("ЭлементСтруктуры", ЭлементСтруктуры);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

//функция возвращает строку с описанием цепочки предметов снабжения
Функция СформироватьОписаниеЦепочки(ЦепочкаПредметовСнабжения, ПредметСнабжения = Неопределено)
	
	ОписаниеЦепочки = "";
	ТекущийИндекс = ЦепочкаПредметовСнабжения.ВГраница();
	
	Пока ТекущийИндекс >= 0 Цикл
		
		ЭлементЦепочки = ЦепочкаПредметовСнабжения.Получить(ТекущийИндекс);
		ОписаниеЦепочки = ОписаниеЦепочки + Строка(ЭлементЦепочки) + "(" + Строка(ЭлементЦепочки.Код) + ")" + "\";
		ТекущийИндекс = ТекущийИндекс - 1;
		
	КонецЦикла;
	
	Если Не ПредметСнабжения = Неопределено Тогда
		
		ОписаниеЦепочки = ОписаниеЦепочки + Строка(ПредметСнабжения) + "(" + Строка(ПредметСнабжения.Код) + ")";
		
	КонецЕсли;
	
	Возврат ОписаниеЦепочки;
	
КонецФункции

#КонецОбласти
//-- 31.12.2017 Веденеев П. //новый механизм обработки изменений в структурах заказов

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьВозможностьОбъединенияЭлементовСтруктуры(Параметры) Экспорт
	
	Результат = Новый Структура("Действие, ОписаниеОтказа, Дубликаты");
	Результат.ОписаниеОтказа = "";
	
	Оригинал = Параметры.Оригинал;
	ВладелецОригинала = Оригинал.Владелец;
	МассивЭлементовСтруктуры = Параметры.МассивОбъединяемыхЭлементовСтруктуры;
	МассивПредметовСнабжения = Новый Массив;
	
	ТипГруппа = СтруктураЗаказаСерверПовтИсп.ТипГруппа();
	ЕстьПустыеСсылки = Ложь;
	ЕстьГруппы = Ложь;
	ЕстьПустыеПредметыСнабжения = Ложь;
	ЕстьРазныеВладельцы = Ложь;
	
	Для Каждого ЭлементМассива Из МассивЭлементовСтруктуры Цикл
		
		//Если НЕ ЗначениеЗаполнено(ЭлементМассива.ВерсияДанных) Тогда
		Если ЭлементМассива.ПолучитьОбъект() = Неопределено Тогда
			
			ЕстьПустыеСсылки = Истина;
			
		КонецЕсли;
		
		Если ЭлементМассива.Тип = ТипГруппа Тогда
			
			ЕстьГруппы = Истина;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭлементМассива.ПредметСнабжения) Тогда
			
			ЕстьПустыеПредметыСнабжения = Истина;
			
		КонецЕсли;
		
		Если НЕ ВладелецОригинала = ЭлементМассива.Владелец Тогда
			
			ЕстьРазныеВладельцы = Истина;
			
		КонецЕсли;
		
		Если МассивПредметовСнабжения.Найти(ЭлементМассива.ПредметСнабжения) = Неопределено Тогда	
			МассивПредметовСнабжения.Добавить(ЭлементМассива.ПредметСнабжения);
		КонецЕсли;
		
	КонецЦикла;

	Если ЕстьПустыеСсылки Тогда
		
		Результат.Действие = "ПоказатьПредупреждение";
		Результат.ОписаниеОтказа = НСтр("ru = 'Выделенные элементы содержат уже удаленные!'");
		Возврат Результат;
		
	КонецЕсли;
	
	Если ЕстьРазныеВладельцы Тогда
		
		Результат.Действие = "ПоказатьПредупреждение";
		Результат.ОписаниеОтказа = НСтр("ru = 'Выделенные элементы принадлежат разным кораблям!'");
		Возврат Результат;
		
	КонецЕсли;

	Если ЕстьГруппы Тогда
		
		Результат.Действие = "ПоказатьПредупреждение";
		Результат.ОписаниеОтказа = НСтр("ru = 'Среди выделенных элементов есть группы!'");
		Возврат Результат;
		
	КонецЕсли;
	
	Если ЕстьПустыеПредметыСнабжения Тогда
		
		Результат.Действие = "ПоказатьПредупреждение";
		Результат.ОписаниеОтказа = НСтр("ru = 'Среди выделенных есть элементы с незаполненным предметом снабжения!'");
		Возврат Результат;
		
	КонецЕсли;

	Если МассивПредметовСнабжения.Количество() = 1 И МассивЭлементовСтруктуры.Количество() > 2 Тогда
		
		Результат.Действие = "ПоказатьПредупреждение";
		Результат.ОписаниеОтказа = НСтр("ru = 'Выделено более двух элементов структуры с одинаковым предметом снабжения!'");
		Возврат Результат;
		
	ИначеЕсли МассивПредметовСнабжения.Количество() > 1 И НЕ (МассивПредметовСнабжения.Количество() = МассивЭлементовСтруктуры.Количество()) Тогда
		
		Результат.Действие = "ПоказатьПредупреждение";
		Результат.ОписаниеОтказа = НСтр("ru = 'Среди выделенных есть элементы с одинаковым предметом снабжения!'");
		Возврат Результат;
		
	ИначеЕсли МассивПредметовСнабжения.Количество() = 1 И МассивЭлементовСтруктуры.Количество() = 2 Тогда
		
		Для Каждого ЭлементМассива Из МассивЭлементовСтруктуры Цикл
			
			Если НЕ Оригинал = ЭлементМассива Тогда
				
				Если НЕ ПроверитьВозможностьСхлопыванияЭлементовСтруктуры(Оригинал, ЭлементМассива, Результат.ОписаниеОтказа) Тогда
					Результат.Действие = "ПоказатьПредупреждение";
					Возврат Результат;					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
				
		Результат.Действие = "СхлопываниеЭлементовСтруктуры";
		Возврат Результат;
		
	ИначеЕсли МассивПредметовСнабжения.Количество() > 1 И (МассивПредметовСнабжения.Количество() = МассивЭлементовСтруктуры.Количество()) Тогда
		
		Результат.Действие = "УдалениеДубликатовПредметовСнабжения";
		Результат.Дубликаты = МассивПредметовСнабжения;
		Возврат Результат;
		
	Иначе
		
		Результат.Действие = "ПоказатьПредупреждение";
		Результат.ОписаниеОтказа = НСтр("ru = 'Действие неопределено!'");
		Возврат Результат;

	КонецЕсли; 	
	
	Возврат Результат;
	
КонецФункции //ПроверитьВозможностьОбъединенияЭлементовСтруктуры

Функция ПроверитьВозможностьСхлопыванияЭлементовСтруктуры(Оригинал, Дубликат, ОписаниеОтказа)
	
	РодительОригинала = Оригинал.Родитель;
	РодительДубликата = Дубликат.Родитель;
		
	ТипГруппа = СтруктураЗаказаСерверПовтИсп.ТипГруппа();
	
	Если РодительОригинала.Тип = ТипГруппа И НЕ РодительДубликата.Тип = ТипГруппа Тогда
		
		ОписаниеОтказа = НСтр("ru = 'Нельзя объединять дубликат из изделия с оригиналом в группе(корне)!'");
		Возврат Ложь;
		
	КонецЕсли;
	
	ПредметСнабженияРодителяОригинала = РодительОригинала.ПредметСнабжения;
	ПредметСнабженияРодителяДубликата = РодительДубликата.ПредметСнабжения;
	
	Если НЕ (РодительОригинала = РодительДубликата) И (ПредметСнабженияРодителяОригинала = ПредметСнабженияРодителяДубликата) И ЗначениеЗаполнено(ПредметСнабженияРодителяОригинала) Тогда
		
		ОписаниеОтказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для редактирования обратитесь к спецификации родителя %1'"), ПредметСнабженияРодителяОригинала); 
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ РодительОригинала.Тип = ТипГруппа И НЕ РодительДубликата.Тип = ТипГруппа 
		И НЕ (РодительОригинала = РодительДубликата) И НЕ (ПредметСнабженияРодителяОригинала = ПредметСнабженияРодителяДубликата) Тогда
		
		Если НЕ ПроверитьВозможностьУдаленияПредметаСнабженияИзСпецификации(Дубликат.Владелец, Дубликат.ПредметСнабжения, ПредметСнабженияРодителяДубликата, ОписаниеОтказа) Тогда
			Возврат Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РодительОригинала.Тип = ТипГруппа  
		И РодительОригинала = РодительДубликата И ПредметСнабженияРодителяОригинала = ПредметСнабженияРодителяДубликата Тогда
		
		Если Оригинал.ЗИП = (НЕ Дубликат.ЗИП) Тогда
			
			ОписаниеОтказа = НСтр("ru = 'Нельзя объединять элементы с разным признаком ЗИП!'");
			Возврат Ложь;

		КонецЕсли;		
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции //ПроверитьВозможностьСхлопыванияЭлементовСтруктуры

Функция ПроверитьВозможностьУдаленияПредметаСнабженияИзСпецификации(ТекущийЗаказ, ПредметСнабженияСЧ, ПредметСнабжения, ОписаниеОтказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	|	ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии КАК ОписаниеИерархии
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|		ПО (ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель)
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.ПредметСнабжения = &ПредметСнабжения
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабженияСЧ
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|	И (СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР > 0)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ТекущийЗаказ);
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("ПредметСнабженияСЧ", ПредметСнабженияСЧ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	Иначе  	
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ОписаниеОтказа = НСтр("ru = 'Внимание! Возможны потери данных после изменения спецификации '");
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОписаниеОтказа = ОписаниеОтказа + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'на корабле %1, в структуре %2/%3 %4'"), 
				ВыборкаДетальныеЗаписи.Владелец, ВыборкаДетальныеЗаписи.ОписаниеИерархии, ВыборкаДетальныеЗаписи.Родитель, Символы.ПС); 
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции //ПроверитьВозможностьУдаленияПредметаСнабженияИзСпецификации

Функция ДобавитьПредметСнабжениявОчередьИзмененияСпецификации(ПредметСнабжения) Экспорт
	
	СпецификацииОчередьИзменений = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений.СоздатьМенеджерЗаписи();
	СпецификацииОчередьИзменений.Период = ТекущаяДата();
	СпецификацииОчередьИзменений.ПредметСнабжения = ПредметСнабжения;
	
	Попытка
		
		СпецификацииОчередьИзменений.Записать();
		
	Исключение
		
		ТекстОписания = "Не удалось записать изменения спецификации." + Символы.ПС + ОписаниеОшибки();
		Возврат Новый Структура("Выполнено, Описание", Ложь, ТекстОписания);
		
	КонецПопытки;
	
	Возврат Новый Структура("Выполнено, Описание", Истина, "");
	
КонецФункции

#КонецОбласти













