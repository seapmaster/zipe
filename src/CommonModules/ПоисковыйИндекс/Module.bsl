
////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьНастройкиФормированияПредставленияМТР(ИмяОбъекта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиФормированияИндекса.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	НастройкиФормированияИндекса.ИмяРеквизита КАК ИмяРеквизита,
	|	НастройкиФормированияИндекса.ПравилоПреобразования КАК ПравилоПреобразования
	|ИЗ
	|	РегистрСведений.НастройкиФормированияИндекса КАК НастройкиФормированияИндекса
	|ГДЕ
	|	НастройкиФормированияИндекса.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитовТабличнойЧасти = Новый Структура;	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Если ВыборкаДетальныеЗаписи.ИмяТабличнойЧасти = "Справочник." + ИмяОбъекта Тогда 
			Если СтруктураРеквизитов.Свойство(ВыборкаДетальныеЗаписи.ИмяРеквизита) Тогда
			    СтруктураРеквизитов[ВыборкаДетальныеЗаписи.ИмяРеквизита].Добавить(ВыборкаДетальныеЗаписи.ПравилоПреобразования);
			Иначе
				МассивПравил = Новый Массив;
				МассивПравил.Добавить(ВыборкаДетальныеЗаписи.ПравилоПреобразования);
				СтруктураРеквизитов.Вставить(ВыборкаДетальныеЗаписи.ИмяРеквизита, МассивПравил);
			КонецЕсли;
						
		Иначе  			
			ИмяТабличнойЧасти = СтрЗаменить(ВыборкаДетальныеЗаписи.ИмяТабличнойЧасти,".","_");
			Если НЕ СтруктураРеквизитов.Свойство(ИмяТабличнойЧасти) Тогда 				
				СтруктураРеквизитов.Вставить(ИмяТабличнойЧасти, Новый Структура);  
			КонецЕсли;
			
			Если СтруктураРеквизитов[ИмяТабличнойЧасти].Свойство(ВыборкаДетальныеЗаписи.ИмяРеквизита) Тогда
			    СтруктураРеквизитов[ИмяТабличнойЧасти][ВыборкаДетальныеЗаписи.ИмяРеквизита].Добавить(ВыборкаДетальныеЗаписи.ПравилоПреобразования);
			Иначе
				МассивПравил = Новый Массив;
				МассивПравил.Добавить(ВыборкаДетальныеЗаписи.ПравилоПреобразования);
				СтруктураРеквизитов[ИмяТабличнойЧасти].Вставить(ВыборкаДетальныеЗаписи.ИмяРеквизита, МассивПравил);
			КонецЕсли;
		КонецЕсли; 		
	КонецЦикла; 	
	
	Возврат СтруктураРеквизитов; 	
КонецФункции  //ПолучитьНастройкиФормированияПредставленияМТР

Функция ПолучитьСтруктуруЗначенийРеквизитовДляПредставления(Ссылка, ПолноеИмяОбъекта, СтруктураРеквизитов)
	
	Результат = Новый Структура;
	ДанныеТаблиц = ПолучитьВспомогательныеДанныеПоСтруктуреРеквизитов(СтруктураРеквизитов, ПолноеИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТекстыЗапросов = ДанныеТаблиц.ВыгрузитьКолонку("ТекстЗапроса");
	Для Каждого ТекстЗапроса Из ТекстыЗапросов Цикл
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", ";") + ТекстЗапроса;
	КонецЦикла;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Для Каждого Таблица Из ДанныеТаблиц Цикл
			
		Если Таблица.ЭтоРеквизиты Тогда
			Т_Реквизиты = РезультатЗапроса[Таблица.Номер-1].Выгрузить();
			Для каждого Колонка Из Т_Реквизиты.Колонки Цикл
				Для Каждого ПравилоПреобразования Из СтруктураРеквизитов[Колонка.Имя] Цикл
					Если ЗначениеЗаполнено(Т_Реквизиты[0][Колонка.Имя]) Тогда
						ИсходноеЗначение = Т_Реквизиты[0][Колонка.Имя];
						Если ПравилоПреобразования = "0" Тогда							
							Результат.Вставить(Колонка.Имя, ИсходноеЗначение);							
						ИначеЕсли ПравилоПреобразования = "1" Тогда							
							ПреобразованноеЗначение = ПривестиСтрокуВВерхнийРегистрТолькоБуквыИЦифры(ИсходноеЗначение); 
							Результат.Вставить(Колонка.Имя + "1", ПреобразованноеЗначение); 							
						ИначеЕсли ПравилоПреобразования = "2" Тогда 							
							ЗначениеДляОбработки = ПривестиСтрокуВВерхнийРегистрТолькоБуквыИЦифры(ИсходноеЗначение, Истина);
							ПарыРавновероятныхСимволов = ПолучитьКомбинацииРавновероятныхСимволов();
							Если ПроверитьВозможностьПреобразования(ЗначениеДляОбработки, ПарыРавновероятныхСимволов) Тогда
								ПреобразованноеЗначение = ПолучитьМассивКомбинаций(ЗначениеДляОбработки, ПарыРавновероятныхСимволов); 
								Результат.Вставить(Колонка.Имя + "2", ПреобразованноеЗначение); 								
							КонецЕсли;
						ИначеЕсли ПравилоПреобразования = "3" Тогда   							
							ЗначениеДляОбработки = ПривестиСтрокуВВерхнийРегистрТолькоБуквыИЦифры(ИсходноеЗначение);
							ПарыРавновероятныхСимволов = ПолучитьКомбинацииРавновероятныхСимволов();
							Если ПроверитьВозможностьПреобразования(ЗначениеДляОбработки, ПарыРавновероятныхСимволов) Тогда
								ПреобразованноеЗначение = ПолучитьМассивКомбинаций(ЗначениеДляОбработки, ПарыРавновероятныхСимволов); 
								Результат.Вставить(Колонка.Имя + "3", ПреобразованноеЗначение);  								
							КонецЕсли; 							
						ИначеЕсли ПравилоПреобразования = "4" Тогда 							
							ЗначениеДляОбработки = ВРег(ИсходноеЗначение);
							ПарыРавновероятныхСимволов = ПолучитьКомбинацииРавновероятныхЛатинскихСимволов();
							Если ПроверитьВозможностьПреобразования(ЗначениеДляОбработки, ПарыРавновероятныхСимволов) Тогда
								ПреобразованноеЗначение = ПолучитьМассивКомбинаций(ЗначениеДляОбработки, ПарыРавновероятныхСимволов); 
								Результат.Вставить(Колонка.Имя + "4", ПреобразованноеЗначение);  								
							КонецЕсли;							
						ИначеЕсли ПравилоПреобразования = "5" Тогда							
							ЗначениеДляОбработки = ПривестиСтрокуВВерхнийРегистрТолькоБуквыИЦифры(ИсходноеЗначение);
							ПарыРавновероятныхСимволов = ПолучитьКомбинацииРавновероятныхЛатинскихСимволов();
							Если ПроверитьВозможностьПреобразования(ЗначениеДляОбработки, ПарыРавновероятныхСимволов) Тогда
								ПреобразованноеЗначение = ПолучитьМассивКомбинаций(ЗначениеДляОбработки, ПарыРавновероятныхСимволов); 
								Результат.Вставить(Колонка.Имя + "5", ПреобразованноеЗначение);  								
							КонецЕсли; 							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;				
			КонецЦикла; 
		Иначе
			
			Выборка = РезультатЗапроса[Таблица.Номер-1].Выбрать();
			КлючиСтрокиПроверкаЗаполнения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Таблица.КлючиСтрокиПроверкаЗаполнения);
			
			МассивСтрок = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				ДобавитьСтроку = Истина;
				Для каждого Реквизит Из КлючиСтрокиПроверкаЗаполнения Цикл					
					Если НЕ ЗначениеЗаполнено(Выборка[Реквизит]) Тогда 					
						ДобавитьСтроку = Ложь;	    					
					КонецЕсли;								
				КонецЦикла; 
				
				Если ДобавитьСтроку Тогда  					
					СтрокаТабличнойЧасти = Новый Структура(Таблица.КлючиСтроки);
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
					МассивСтрок.Добавить(СтрокаТабличнойЧасти);					
				КонецЕсли;
				
			КонецЦикла;
			Результат.Вставить(Таблица.ИмяТабличнойЧасти, МассивСтрок); 			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Результат Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") И КлючИЗначение.Значение.Количество() = 0 Тогда
			Результат.Удалить(КлючИЗначение.Ключ);  			
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции  //ПолучитьСтруктуруЗначенийРеквизитовДляПредставления

Функция ПолучитьВспомогательныеДанныеПоСтруктуреРеквизитов(СтруктураРеквизитов, ПолноеИмяОбъекта)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Номер");
	ТаблицаДанных.Колонки.Добавить("ТекстЗапроса");
	ТаблицаДанных.Колонки.Добавить("ЭтоРеквизиты");
	ТаблицаДанных.Колонки.Добавить("ИмяТабличнойЧасти");
	ТаблицаДанных.Колонки.Добавить("КлючиСтроки");
	ТаблицаДанных.Колонки.Добавить("КлючиСтрокиПроверкаЗаполнения");
	
	//1. Таблица - Реквизиты
	ТекстПолейРеквизиты = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Если НЕ ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			ИмяПоля   = СокрЛП(КлючИЗначение.Ключ); 		
			ТекстПолейРеквизиты  = ТекстПолейРеквизиты + ?(ПустаяСтрока(ТекстПолейРеквизиты), "", ",") + "
			|	" + ИмяПоля + " КАК " + ИмяПоля;
		КонецЕсли;		
	КонецЦикла;
	
	Если НЕ ТекстПолейРеквизиты = "" Тогда 		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Номер = ТаблицаДанных.Количество();
		НоваяСтрока.ЭтоРеквизиты = Истина;
		НоваяСтрока.ТекстЗапроса = СформироватьТекстЗапроса(ТекстПолейРеквизиты, ПолноеИмяОбъекта, Истина);
	КонецЕсли;
	
	//2. Таблицы - табличные части
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			
			ИмяТабличнойЧасти 				= СтрЗаменить(КлючИЗначение.Ключ,"_",".");
	        ПолеУсловие						= "Ссылка";
			КлючиСтроки 					= "";
			КлючиСтрокиПроверкаЗаполнения 	= "";
			ТекстПолейРеквизиты 			= "";
			
			Для Каждого ИмяРеквизитаТабличнойЧасти Из КлючИЗначение.Значение Цикл 				
				ИмяПоля   					= СокрЛП(ИмяРеквизитаТабличнойЧасти.Ключ); 		
				
				ТекстПолейРеквизиты 		= ТекстПолейРеквизиты + ?(ПустаяСтрока(ТекстПолейРеквизиты), "", ",") + "
				|	" + ИмяПоля + " КАК " + ИмяПоля; 					
				
				КлючиСтроки = КлючиСтроки + ?(ПустаяСтрока(КлючиСтроки), "", ",") + ИмяПоля;
				
				Если ИмяРеквизитаТабличнойЧасти.Значение = Истина Тогда				
					КлючиСтрокиПроверкаЗаполнения = КлючиСтрокиПроверкаЗаполнения + ?(ПустаяСтрока(КлючиСтрокиПроверкаЗаполнения), "", ",") + ИмяПоля;				
				КонецЕсли; 				
			КонецЦикла;
			
			Если ИмяТабличнойЧасти = "РегистрСведений.КодыINCATПредставление" Тогда		
				ПолеУсловие						= "ПредметСнабжения";	
			ИначеЕсли ИмяТабличнойЧасти = "РегистрСведений.ДополнительныеНаименования" Тогда		
				ПолеУсловие						= "ИмяРеквизита = ""Наименование"" И ПсевдонимЗаданнойТаблицы.Владелец";
			КонецЕсли;
			
			Если НЕ ТекстПолейРеквизиты		= "" Тогда   				
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.Номер 							= ТаблицаДанных.Количество();
				НоваяСтрока.ЭтоРеквизиты 					= Ложь;
				НоваяСтрока.ТекстЗапроса 					= СформироватьТекстЗапроса(ТекстПолейРеквизиты, ИмяТабличнойЧасти, Истина, ПолеУсловие);
				НоваяСтрока.ИмяТабличнойЧасти 				= КлючИЗначение.Ключ;
				НоваяСтрока.КлючиСтроки 					= КлючиСтроки;
				НоваяСтрока.КлючиСтрокиПроверкаЗаполнения 	= КлючиСтрокиПроверкаЗаполнения;				
			КонецЕсли;  
		КонецЕсли; 		
	КонецЦикла;

	Возврат ТаблицаДанных; 	
КонецФункции //ПолучитьВспомогательныеДанныеПоСтруктуреРеквизитов
	
Функция СформироватьТекстЗапроса(ТекстПолей, ИмяТаблицы, ВыбратьРазрешенные, Условие = "Ссылка")
	
	Возврат "ВЫБРАТЬ " + ?(ВыбратьРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
	|" + ТекстПолей + "
	|ИЗ
	|	" + ИмяТаблицы + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы." + Условие + " = &Ссылка
	|";
		
КонецФункции  //СформироватьТекстЗапроса

Процедура СериализоватьПредставлениеВJSON(Представление, СтруктураДанных)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураДанных,, "ПреобразованиеJSON", ПоисковыйИндекс);
	Представление = ЗаписьJSON.Закрыть();

КонецПроцедуры //СериализоватьПредставлениеВJSON

Функция ВыбратьОбъектыДляОбработкиПоисковогоПредставления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОчередьОбновленияИндекса.Объект 					КАК Объект,
	|   ОчередьОбновленияИндекса.Объект.ПометкаУдаления 	КАК ПометкаУдаления
	|ИЗ
	|	РегистрСведений.ОчередьОбновленияИндекса КАК ОчередьОбновленияИндекса
	|ГДЕ
	|	ОчередьОбновленияИндекса.КоличествоПопыток < &КоличествоПопыток";
	
	Запрос.УстановитьПараметр("КоличествоПопыток", 10);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
		
КонецФункции  //ВыбратьОбъектыДляОбработкиПоисковогоПредставления

Процедура ОчиститьПоисковыйИндекс(Объект)

	Запись 							 = РегистрыСведений.ПоисковыйИндекс.СоздатьМенеджерЗаписи();
	Запись.Объект 					 = Объект;
	Запись.Удалить();	

КонецПроцедуры   

#Область Преобразования
	
Функция ПривестиСтрокуВВерхнийРегистрТолькоБуквыИЦифры(ИсходнаяСтрока, ПропускиПробелы = Ложь) 
	НоваяСтрока = "";
	РазрешенныеСимволы = "1234567890QWERTYUIOPASDFGHJKLZXCVBNMЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
	
	Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = ВРег(Сред(ИсходнаяСтрока, Сч, 1));
		Если Найти(РазрешенныеСимволы, ТекущийСимвол) > 0 Тогда
			НоваяСтрока = НоваяСтрока + ТекущийСимвол;
		ИначеЕсли ПропускиПробелы Тогда
			НоваяСтрока = НоваяСтрока + " ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
КонецФункции // ПривестиСтрокуВВерхнийРегистрТолькоБуквыИЦифры

Функция ПолучитьКомбинацииРавновероятныхСимволов()
	МассивПар = Новый Массив;
	МассивПар.Добавить("[А],[A]");
	МассивПар.Добавить("[В],[B]");
	МассивПар.Добавить("[С],[C]");
	МассивПар.Добавить("[Е],[E]");
	МассивПар.Добавить("[Н],[H]");
	МассивПар.Добавить("[К],[K]");
	МассивПар.Добавить("[М],[M]");
	МассивПар.Добавить("[О],[O]");
	МассивПар.Добавить("[Р],[P]");
	МассивПар.Добавить("[Т],[T]");
	МассивПар.Добавить("[Ч],[4]");
	МассивПар.Добавить("[Х],[X]");
	МассивПар.Добавить("[У],[Y]");
	МассивПар.Добавить("[З],[3]");
	МассивПар.Добавить("[Ш],[III]"); 
	
	Возврат МассивПар;
КонецФункции // ПолучитьКомбинацииРавновероятныхСимволов

Функция ПолучитьКомбинацииРавновероятныхЛатинскихСимволов()
	МассивПар = Новый Массив;
	МассивПар.Добавить("[l],[I]");
		
	Возврат МассивПар;
КонецФункции // ПолучитьКомбинацииРавновероятныхСимволов

Функция ПроверитьВозможностьПреобразования(ИсходнаяСтрока, МассивПар)
	КоличествоВероятныхЗамен = 0;
	Для каждого Пара Из МассивПар Цикл
		МассивСимволов = СтрРазделить(Пара,",",Ложь);
		Для каждого Символ Из МассивСимволов Цикл
			СимволЗамены = СтрЗаменить(СтрЗаменить(Символ,"[",""),"]","");
			КоличествоВероятныхЗамен = КоличествоВероятныхЗамен + СтрЧислоВхождений(ИсходнаяСтрока,СимволЗамены);
		КонецЦикла;	
	КонецЦикла; 	
	Возврат КоличествоВероятныхЗамен <= 5;
КонецФункции // ПроверитьВозможностьПреобразования 

Функция ПолучитьМассивКомбинаций(ИсходнаяСтрока, МассивПар)
	МассивКомбинаций = Новый Массив;
	
	Если СтрДлина(ИсходнаяСтрока) <= 1 Тогда
		МассивРавновероятныхСимволов = ПолучитьСимволыДляЗамены(ИсходнаяСтрока, МассивПар);
		Для каждого Символ Из МассивРавновероятныхСимволов Цикл
			МассивКомбинаций.Добавить(Символ);
		КонецЦикла;		
		Возврат МассивКомбинаций;	
	КонецЕсли;
	
	ПервыйСимвол = Лев(ИсходнаяСтрока,1);
	ИсходнаяСтрока2 = Сред(ИсходнаяСтрока, 2);
	
	МассивРавновероятныхСимволов = ПолучитьСимволыДляЗамены(ПервыйСимвол, МассивПар);
	Для каждого Символ Из МассивРавновероятныхСимволов Цикл
		МассивОстаток = ПолучитьМассивКомбинаций(ИсходнаяСтрока2, МассивПар);
		Для каждого Остаток Из МассивОстаток Цикл
			Если МассивКомбинаций.Найти(Символ + Остаток) = Неопределено Тогда 
				МассивКомбинаций.Добавить(Символ + Остаток);
			КонецЕсли;
		КонецЦикла;  		
	КонецЦикла;
	
	Если ПервыйСимвол = "I" И Лев(ИсходнаяСтрока,3) = "III" Тогда		
		Если СтрДлина(ИсходнаяСтрока) > 3 Тогда
			ПервыйСимвол = Лев(ИсходнаяСтрока,3);
			ИсходнаяСтрока2 = Сред(ИсходнаяСтрока, 4);
			МассивРавновероятныхСимволов = ПолучитьСимволыДляЗамены(ПервыйСимвол, МассивПар);
			Для каждого Символ Из МассивРавновероятныхСимволов Цикл
				МассивОстаток = ПолучитьМассивКомбинаций(ИсходнаяСтрока2, МассивПар);
				Для каждого Остаток Из МассивОстаток Цикл
					Если МассивКомбинаций.Найти(Символ + Остаток) = Неопределено Тогда 
						МассивКомбинаций.Добавить(Символ + Остаток);
					КонецЕсли;   					
				КонецЦикла;  		
			КонецЦикла;
		Иначе
			МассивКомбинаций.Добавить("III");
			МассивКомбинаций.Добавить("Ш");
			Возврат МассивКомбинаций;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивКомбинаций;
КонецФункции // ПолучитьМассивКомбинаций

Функция ПолучитьСимволыДляЗамены(ИсходныйСимвол, МассивПар)
	МассивЗначений = Новый Массив;
	Для каждого Пара Из МассивПар Цикл
		Если СтрНайти(Пара, "[" + ИсходныйСимвол + "]") > 0 Тогда
			МассивСимволов = СтрРазделить(Пара,",",Ложь);
			Для каждого Символ Из МассивСимволов Цикл
				МассивЗначений.Добавить(СтрЗаменить(СтрЗаменить(Символ,"[",""),"]",""));			
			КонецЦикла; 
			Прервать;
		КонецЕсли; 		
	КонецЦикла; 
	
	Если МассивЗначений.Количество() = 0 Тогда
		МассивЗначений.Добавить(ИсходныйСимвол);	
	КонецЕсли;
	Возврат МассивЗначений;
КонецФункции // ПолучитьСимовлыДляЗамены 

#КонецОбласти

////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПривестиСтроку(ИсходнаяСтрока) Экспорт 

	НоваяСтрока = "";
	РазрешенныеСимволы = "1234567890QWERTYUIOPASDFGHJKLZXCVBNMЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
	
	Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = ВРег(Сред(ИсходнаяСтрока, Сч, 1));
		Если Найти(РазрешенныеСимволы, ТекущийСимвол) > 0 Тогда
			НоваяСтрока = НоваяСтрока + ТекущийСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;	

КонецФункции // ПривестиСтроку

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Языки") Тогда
		Возврат Значение.Наименование;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции  //ПреобразованиеJSON

Функция ПолучитьПредставлениеОбъекта(СсылкаНаОбъект) Экспорт
	
	ПредставлениеОбъекта = "";
	
	ИмяОбъекта 		 = СсылкаНаОбъект.Метаданные().Имя;
	ПолноеИмяОбъекта = СсылкаНаОбъект.Метаданные().ПолноеИмя();
	
	НастройкиФормированияПредставления = ПолучитьНастройкиФормированияПредставленияМТР(ИмяОбъекта);
	Если НастройкиФормированияПредставления.Количество() = 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Нет настроек для формирования представления");
		
	КонецЕсли;
		
	СтруктураДляПредставления = ПолучитьСтруктуруЗначенийРеквизитовДляПредставления(СсылкаНаОбъект, ПолноеИмяОбъекта, НастройкиФормированияПредставления);
	Если НастройкиФормированияПредставления.Количество() = 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось получить данные для представления");
		
	КонецЕсли;
	
	СериализоватьПредставлениеВJSON(ПредставлениеОбъекта, СтруктураДляПредставления);
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции  //ПолучитьПредставлениеОбъекта

// Обработчик регламентного задания.
Процедура ФормированиеПоисковогоИндекса() Экспорт
	
	Выборка = ВыбратьОбъектыДляОбработкиПоисковогоПредставления();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Если НЕ Выборка.ПометкаУдаления Тогда 				
				Представление = ПолучитьПредставлениеОбъекта(Выборка.Объект);				
				РегистрыСведений.ПоисковыйИндекс.УстановитьПредставление(Выборка.Объект, Представление); 		
			Иначе  				
				ОчиститьПоисковыйИндекс(Выборка.Объект); 			
			КонецЕсли; 
			
			РегистрыСведений.ОчередьОбновленияИндекса.УдалитьОбъектИзОчередиОбновленияПоисковогоИндекса(Выборка.Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОписаниеОшибки = НСтр("ru = 'Не удалось сформировать поисковый индекс : %Ссылка% по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Ссылка%", Выборка.Объект);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			РегистрыСведений.ОчередьОбновленияИндекса.УстановитьОбъектВОчередьОбновленияПоисковогоИндекса(Выборка.Объект, ОписаниеОшибки, 1); 
			
		КонецПопытки;  		
		
	КонецЦикла;
		
КонецПроцедуры //ФормированиеПоисковогоИндекса
