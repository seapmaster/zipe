
///////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПриведениеСтруктурыЗаказа

Функция ПолучитьТаблицуСпецификацийПоПредметуСнабжения(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.Текст = СпецификацииПредметовСнабженияПовтИсп.ПолучитьТекстЗапросаДляСпецификации();
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСпецификацийПоПредметуСнабжения

Процедура ОбработатьСтруктурыЗаказовПоСпецификацииПС(ПредметСнабжения, ТаблицаСпецификаций)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ИнициализироватьВременныеТаблицы(МенеджерВременныхТаблиц, ПредметСнабжения, ТаблицаСпецификаций);
	
	ВыборкаЭлементовСтруктуры = ВыбратьЭлементыСтруктуры(МенеджерВременныхТаблиц);
	
	Пока ВыборкаЭлементовСтруктуры.Следующий() Цикл
		
		ПривестиСтруктуруЗаказаВСоответствиеСоСпецификацией(ПредметСнабжения, ВыборкаЭлементовСтруктуры.ЭлементСтруктуры, МенеджерВременныхТаблиц);	
		
	КонецЦикла; 	
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры // ОбработатьСтруктурыЗаказовПоСпецификацииПС

Процедура ИнициализироватьВременныеТаблицы(МенеджерВременныхТаблиц, ПредметСнабжения, ТаблицаСпецификаций)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПредметСнабжения", 		ПредметСнабжения);
	Запрос.УстановитьПараметр("ТаблицаСпецификаций", 	ТаблицаСпецификаций);
	Запрос.УстановитьПараметр("СлужебныйЗаказ",   		Константы.СлужебныйЗаказ.Получить());	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктуры
	|ПОМЕСТИТЬ ВТ_ЭлементыСтруктурыЗаказаДляОбработки
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &СлужебныйЗаказ
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК ЭлементСтруктуры,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктурыСоставляющаяЧасть,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК СоставляющаяЧасть
	|ПОМЕСТИТЬ ВТ_СоставЭлементовСтруктуры
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель В
	|			(ВЫБРАТЬ
	|				ВТ.ЭлементСтруктуры
	|			ИЗ
	|				ВТ_ЭлементыСтруктурыЗаказаДляОбработки КАК ВТ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭлементСтруктуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	СпецификацииПредметовСнабжения.Количество КАК Количество,
	|	СпецификацииПредметовСнабжения.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СпецификацииПредметовСнабжения.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СпецификацииПредметовСнабжения.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СпецификацииПредметовСнабжения.КоличествоВЗИПР КАК КоличествоВЗИПР,
	|	СпецификацииПредметовСнабжения.НомерПозиции КАК НомерПозиции,
	|	СпецификацииПредметовСнабжения.Тип КАК Тип
	|ПОМЕСТИТЬ ВТ_СпецификацииПС
	|ИЗ
	|	&ТаблицаСпецификаций КАК СпецификацииПредметовСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть
	|ПОМЕСТИТЬ ВТ_СпецификацияПС
	|ИЗ
	|	ВТ_СпецификацииПС КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.Выполнить();
	
КонецПроцедуры 

Функция ВыбратьЭлементыСтруктуры(МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлементыСтруктурыЗаказа.ЭлементСтруктуры
	|ИЗ
	|	ВТ_ЭлементыСтруктурыЗаказаДляОбработки КАК ЭлементыСтруктурыЗаказа
	|";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции // ВыбратьЭлементыСтруктуры()
 
Процедура ПривестиСтруктуруЗаказаВСоответствиеСоСпецификацией(ПредметСнабжения, ЭлементСтруктуры, МенеджерВременныхТаблиц)
		
	Выборка = ВыбратьНесоответствияМеждуСоставомЭлементаСтруктурыИСпецификацией(ПредметСнабжения, ЭлементСтруктуры, МенеджерВременныхТаблиц);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидИзменения = 0 Тогда
			
			УдалитьВетвьЭлементаСтруктурыЗаказа(Выборка.ЭлементСтруктурыСоставляющаяЧасть);
			
		ИначеЕсли Выборка.ВидИзменения = 1 Тогда
			
			СоздатьВетвьЭлементаСтруктурыЗаказа(ЭлементСтруктуры, ПредметСнабжения, Выборка.СоставляющаяЧасть, МенеджерВременныхТаблиц);			
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ПривестиСтруктуруЗаказаВСоответствиеСоСпецификацией

Функция ВыбратьНесоответствияМеждуСоставомЭлементаСтруктурыИСпецификацией(ПредметСнабжения, ЭлементСтруктуры, МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("ЭлементСтруктуры", ЭлементСтруктуры);	
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставЭлементовСтруктуры.ЭлементСтруктурыСоставляющаяЧасть КАК ЭлементСтруктурыСоставляющаяЧасть,
	|	СоставЭлементовСтруктуры.СоставляющаяЧасть КАК СоставляющаяЧасть
	|ПОМЕСТИТЬ ВТ_СоставЭлементаСтруктуры
	|ИЗ
	|	ВТ_СоставЭлементовСтруктуры КАК СоставЭлементовСтруктуры
	|ГДЕ
	|	СоставЭлементовСтруктуры.ЭлементСтруктуры = &ЭлементСтруктуры
	|; 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СоставЭлементаСтруктуры.ЭлементСтруктурыСоставляющаяЧасть, НЕОПРЕДЕЛЕНО) КАК ЭлементСтруктурыСоставляющаяЧасть,
	|	ЕСТЬNULL(СоставЭлементаСтруктуры.СоставляющаяЧасть, СпецификацияПредметаСнабжения.СоставляющаяЧасть) КАК СоставляющаяЧасть,
	|	ВЫБОР
	|		КОГДА СпецификацияПредметаСнабжения.СоставляющаяЧасть ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА СоставЭлементаСтруктуры.СоставляющаяЧасть ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ВидИзменения
	|ИЗ
	|	ВТ_СоставЭлементаСтруктуры КАК СоставЭлементаСтруктуры
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_СпецификацияПС КАК СпецификацияПредметаСнабжения
	|		ПО СоставЭлементаСтруктуры.СоставляющаяЧасть = СпецификацияПредметаСнабжения.СоставляющаяЧасть
	|ГДЕ
	|	(СоставЭлементаСтруктуры.СоставляющаяЧасть ЕСТЬ NULL
	|			ИЛИ СпецификацияПредметаСнабжения.СоставляющаяЧасть ЕСТЬ NULL)";

	РезультатЗапроса = Запрос.Выполнить();	

	Запрос.Текст = "
	|УНИЧТОЖИТЬ ВТ_СоставЭлементаСтруктуры
	|;";
	Запрос.Выполнить();

	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции // ВыбратьНесоответствияМеждуСоставомЭлементаСтруктурыИСпецификацией

#Область СозданиеЭлементовСтрукутры

Функция СоздатьВетвьЭлементаСтруктурыЗаказа(Родитель, ПредметСнабжения, СоставляющаяЧасть = Неопределено, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   &Владелец КАК Владелец,
	|   &Родитель КАК Родитель,
	|   ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие) КАК Тип,
	|	СпецификацииПС.СоставляющаяЧасть КАК ПредметСнабжения,
	|	СпецификацииПС.ЗИП КАК ЗИП,
	|	СпецификацииПС.НомерПозиции КАК НомерПозицииСпецификации,
	|	СпецификацииПС.Тип КАК ТипСоставляющейЧасти
	|ИЗ
	|	ВТ_СпецификацииПС КАК СпецификацииПС
	|ГДЕ
	|	СпецификацииПС.ПредметСнабжения = &ПредметСнабжения
	|";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("Родитель", 		  Родитель);
	Запрос.УстановитьПараметр("Владелец", 		  Родитель.Владелец);
	
	Если НЕ СоставляющаяЧасть = Неопределено Тогда
		Запрос.УстановитьПараметр("СоставляющаяЧасть", СоставляющаяЧасть);
		Запрос.Текст = Запрос.Текст + " И СпецификацииПС.СоставляющаяЧасть = &СоставляющаяЧасть";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементСтруктурыЗаказаОбъект = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ЭлементСтруктурыЗаказаОбъект, Выборка);
		ЭлементСтруктурыЗаказаОбъект.Записать();
		
		СоздатьВетвьЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказаОбъект.Ссылка, Выборка.ПредметСнабжения,, МенеджерВременныхТаблиц);		
		
	КонецЦикла; 
				
КонецФункции // СоздатьВетвьЭлементаСтруктурыЗаказа

#КонецОбласти

#Область ПроверкаЗацикливания

Функция ЕстьЗацикливание(ПредметСнабжения, ТаблицаСпецификаций)

	Спецификации = Новый Массив();
	Спецификации.Добавить(ПредметСнабжения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСпецификаций", ТаблицаСпецификаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть
	|ПОМЕСТИТЬ ВТ_Спецификации
	|ИЗ
	|	&ТаблицаСпецификаций КАК СпецификацииПредметовСнабжения";
	
	Запрос.Выполнить();
	
	Ошибка = Ложь;
	ПоискЗацикливания(Запрос.МенеджерВременныхТаблиц, ПредметСнабжения, Спецификации, Ошибка);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Возврат Ошибка;

КонецФункции // ЕстьЗацикливание()

Процедура ПоискЗацикливания(МенеджерВременныхТаблиц, ПредметСнабжения, Спецификации, Ошибка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК ПредметСнабжения
	|ИЗ
	|	ВТ_Спецификации КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения";
	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Спецификации.Найти(Выборка.ПредметСнабжения) = Неопределено Тогда
			
			Спецификации.Вставить(0, Выборка.ПредметСнабжения);
			
			НайденаОшибка = Ложь;
			ПоискЗацикливания(МенеджерВременныхТаблиц, Выборка.ПредметСнабжения, Спецификации, НайденаОшибка);
			Если НЕ Ошибка И НайденаОшибка Тогда
			      Ошибка = Истина;			
			КонецЕсли; 
						
			Спецификации.Удалить(0);
			
		Иначе
			
			Ошибка = Истина;
			Прервать;
			
		КонецЕсли; 	
					
	КонецЦикла;
	
КонецПроцедуры  //ПоискЗацикливания 
	
#КонецОбласти 

#КонецОбласти 

#Область УдалениеЭлементовСтруктуры

Процедура УдалитьВетвьЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказа)
	
	МассивыДляУдаления = ПолучитьДанныеДляУдаленияВетвиЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказа);
	
	НачатьТранзакцию();
	
	Попытка
		
		УдалитьЭкземплярыКомплектующихИзделийКорабля(МассивыДляУдаления.Экземпляры);
		УдалитьЭлементыСтруктурыЗаказа(МассивыДляУдаления.ЭлементыСтруктуры);
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки; 	
		
КонецПроцедуры  //УдалитьВетвьЭлементаСтруктурыЗаказа

Функция ПолучитьДанныеДляУдаленияВетвиЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказа)

	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлементСтруктурыЗаказа", ЭлементСтруктурыЗаказа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втЭлементыСтруктуры
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&ЭлементСтруктурыЗаказа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭлементыСтруктуры.Ссылка КАК Ссылка
	|ИЗ
	|	втЭлементыСтруктуры КАК втЭлементыСтруктуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭкземплярыКомплектующихИзделийКорабля.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭкземплярыКомплектующихИзделийКорабля КАК ЭкземплярыКомплектующихИзделийКорабля
	|ГДЕ
	|	ЭкземплярыКомплектующихИзделийКорабля.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ.Ссылка
	|			ИЗ
	|				втЭлементыСтруктуры КАК ВТ)";
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат.Вставить("ЭлементыСтруктуры", РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Результат.Вставить("Экземпляры", 		РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Ссылка"));
				
	Возврат Результат;

КонецФункции // ПолучитьДанныеДляУдаленияВетвиЭлементаСтруктурыЗаказа

Процедура УдалитьЭкземплярыКомплектующихИзделийКорабля(МассивЭкземляров)

	Для каждого ЭкземплярСсылка Из МассивЭкземляров Цикл
		
		УдалитьИнформациюОбЭкземпляреИзделия(ЭкземплярСсылка);
		УдалитьЭкземплярИзделия(ЭкземплярСсылка);
	
	КонецЦикла;	

КонецПроцедуры //УдалитьЭкземплярыКомплектующихИзделийКорабля 

Процедура УдалитьЭлементыСтруктурыЗаказа(МассивЭлементовСтрукутрыЗаказа)

	Для каждого ЭлементСтруктурыСсылка Из МассивЭлементовСтрукутрыЗаказа Цикл
		
		УдалитьИнформациюОбЭлементеСтруктуры(ЭлементСтруктурыСсылка);
		УдалитьЭлементСтруктуры(ЭлементСтруктурыСсылка);
	
	КонецЦикла;	

КонецПроцедуры // УдалитьЭлементыСтруктурыЗаказа

Процедура УдалитьИнформациюОбЭкземпляреИзделия(ЭкземплярСсылка)
	
	УдалитьСсылкиИЗРегистраСведений("ИсторияТОиРЭкземпляровКомплектующихИзделийКорабля", 		"Экземпляр", 		ЭкземплярСсылка);
	УдалитьСсылкиИЗРегистраСведений("НаработкаЭкземляровКомплектующихИзделийКорабля", 			"Экземпляр", 		ЭкземплярСсылка);
	УдалитьСсылкиИЗРегистраСведений("СвязанныеИзделияЭкземпляровКомплектующихИзделийКорабля", 	"Экземпляр", 		ЭкземплярСсылка);
	УдалитьСсылкиИЗРегистраСведений("СвязанныеИзделияЭкземпляровКомплектующихИзделийКорабля", 	"СвязанноеИзделие", ЭкземплярСсылка);
			
КонецПроцедуры // УдалитьИнформациюОбЭкземпляреИзделия

Процедура УдалитьЭкземплярИзделия(ЭкземплярСсылка)
	
	ЭкземплярОбъект = ЭкземплярСсылка.ПолучитьОбъект();
	ЭкземплярОбъект.Удалить();	
			
КонецПроцедуры // УдалитьЭкземплярИзделия

Процедура УдалитьИнформациюОбЭлементеСтруктуры(Ссылка)
	
	УдалитьСсылкиИзРегистраСведений("ЛогЗагрузки", 																		"Объект1С", 				Ссылка);
	УдалитьСсылкиИзРегистраСведений("ДополнительныеНаименования", 														"Владелец", 				Ссылка);
	УдалитьСсылкиИзРегистраСведений("ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП", 			"ЭлементСтруктуры", 		Ссылка);
	УдалитьСсылкиИзРегистраСведений("ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии", 	"ЭлементСтруктуры", 		Ссылка);
	УдалитьСсылкиИзРегистраСведений("ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных", 					"ЭлементСтруктуры", 		Ссылка);
	УдалитьСсылкиИзРегистраСведений("СтруктураЗаказаРегистрацияРодителей", 												"ЭлементСтруктурыЗаказа", 	Ссылка);
	УдалитьСсылкиИЗРегистраСведений("СверткаДублейПредметовСнабженияВспомогательный", 									"ЭлементСтруктурыОригинал", Ссылка);
	УдалитьСсылкиИЗРегистраСведений("СверткаДублейПредметовСнабженияВспомогательный", 									"ЭлементСтруктурыДубликат", Ссылка);
	УдалитьСсылкиИЗРегистраСведений("ДанныеДублейСтруктурыЗаказа",					 									"ЭлементСтруктуры", 		Ссылка);
	
КонецПроцедуры // УдалитьИнформациюОбЭлементеСтруктуры

Процедура УдалитьЭлементСтруктуры(ЭлементСтруктурыЗаказаСсылка)
	
	ЭлементСтруктурыЗаказаОбъект = ЭлементСтруктурыЗаказаСсылка.ПолучитьОбъект();
	ЭлементСтруктурыЗаказаОбъект.Удалить();	
			
КонецПроцедуры // УдалитьЭлементСтруктуры
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьСсылкиИзРегистраСведений(ИмяРегистра, ИмяИзмерения, Ссылка)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор[ИмяИзмерения].Установить(Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура АктуализироватьСтруктуруЗаказов(МассивПредметовСнабжения)
	
	Для каждого ПредметСнабжения Из МассивПредметовСнабжения Цикл
	
		НачатьТранзакцию();
		Попытка
			
			ОбработатьСтруктуруЗаказов(ПредметСнабжения);
			СпецификацииПредметовСнабжения.УдалитьИзОчередиАктуализиции(ПредметСнабжения);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			СпецификацииПредметовСнабжения.ЗаписатьСообщениеОбОшиибкеВОчередьАктуализиции(ПредметСнабжения, ОписаниеОшибки());
						
		КонецПопытки;  
		
	КонецЦикла;	
	
КонецПроцедуры //АктуализацияСтруктурыПС

#КонецОбласти 

#Область КопированиеЭлементовСтрукутры

Процедура СкопироватьЭлементыСтруктуры(МассивСсылокИсточников, ВладелецИсточников, СсылкаПриемник, СсылкаВладелец, АдресВременногоХранилища) Экспорт

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	Прогресс = ИнициализироватьСтруктуруПрогресса(ПолучитьОценкуКоличестваПоЭлементамСтрукутры(МассивСсылокИсточников));
	
	НачатьТранзакцию();
	
	Попытка
	
		Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
			
			ДеревоЭлементовСтруктуры = ПолучитьДеревоЭлементовСтруктуры(СсылкаИсточник);
			СкопироватьДеревоЭлементовСтруктуры(ДеревоЭлементовСтруктуры, СсылкаПриемник, СсылкаВладелец, Прогресс);	
			ИзменитьСпецификациюИОбновитьСтруктурыЗаказов(СсылкаИсточник, СсылкаПриемник);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Результат.Выполнено = Истина;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Прогресс = ИнициализироватьСтруктуруПрогресса(0);
		Результат.Выполнено = Ложь;
		Результат.Описание = ОписаниеОшибки();
		
	КонецПопытки;
	
	ОтправитьСообщениеНаКлиент(ТекстСообщенияПоСтруктуреПрогресса(Прогресс));
	
	ПоместитьВоВременноеХранилище(Результат, АдресВременногоХранилища);	
		
КонецПроцедуры // СкопироватьЭлементыСтруктуры()

Процедура СкопироватьДеревоЭлементовСтруктуры(ДеревоЭлементовСтруктуры, СсылкаПриемник, СсылкаВладелец, Прогресс)
	
	НовыйЭлемент = СкопироватьЭлементСтруктуры(ДеревоЭлементовСтруктуры.Ссылка, СсылкаПриемник, СсылкаВладелец, Прогресс);
	ИтерироватьПрогресс(Прогресс);
	ОповеститьОПрогрессе(Прогресс);

	Для каждого Строка Из ДеревоЭлементовСтруктуры.Строки Цикл
		
		Если Строка.Ссылка = ДеревоЭлементовСтруктуры.Строки.Родитель.Ссылка Тогда		
			Продолжить;		
		КонецЕсли; 
		
		СкопироватьДеревоЭлементовСтруктуры(Строка, НовыйЭлемент, СсылкаВладелец, Прогресс);
		
	КонецЦикла;	

КонецПроцедуры // СкопироватьДеревоЭлементовСтруктуры

Функция СкопироватьЭлементСтруктуры(Источник, Родитель, Владелец, Прогресс)
	
	НовыйЭлемент = Источник.Скопировать();
	НовыйЭлемент.Владелец = Владелец; 		
	НовыйЭлемент.Родитель = Родитель; 
		
	Если ЗначениеЗаполнено(Родитель) Тогда
		НовыйЭлемент.Заведование 	= ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Родитель, "Заведование");		
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	СкопироватьДополнительноеНаименование(НовыйЭлемент.Ссылка, Источник);
		
	Возврат НовыйЭлемент.Ссылка;			
	
КонецФункции // СкопироватьЭлементСтруктуры

Процедура СкопироватьДополнительноеНаименование(Ссылка, Источник)

	Если Ссылка.Тип = СтруктураЗаказаСерверПовтИсп.ТипГруппа() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&НовыйЭлемент КАК Владелец,
		|	""Наименование"" КАК Язык,
		|	ДополнительныеНаименования.Язык,
		|	ДополнительныеНаименования.Перевод
		|ИЗ
		|	РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
		|ГДЕ
		|	ДополнительныеНаименования.Владелец = &КопируемыйЭлемент
		|	И ДополнительныеНаименования.ИмяРеквизита = ""Наименование""";
		
		Запрос.УстановитьПараметр("НовыйЭлемент", Ссылка);
		Запрос.УстановитьПараметр("КопируемыйЭлемент", Источник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			НаборЗаписей = РегистрыСведений.ДополнительныеНаименования.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Владелец.Установить(Ссылка);
			НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
			
			НаборЗаписей.Записать();	
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СкопироватьДополнительноеНаименование

Функция ИнициализироватьСтруктуруПрогресса(КоличествоВсего)

	Результат = Новый Структура;
	Результат.Вставить("КоличествоВсего", КоличествоВсего);
	Результат.Вставить("КоличествоВыполнено", 0);
	Результат.Вставить("КоличествоВыполненоНаШаге", 0);
	
	Возврат Результат;	

КонецФункции // ИнициализироватьСтруктуруПрогресса 

Процедура ИтерироватьПрогресс(Прогресс)

	Прогресс.КоличествоВыполнено 		= Прогресс.КоличествоВыполнено + 1;
	Прогресс.КоличествоВыполненоНаШаге  = Прогресс.КоличествоВыполненоНаШаге + 1;
	
КонецПроцедуры  // ИтерироватьПрогрессе

Процедура ОповеститьОПрогрессе(Прогресс)

	Если ДостигнутаГраниницаКоличестваНаШаге(Прогресс) Тогда 	
		ОтправитьСообщениеНаКлиент(ТекстСообщенияПоСтруктуреПрогресса(Прогресс));	
	КонецЕсли; 
	
КонецПроцедуры  // ОповеститьОПрогрессе

Функция ДостигнутаГраниницаКоличестваНаШаге(Прогресс)

	Если Прогресс.КоличествоВыполненоНаШаге >= Прогресс.КоличествоВсего/100 И НЕ Прогресс.КоличествоВыполнено = Прогресс.КоличествоВсего Тогда
	
		Прогресс.КоличествоВыполненоНаШаге = 0;
		Возврат Истина;
	
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции // ДостигнутаГраниницаКоличестваНаШаге 

Функция ТекстСообщенияПоСтруктуреПрогресса(Прогресс)

	ПрогрессЧисло = 100;
	
	Если Прогресс.КоличествоВсего > 0 Тогда
	
		ПрогрессЧисло = Окр(Прогресс.КоличествоВыполнено / Прогресс.КоличествоВсего * 100);	
	
	КонецЕсли; 	
		
	Возврат Строка(ПрогрессЧисло) + "," + ?(Прогресс.КоличествоВыполнено > 0, СтрШаблон(НСтр("ru = 'Количество выполнено - %1.'"), Формат(Прогресс.КоличествоВыполнено, "ЧГ=")), "");

КонецФункции // ТекстСообщенияПоСтруктуреПрогресса 

Функция ПолучитьОценкуКоличестваПоЭлементамСтрукутры(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Возврат ВыборкаДетальныеЗаписи.Количество();
	
КонецФункции // ПолучитьОценкуКоличестваПоЭлементамСтрукутры

Процедура ОтправитьСообщениеНаКлиент(ТекстСообщения)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры // ОтправитьСообщениеНаКлиент

Функция ПолучитьДеревоЭлементовСтруктуры(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП1
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП1.Родитель
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&Ссылка)
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП1.Ссылка ЕСТЬ NULL
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоЭлементовСтруктуры = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоЭлементовСтруктуры = ОбработатьДеревоЭлементовСтруктуры(ДеревоЭлементовСтруктуры, Ссылка);
	
	Возврат ДеревоЭлементовСтруктуры;
	
КонецФункции // ПолучитьДеревоЭлементовСтруктуры 

Функция ОбработатьДеревоЭлементовСтруктуры(ДеревоЭлементовСтруктуры, Ссылка)

	Строки = ДеревоЭлементовСтруктуры.Строки; 
	Для каждого Строка Из Строки Цикл
		
		Если НЕ Строка.Ссылка = Ссылка Тогда
		
			Возврат ОбработатьДеревоЭлементовСтруктуры(Строка, Ссылка);	
			
		Иначе
			
			Возврат Строка;
			
		КонецЕсли; 
		
	КонецЦикла;

КонецФункции

Процедура ИзменитьСпецификациюИОбновитьСтруктурыЗаказов(СсылкаИсточник, СсылкаПриемник)

	Если ЗначениеЗаполнено(СсылкаПриемник.ПредметСнабжения) И НЕ СсылкаПриемник.Тип = СтруктураЗаказаСерверПовтИсп.ТипГруппа() Тогда
		
		СпецификацииПредметовСнабжения.ДобавитьСоставляющуюЧастьВСпецификацию(СсылкаПриемник.ПредметСнабжения, СсылкаИсточник.ПредметСнабжения);
		ОбработатьСтруктуруЗаказов(СсылкаПриемник.ПредметСнабжения); 	
		
	КонецЕсли; 
	
КонецПроцедуры // ИзменитьСпецификацию

#КонецОбласти

#Область ПереносЭлементовСтруктуры

Функция ПеренестиЭлементыСтруктуры(МассивСсылокИсточников, СсылкаПриемник) Экспорт

	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	Прогресс = ИнициализироватьСтруктуруПрогресса(МассивСсылокИсточников.Количество());
	
	НачатьТранзакцию();
	
	Попытка
	
		Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
			
			РодительИсточник = СсылкаИсточник.Родитель;
			ИзменитьРодителяЭлементаСтрукутры(СсылкаИсточник, СсылкаПриемник, Прогресс);
			ИтерироватьПрогресс(Прогресс);
			ОповеститьОПрогрессе(Прогресс);
			ИзменитьСпецификацииИОбновитьСтруктурыЗаказовПриПереносе(СсылкаИсточник, СсылкаПриемник, РодительИсточник);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Результат.Выполнено = Истина;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		Прогресс = ИнициализироватьСтруктуруПрогресса(0);
		Результат.Выполнено = Ложь;
		Результат.Описание = СтрШаблон(НСтр("ru = 'Перенос невозможен! %1'"),КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Результат.Вставить("ЧислоПереносимыхЭлементов", МассивСсылокИсточников.Количество());  //для совместимост
	Возврат Результат;	

КонецФункции // ПеренестиЭлементыСтруктуры()

Процедура ИзменитьРодителяЭлементаСтрукутры(СсылкаИсточник, НовыйРодитель, Прогресс)
	
	ОбъектИсточник = Ссылкаисточник.ПолучитьОбъект();
	ОбъектИсточник.Родитель = НовыйРодитель;
	ОбъектИсточник.Записать();

КонецПроцедуры  // ИзменитьРодителяЭлементаСтрукутры

Процедура ИзменитьСпецификацииИОбновитьСтруктурыЗаказовПриПереносе(СсылкаИсточник, СсылкаПриемник, РодительИсточник)

	Если ЗначениеЗаполнено(СсылкаПриемник.ПредметСнабжения) И НЕ СсылкаПриемник.Тип = СтруктураЗаказаСерверПовтИсп.ТипГруппа() Тогда
		
		СпецификацииПредметовСнабжения.ДобавитьСоставляющуюЧастьВСпецификацию(СсылкаПриемник.ПредметСнабжения, СсылкаИсточник.ПредметСнабжения);
		ОбработатьСтруктуруЗаказов(СсылкаПриемник.ПредметСнабжения); 	
		
	КонецЕсли; 

	Если ЗначениеЗаполнено(РодительИсточник.ПредметСнабжения) И НЕ РодительИсточник.Тип = СтруктураЗаказаСерверПовтИсп.ТипГруппа() Тогда
		
		РезультатПроверки = СпецификацииПредметовСнабжения.ПроверитьВозможностьУдаленияСоставнойЧастиИзСпецификацииПредметаСнабжения(РодительИсточник.ПредметСнабжения, СсылкаИсточник.ПредметСнабжения); 
		Если РезультатПроверки.Отказ Тогда
			ВызватьИсключение РезультатПроверки.Описание;
			//ВызватьИсключение СтрШаблон(НСтр("ru = 'Действие отменено! Попытка удаления составной части %1 из спецификации %2 приведет к потере информации! Воспользуйтесь копированием и удалением дубликатов!';"),
			//							СсылкаИсточник.ПредметСнабжения, РодительИсточник.ПредметСнабжения);	
		КонецЕсли;
		СпецификацииПредметовСнабжения.УдалитьСоставляющуюЧастьИзСпецификации(РодительИсточник.ПредметСнабжения, СсылкаИсточник.ПредметСнабжения);
		ОбработатьСтруктуруЗаказов(РодительИсточник.ПредметСнабжения); 	
		
	КонецЕсли; 

КонецПроцедуры  // ИзменитьСпецификацииИОбновитьСтруктурыЗаказовПриПереносе

	
#КонецОбласти
///////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область РегламентныеЗадания

Процедура АктуализацияСтруктурыПС(ПредметСнабжения = Неопределено) Экспорт
	Если ПредметСнабжения = Неопределено Тогда
		МассивПредметовСнабжения = СпецификацииПредметовСнабжения.ПолучитьПредметыСнабженияДляАктуализиции();
	Иначе
		МассивПредметовСнабжения = Новый Массив;
		МассивПредметовСнабжения.Добавить(ПредметСнабжения);
	КонецЕсли; // Если ПредметСнабжения = Неопределено Тогда
	
	АктуализироватьСтруктуруЗаказов(МассивПредметовСнабжения);		
КонецПроцедуры //АктуализацияСтруктурыПС
	
#КонецОбласти

Процедура ОбработатьСтруктуруЗаказов(ПредметСнабжения) Экспорт
	
	Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСпецификаций = ПолучитьТаблицуСпецификацийПоПредметуСнабжения(ПредметСнабжения);
	
	Если ЕстьЗацикливание(ПредметСнабжения, ТаблицаСпецификаций) Тогда
		
		ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание!'");
		
	КонецЕсли; 
	
	ОбработатьСтруктурыЗаказовПоСпецификацииПС(ПредметСнабжения, ТаблицаСпецификаций);
	
КонецПроцедуры // ОбработатьСтруктуруЗаказов

Процедура УдалитьЭлементИПодчиненные(ЭлементСтруктурыЗаказа) Экспорт
	
	УдалитьВетвьЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказа);
		
КонецПроцедуры  //УдалитьЭлементИПодчиненные
