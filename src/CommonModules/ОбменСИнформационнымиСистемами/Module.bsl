// 
Функция ПрочитатьЭлементы(ЭлементXDTO) Экспорт
	
	МассивЭлементов = Новый Массив; 
	
	СписокЭлементов = ЭлементXDTO.QueryRequest;
	
	Если ТипЗнч(СписокЭлементов) = Тип("СписокXDTO") Тогда
		Для каждого ЭлементItem Из СписокЭлементов Цикл
			МассивЭлементов.Добавить(ЭлементItem.QueryUID);
		КонецЦикла;
	Иначе
		МассивЭлементов.Добавить(СписокЭлементов.QueryUID);
	КонецЕсли; 
	
	Возврат МассивЭлементов;
	
КонецФункции

// Читает файл из временного хранилища по адресу, читает и заполняет массив структур с данными, так же вызывается из спр Алгоритмы
// Параметры:
// - АдресФайла, хранилище с текстом файла
//
// Возвращаемое значение: массив структур с данными 
Функция ПрочитьФайлВМассивДанных(АдресФайла) Экспорт 
	
	МассивЗаявок = Новый Массив;
	
	Если АдресФайла = Неопределено Тогда
		Возврат МассивЗаявок;
	КонецЕсли; 
	
    ФайлПриемник = ПолучитьИмяВременногоФайла("xml");
    ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресФайла);
	Если ТипЗнч(ДанныеХранилища) = Тип("Строка") Тогда
		ТекстФайл = Новый ТекстовыйДокумент;
		ТекстФайл.УстановитьТекст(ДанныеХранилища);
		ТекстФайл.Записать(ФайлПриемник, КодировкаТекста.UTF8);
	Иначе
		ДанныеХранилища.Записать(ФайлПриемник);	
	КонецЕсли; 
	
	ЧтениеXML = Новый ЧтениеXML;
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://seaproject.ru/exchange_status", "");
	
	ЧтениеXML.ОткрытьФайл(ФайлПриемник);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	
	Возврат ПрочитатьЭлементы(ОбъектXDTO.ArrayOfQueryRequest);
	
КонецФункции

Функция ОпределитьТипЗапроса(ТекстХМЛ) Экспорт
	
	ФайлПриемник = ПолучитьИмяВременногоФайла("xml");
	
	ТекстФайл = Новый ТекстовыйДокумент;
	ТекстФайл.УстановитьТекст(ТекстХМЛ);
	ТекстФайл.Записать(ФайлПриемник, КодировкаТекста.UTF8);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлПриемник);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		Если ОбъектXDTO.Type ="NewQuery" Тогда
			Возврат Перечисления.ТипыВходящихЗапросов.ЗагрузкаЗаявок;
		ИначеЕсли ОбъектXDTO.Type ="Status" Тогда
			Возврат Перечисления.ТипыВходящихЗапросов.ПолучениеСтатусов;
		ИначеЕсли ОбъектXDTO.Type ="AddFiles" Тогда
			Возврат Перечисления.ТипыВходящихЗапросов.ДобавлениеФайлов;
		ИначеЕсли ОбъектXDTO.Type ="UpdateQuery" Тогда
			Возврат Перечисления.ТипыВходящихЗапросов.ИзменениеЗаявки;
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Перечисления.ТипыВходящихЗапросов.ПустаяСсылка();
		
КонецФункции

Функция ФайлСуществует(ДопПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапросТКПRFPПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗапросТКПRFPПрисоединенныеФайлы КАК ЗапросТКПRFPПрисоединенныеФайлы
	|ГДЕ
	|	ЗапросТКПRFPПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЗапросТКПRFPПрисоединенныеФайлы.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДопПараметры.Владелец);
	Запрос.УстановитьПараметр("Наименование",  ДопПараметры.ИмяБезРасширения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
		
КонецФункции
 
Функция ДобавитьФайлВПрисоединенныеФайлы(ДопПараметры)

	Если ФайлСуществует(ДопПараметры) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ПолныйФайл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДопПараметры.ПутьКФайлу);
	РасширениеБезТочки = СтрЗаменить(ПолныйФайл.Расширение, ".", "");
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",     ДопПараметры.Владелец);
	ПараметрыФайла.Вставить("Автор",			  ПараметрыСеанса.ТекущийПользователь);
	ПараметрыФайла.Вставить("ИмяБезРасширения",   ДопПараметры.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	Возврат ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, ДопПараметры.АдресВоВременномХранилище, "", ДопПараметры.Описание);
	
КонецФункции

// ++ Создание заявок

Функция ПрочитатьXMLФайлЗапросыИЗаявки(ДопПараметры) Экспорт
	
	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
    ФайлПриемник = ПолучитьИмяВременногоФайла("xml");
    ДанныеХранилища = ПолучитьИзВременногоХранилища(ДопПараметры.Адрес);
	
	Если ТипЗнч(ДанныеХранилища) = Тип("Строка") Тогда
		ТекстФайл = Новый ТекстовыйДокумент;
		ТекстФайл.УстановитьТекст(ДанныеХранилища);
		ТекстФайл.Записать(ФайлПриемник, КодировкаТекста.UTF8);
	Иначе
		ДанныеХранилища.Записать(ФайлПриемник);	
	КонецЕсли; 
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлПриемник);
	
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://seaproject.ru/zip_site", "Data");
	
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаXDTO);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Результат.Описание = "Не удалось прочитать входящий файл" + Символы.ПС + ОписаниеОшибки;
		Возврат Результат;
	КонецПопытки;
	
	МассивЗапросов = Новый Массив;
	
	ДанныеЗапроса = ОбъектXDTO.Запросы.Запрос;
	
	Если ДопПараметры.Свойство("ДобавитьФайлы") Тогда
		ДобавлениеФайлов = Истина;
	Иначе
		ДобавлениеФайлов = Ложь;
	КонецЕсли; 
	
	Если ДопПараметры.Свойство("ИзменениеЗаявки") Тогда
		Возврат ИзменитьСуществующиеЗаявки(ДанныеЗапроса, ДопПараметры.Вложение);
	Иначе
		Возврат СоздатьЗапросыИЗаявки(ДанныеЗапроса, ДопПараметры.Вложение, ДобавлениеФайлов);
	КонецЕсли;
	
КонецФункции
 
Функция СоздатьЗапросыИЗаявки(МассивДанных, Вложения = Неопределено, ДобавлениеФайлов = Ложь) Экспорт 

	// Предпологаем что всё загрузиться
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	ТаблицаФайлов = ПолучитьТаблицуЗначенийДляФайлов();
	
	// Распаковываем файлы
	Если НЕ Вложения = Неопределено Тогда
		
		РаспаковатьАрхив(Вложения, ТаблицаФайлов);
		
	КонецЕсли; 
		
	ЭтапПриСоздании = Константы.ЗначениеПоУмолчаниюЭтапВыполененияЗаявки.Получить();
	
	МассивДобавленныхФайлов = Новый Массив;
	
	НачатьТранзакцию();
	
	Для каждого Запрос Из МассивДанных Цикл
		
		ТекущаяСсылка = Запрос.Ссылка;
		Пустая = (ТекущаяСсылка.ПолучитьОбъект() = Неопределено);
		
		Если Пустая Тогда
			
			ЗапросОбъект = Документы.ЗапросТКПRFP.СоздатьДокумент();	
			ЗапросОбъект.UID = ТекущаяСсылка.УникальныйИдентификатор();
			ЗаполнитьЗначенияСвойств(ЗапросОбъект, Запрос); 
			//ЗапросОбъект.Дата = ТекущаяДата();
			ЗапросОбъект.УстановитьСсылкуНового(ТекущаяСсылка);
			Попытка
				ЗапросОбъект.Записать();
			Исключение
				ОтменитьТранзакцию();
				Результат.Выполнено = Ложь;
				Результат.Описание = Результат.Описание + Строка(ТекущаяСсылка) + ": Не удалось записать новый пакет по причине: " + ОписаниеОшибки();
				Возврат Результат;
			КонецПопытки;
			
			ТекЗапрос = ЗапросОбъект.Ссылка;
			
			// Файлы
			ЗапросПрисоединенныеФайлы = Запрос.ПрисоединенныеФайлы.queryFile;
			Для Каждого Файл ИЗ ЗапросПрисоединенныеФайлы Цикл
				Отбор = Новый Структура("Имя,Расширение", Файл.Наименование, Файл.Расширение);
				НайдСтроки = ТаблицаФайлов.НайтиСтроки(Отбор);
				Если НайдСтроки.Количество() > 0 Тогда
					ПутьКФайлу = НайдСтроки[0].Путь; // 2х одинаковых файлов не может быть
					АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("Владелец", ТекЗапрос);
					ДопПараметры.Вставить("ПутьКФайлу", ПутьКФайлу);
					ДопПараметры.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
					ДопПараметры.Вставить("ИмяБезРасширения", Файл.Ссылка);
					ДопПараметры.Вставить("Описание", "");
					ФайлСсылка = ДобавитьФайлВПрисоединенныеФайлы(ДопПараметры);
					Если НЕ ФайлСсылка = Неопределено Тогда
						МассивДобавленныхФайлов.Добавить(ФайлСсылка);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
			
			ЗапросЗаявки = Запрос.Заявки.Заявка;
			Для каждого ЭлементЗаявка Из ЗапросЗаявки Цикл
				
				ТекущаяЗаявка = ЭлементЗаявка.Ссылка;
				ЗаявкаПустая = (ТекущаяЗаявка.ПолучитьОбъект() = Неопределено);
				
				Если ЗаявкаПустая Тогда
					
					ЗаявкаОбъект = Документы.Заявка.СоздатьДокумент();	
					ЗаявкаОбъект.UID = ТекущаяЗаявка.УникальныйИдентификатор();
					ЗаполнитьЗначенияСвойств(ЗаявкаОбъект, ЭлементЗаявка); 
					ЗаявкаОбъект.Валюта = ОбщиеФункцииПовтИсп.ПолучитьВалютуUSD();
					//ЗаявкаОбъект.Дата = ТекЗапрос.Дата;
					
					ЗаявкаСпецификации = ЭлементЗаявка.Спецификация.orderSpecificationItem;
					Для каждого Спецификация Из ЗаявкаСпецификации Цикл
						НоваяСтрока = ЗаявкаОбъект.Спецификация.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Спецификация);
						
						Если ТипЗнч(НоваяСтрока.ПредметСнабжения) = Тип("СправочникСсылка.КаталогПредметовСнабжения")
							И ЗначениеЗаполнено(НоваяСтрока.ПредметСнабжения) 
							И НоваяСтрока.ПредметСнабжения.ПолучитьОбъект() = Неопределено Тогда
							НоваяСтрока.ПредметСнабжения = Справочники.КаталогПредметовСнабжения.ПустаяСсылка();	
						КонецЕсли;
							
						НоваяСтрока.ОписаниеИерархииИзделия = ПолучитьОписаниеИерархииИзделия(НоваяСтрока.Изделие);
					КонецЦикла;
					
					ЗаявкаЭтапыВыполненияСпецификации = ЭлементЗаявка.ЭтапыВыполненияСпецификации.orderSpecificationStageItem; 
					Для каждого Этап Из ЗаявкаЭтапыВыполненияСпецификации Цикл
						НоваяСтрока = ЗаявкаОбъект.ЭтапыВыполненияСпецификации.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Этап);
					КонецЦикла;
					
					Попытка
						ЗаявкаОбъект.УстановитьСсылкуНового(ТекущаяЗаявка);
						ЗаявкаОбъект.Записать();
					Исключение
						Результат.Описание = Результат.Описание + "Не удалось записать новую заявку по причине: " + ОписаниеОшибки();
						Результат.Выполнено = Ложь;
						Продолжить;
						//Возврат Результат;
					КонецПопытки;
					ЗаявкаСсылка = ЗаявкаОбъект.Ссылка;
					
					// Основной этап
					ОбщиеФункцииСервер.ДобавитьЭтапКЗаявке(ЗаявкаСсылка, ЭтапПриСоздании, ТекущаяДата());
					// Этапы
					ЗаявкаЭтапыВыполненияЗаявки = ЭлементЗаявка.ЭтапыВыполненияЗаявки.orderStagesItem;
					Для каждого Этап Из ЗаявкаЭтапыВыполненияЗаявки Цикл
						ОбщиеФункцииСервер.ДобавитьЭтапКЗаявке(ЗаявкаСсылка, Этап.Этап, ТекущаяДата());
						//НоваяСтрока = ЗаявкаОбъект.ЭтапыВыполненияЗаявки.Добавить();
						//ЗаполнитьЗначенияСвойств(НоваяСтрока, Этап);
					КонецЦикла;
					
					// Файлы
					Для каждого Спецификация Из ЗаявкаСпецификации Цикл
						СпецификацияФайлы = Спецификация.ПрисоединенныеФайлы.orderFile;
						Для каждого Файл Из СпецификацияФайлы Цикл
							Отбор = Новый Структура("Имя,Расширение", Файл.Наименование, Файл.Расширение);
							НайдСтроки = ТаблицаФайлов.НайтиСтроки(Отбор);
							Если НайдСтроки.Количество() > 0 Тогда
								ПутьКФайлу = НайдСтроки[0].Путь; // 2х одинаковых файлов не может быть
								АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
								ДопПараметры = Новый Структура;
								ДопПараметры.Вставить("Владелец", ЗаявкаСсылка);
								ДопПараметры.Вставить("ПутьКФайлу", ПутьКФайлу);
								ДопПараметры.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
								ДопПараметры.Вставить("ИмяБезРасширения", Файл.Ссылка);
								ДопПараметры.Вставить("Описание", Спецификация.НаименованиеПредметаСнабженияЗаказчика+", "+Спецификация.КодПредметаСнабженияЗаказчика);
								ФайлСсылка = ДобавитьФайлВПрисоединенныеФайлы(ДопПараметры);
								Если НЕ ФайлСсылка = Неопределено Тогда
									МассивДобавленныхФайлов.Добавить(ФайлСсылка);
								КонецЕсли; 
							КонецЕсли; 
						КонецЦикла; 
					КонецЦикла; 
					
				Иначе
					
					Если ДобавлениеФайлов Тогда
						// Файлы
						ЗаявкаСпецификации = ЭлементЗаявка.Спецификация.orderSpecificationItem;
						Для каждого Спецификация Из ЗаявкаСпецификации Цикл
							СпецификацияФайлы = Спецификация.ПрисоединенныеФайлы.orderFile;
							Для каждого Файл Из СпецификацияФайлы Цикл
								Отбор = Новый Структура("Имя,Расширение", Файл.Наименование, Файл.Расширение);
								НайдСтроки = ТаблицаФайлов.НайтиСтроки(Отбор);
								Если НайдСтроки.Количество() > 0 Тогда
									ПутьКФайлу = НайдСтроки[0].Путь;
									АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
									ДопПараметры = Новый Структура;
									ДопПараметры.Вставить("Владелец", ЗаявкаСсылка);
									ДопПараметры.Вставить("ПутьКФайлу", ПутьКФайлу);
									ДопПараметры.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
									ДопПараметры.Вставить("ИмяБезРасширения", Файл.Ссылка);
									ДопПараметры.Вставить("Описание", Спецификация.НаименованиеПредметаСнабженияЗаказчика+", "+Спецификация.КодПредметаСнабженияЗаказчика);
									ФайлСсылка = ДобавитьФайлВПрисоединенныеФайлы(ДопПараметры);
									Если НЕ ФайлСсылка = Неопределено Тогда
										МассивДобавленныхФайлов.Добавить(ФайлСсылка);
									КонецЕсли; 
								КонецЕсли; 
							КонецЦикла; 
						КонецЦикла; 
					Иначе
						Результат.Выполнено = Ложь;
						Результат.Описание = Результат.Описание + Строка(ЗаявкаСсылка) + ": Заявка была загружена ранее"+ Символы.ПС;
						Продолжить;
						//Возврат Результат;
					КонецЕсли; 
				КонецЕсли; 				
			КонецЦикла;	
			
			// По каждому запросу свой БП!
			БПСоздан = СоздатьБизнесПроцессУведомлениеОФормированииЗаявки(ТекЗапрос, ДобавлениеФайлов, МассивДобавленныхФайлов);
			Если НЕ БПСоздан Тогда
				ОтменитьТранзакцию();
				Результат.Выполнено = Ложь;
				Результат.Описание = Строка(ТекущаяСсылка) + ": Не удалось запустить бизнес процесс";
				Возврат Результат;
			КонецЕсли; 

		Иначе
			
			Если ДобавлениеФайлов Тогда
				// Файлы
				ЗапросПрисоединенныеФайлы = Запрос.ПрисоединенныеФайлы.queryFile;
				Для Каждого Файл ИЗ ЗапросПрисоединенныеФайлы Цикл
					Отбор = Новый Структура("Имя,Расширение", Файл.Наименование, Файл.Расширение);
					НайдСтроки = ТаблицаФайлов.НайтиСтроки(Отбор);
					Если НайдСтроки.Количество() > 0 Тогда
						ПутьКФайлу = НайдСтроки[0].Путь;
						АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
						ДопПараметры = Новый Структура;
						ДопПараметры.Вставить("Владелец", ТекущаяСсылка);
						ДопПараметры.Вставить("ПутьКФайлу", ПутьКФайлу);
						ДопПараметры.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
						ДопПараметры.Вставить("ИмяБезРасширения", Файл.Ссылка);
						ДопПараметры.Вставить("Описание", "");
						ФайлСсылка = ДобавитьФайлВПрисоединенныеФайлы(ДопПараметры);
						Если НЕ ФайлСсылка = Неопределено Тогда
							МассивДобавленныхФайлов.Добавить(ФайлСсылка);
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла;
				
				// По каждому запросу свой БП!
				БПСоздан = СоздатьБизнесПроцессУведомлениеОФормированииЗаявки(ТекущаяСсылка, ДобавлениеФайлов, МассивДобавленныхФайлов);
				Если НЕ БПСоздан Тогда
					ОтменитьТранзакцию();
					Результат.Выполнено = Ложь;
					Результат.Описание = Строка(ТекущаяСсылка) + ": Не удалось запустить бизнес процесс";
					Возврат Результат;
				КонецЕсли; 
			
			Иначе
				
				Результат.Выполнено = Ложь;
				Результат.Описание = Результат.Описание + Строка(ТекущаяСсылка) + ": Запрос был загружен ранее" + Символы.ПС;
				Продолжить;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЗафиксироватьТранзакцию();
	
	Возврат Результат;	

КонецФункции // ЗагрузитьДанныеЗаявокНаСервере()

Функция ПолучитьОписаниеИерархииИзделия(Изделие)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПроектыКораблей.Наименование КАК НаименованиеПроекта,
	|	ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование КАК НаименованиеИзделия
	|ИЗ
	|	РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Заказы КАК Заказы
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроектыКораблей КАК ПроектыКораблей
	|				ПО Заказы.Владелец = ПроектыКораблей.Ссылка
	|			ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = Заказы.Ссылка
	|		ПО ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Изделие";
	
	Запрос.УстановитьПараметр("Изделие", Изделие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат "";	
	
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НаименованиеПроекта + "/" + Выборка.ОписаниеИерархии + "/" + Выборка.НаименованиеИзделия;	

КонецФункции // ПолучитьОписаниеИерархииИзделия()

Функция ИзменитьСуществующиеЗаявки(МассивДанных, Вложения = Неопределено) Экспорт
	
	// Предпологаем что всё загрузиться
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	МетаЗапроса = Метаданные.Документы.ЗапросТКПRFP.Реквизиты;
	
	ТаблицаИзмененныхРекв = Новый ТаблицаЗначений;
	ТаблицаИзмененныхРекв.Колонки.Добавить("Реквизит");
	ТаблицаИзмененныхРекв.Колонки.Добавить("СтароеЗначение");
	ТаблицаИзмененныхРекв.Колонки.Добавить("НовоеЗначение");
	
	Для каждого Запрос Из МассивДанных Цикл
		
		ТекущаяСсылка = Запрос.Ссылка;
		
		ДокументОбъект = ТекущаяСсылка.ПолучитьОбъект();
		
		Пустая = (ДокументОбъект = Неопределено);
		
		Если НЕ Пустая Тогда
			
			Структура = Новый Структура;
			Свойства  = Запрос.Свойства();
			ТаблицаИзмененныхРекв.Очистить();
			
			Для каждого Рекв Из МетаЗапроса Цикл
				Если Свойства.Получить(Рекв.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				Если НЕ Запрос[Рекв.Имя] = ТекущаяСсылка[Рекв.Имя] Тогда
					НовСтр = ТаблицаИзмененныхРекв.Добавить();
					НовСтр.Реквизит = Рекв.Имя;
					НовСтр.СтароеЗначение = ТекущаяСсылка[Рекв.Имя];
					НовСтр.НовоеЗначение  = Запрос[Рекв.Имя];
				КонецЕсли; 
			КонецЦикла; 
			
			// Если есть изменения
			Если ТаблицаИзмененныхРекв.Количество() > 0 Тогда
				Для каждого ИзмРеквизит Из ТаблицаИзмененныхРекв Цикл
					ДокументОбъект[ИзмРеквизит.Реквизит] = ИзмРеквизит.НовоеЗначение;
				КонецЦикла; 
				Попытка
					ДокументОбъект.Записать();
				Исключение
					Результат.Выполнено = Ложь;
					Результат.Описание = Результат.Описание + Строка(ТекущаяСсылка) + ": Не удалось запись изменения в документ" + Символы.ПС;
				КонецПопытки; 
				// По каждому запросу свой БП!
				БПСоздан = СоздатьБизнесПроцессУведомлениеОФормированииЗаявки(ТекущаяСсылка,,, ТаблицаИзмененныхРекв);
				
				Если НЕ БПСоздан Тогда
					ОтменитьТранзакцию();
					Результат.Выполнено = Ложь;
					Результат.Описание = Строка(ТекущаяСсылка) + ": Не удалось запустить бизнес процесс";
					Возврат Результат;
				КонецЕсли; 
				
			КонецЕсли; 
			
		Иначе
			
			// С сайта идет целым пакетом, если не нашли изменяемый пакет, то создаем его
			Массив = Новый Массив;
			Массив.Добавить(Запрос);
			
			СоздатьЗапросыИЗаявки(Массив, Вложения);
			
		КонецЕсли; 
		
	КонецЦикла; 
		
	Возврат Результат;
	
КонецФункции
 

// -- Создание заявок


// ++ Бизнес процессы	

Функция ЕстьБизнесПроцессПоПакету(Пакет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомлениеОФормированииЗаявки.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.УведомлениеОФормированииЗаявки КАК УведомлениеОФормированииЗаявки
	|ГДЕ
	|	УведомлениеОФормированииЗаявки.Предмет = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", Пакет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции
 
Функция СоздатьБизнесПроцессУведомлениеОФормированииЗаявки(ПакетЗаявок, ДобавлениеФайлов = Ложь, МассивДобавленныхФайлов = Неопределено, ИзмененныеРеквизиты = Неопределено) Экспорт 
	
	Если ИзмененныеРеквизиты = Неопределено И ЕстьБизнесПроцессПоПакету(ПакетЗаявок) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	НовыйБП = БизнесПроцессы.УведомлениеОФормированииЗаявки.СоздатьБизнесПроцесс();
	
	НовыйБП.Дата	= ТекущаяДата();
	НовыйБП.Предмет = ПакетЗаявок;
	НаименованиеЗаявки = " " + ПакетЗаявок.Номер + " от " + Формат(ПакетЗаявок.Дата, "ДФ=dd.MM.yyyy"); 
	Если НЕ ИзмененныеРеквизиты = Неопределено Тогда
		НовыйБП.ТипЗапроса  = Перечисления.ТипыВходящихЗапросов.ИзменениеЗаявки;
		НовыйБП.Исполнитель  = Справочники.РолиИсполнителей.РуководительПроектаВТС;
		НовыйБП.Наименование = "Уведомление об изменении заявки" + НаименованиеЗаявки;
	ИначеЕсли ДобавлениеФайлов Тогда
		НовыйБП.ТипЗапроса  = Перечисления.ТипыВходящихЗапросов.ДобавлениеФайлов;
		НовыйБП.Исполнитель  = Справочники.РолиИсполнителей.РуководительПроектаВТС;
		НовыйБП.Наименование = "Уведомление о добавлении файлов в заявку" + НаименованиеЗаявки;
	Иначе
		НовыйБП.ТипЗапроса  = Перечисления.ТипыВходящихЗапросов.ЗагрузкаЗаявок;
		НовыйБП.Исполнитель  = Справочники.РолиИсполнителей.РуководительДепартаментаВТС;
		НовыйБП.Наименование = "Уведомление о формировании заявки" + НаименованиеЗаявки;
	КонецЕсли; 
	
	Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") Тогда
		Для каждого Файл Из МассивДобавленныхФайлов Цикл
			НовыйБП.ПрисоединенныеФайлы.Добавить().СсылкаНаФайл = Файл;
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ ИзмененныеРеквизиты = Неопределено Тогда
		Для каждого Стр Из ИзмененныеРеквизиты Цикл
			ЗаполнитьЗначенияСвойств(НовыйБП.ИзменениеЗапроса.Добавить(), Стр);
		КонецЦикла; 
	КонецЕсли; 
	
	Попытка
		НовыйБП.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		НовыйБП.Старт();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
 

// -- 


// ++ Файлы

Функция ПолучитьТаблицуЗначенийДляФайлов()
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Имя");
	ТаблицаФайлов.Колонки.Добавить("Расширение");
	ТаблицаФайлов.Колонки.Добавить("Путь");
	
	Возврат ТаблицаФайлов;
	
КонецФункции

Процедура РаспаковатьАрхив(Вложение, ТаблицаФайлов)
	
	ВремКаталог = КаталогВременныхФайлов();
	
	ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанные = Вложение.Получить();
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ДвоичныеДанные.Записать(ИмяАрхива);
	
	// Распаковываем файлы
	ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяАрхива);
	
	Для каждого ТекАрхив Из ЧтениеЗИП.Элементы Цикл
		// файл xml пропускаем
		Если СтрНайти(ТекАрхив.Расширение, "xml") > 0 Тогда
			Продолжить;
		Иначе
			
			НовСтр = ТаблицаФайлов.Добавить();
			НовСтр.Имя = ТекАрхив.ИмяБезРасширения;
			НовСтр.Расширение = ТекАрхив.Расширение;
			НовСтр.Путь = ВремКаталог + ТекАрхив.Имя;
			
			ЧтениеЗИП.Извлечь(ТекАрхив, ВремКаталог);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеЗИП.Закрыть();
	УдалитьФайлы(ИмяАрхива);
	
КонецПроцедуры

Функция ЕстьПриклепленныйФайл(Владелец, Имя)
	
	Имя = СокрЛП(Имя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаПрисоединенныеФайлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ЗаявкаПрисоединенныеФайлы КАК ЗаявкаПрисоединенныеФайлы
	|ГДЕ
	|	ЗаявкаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла И ЗаявкаПрисоединенныеФайлы.Наименование ПОДОБНО %"+Имя+"%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапросТКПRFPПрисоединенныеФайлы.Наименование
	|ИЗ
	|	Справочник.ЗапросТКПRFPПрисоединенныеФайлы КАК ЗапросТКПRFPПрисоединенныеФайлы
	|ГДЕ
	|	ЗапросТКПRFPПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла И ЗапросТКПRFPПрисоединенныеФайлы.Наименование ПОДОБНО %"+Имя+"%";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции
 
// -- Файлы


// Запись в регистры ++

// Функция - Установливает статус обработано
//
// Параметры:
//  Данные	 - 	 - 
//  Тип		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция УстановитьСтатусОбработано(Данные, Тип)
	
	Если Тип="Входящий" Тогда
		
		МенЗаписи = РегистрыСведений.ВходящиеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
		
		МенЗаписи.ИД = Данные.ИД;
		МенЗаписи.Прочитать();
		Если МенЗаписи.Выбран() Тогда
			МенЗаписи.Статус = Перечисления.СтатусыОбработокЗапросов.Обработано;
			МенЗаписи.Записать();
		КонецЕсли;
		
	Иначе
		
		МенЗаписи = РегистрыСведений.ИсходящиеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеЭлектронныеПисьма.ИД,
		|	ИсходящиеЭлектронныеПисьма.ВходящийИД
		|ИЗ
		|	РегистрСведений.ИсходящиеЭлектронныеПисьма КАК ИсходящиеЭлектронныеПисьма
		|ГДЕ
		|	ИсходящиеЭлектронныеПисьма.ИД = &ИД";
		
		Запрос.УстановитьПараметр("ИД", Данные.ИД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			МенЗаписи.ИД = Выборка.ИД;
			МенЗаписи.ВходящийИД = Выборка.ВходящийИД;
			МенЗаписи.Прочитать();
			Если МенЗаписи.Выбран() Тогда
				МенЗаписи.Статус = Перечисления.СтатусыОбработокЗапросов.Обработано;
				МенЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;  
		
	КонецЕсли; 
	
КонецФункции

// Записывает данные письма в регистр
// Данные - структура
Функция ЗаписатьВходящийЗапросВРегистр(Данные)
	
	МенЗаписи = РегистрыСведений.ВходящиеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
	МенЗаписи.ИД = Новый УникальныйИдентификатор;
	МенЗаписи.Статус = Перечисления.СтатусыОбработокЗапросов.Новый;
	Если Данные.Свойство("Данные") Тогда
		//Если ЭтоАдресВременногоХранилища(Данные.Данные) Тогда
		//	ПолноеИмяФайла = КаталогВременныхФайлов() + "";
		//	Данные = ПолучитьИзВременногоХранилища(Данные.Данные);
		//	Данные.Записать(ПолноеИмяФайла);
		//КонецЕсли;
		МенЗаписи.Данные 	  = Данные.Данные;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	Если Данные.Свойство("ТипЗапроса") Тогда
		МенЗаписи.ТипЗапроса = Данные.ТипЗапроса;
	КонецЕсли;
	Если Данные.Свойство("АрхивВложение") Тогда
		МенЗаписи.Вложение = Данные.АрхивВложение;
	КонецЕсли;
	Если Данные.Свойство("ТемаПисьма") Тогда
		МенЗаписи.ТемаПисьма = Данные.ТемаПисьма;
	КонецЕсли;
	Если Данные.Свойство("ТекстПисьма") Тогда
		МенЗаписи.ТекстПисьма = Данные.ТекстПисьма;
	КонецЕсли;
	Если Данные.Свойство("ИмяФайла") Тогда
		МенЗаписи.ИмяФайла = Данные.ИмяФайла;
	КонецЕсли;
	Если Данные.Свойство("Получатель") Тогда
		МенЗаписи.Получатель = Данные.Получатель;
	КонецЕсли;
	Если Данные.Свойство("Отправитель") Тогда
		МенЗаписи.Отправитель = Данные.Отправитель;
	КонецЕсли;
	
	МенЗаписи.ДатаЗапроса = ТекущаяДата();
	
	Попытка
		МенЗаписи.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Записывает ответ в регистр для дальнейшей отправки
//
Функция ЗаписатьИсходящийЗапросВРегистр(Данные) Экспорт
	
	МенЗаписи = РегистрыСведений.ИсходящиеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
	МенЗаписи.ИД = Новый УникальныйИдентификатор;
	МенЗаписи.Статус = Перечисления.СтатусыОбработокЗапросов.Новый;
	
	Если Данные.Свойство("Данные") Тогда
		МенЗаписи.Данные = Данные.Данные;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	Если Данные.Свойство("ВходящийИД") Тогда
		МенЗаписи.ВходящийИД  = Данные.ВходящийИД;
	КонецЕсли; 
	Если Данные.Свойство("ТемаПисьма") Тогда
		МенЗаписи.ТемаПисьма  = Данные.ТемаПисьма;
	КонецЕсли; 
	МенЗаписи.Отправитель  = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.АдресЭлектроннойПочты;
	Если Данные.Свойство("Получатель") Тогда
		МенЗаписи.Получатель  = Данные.Получатель;
	КонецЕсли; 
	
	МенЗаписи.ДатаЗапроса = ТекущаяДата();
	
	Попытка
		МенЗаписи.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции
 
// Функция - Записать ошибку и описание ошибки
//
// Параметры:
//  Данные	 - 	 - 
//  Тип		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ЗаписатьОшибкуИОписание(Данные, Тип)
	
	Если Тип="Входящий" Тогда
		
		МенЗаписи = РегистрыСведений.ВходящиеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
		МенЗаписи.ИД = Данные.ИД;
		МенЗаписи.Прочитать();
		Если МенЗаписи.Выбран() Тогда
			МенЗаписи.Статус = Перечисления.СтатусыОбработокЗапросов.Ошибка;
			МенЗаписи.ОписаниеОшибки = Данные.ОписаниеОшибки;
			МенЗаписи.Записать();
		КонецЕсли; 
		
	Иначе
		
		МенЗаписи = РегистрыСведений.ИсходящиеЭлектронныеПисьма.СоздатьМенеджерЗаписи();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходящиеЭлектронныеПисьма.ИД,
		|	ИсходящиеЭлектронныеПисьма.ВходящийИД
		|ИЗ
		|	РегистрСведений.ИсходящиеЭлектронныеПисьма КАК ИсходящиеЭлектронныеПисьма
		|ГДЕ
		|	ИсходящиеЭлектронныеПисьма.ИД = &ИД";
		
		Запрос.УстановитьПараметр("ИД", Данные.ИД);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			МенЗаписи.ИД = Выборка.ИД;
			МенЗаписи.ВходящийИД = Выборка.ВходящийИД;
			МенЗаписи.Прочитать();
			Если МенЗаписи.Выбран() Тогда
				МенЗаписи.Статус = Перечисления.СтатусыОбработокЗапросов.Ошибка;
				МенЗаписи.ОписаниеОшибки = Данные.ОписаниеОшибки;
				МенЗаписи.Записать();
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации("ЭлектронныеПисьма", УровеньЖурналаРегистрации.Ошибка,,, Тип+"; "+Данные.ИД+ "; Ошибка: "+Данные.ОписаниеОшибки);
	
КонецФункции
 
// Запись в регистры --

// Подготавливает ответ в виде xml файла созданного на основании пакета xdto, и заполняет его данными
// Параметры:
// - МассивМТР - массив структур
//
// Возвращаемое значение: Адрес - адрес временного хранилища
Функция ПодготовитьФайлОтвета(МассивДанных) Экспорт
	
	ИмяФайлаТемп = ПолучитьИмяВременногоФайла("xml");
	
	Запись = Новый ЗаписьXML;
	
	//Запись.ОткрытьФайл(ИмяФайлаТемп);	
	Запись.УстановитьСтроку("");
	//Запись.ЗаписатьОбъявлениеXML();

	ТипОбъектаRespond 		= ФабрикаXDTO.Тип("http://seaproject.ru/exchange_status", "Respond");
	СписокRespondQuery 		= ФабрикаXDTO.Тип("http://seaproject.ru/exchange_status", "ArrayOfRespondQuery");
	ТипОбъектаRespondQuery  = ФабрикаXDTO.Тип("http://seaproject.ru/exchange_status", "RespondQuery");
	СписокOrder	    		= ФабрикаXDTO.Тип("http://seaproject.ru/exchange_status", "ArrayOfOrderRespond");
	ТипОбъектаOrder    		= ФабрикаXDTO.Тип("http://seaproject.ru/exchange_status", "OrderRespond");
	
	СписокRespond = ФабрикаXDTO.Создать(СписокRespondQuery);
	ОбъектRespond = ФабрикаXDTO.Создать(ТипОбъектаRespond);
	
	Для каждого Стр Из МассивДанных Цикл
		
		RespondQuery = ФабрикаXDTO.Создать(ТипОбъектаRespondQuery);
		RespondQuery.QueryUID  = Стр.ЗапросУИД;
		RespondQuery.NumberVTS = Стр.НомерФСВТС;
		RespondQuery.DateVTS   = Формат(Стр.ДатаФСВТС, "ДФ=yyyy-MM-dd");
		
		СписокЗаявок = ФабрикаXDTO.Создать(СписокOrder);
		
		Для каждого СтрЗаявка Из Стр.Заявки Цикл
			// Элементы
			ЭлементСпискаItem = ФабрикаXDTO.Создать(ТипОбъектаOrder);
			ЭлементСпискаItem.OrderUID	= СтрЗаявка.Заявка;
			ЭлементСпискаItem.Status	= СтрЗаявка.Этап;
			ЭлементСпискаItem.Result	= ?(СтрЗаявка.Этап = "00000000-0000-0000-0000-000000000000", "Запрос не найден", "Выполнено");
			СписокЗаявок.OrderRespond.Добавить(ЭлементСпискаItem);
		КонецЦикла; 
		RespondQuery.ArrayOfOrderRespond = СписокЗаявок;
		
		СписокRespond.RespondQuery.Добавить(RespondQuery);
		
	КонецЦикла;
	
	ОбъектRespond = ФабрикаXDTO.Создать(ТипОбъектаRespond);
	ОбъектRespond.Type = "Status";
	ОбъектRespond.ArrayOfRespondQuery = СписокRespond;
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектRespond);
		
	ДанныеXML = Запись.Закрыть();
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеXML);
	
КонецФункции

// Функция - Получает статусы заявок
//
// Параметры:
//  МассивУИДЗаявок	 - массив - массив гуидов
// 
// Возвращаемое значение:
//   - Массив Структур - заявки и их статусы
//
Функция ПолучитьСтатусыЗаявок(МассивУИДЗапросов)
	
	КС = Новый КвалификаторыСтроки(36);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));

	ТаблицаУИД = Новый ТаблицаЗначений;
	ТаблицаУИД.Колонки.Добавить("УИД", Новый ОписаниеТипов(Массив,,,, КС));
	
	Для каждого Стр Из МассивУИДЗапросов Цикл
		НовСтр = ТаблицаУИД.Добавить();
		НовСтр.УИД = Стр;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУИД.УИД КАК УИД
	|ПОМЕСТИТЬ ВремТаблица
	|ИЗ
	|	&ТаблицаУИД КАК ТаблицаУИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТаблица.УИД КАК УИД,
	|	ЕСТЬNULL(ЗапросТКПRFP.Ссылка, ЗНАЧЕНИЕ(Документ.ЗапросТКПRFP.ПустаяСсылка)) КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаЗапросов
	|ИЗ
	|	ВремТаблица КАК ВремТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросТКПRFP КАК ЗапросТКПRFP
	|		ПО ВремТаблица.УИД = ЗапросТКПRFP.UID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокумЗаявка.ЗапросТКПRFP КАК Запрос,
	|	ДокумЗаявка.ЗапросТКПRFP.НомерФСВТС КАК НомерФСВТС,
	|	ДокумЗаявка.ЗапросТКПRFP.ДатаРегистрацииФСВТС КАК ДатаРегистрацииФСВТС,
	|	ЕСТЬNULL(ДокумЗаявка.Ссылка, ЗНАЧЕНИЕ(Документ.Заявка.ПустаяСсылка)) КАК Ссылка,
	|	ЕСТЬNULL(ЭтапыВыполненияЗаявкиСрезПоследних.Этап, ЗНАЧЕНИЕ(Справочник.ЭтапыВыполненияЗаявокНаПоставкуПредметовСнабжения.ПустаяСсылка)) КАК Этап
	|ПОМЕСТИТЬ ТаблицаЗаявок
	|ИЗ
	|	Документ.Заявка КАК ДокумЗаявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭтапыВыполненияЗаявки.СрезПоследних КАК ЭтапыВыполненияЗаявкиСрезПоследних
	|		ПО ДокумЗаявка.Ссылка = ЭтапыВыполненияЗаявкиСрезПоследних.Заявка
	|ГДЕ
	|	ДокумЗаявка.ЗапросТКПRFP В
	|			(ВЫБРАТЬ
	|				ТаблицаЗапросов.Ссылка
	|			ИЗ
	|				ТаблицаЗапросов КАК ТаблицаЗапросов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗаявок.Запрос КАК Запрос,
	|	ТаблицаЗаявок.НомерФСВТС КАК НомерФСВТС,
	|	ТаблицаЗаявок.ДатаРегистрацииФСВТС КАК ДатаРегистрацииФСВТС,
	|	ТаблицаЗаявок.Ссылка КАК Заявка,
	|	ТаблицаЗаявок.Этап КАК Этап
	|ИЗ
	|	ТаблицаЗаявок КАК ТаблицаЗаявок
	|ИТОГИ
	|	МИНИМУМ(НомерФСВТС),
	|	МИНИМУМ(ДатаРегистрацииФСВТС),
	|	МИНИМУМ(Заявка)
	|ПО
	|	Запрос";
	
	Запрос.УстановитьПараметр("ТаблицаУИД", ТаблицаУИД);
	
	МассивРезультат = Новый Массив;
	
	ВыборкаЗапрос = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗапрос.Следующий() Цикл
		
		СтруктураЗапрос = Новый Структура;
		СтруктураЗапрос.Вставить("ЗапросУИД",  Строка(ВыборкаЗапрос.Запрос.УникальныйИдентификатор()));
		СтруктураЗапрос.Вставить("НомерФСВТС", СокрЛП(ВыборкаЗапрос.НомерФСВТС));
		СтруктураЗапрос.Вставить("ДатаФСВТС",  ВыборкаЗапрос.ДатаРегистрацииФСВТС);
		
		МассивЗаявок = Новый Массив;
		ВыборкаЗаявка = ВыборкаЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаявка.Следующий() Цикл
			СтруктураЗаявка = Новый Структура;
			СтруктураЗаявка.Вставить("Заявка", Строка(ВыборкаЗаявка.Заявка.УникальныйИдентификатор()));
			СтруктураЗаявка.Вставить("Этап", Строка(ВыборкаЗаявка.Этап.УникальныйИдентификатор()));
			МассивЗаявок.Добавить(СтруктураЗаявка);
		КонецЦикла;
		
		СтруктураЗапрос.Вставить("Заявки", МассивЗаявок);
		
		МассивРезультат.Добавить(СтруктураЗапрос);
		
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

// Функция - Обработка запроса и формирование файла ответа
//
// Параметры:
//  ДопПараметры - структура - 
// 
// Возвращаемое значение:
//   - булево
//
Функция ОбработатьЗапросИСформироватьОтвет(ДопПараметры)
	
	Результат = Новый Структура("Выполнено, Описание", Ложь, "");
	
	МассивЗаявок = ПрочитьФайлВМассивДанных(ДопПараметры.Адрес);
	
	МассивСтруктур = ПолучитьСтатусыЗаявок(МассивЗаявок);

	АдресФайлаОтвета = ПодготовитьФайлОтвета(МассивСтруктур);
	
	Данные = Новый Структура;
	Данные.Вставить("Данные",      ПолучитьИзВременногоХранилища(АдресФайлаОтвета));
	Данные.Вставить("ВходящийИД",  ДопПараметры.ВходящийИД);
	Данные.Вставить("ТемаПисьма",  ДопПараметры.ТемаПисьма);
	Данные.Вставить("Получатель",  ДопПараметры.Получатель);
	 
	Если ЗаписатьИсходящийЗапросВРегистр(Данные) Тогда
		Результат.Выполнено = Истина;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

// Создает и отправляет почтовое сообщение на адрес контрагента
// Параметры:
// - АдресФайла - адрес временного хранилища с вложениями
//
// Возвращаемое значение:
Функция ОтправитьОтветКонтрагенту(ДопПараметры, ТекстОшибки="") Экспорт
	
	АдресФайла = "";
	Если НЕ ДопПараметры.Свойство("АдресФайла", АдресФайла) Тогда
		ТекстОшибки = "Отсутствует файл ответа";
		Возврат Ложь;
	КонецЕсли; 
	
	АдресПочтыКонтрагента = "";
	Если НЕ ДопПараметры.Свойство("Получатель", АдресПочтыКонтрагента) Тогда
		ТекстОшибки = "Не указан почтовый адрес получателя";
		Возврат Ложь;
		//АдресПочтыКонтрагента = Справочники.ИсточникиДанных.АдресВзаимодействияСПорталомЗаказчика.АдресПочты;
	КонецЕсли; 
	
	// Свойство есть, но не заполнено
	Если АдресПочтыКонтрагента = "" Тогда
		ТекстОшибки = "Не указан почтовый адрес получателя";
		Возврат Ложь;
	КонецЕсли; 
	
	ФайлПриемник = КаталогВременныхФайлов() + "Ответ.xml";
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресФайла);
	Если ТипЗнч(ДанныеХранилища) = Тип("Строка") Тогда
		ТекстФайл = Новый ТекстовыйДокумент;
		ТекстФайл.УстановитьТекст(ДанныеХранилища);
		ТекстФайл.Записать(ФайлПриемник, КодировкаТекста.UTF8);
	Иначе
		ДанныеХранилища.Записать(ФайлПриемник);	
	КонецЕсли;
	
	ФайлПриемникВходящий = ""; АдресВхФайла = "";
	Если ДопПараметры.Свойство("АдресВхФайла", АдресВхФайла) Тогда
		ФайлПриемникВходящий = КаталогВременныхФайлов() + "ВходящийЗапрос.xml";
		ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресВхФайла);
		Если ТипЗнч(ДанныеХранилища) = Тип("Строка") Тогда
			ТекстФайл = Новый ТекстовыйДокумент;
			ТекстФайл.УстановитьТекст(ДанныеХранилища);
			ТекстФайл.Записать(ФайлПриемникВходящий, КодировкаТекста.UTF8);
		Иначе
			ДанныеХранилища.Записать(ФайлПриемникВходящий);	
		КонецЕсли;
	КонецЕсли; 
	
	Вложения = Новый Соответствие;
	Вложения.Вставить("Ответ.xml", ФайлПриемник);
	Если НЕ ФайлПриемникВходящий = "" Тогда
		Вложения.Вставить("ВходящийЗапрос.xml", ФайлПриемникВходящий);
	КонецЕсли; 
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Кому", АдресПочтыКонтрагента);
	Тема = "";
	ПараметрыСообщения.Вставить("Тема", ?(ДопПараметры.Свойство("Тема", Тема), "RE: "+Тема, "Ответ"));
	ПараметрыСообщения.Вставить("Вложения", Вложения);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыСообщения);
		Возврат Истина;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Создает и отправляет почтовое сообщение об ошибке на адрес контрагента
// Параметры:
// - АдресФайла - адрес временного хранилища с вложениями
//
// Возвращаемое значение:
Функция ОтправитьСообщениеОбОшибке(АдресФайла)
	
	Если АдресФайла = "" Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ФайлПриемник = КаталогВременныхФайлов() + "Error.xml";
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресФайла);
	
	АдресПочтыКонтрагента = Справочники.ИсточникиДанных.АдресВзаимодействияСПорталомЗаказчика.АдресПочты;
	
	Вложения = Новый Соответствие;
	Вложения.Вставить("Respond.xml", ДанныеХранилища);
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Кому", АдресПочтыКонтрагента);
	ПараметрыСообщения.Вставить("Тема", "Ответ");
	//ПараметрыСообщения.Вставить("Тело", Тело);
	ПараметрыСообщения.Вставить("Вложения", Вложения);
	
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты, ПараметрыСообщения);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции
 
// Регламентное задание по проверке почты, получении и обработки запросов, и отправка ответов
// Параметры:
//
// Возвращаемое значение:
Процедура РегламентноеПолучитьОтправитьПочту() Экспорт 
	
	СистемнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ТолькоНеПрочитанные", Истина);
	ПараметрыЗагрузки.Вставить("ПолучениеЗаголовков", Истина);
	
	// получаем только заголовки не прочитанных сообщений
	Попытка
		НеПрочитанныеСообщения = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(СистемнаяЗапись, ПараметрыЗагрузки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	МассивИдентификаторов = новый Массив;
	Для каждого Стр Из НеПрочитанныеСообщения Цикл
		Если ТипЗнч(Стр.Идентификатор) = Тип("Массив") Тогда
			Для каждого Элем Из Стр.Идентификатор Цикл
				МассивИдентификаторов.Добавить(Элем);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
	Если МассивИдентификаторов.Количество() = 0 Тогда
		НаборСообщений = Новый ТаблицаЗначений; // Пропускаем получение почты
	Иначе
		ПараметрыЗагрузки = Новый Структура;
		ПараметрыЗагрузки.Вставить("ЗаголовкиИдентификаторы", МассивИдентификаторов);
		
		// получаем почтовые сообщения
		Попытка
			НаборСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(СистемнаяЗапись, ПараметрыЗагрузки);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
	КонецЕсли; 
	
	Для каждого Сообщение Из НаборСообщений Цикл
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			
			ДвоичныеДанные = Вложение.Значение;
			
			Если ДвоичныеДанные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Это не хмл или зип файл, пропускаем
			Если НЕ (СтрНайти(Вложение.Ключ, ".xml") > 0 ИЛИ СтрНайти(Вложение.Ключ, ".zip") > 0) Тогда
				Продолжить;
			КонецЕсли; 
			
			ВремКаталог = КаталогВременныхФайлов();
			
			ИмяФайла = ВремКаталог + Вложение.Ключ;
			
			// записываем вложение в файл
			Попытка
				ДвоичныеДанные.Записать(ИмяФайла);
			Исключение
				Возврат;
			КонецПопытки;
			
			АрхивВложение = Неопределено; 
			// Если это архив, то распаковываем из него xml файл
			Если СтрНайти(ИмяФайла, ".zip") > 0 Тогда
				
				// Помещаем архив в хранилище значения
				АрхивВложение = Новый ХранилищеЗначения(ДвоичныеДанные);
				
				// Распаковвываем только хмл
				ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяФайла);
				Для каждого ТекАрхив Из ЧтениеЗИП.Элементы Цикл
					Если СтрНайти(ТекАрхив.Расширение, "xml") > 0 Тогда
						ИмяФайла = ВремКаталог + ТекАрхив.Имя;
						ЧтениеЗИП.Извлечь(ТекАрхив, ВремКаталог);
					КонецЕсли; 
				КонецЦикла;
				ЧтениеЗИП.Закрыть();
			КонецЕсли; 
			
			// Читаем сам файл
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
			ТекстХМЛ = Текст.ПолучитьТекст();
			
			ТипЗапроса = ОпределитьТипЗапроса(ТекстХМЛ);
			
			Данные = Новый Структура;
			Данные.Вставить("Данные", ТекстХМЛ);
			Данные.Вставить("Отправитель", Сообщение.Отправитель);
			Данные.Вставить("Получатель",  Сообщение.Получатели);
			Данные.Вставить("ТипЗапроса",  ТипЗапроса);
			Данные.Вставить("ТемаПисьма",  Сообщение.Тема);
			ТекстыПисьма = "";
			Для каждого Стр Из Сообщение.Тексты Цикл
				ТекстыПисьма = ТекстыПисьма + Стр.Получить("Текст") + Символы.ПС;
			КонецЦикла; 
			Данные.Вставить("ТекстПисьма", ТекстыПисьма);
			Если НЕ АрхивВложение = Неопределено Тогда
				Данные.Вставить("ИмяФайла",      Вложение.Ключ);
				Данные.Вставить("АрхивВложение", АрхивВложение);
			КонецЕсли; 
			
			ЗаписатьВходящийЗапросВРегистр(Данные);
			
			УдалитьФайлы(ИмяФайла);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	// отправка сообщений
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящиеЭлектронныеПисьма.ИД КАК ИД,
	|	ИсходящиеЭлектронныеПисьма.ВходящийИД КАК ВходящийИД,
	|	ИсходящиеЭлектронныеПисьма.Данные КАК Данные,
	|	ИсходящиеЭлектронныеПисьма.Статус КАК Статус,
	|	ИсходящиеЭлектронныеПисьма.ОписаниеОшибки КАК ОписаниеОшибки,
	|	ИсходящиеЭлектронныеПисьма.ТемаПисьма КАК ТемаПисьма,
	|	ИсходящиеЭлектронныеПисьма.Получатель КАК Получатель
	|ИЗ
	|	РегистрСведений.ИсходящиеЭлектронныеПисьма КАК ИсходящиеЭлектронныеПисьма
	|ГДЕ
	|	ИсходящиеЭлектронныеПисьма.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработокЗапросов.Новый)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		АдресФайла   = ПоместитьВоВременноеХранилище(Выборка.Данные);
		
		ОписаниеОшибки = "";
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Тема", 		 Выборка.ТемаПисьма);
		ДопПараметры.Вставить("Получатель",  Выборка.Получатель);
		ДопПараметры.Вставить("АдресФайла",  АдресФайла);
		
		Результат = ОтправитьОтветКонтрагенту(ДопПараметры, ОписаниеОшибки); 
		
		Если Результат Тогда
			Данные = Новый Структура;
			Данные.Вставить("ИД", Выборка.ИД);
			УстановитьСтатусОбработано(Данные, "Исходящий");
		Иначе
			Данные = Новый Структура;
			Данные.Вставить("ИД", Выборка.ИД);
			Данные.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			ЗаписатьОшибкуИОписание(Данные, "Исходящий");
		КонецЕсли; 
		
	КонецЦикла;  
	
КонецПроцедуры
 
// Процедура - Регламентное задание обработки входящих запросов
//
Процедура РегламентноеОбработатьЗапросы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВходящиеЭлектронныеПисьма.ИД КАК ИД,
	|	ВходящиеЭлектронныеПисьма.Данные КАК Данные,
	|	ВходящиеЭлектронныеПисьма.ТипЗапроса КАК ТипЗапроса,
	|	ВходящиеЭлектронныеПисьма.Вложение КАК Вложение,
	|	ВходящиеЭлектронныеПисьма.ТемаПисьма КАК ТемаПисьма,
	|	ВходящиеЭлектронныеПисьма.Отправитель КАК Отправитель,
	|	ВходящиеЭлектронныеПисьма.Получатель КАК Получатель
	|ИЗ
	|	РегистрСведений.ВходящиеЭлектронныеПисьма КАК ВходящиеЭлектронныеПисьма
	|ГДЕ
	|	(ВходящиеЭлектронныеПисьма.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработокЗапросов.Новый))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстХМЛ 	 = Выборка.Данные;
		ВходящийИД   = Выборка.ИД;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ВходящийИД", ВходящийИД);
		ДопПараметры.Вставить("Адрес", ПоместитьВоВременноеХранилище(ТекстХМЛ));
		
		Если Выборка.ТипЗапроса = Перечисления.ТипыВходящихЗапросов.ПолучениеСтатусов Тогда
			
			ДопПараметры.Вставить("ТемаПисьма",  Выборка.ТемаПисьма);
			ДопПараметры.Вставить("Отправитель", Выборка.Получатель);
			ДопПараметры.Вставить("Получатель",  Выборка.Отправитель);
			
			Результат = ОбработатьЗапросИСформироватьОтвет(ДопПараметры);
			
		ИначеЕсли Выборка.ТипЗапроса = Перечисления.ТипыВходящихЗапросов.ЗагрузкаЗаявок Тогда
			
			ДопПараметры.Вставить("Вложение", Выборка.Вложение);
			Результат = ПрочитатьXMLФайлЗапросыИЗаявки(ДопПараметры);
			
		ИначеЕсли Выборка.ТипЗапроса = Перечисления.ТипыВходящихЗапросов.ИзменениеЗаявки Тогда
			
			ДопПараметры.Вставить("Вложение", Выборка.Вложение);
			ДопПараметры.Вставить("ИзменениеЗаявки", Истина);
			
			Результат = ПрочитатьXMLФайлЗапросыИЗаявки(ДопПараметры);
			
		ИначеЕсли Выборка.ТипЗапроса = Перечисления.ТипыВходящихЗапросов.ДобавлениеФайлов Тогда
			
			ДопПараметры.Вставить("Вложение", Выборка.Вложение);
			ДопПараметры.Вставить("ДобавитьФайлы", Истина);
			Результат = ПрочитатьXMLФайлЗапросыИЗаявки(ДопПараметры);
			
		Иначе
			Результат = Новый Структура("Выполнено, Описание", Ложь, "Во входящем электронном письме не указан Тип запроса");
		КонецЕсли; 
		
		Если Результат.Выполнено Тогда
			
			Данные = Новый Структура;
			Данные.Вставить("ИД", ВходящийИД);
			УстановитьСтатусОбработано(Данные, "Входящий");
			
		Иначе
			
			Данные = Новый Структура;
			Данные.Вставить("ИД", ВходящийИД);
			Данные.Вставить("ОписаниеОшибки", Результат.Описание);
			ЗаписатьОшибкуИОписание(Данные, "Входящий");
			
		КонецЕсли; 
		
	КонецЦикла;  
	
КонецПроцедуры
 