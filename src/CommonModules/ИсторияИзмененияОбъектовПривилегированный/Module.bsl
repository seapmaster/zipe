////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль содержит процедуры и функции для работы механизма сохранения истории изменения объектов
//
////////////////////////////////////////////////////////////////////////////////////////////////////


#Область ОбработчикиПодписокНаСобытия

// Обработчик подписки на событие "ПередЗаписью" для всех документов.
// Записывает историю изменения реквизитов для существующих объектов.
//
Процедура ЗаписьИсторииИзмененияДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияСерверПовтИсп.ПроверитьНеобходимостьФиксацииИсторииИзмененияОбъектовПриНачальномЗаполненииБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияИзмененияОбъектовПередЗаписью(Источник, РежимЗаписи);
	
КонецПроцедуры

// Обработчик подписки на событие "ПриЗаписи" для всех документов.
// Записывает историю изменения реквизитов для новых объектов.
//
Процедура ЗаписьИсторииИзмененияДокументовПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияСерверПовтИсп.ПроверитьНеобходимостьФиксацииИсторииИзмененияОбъектовПриНачальномЗаполненииБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияИзмененияОбъектовПриЗаписи(Источник);

КонецПроцедуры

// Обработчик подписки на событие "ПередЗаписью" для всех справочников.
// Записывает историю изменения реквизитов для существующих объектов.
//
Процедура ЗаписьИсторииИзмененияСправочниковПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияСерверПовтИсп.ПроверитьНеобходимостьФиксацииИсторииИзмененияОбъектовПриНачальномЗаполненииБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияИзмененияОбъектовПередЗаписью(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие "ПриЗаписи" для всех справочников.
// Записывает историю изменения реквизитов для новых объектов.
//
Процедура ЗаписьИсторииИзмененияСправочниковПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияСерверПовтИсп.ПроверитьНеобходимостьФиксацииИсторииИзмененияОбъектовПриНачальномЗаполненииБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияИзмененияОбъектовПриЗаписи(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие "ПередЗаписью" для всех задач.
// Записывает историю изменения реквизитов для существующих объектов.
//
Процедура ЗаписьИсторииИзмененияЗадачПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияСерверПовтИсп.ПроверитьНеобходимостьФиксацииИсторииИзмененияОбъектовПриНачальномЗаполненииБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияИзмененияОбъектовПередЗаписью(Источник);
	
КонецПроцедуры

// Обработчик подписки на событие "ПриЗаписи" для всех задач.
// Записывает историю изменения реквизитов для новых объектов.
//
Процедура ЗаписьИсторииИзмененияЗадачПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ОбщегоНазначенияСерверПовтИсп.ПроверитьНеобходимостьФиксацииИсторииИзмененияОбъектовПриНачальномЗаполненииБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияИзмененияОбъектовПриЗаписи(Источник);
	
КонецПроцедуры

// + 10.01.2018 12:16:42 Базунов Д.А. Задача: 
Процедура sp_ИсторияИзмененияОбъектовПриЗаписи(Источник) Экспорт
	
	// Определяем признак записи нового объекта из доп.свойств объекта, установленных в обработчике ПередЗаписью
	ЭтоНовый = Истина;
	
	// Определяем сохраняемые реквизиты и сохраняемые табличные части объекта
	ИсточникМетаданные = Источник.Метаданные();
	СохраняемыеРеквизиты = ПолучитьСохраняемыеРеквизитыОбъекта(ИсточникМетаданные);
	СохраняемыеТабличныеЧасти = ПолучитьСохраняемыеРеквизитыТабличныхЧастейОбъекта(ИсточникМетаданные);
	
	// В обработчике ПриЗаписи сохраняем историю изменения реквизитов только для новых объектов, т.к. по ним только в этом обработчике уже существует Ссылка на объект
	Если ЭтоНовый Тогда
		СохранитьИсториюИзмененияОбъекта(Источник, ЭтоНовый, ИсточникМетаданные, СохраняемыеРеквизиты, СохраняемыеТабличныеЧасти);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет ключи связи в объекте
Процедура sp_ЗаполнитьКлючиСвязиВТабличныхЧастях(Источник) Экспорт
	
	СохраняемыеТабличныеЧасти = ПолучитьСохраняемыеРеквизитыТабличныхЧастейОбъекта(Источник.Метаданные());
	
	ЗаполнитьКлючиСвязиВТабличныхЧастях(Источник, СохраняемыеТабличныеЧасти);
	
КонецПроцедуры

// - 10.01.2018 12:16:42 Базунов Д.А. Задача: 
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список реквизитов объекта, для которых требуется сохранять историю изменения
//
// Параметры:
//    МетаданныеОбъекта	 - ОбъектМетаданных - Метаданные объекта, для которого требуется получить список сохраняемых реквизитов
//
// Возвращаемое значение:
//    Массив - массив строк с именами реквизитов объекта, для которых требуется сохранять историю изменения
//
Функция ПолучитьСохраняемыеРеквизитыОбъекта(МетаданныеОбъекта)
	
	СохраняемыеРеквизиты = Новый Массив;
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		// Добавляем стандартные реквизиты объекта метаданных Справочник
		Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			Если Реквизит.Имя = "Ссылка" 
			 ИЛИ Реквизит.Имя = "Предопределенный"
			 ИЛИ Реквизит.Имя = "ИмяПредопределенныхДанных" Тогда
				Продолжить;
			КонецЕсли;
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		// Добавляем произвольные реквизиты объекта метаданных Справочник
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		// Добавляем стандартные реквизиты объекта метаданных Документ
		Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			Если Реквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		// Добавляем произвольные реквизиты объекта метаданных Документ
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		// Добавляем стандартные реквизиты объекта метаданных Задача
		Для каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			Если Реквизит.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		// Добавляем произвольные реквизиты объекта метаданных Задача
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		// Добавляем реквизиты адресации объекта метаданных Задача
		Для каждого Реквизит Из МетаданныеОбъекта.РеквизитыАдресации Цикл
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СохраняемыеРеквизиты;
	
КонецФункции

// Возвращает список реквизитов табличных частей объекта, для которых требуется сохранять историю изменения
//
// Параметры:
//    МетаданныеОбъекта	 - ОбъектМетаданных - Метаданные объекта, для которого требуется получить список сохраняемых реквизитов табличных частей
//
// Возвращаемое значение:
//    Массив - массив структур со следующими полями:
//      * Имя - Строка - имя табличной части
//      * ТипКлючаСвязи - Строка - тип реквизита табличной части КлючСвязи, "Число", "УникальныйИдентификатор" или "Строка"
//      * ИмяКлючаСвязи - Строка - имя реквизита табличной части КлючСвязи
//      * Реквизиты - Массив - массив строк с именами реквизитов табличной части объекта, для которых требуется сохранять историю изменения
//
Функция ПолучитьСохраняемыеРеквизитыТабличныхЧастейОбъекта(МетаданныеОбъекта)
	
	СохраняемыеТабличныеЧасти = Новый Массив;
	
	Для каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		// Обрабатываем только те табличные части, у которых есть реквизит КлючСвязи
		РеквизитКлючСвязи = ТабличнаяЧасть.Реквизиты.Найти("КлючСвязи");
		Если РеквизитКлючСвязи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Определяем тип реквизита КлючСвязи, обрабатываем только те табличные части, у которых тип этого реквизита - Число, УникальныйИдентификатор или Строка (для КИ)
		ТипРеквизита = РеквизитКлючСвязи.Тип.Типы()[0];
		Если ТипРеквизита = Тип("Число") Тогда
			ТипКлючаСвязи = "Число";
		ИначеЕсли ТипРеквизита = Тип("УникальныйИдентификатор") Тогда
			ТипКлючаСвязи = "УникальныйИдентификатор";
		ИначеЕсли ТипРеквизита = Тип("Строка") Тогда
			ТипКлючаСвязи = "Строка";
		Иначе
			Продолжить;
		КонецЕсли;
						
		// Заполняем массив сохраняемых реквизитов табличной части
		СохраняемыеРеквизиты = Новый Массив;
		
		// Добавляем стандартные реквизиты табличной части
		Для каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		// Добавляем произвольные реквизиты табличной части
		Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			СохраняемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЦикла;
		
		СохраняемыеТабличныеЧасти.Добавить(Новый Структура("Имя,ТипКлючаСвязи,ИмяКлючаСвязи,Реквизиты", ТабличнаяЧасть.Имя, ТипКлючаСвязи, РеквизитКлючСвязи.Имя, СохраняемыеРеквизиты));
		
	КонецЦикла;
	
	Возврат СохраняемыеТабличныеЧасти;
	
КонецФункции

// Заполняет реквизит КлючСвязи в переданных табличных частях объекта, там где он не заполнен.
//
// Параметры:
//  Источник					 - Объект - Объект, для которого требуется заполнить ключ связи в табличных частях
//  СохраняемыеТабличныеЧасти	 - Массив структур - Массив структур-описаний табличных частей, для которых требуется заполнить реквизит КлючСвязи. Структуры следующего вида:
//      * Имя - Строка - имя табличной части
//      * ТипКлючаСвязи - Строка - тип реквизита табличной части КлючСвязи, "Число", "УникальныйИдентификатор" или "Строка"
//      * ИмяКлючаСвязи - Строка - имя реквизита табличной части КлючСвязи
//      * Реквизиты - Массив - массив строк с именами реквизитов табличной части объекта, для которых требуется сохранять историю изменения
//
Процедура ЗаполнитьКлючиСвязиВТабличныхЧастях(Источник, СохраняемыеТабличныеЧасти)

	Для каждого ОписаниеТабличнойЧасти Из СохраняемыеТабличныеЧасти Цикл
		
		// Для числового ключа связи определим максимальный номер, причем и через объект, и через ссылку
		ТекущийМаксимальныйНомер = 0;
		Если ОписаниеТабличнойЧасти.ТипКлючаСвязи = "Число" И Источник[ОписаниеТабличнойЧасти.Имя].Найти(0, ОписаниеТабличнойЧасти.ИмяКлючаСвязи) <> Неопределено Тогда
			// Определим максимальный ключ связи через объект
			ТЗОбъект = Источник[ОписаниеТабличнойЧасти.Имя].Выгрузить(, ОписаниеТабличнойЧасти.ИмяКлючаСвязи);
			Если ТЗОбъект.Количество() > 0 Тогда
				ТЗОбъект.Сортировать(ОписаниеТабличнойЧасти.ИмяКлючаСвязи + " Убыв");
				ТекущийМаксимальныйНомер = ТЗОбъект[0][ОписаниеТабличнойЧасти.ИмяКлючаСвязи];
			КонецЕсли;
			
			// Определим максимальный ключ связи через ссылку (т.е. сохраненная в БД копия объекта до записи, возможно там была удаленная строка с бОльшим ключом связи, чем в объекте)
			Если НЕ Источник.Ссылка.Пустая() Тогда
				ТЗСсылка = Источник.Ссылка[ОписаниеТабличнойЧасти.Имя].Выгрузить(, ОписаниеТабличнойЧасти.ИмяКлючаСвязи);
				Если ТЗСсылка.Количество() > 0 Тогда
					ТЗСсылка.Сортировать(ОписаниеТабличнойЧасти.ИмяКлючаСвязи + " Убыв");
					ТекущийМаксимальныйНомер = Макс(ТекущийМаксимальныйНомер, ТЗСсылка[0][ОписаниеТабличнойЧасти.ИмяКлючаСвязи]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		// Заполняем ключ связи в тех строках табличной части, где он не заполнен
		Для каждого СтрокаТабличнойЧасти Из Источник[ОписаниеТабличнойЧасти.Имя] Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ОписаниеТабличнойЧасти.ИмяКлючаСвязи]) Тогда
				Если ОписаниеТабличнойЧасти.ТипКлючаСвязи = "Число" Тогда
					ТекущийМаксимальныйНомер = ТекущийМаксимальныйНомер + 1;
					СтрокаТабличнойЧасти[ОписаниеТабличнойЧасти.ИмяКлючаСвязи] = ТекущийМаксимальныйНомер;
				ИначеЕсли ОписаниеТабличнойЧасти.ТипКлючаСвязи = "УникальныйИдентификатор" Тогда
					СтрокаТабличнойЧасти[ОписаниеТабличнойЧасти.ИмяКлючаСвязи] = Новый УникальныйИдентификатор;
				ИначеЕсли ОписаниеТабличнойЧасти.ТипКлючаСвязи = "Строка" Тогда
					СтрокаТабличнойЧасти[ОписаниеТабличнойЧасти.ИмяКлючаСвязи] = Новый УникальныйИдентификатор;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает событие ПередЗаписью для всех объектов, инициализирует нужные параметры и вызывает обработку сохранения изменений реквизитов объекта.
// Вызывается из обработчиков подписок на событие "ПередЗаписью" для всех объектов.
//
// Параметры:
//  Источник	 - Объект - Объект-источник подписки на событие
//  РежимЗаписи	 - РежимЗаписиДокумента - режим записи документа (запись, проведение и т.д.), заполняется только для документов
//
Процедура ИсторияИзмененияОбъектовПередЗаписью(Источник, РежимЗаписи = Неопределено)
	
	// Запоминаем промежуточные параметры в доп.свойствах объекта для использования в обработчике ПриЗаписи - признак записи нового объекта и режим записи для документов
	ЭтоНовый = Источник.Ссылка.Пустая();
	Источник.ДополнительныеСвойства.Вставить("ИсторияИзмененияЭтоНовый", ЭтоНовый);
	Если РежимЗаписи <> Неопределено Тогда
		Источник.ДополнительныеСвойства.Вставить("ИсторияИзмененияРежимЗаписиДокумента", РежимЗаписи);
	КонецЕсли;
	
	// Определяем сохраняемые реквизиты и сохраняемые табличные части объекта
	ИсточникМетаданные = Источник.Метаданные();
	СохраняемыеРеквизиты = ПолучитьСохраняемыеРеквизитыОбъекта(ИсточникМетаданные);
	СохраняемыеТабличныеЧасти = ПолучитьСохраняемыеРеквизитыТабличныхЧастейОбъекта(ИсточникМетаданные);
	
	// Заполняем реквизит КлючСвязи во всех строках табличных частей, где он не заполнен
	ЗаполнитьКлючиСвязиВТабличныхЧастях(Источник, СохраняемыеТабличныеЧасти);
	
	// В обработчике ПередЗаписью сохраняем историю изменения реквизитов только для существующих объектов, чтобы была возможность сравнить новые значения через Объект и старые через Ссылку
	Если НЕ ЭтоНовый Тогда
		СохранитьИсториюИзмененияОбъекта(Источник, ЭтоНовый, ИсточникМетаданные, СохраняемыеРеквизиты, СохраняемыеТабличныеЧасти);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие ПриЗаписи для всех объектов, инициализирует нужные параметры и вызывает обработку сохранения изменений реквизитов объекта.
// Вызывается из обработчиков подписок на событие "ПриЗаписи" для всех объектов.
//
// Параметры:
//  Источник - Объект - Объект-источник подписки на событие
//
Процедура ИсторияИзмененияОбъектовПриЗаписи(Источник)
	
	// Определяем признак записи нового объекта из доп.свойств объекта, установленных в обработчике ПередЗаписью
	Если Источник.ДополнительныеСвойства.Свойство("ИсторияИзмененияЭтоНовый") Тогда
		ЭтоНовый = Источник.ДополнительныеСвойства.ИсторияИзмененияЭтоНовый;
	Иначе
		ЭтоНовый = Ложь;
	КонецЕсли;
	
	// Определяем сохраняемые реквизиты и сохраняемые табличные части объекта
	ИсточникМетаданные = Источник.Метаданные();
	СохраняемыеРеквизиты = ПолучитьСохраняемыеРеквизитыОбъекта(ИсточникМетаданные);
	СохраняемыеТабличныеЧасти = ПолучитьСохраняемыеРеквизитыТабличныхЧастейОбъекта(ИсточникМетаданные);
	
	// В обработчике ПриЗаписи сохраняем историю изменения реквизитов только для новых объектов, т.к. по ним только в этом обработчике уже существует Ссылка на объект
	Если ЭтоНовый Тогда
		СохранитьИсториюИзмененияОбъекта(Источник, ЭтоНовый, ИсточникМетаданные, СохраняемыеРеквизиты, СохраняемыеТабличныеЧасти);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет историю изменения реквизитов и табличных частей объекта.
//
// Параметры:
//  Источник					 - Объект - Объект, для которого требуется сохранить историю изменения реквизитов и табличных частей
//  ЭтоНовый					 - Булево - Признак, является ли текущая транзакция записи записью нового объекта (инициализируется в обработчике ПередЗаписью, используется в обработчике ПриЗаписи)
//  ИсточникМетаданные			 - Метаданные - Метаданные объекта, для которого требуется сохранить историю изменения реквизитов и табличных частей
//  СохраняемыеРеквизиты		 - Массив - массив строк с именами реквизитов объекта, для которых требуется сохранять историю изменения
//  СохраняемыеТабличныеЧасти	 - Массив структур - Массив структур-описаний табличных частей, для которых требуется сохранить историю изменения. Структуры следующего вида:
//      * Имя - Строка - имя табличной части
//      * ТипКлючаСвязи - Строка - тип реквизита табличной части КлючСвязи, "Число" или "УникальныйИдентификатор"
//      * ИмяКлючаСвязи - Строка - имя реквизита табличной части КлючСвязи
//      * Реквизиты - Массив - массив строк с именами реквизитов табличной части объекта, для которых требуется сохранять историю изменения
//
Процедура СохранитьИсториюИзмененияОбъекта(Источник, ЭтоНовый, ИсточникМетаданные, СохраняемыеРеквизиты, СохраняемыеТабличныеЧасти)
	
	мТекущаяДата = ТекущаяДата();
	ИсточникСсылка = Источник.Ссылка;
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	// Обрабатываем изменение реквизитов объекта
	НаборЗаписей = РегистрыСведений.ИсторияИзмененияРеквизитовОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ИсточникСсылка);
	НаборЗаписей.Отбор.Дата.Установить(мТекущаяДата);
	НаборЗаписей.Отбор.Автор.Установить(ТекущийПользователь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Реквизит Из СохраняемыеРеквизиты Цикл
		ДобавитьЗаписьВНаборЗаписейИсторииИзмененияРеквизитов(Источник, ИсточникСсылка, ЭтоНовый, НаборЗаписей, Реквизит, ТекущийПользователь, мТекущаяДата);
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	// Обрабатываем изменение реквизитов табличных частей объекта
	НаборЗаписей = РегистрыСведений.ИсторияИзмененияРеквизитовТабличныхЧастей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ИсточникСсылка);
	НаборЗаписей.Отбор.Дата.Установить(мТекущаяДата);
	НаборЗаписей.Отбор.Автор.Установить(ТекущийПользователь);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	// Для устранения возможного дублирования записей из-за некорректных ключей связи, историю изменения табличных частей будем записывать через промежуточную таблицу значений.
	ВременнаяТаблицаЗначений = НаборЗаписей.ВыгрузитьКолонки();
	
	Для каждого ОписаниеТабличнойЧасти Из СохраняемыеТабличныеЧасти Цикл
		
		// Если объект не новый, выгрузим в таблицу значений данные ТЧ из Ссылки, чтобы сравнивать изменения строк ТЧ
		Если НЕ ЭтоНовый Тогда
			ТЗСсылка = Источник.Ссылка[ОписаниеТабличнойЧасти.Имя].Выгрузить();
		КонецЕсли;
		
		// Отражаем добавление и изменение строк табличной части
		Для каждого СтрокаТабличнойЧасти Из Источник[ОписаниеТабличнойЧасти.Имя] Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ОписаниеТабличнойЧасти.ИмяКлючаСвязи]) Тогда
				// Пропускаем, т.к. все ключи связи должны были быть заполнены ранее в обработчике ПередЗаписью - и для новых, и для существующих объетов
				Продолжить;
			КонецЕсли;
			
			// Ищем, была ли в табличной части по ссылке до записи объекта строка ТЧ с таким же значением ключа связи
			Если НЕ ЭтоНовый Тогда
				СтрокаТабличнойЧастиПоСсылке = ТЗСсылка.Найти(СтрокаТабличнойЧасти[ОписаниеТабличнойЧасти.ИмяКлючаСвязи], ОписаниеТабличнойЧасти.ИмяКлючаСвязи);
			Иначе
				СтрокаТабличнойЧастиПоСсылке = Неопределено;
			КонецЕсли;
			
			Для каждого РеквизитТабличнойЧасти Из ОписаниеТабличнойЧасти.Реквизиты Цикл
				ДобавитьЗаписьВНаборЗаписейИсторииИзмененияРеквизитовТабличныхЧастей(ИсточникСсылка, СтрокаТабличнойЧасти, СтрокаТабличнойЧастиПоСсылке, ЭтоНовый, ВременнаяТаблицаЗначений, ОписаниеТабличнойЧасти.Имя, РеквизитТабличнойЧасти, ТекущийПользователь, мТекущаяДата, ОписаниеТабличнойЧасти.ТипКлючаСвязи, ОписаниеТабличнойЧасти.ИмяКлючаСвязи);
			КонецЦикла;
			
			Если СтрокаТабличнойЧастиПоСсылке <> Неопределено Тогда
				ТЗСсылка.Удалить(ТЗСсылка.Индекс(СтрокаТабличнойЧастиПоСсылке));
			КонецЕсли;
			
		КонецЦикла;
		
		// Отражаем удаление строк табличной части
		Если НЕ ЭтоНовый Тогда
			Для каждого СтрокаТабличнойЧастиПоСсылке Из ТЗСсылка Цикл
				
				Для каждого РеквизитТабличнойЧасти Из ОписаниеТабличнойЧасти.Реквизиты Цикл
					ДобавитьЗаписьВНаборЗаписейИсторииИзмененияРеквизитовТабличныхЧастей(ИсточникСсылка, Неопределено, СтрокаТабличнойЧастиПоСсылке, ЭтоНовый, ВременнаяТаблицаЗначений, ОписаниеТабличнойЧасти.Имя, РеквизитТабличнойЧасти, ТекущийПользователь, мТекущаяДата, ОписаниеТабличнойЧасти.ТипКлючаСвязи, ОписаниеТабличнойЧасти.ИмяКлючаСвязи);
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Загружаем записи в набор записей из временной таблицы значений
	НаборЗаписей.Загрузить(ВременнаяТаблицаЗначений);
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую запись в набор записей регистра сведений ИсторияИзмененияРеквизитовОбъектов
//
// Параметры:
//  Источник		 - Объект - Объект, для которого требуется сохранить историю изменения реквизитов и табличных частей
//  ИсточникСсылка	 - Ссылка - Ссылка на объект, для которого требуется сохранить историю изменения реквизитов и табличных частей
//  ЭтоНовый  		 - Булево - Признак, является ли текущая транзакция записи записью нового объекта (инициализируется в обработчике ПередЗаписью, используется в обработчике ПриЗаписи)
//  НаборЗаписей	 - НаборЗаписей - Набор записей регистра сведений, в который требуется добавить новую запись
//  Реквизит		 - Строка - имя реквизита, для которого требуется сохранить историю
//  Пользователь	 - СправочникСсылка.Пользователи - ссылка на текущего пользователя
//  Дата			 - Дата - Дата и время изменения объекта
//
Процедура ДобавитьЗаписьВНаборЗаписейИсторииИзмененияРеквизитов(Источник, ИсточникСсылка, ЭтоНовый, НаборЗаписей, Реквизит, Пользователь, Дата)
	
	НовоеЗначениеРеквизита = Источник[Реквизит];
	СтароеЗначениеРеквизита = ?(ЭтоНовый, "", ИсточникСсылка[Реквизит]);
	
	// Для документов новое значение реквизита Проведен нужно получать по-другому
	Если Метаданные.Документы.Содержит(Источник.Метаданные()) И Реквизит = "Проведен" Тогда
		ИсторияИзмененияРежимЗаписиДокумента = "";
		Если Источник.ДополнительныеСвойства.Свойство("ИсторияИзмененияРежимЗаписиДокумента", ИсторияИзмененияРежимЗаписиДокумента) Тогда
			Если ИсторияИзмененияРежимЗаписиДокумента = РежимЗаписиДокумента.Проведение Тогда
				НовоеЗначениеРеквизита = Истина;
			ИначеЕсли ИсторияИзмененияРежимЗаписиДокумента = РежимЗаписиДокумента.ОтменаПроведения Тогда
				НовоеЗначениеРеквизита = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Запись добавляем только для новых объектов или если было изменено значение реквизита
	Если ЭтоНовый ИЛИ НовоеЗначениеРеквизита <> СтароеЗначениеРеквизита Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = ИсточникСсылка;
		НоваяЗапись.Реквизит = Реквизит;
		НоваяЗапись.Автор = Пользователь;
		НоваяЗапись.Дата = Дата;
		НоваяЗапись.СтароеЗначение = СтароеЗначениеРеквизита;
		НоваяЗапись.НовоеЗначение = НовоеЗначениеРеквизита;
		НоваяЗапись.ТипИзменения = ?(ЭтоНовый, Перечисления.ТипыИзмененийОбъектов.Создан, Перечисления.ТипыИзмененийОбъектов.Изменен);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую запись в набор записей регистра сведений ИсторияИзмененияРеквизитовТабличныхЧастей
//
// Параметры:
//  ИсточникСсылка	 			 - Ссылка - Ссылка на объект, для которого требуется сохранить историю изменения реквизитов и табличных частей
//  СтрокаТабличнойЧасти		 - СтрокаТабличнойЧасти - изменяемая строка табличной части, или Неопределено если нужно отразить факт удаления строки ТЧ
//  СтрокаТабличнойЧастиПоСсылке - СтрокаТаблицыЗначений - строка таблицы значений, найденная по ключу связи через Ссылку на объект (т.е. старая версия строки табличной части до изменения)
//  ЭтоНовый  					 - Булево - Признак, является ли текущая транзакция записи записью нового объекта (инициализируется в обработчике ПередЗаписью, используется в обработчике ПриЗаписи)
//  ВременнаяТаблицаЗначений	 - ТаблицаЗначений - Таблица значений со структурой, аналогичной набору записей регистра сведений, в который требуется добавить новую запись
//  ИмяТабличнойЧасти			 - Строка - Имя табличной части, для которой требуется сохранить историю
//  Реквизит					 - Строка - имя реквизита табличной части, для которого требуется сохранить историю
//  Пользователь				 - СправочникСсылка.Пользователи - ссылка на текущего пользователя
//  Дата						 - Дата - Дата и время изменения объекта
//  ТипКлючаСвязи                - Строка - Тип ключа связи для строк табличной части
//  ИмяКлючаСвязи                - Строка - Имя ключа связи для строк табличной части
//
Процедура ДобавитьЗаписьВНаборЗаписейИсторииИзмененияРеквизитовТабличныхЧастей(ИсточникСсылка, СтрокаТабличнойЧасти, СтрокаТабличнойЧастиПоСсылке, ЭтоНовый, ВременнаяТаблицаЗначений, ИмяТабличнойЧасти, Реквизит, Пользователь, Дата, ТипКлючаСвязи, ИмяКлючаСвязи)
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		НовоеЗначениеРеквизита = СтрокаТабличнойЧасти[Реквизит];
	Иначе
		НовоеЗначениеРеквизита = "";
	КонецЕсли;
	Если СтрокаТабличнойЧастиПоСсылке <> Неопределено Тогда
		СтароеЗначениеРеквизита = СтрокаТабличнойЧастиПоСсылке[Реквизит];
	Иначе
		СтароеЗначениеРеквизита = "";
	КонецЕсли;
	
	// Запись добавляем только в следующих случаях: запись нового объекта, изменение значения в колонке ТЧ, добавление новой строки ТЧ, удаление существующей строки ТЧ.
	Если ЭтоНовый 
	 ИЛИ НовоеЗначениеРеквизита <> СтароеЗначениеРеквизита 
	 ИЛИ СтрокаТабличнойЧасти = Неопределено
	 ИЛИ СтрокаТабличнойЧастиПоСсылке = Неопределено Тогда
	 
		КлючСвязиДляЗаписи = ?(СтрокаТабличнойЧасти <> Неопределено, СтрокаТабличнойЧасти[ИмяКлючаСвязи], СтрокаТабличнойЧастиПоСсылке[ИмяКлючаСвязи]);
		Если ТипКлючаСвязи = "УникальныйИдентификатор" Тогда
			КлючСвязиДляЗаписи = Строка(КлючСвязиДляЗаписи);
		КонецЕсли;
	 
	 	// Структура отбора по измерениям регистра
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Объект", ИсточникСсылка);
		СтруктураОтбора.Вставить("Дата", Дата);
		СтруктураОтбора.Вставить("ИмяТЧ", ИмяТабличнойЧасти);
		СтруктураОтбора.Вставить("КлючСвязи", КлючСвязиДляЗаписи);
		СтруктураОтбора.Вставить("Реквизит", Реквизит);
		СтруктураОтбора.Вставить("Автор", Пользователь);
		
		// Не будем добавлять новые строки, заведомо дублирующиеся по ключу измерений регистра сведений
		НайденныеСтроки = ВременнаяТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
	 
		// Добавляем запись во временную таблицу значений, из которой потом они будут перенесены в регистр сведений
		НоваяЗапись = ВременнаяТаблицаЗначений.Добавить();
		НоваяЗапись.Объект = ИсточникСсылка;
		НоваяЗапись.Дата = Дата;
		НоваяЗапись.ИмяТЧ = ИмяТабличнойЧасти;
		НоваяЗапись.КлючСвязи = КлючСвязиДляЗаписи;
		НоваяЗапись.Реквизит = Реквизит;
		НоваяЗапись.Автор = Пользователь;
		НоваяЗапись.СтароеЗначение = СтароеЗначениеРеквизита;
		НоваяЗапись.НовоеЗначение = НовоеЗначениеРеквизита;
		НоваяЗапись.ТипИзменения = ?(ЭтоНовый, Перечисления.ТипыИзмененийОбъектов.Создан, ?(СтрокаТабличнойЧасти <> Неопределено, ?(СтрокаТабличнойЧастиПоСсылке <> Неопределено, Перечисления.ТипыИзмененийОбъектов.Изменен, Перечисления.ТипыИзмененийОбъектов.Добавлен), Перечисления.ТипыИзмененийОбъектов.Удален));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
