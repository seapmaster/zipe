//////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПрочитатьТабличныйДокумент(Адрес, ПараметрыФайла)
	
	Результат = Неопределено;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
	Если ПараметрыФайла = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("xls");
	Иначе
		ИмяФайла = ПолучитьИмяВременногоФайла(ПараметрыФайла.Расширение);
	КонецЕсли; // Если ПараметрыФайла = Неопределено Тогда
	
	ДанныеФайла.Записать(ИмяФайла);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		ТабличныйДокумент.Прочитать(ИмяФайла);
		Результат = ТабличныйДокумент;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось прочитать файл");
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Результат;
	
КонецФункции // ПрочитатьТабличныйДокумент

Функция ПолучитьПорядокЛистов(ТабличныйДокумент)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование", 	Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Порядок", 		Новый ОписаниеТипов("Число"));
	
	Для Счет = 0 По ТабличныйДокумент.Области.Количество() -1 Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Наименование 	= ТабличныйДокумент.Области[Счет].Имя;
		
		Попытка
			ПорядокОбласти = Число(ТабличныйДокумент.Области[Счет].Верх);
		Исключение
			ПорядокОбласти = Счет;
		КонецПопытки;
		
		НоваяСтрока.Порядок = ПорядокОбласти;
		
	КонецЦикла; // Для Счет = 0 По ТабличныйДокумент.Области.Количество() -1 Цикл
	
	Результат.Сортировать("Порядок Возр");
	
	Возврат	Результат;
	
КонецФункции // ПолучитьПорядокЛистов

Функция ПолучитьСоответствиеОбозначений(Спецификация)
	СоответствиеОбозначений = Новый Соответствие;
	Для каждого СтрокаПредметСнабжения Из Спецификация Цикл
		 СоответствиеОбозначений.Вставить(СтрокаПредметСнабжения.ПредметСнабжения, СтрокаПредметСнабжения.ПредметСнабжения.Обозначение); 
	КонецЦикла;
	Возврат СоответствиеОбозначений;
КонецФункции // ПолучитьСоответствиеОбозначений

Функция ЕстьНеНулеваяЦена(Спецификация, ИмяКолонки)
	
	ТаблицаПоиска = Спецификация.Выгрузить();
	Отбор = Новый Структура(ИмяКолонки,0);
	
	Если ТаблицаПоиска.Количество() = ТаблицаПоиска.НайтиСтроки(Отбор).Количество() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ЕстьНеНулеваяЦена

Функция ПолучитьНачальникаОтделаЦенообразования()
	Возврат Строка(Константы.НачальникОтделаЦенообразования.Получить());
КонецФункции // ПолучитьНачальникаОтделаЦенообразования

&НаСервере
Функция ПолучитьПрисоединенныеФайлы(Ссылка)
	МассивФайлов = Новый Массив;
	ПрисоединенныеФайлы.ПолучитьПрикрепленныеФайлыКОбъекту(Ссылка, МассивФайлов);
	Возврат МассивФайлов;
КонецФункции

#Область КорректировкаДанныхСправочниковКлиент

Функция ПодготовитьОписаниеДокумента_КорректировкаДанныхПС(ПредметыСнабжения)
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "Информация по изделиям");
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_ОбменаСПоставщиками_ИнформацияПоИзделиям();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	// ПС
	Для Каждого СтрокаПредметСнабжения Из ПредметыСнабжения Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		
		Область.Параметры.Идентификатор 				= ?(ЗначениеЗаполнено(СтрокаПредметСнабжения.ПредметСнабжения),
															Строка(СтрокаПредметСнабжения.ПредметСнабжения.УникальныйИдентификатор()), "");
		Область.Параметры.Входимость			 		= Строка(СтрокаПредметСнабжения.Входимость) + " " + СтрокаПредметСнабжения.ВходимостьОбозначение;
		Область.Параметры.Наименование 					= СтрокаПредметСнабжения.Наименование;
		Область.Параметры.ОбозначениеИзделия 			= СтрокаПредметСнабжения.Обозначение;
		Область.Параметры.ОбозначениеТехническихУсловий = СтрокаПредметСнабжения.ДокументНаПоставку;
		Область.Параметры.СрокИзготовленияПродукции 	= ?(СтрокаПредметСнабжения.СрокИзготовления > 0, СтрокаПредметСнабжения.СрокИзготовления, "");
		Область.Параметры.ИнформацияОПравилах 			= СтрокаПредметСнабжения.ПравилаУпаковкиТранспортировкиХранения; 
		
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла; // Для каждого СтрокаПредметСнабжения Из ПредметыСнабжения Цикл
	
	Результат.Вставить("Лист", ТабличныйДокумент);
	
	Возврат	Результат;
	
КонецФункции //ПодготовитьОписаниеДокумента_КорректировкаДанныхПС

Функция ПодготовитьОписаниеДокумента_КорректировкаДанныхХарактеристики(Характеристики)
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "Технические характеристики");
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_ОбменаСПоставщиками_ТехническиеХарактеристики();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));

	Для каждого СтрокаХарактеристика Из Характеристики Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		
		Область.Параметры.ИдентификаторПС 				= ?(ЗначениеЗаполнено(СтрокаХарактеристика.ПредметСнабжения),
															Строка(СтрокаХарактеристика.ПредметСнабжения.УникальныйИдентификатор()), "");
		Область.Параметры.ИдентификаторХарактеристики 	= Строка(СтрокаХарактеристика.Характеристика);
		Область.Параметры.ЕдиниЦаИзмерения 				= Строка(СтрокаХарактеристика.ЕдиницаИзмерения);
		Область.Параметры.ЕдиницаИзмеренияКод 			= СтрокаХарактеристика.ЕдиницаИзмеренияКод;
		Область.Параметры.Значение 						= СтрокаХарактеристика.Значение;
		Область.Параметры.ПризнакОсновнойХарактеристики = ?(СтрокаХарактеристика.Основная, "Да", "");
		
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла; // Для каждого СтрокаХарактеристика Из Характеристики Цикл

	Результат.Вставить("Лист", ТабличныйДокумент);
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьОписаниеДокумента_КорректировкаДанныхХарактеристики

Функция ПодготовитьОписаниеДокумента_КорректировкаДанныхАналоги()
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "Аналоги");

	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_ОбменаСПоставщиками_Аналоги();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	Результат.Вставить("Лист", ТабличныйДокумент);
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьОписаниеДокумента_КорректировкаДанныхАналоги

Функция ПодготовитьОписаниеДокумента_КорректировкаДанныхПравилаЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "Правила заполнения информации");
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_ОбменаСПоставщиками_ПравилаЗаполненияИнформации();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	Результат.Вставить("Лист", ТабличныйДокумент);
	
	Возврат	Результат;

КонецФункции // ПодготовитьОписаниеДокумента_КорректировкаДанныхПравилаЗаполнения

#КонецОбласти

#Область ВыгрузкаПСДляПоставщиков

Функция ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПС(ДанныеСтрок)
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "Информация по изделиям");
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_ВыгрузкаПСПоставщикам_ИнформацияПоИзделиям();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	// Состав
	Для Каждого ОписаниеЭлемента Из ДанныеСтрок Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		
		Область.Параметры.Идентификатор		= ОписаниеЭлемента.Идентификатор;
		Область.Параметры.ПредметСнабжения 	= ОписаниеЭлемента.ПредметСнабжения;
		Область.Параметры.Входимость 		= ОписаниеЭлемента.Входимость;
		
		ТабличныйДокумент.Вывести(Область);
		
	КонецЦикла; // Для Каждого ОписаниеЭлемента Из ДанныеСтрок Цикл
	
	Результат.Вставить("Лист", ТабличныйДокумент);
	
	Возврат	Результат;
	
КонецФункции //ПодготовитьОписаниеДокумента_КорректировкаДанныхПС

Функция ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПСХарактеристики()
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "Технические характеристики");
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_ВыгрузкаПСПоставщикам_ТехническиеХарактеристики();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	Результат.Вставить("Лист", ТабличныйДокумент);
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьОписаниеДокумента_КорректировкаДанныхХарактеристики

Функция ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПСРегламентТОиР()
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "Регламент ТО и Р");

	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_ВыгрузкаПСПоставщикам_РегламентТОиР();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	Результат.Вставить("Лист", ТабличныйДокумент);
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПСРегламентТОиР

Функция ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПСПравилаЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("Наименование", "Правила заполнения информации");
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_ВыгрузкаПСПоставщикам_ПравилаЗаполнения();
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Шапка
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	Результат.Вставить("Лист", ТабличныйДокумент);
	
	Возврат	Результат;

КонецФункции // ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПСПравилаЗаполнения

#КонецОбласти

///////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПрочитатьФайлВТабличныйДокумент
//
// Описание: Читает файл на сервере через ТабличныйДокумент.Прочитать()
//
//
// Параметры:
//  АдресВременногоХранилища - Строка - Адрес файла во временном хранилище
//  ПараметрыФайла     - Структура - необязательный параметр,
//                       содержит информацию о расширении файла.
//
// Возвращаемое значение: табличный документ или неопределено 
//
Функция ПрочитатьФайлВТабличныйДокумент(АдресВременногоХранилища, ПараметрыФайла = Неопределено) Экспорт
	
	ТабличныйДокумент = ПрочитатьТабличныйДокумент(АдресВременногоХранилища, ПараметрыФайла);
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; // Если ТабличныйДокумент = Неопределено Тогда
	
	Если ТабличныйДокумент.Области.Количество() > 0 Тогда
		Результат = ТабличныйДокумент.ПолучитьОбласть(ТабличныйДокумент.Области[0].Имя);
	Иначе
		Результат = ТабличныйДокумент; 
	КонецЕсли; // Если ТабличныйДокумент.Области.Количество() > 0 Тогда
	
	Возврат	Результат;
	
КонецФункции // ПрочитатьФайлВТабличныйДокумент

Функция ПрочитатьВсеЛистыФайла(ПараметрыФайла) Экспорт
	
	ТабличныйДокумент = ПрочитатьТабличныйДокумент(ПараметрыФайла.Адрес, ПараметрыФайла);
	Если ТабличныйДокумент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; // Если ТабличныйДокумент = Неопределено Тогда

	Результат = Новый Структура;
	
	// установим порядок листов как в исходном документе
	ТаблицаЛистов = ПолучитьПорядокЛистов(ТабличныйДокумент);
	
	Счет = 1;
	Для Каждого ОписаниеОбласти Из ТаблицаЛистов Цикл
		Результат.Вставить(СтрШаблон("Лист_%1", Счет), ТабличныйДокумент.ПолучитьОбласть(ОписаниеОбласти.Наименование)); 	
		Счет = Счет + 1;
	КонецЦикла; // Для Каждого ОписаниеОбласти Из ТаблицаЛистов Цикл

	Возврат	Результат;
	
КонецФункции // ПрочитатьВсеЛистыФайла

#Область КорректировкаДанныхСправочниковКлиент

Функция ПодготовитьТабличныеДокументыКорректировкаДанныхСправочников(Знач ПредметыСнабжения, Знач Характеристики) Экспорт
	
	Результат = Новый Массив;
	
	// Предметы снабжения
	Результат.Добавить(ПодготовитьОписаниеДокумента_КорректировкаДанныхПС(ПредметыСнабжения));
	
	// Характеристики
	Результат.Добавить(ПодготовитьОписаниеДокумента_КорректировкаДанныхХарактеристики(Характеристики));
	
	// Аналоги
	Результат.Добавить(ПодготовитьОписаниеДокумента_КорректировкаДанныхАналоги());
	
	// Правила заполнения
	Результат.Добавить(ПодготовитьОписаниеДокумента_КорректировкаДанныхПравилаЗаполнения());
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьТабличныеДокументыКорректировкаДанныхСправочников

#КонецОбласти

#Область ВыгрузкаПСДляПоставщиков

Функция ПодготовитьТабличныеДокументыДанныеПСДляПоставщиков(Знач ДанныеСтрок) Экспорт
	
	Результат = Новый Массив;
	
	// Информация по изделиям
	Результат.Добавить(ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПС(ДанныеСтрок));
	
	// Технические характеристики
	Результат.Добавить(ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПСХарактеристики());
	
	// Регламент ТОиР
	Результат.Добавить(ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПСРегламентТОиР());
	
	// Правила заполнения
	Результат.Добавить(ПодготовитьОписаниеДокумента_ВыгрузкаДанныхПСПравилаЗаполнения());
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьТабличныеДокументыДанныеПСДляПоставщиков

#КонецОбласти

#Область Контракт

Функция ПодготовитьТабличныйДокументКонтрактПриложениеТКП(Знач СпецификацияТКП, ПараметрыТКП) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_Контракт_ТКПRusEng();
	
	// Шапка
	Результат.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	// Состав
	Для каждого СтрокаСпецификация Из СпецификацияТКП Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		
		Область.Параметры.НомерСтроки 		= СтрокаСпецификация.НомерСтроки;
		Область.Параметры.НомерСтрокиЗаявки = СтрокаСпецификация.НомерСтрокиЗаявки;
		Область.Параметры.Наименование 		= СтрокаСпецификация.Наименование;
		Область.Параметры.Обозначение 		= СтрокаСпецификация.Обозначение;
		Область.Параметры.ЕдиницаИзмерения 	= СтрокаСпецификация.ЕдиницаИзмерения;
		Область.Параметры.Количество 		= СтрокаСпецификация.Количество;
		Область.Параметры.Цена 				= СтрокаСпецификация.Цена;
		Область.Параметры.Стоимость 		= СтрокаСпецификация.Стоимость;
		
		Результат.Вывести(Область);
		
	КонецЦикла; // Для каждого СтрокаСпецификация Из СпецификацияТКП Цикл
	
	// Подвал
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Итого 	= СпецификацияТКП.Итог("Стоимость");
	Область.Параметры.Должность = ПараметрыТКП.Получить("<ДолжностьСоставителяАнгл>");
	Область.Параметры.ФИО 		= ПараметрыТКП.Получить("<ФИОСоставителяАнгл>");
	
	Результат.Вывести(Область);

	Результат.АвтоМасштаб 			= Истина;
	Результат.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьТабличныйДокументКонтрактПриложениеТКП

Функция ПодготовитьТабличныйДокументКонтрактПриложениеКПисьмуФСВТС(ДатаДокумента, Валюта, Контрагент, Знач Спецификация, ПараметрыФСВТС) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_Контракт_ПриложениеКПисьмуФСВТС();
	
	// Шапка
	ТекущийГод = Год(?(ЗначениеЗаполнено(ДатаДокумента), ДатаДокумента, ТекущаяДатаСеанса()));
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Цена5	= "Цена предложения " + Формат(ТекущийГод, 		"ЧГ=0") + " г., долл США, CIF"; 
	Область.Параметры.Цена6 = "Цена предложения " + Формат(ТекущийГод + 1, 	"ЧГ=0") + " г., долл США, CIF"; 
	Область.Параметры.Цена7 = "Цена предложения " + Формат(ТекущийГод + 2, 	"ЧГ=0") + " г., долл США, CIF";
	Результат.Вывести(Область);
	
	// Состав
	СоответствиеОбозначений = ПолучитьСоответствиеОбозначений(Спецификация);
	УсловияПоставки 		= ПараметрыФСВТС.Получить("<УсловияПоставки>");
	Заказчик 				= ПараметрыФСВТС.Получить("<ИностранныйЗаказчик>");
	ГодСтрокой 				= Формат(Год(ДатаДокумента), "ЧГ=0");
	
	МассивЦенообразования 	= Новый Массив;
	
	Для каждого СтрокаПредметСнабжения Из Спецификация Цикл
		
		ИндексОбоснования = МассивЦенообразования.Найти(СтрокаПредметСнабжения.ОбоснованиеЦенообразования);
		
		Если ИндексОбоснования = Неопределено Тогда
			МассивЦенообразования.Добавить(СтрокаПредметСнабжения.ОбоснованиеЦенообразования);
			НомерОбоснования = МассивЦенообразования.Количество(); 
		Иначе
			НомерОбоснования = ИндексОбоснования + 1;
		КонецЕсли; // Если ИндексОбоснования = Неопределено Тогда
		
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.НомерСтроки 			= СтрокаПредметСнабжения.НомерСтроки;
		Область.Параметры.НаименованиеПВН 		= Строка(СтрокаПредметСнабжения.ПредметСнабжения);
		Область.Параметры.Обозначение 			= СоответствиеОбозначений.Получить(СтрокаПредметСнабжения.ПредметСнабжения);
		Область.Параметры.ЕдиницаИзмерения 		= Строка(СтрокаПредметСнабжения.ЕдиницаИзмерения);
		Область.Параметры.Цена5 				= СтрокаПредметСнабжения.ЦенаТекущегоГода;
		Область.Параметры.Цена6 				= СтрокаПредметСнабжения.ЦенаСледующегоГода;
		Область.Параметры.Цена7 				= СтрокаПредметСнабжения.ЦенаГодаЧерез1;
		Область.Параметры.Стоимость 			= СтрокаПредметСнабжения.Цена;
		Область.Параметры.Заказчик 				= Строка(Контрагент) + ", " + Строка(Валюта) + ", " + ГодСтрокой + ", " + УсловияПоставки;
		Область.Параметры.ИсточникИнформации 	= СтрокаПредметСнабжения.ИсточникЦеновойИнформации;
		Область.Параметры.Обоснование 			= Формат(НомерОбоснования, "ЧГ=0");
		
		Результат.Вывести(Область);
		
	КонецЦикла;
		
	// Итого
	Область = Макет.ПолучитьОбласть("Итого");
	Область.Параметры.Цена5 = Спецификация.Итог("ЦенаТекущегоГода");
	Область.Параметры.Цена6 = Спецификация.Итог("ЦенаСледующегоГода");
	Область.Параметры.Цена7 = Спецификация.Итог("ЦенаГодаЧерез1");
	Результат.Вывести(Область);
	
	// Отступ
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область);
	
	// Обоснования
	Область = Макет.ПолучитьОбласть("ПримечаниеШапка");
	Результат.Вывести(Область);
	
	Счет = 1;
	Для каждого ЭлементМассива Из МассивЦенообразования Цикл
		Область = Макет.ПолучитьОбласть("ПримечаниеСтрока");
		Область.Параметры.Обоснование = "" + Счет + " - " + ЭлементМассива;
		Результат.Вывести(Область);
		Счет = Счет + 1;
	КонецЦикла; // Для каждого ЭлементМассива Из МассивЦенообразования Цикл
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьТабличныйДокументКонтрактПриложениеКПисьмуФСВТС

#КонецОбласти

#Область Заявка

Функция ПодготовитьТабличныйДокументЗаявкаПриложениеКПисьмуФСВТС(ДатаЗаявки, Валюта, Знач Спецификация, ПараметрыФСВТС) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	Макет = Обработки.ХранилищеМакетов.ПолучитьМакет_Заявка_ПриложениеКПисьмуФСВТС();
	
	// Шапка
	ТекущийГод 		= Год(?(ЗначениеЗаполнено(ДатаЗаявки), ДатаЗаявки, ТекущаяДатаСеанса()));
	НомерКолонки 	= 5;
	
	ЕстьЦенаТекущегоГода 	= ЕстьНеНулеваяЦена(Спецификация, "ЦенаТекущегоГода");
	ЕстьЦенаСледующегоГода 	= ЕстьНеНулеваяЦена(Спецификация, "ЦенаСледующегоГода");
	ЕстьЦенаГодаЧерез1 		= ЕстьНеНулеваяЦена(Спецификация, "ЦенаГодаЧерез1");
	
	Область = Макет.ПолучитьОбласть("Шапка|Основное");
	Результат.Вывести(Область);
	
	СтрокуПункты = "";
	Если ЕстьЦенаТекущегоГода Тогда
		Область = Макет.ПолучитьОбласть("Шапка|Цена5"); 
		Область.Параметры.НомерКолонки 	= НомерКолонки;
		Область.Параметры.Цена5 		= "Цена предложения " + Формат(ТекущийГод, "ЧГ=0") + " г., долл США, CIF"; 
		Результат.Присоединить(Область);
		СтрокуПункты	= СтрокуПункты + ", " + НомерКолонки;
		НомерКолонки 	= НомерКолонки + 1;
	КонецЕсли; // Если ЕстьЦенаТекущегоГода
	
	Если ЕстьЦенаСледующегоГода Тогда
		Область = Макет.ПолучитьОбласть("Шапка|Цена6");
		Область.Параметры.НомерКолонки 	= НомерКолонки;
		Область.Параметры.Цена6 		= "Цена предложения " + Формат(ТекущийГод + 1, "ЧГ=0") + " г., долл США, CIF"; 
		Результат.Присоединить(Область);
		СтрокуПункты	= СтрокуПункты + ", " + НомерКолонки;
		НомерКолонки 	= НомерКолонки + 1;
	КонецЕсли; // Если ЕстьЦенаСледующегоГода Тогда
	
	Если ЕстьЦенаГодаЧерез1 Тогда
		Область = Макет.ПолучитьОбласть("Шапка|Цена7");
		Область.Параметры.НомерКолонки 	= НомерКолонки;
		Область.Параметры.Цена7 		= "Цена предложения " + Формат(ТекущийГод + 2, "ЧГ=0") + " г., долл США, CIF";
		Результат.Присоединить(Область);
		СтрокуПункты	= СтрокуПункты + ", " + НомерКолонки;
		НомерКолонки 	= НомерКолонки + 1;
	КонецЕсли; // Если ЕстьЦенаГодаЧерез1 Тогда
	
	Область = Макет.ПолучитьОбласть("Шапка|Основное2");
	
	Область.Параметры.Цена8				= СтрШаблон("Цена для формирования стоимости предложения по п. %1", Сред(СтрокуПункты,2));
	Область.Параметры.НомерСтоимость 	= НомерКолонки;
	НомерКолонки = НомерКолонки + 1;
	
	Область.Параметры.Заказчик 			= СтрШаблон("Заказчик, валюта цены, год цены, условия поставки (к пункту %1)", НомерКолонки);
	Область.Параметры.НомерЗаказчик 	= НомерКолонки;
	НомерКолонки = НомерКолонки + 1;
	
	Область.Параметры.НомерИсточник 	= НомерКолонки;
	НомерКолонки = НомерКолонки + 1;
	
	Область.Параметры.НомерОбоснование 	= НомерКолонки;
	
	Результат.Присоединить(Область);

	
	// Состав
	СоответствиеОбозначений = ПолучитьСоответствиеОбозначений(Спецификация);
	УсловияПоставки 		= ПараметрыФСВТС.Получить("<УсловияПоставки>");
	Заказчик 				= ПараметрыФСВТС.Получить("<ИностранныйЗаказчик>");
	ГодСтрокой 				= Формат(Год(ДатаЗаявки), "ЧГ=0");
	
	МассивЦенообразования 	= Новый Массив;
	
	Для каждого СтрокаПредметСнабжения Из Спецификация Цикл
		
		ИндексОбоснования = МассивЦенообразования.Найти(СтрокаПредметСнабжения.ОбоснованиеЦенообразования);
		
		Если ИндексОбоснования = Неопределено Тогда
			МассивЦенообразования.Добавить(СтрокаПредметСнабжения.ОбоснованиеЦенообразования);
			НомерОбоснования = МассивЦенообразования.Количество(); 
		Иначе
			НомерОбоснования = ИндексОбоснования + 1;
		КонецЕсли; // Если ИндексОбоснования = Неопределено Тогда
		
		Область = Макет.ПолучитьОбласть("Строка|Основное");
		Область.Параметры.НомерСтроки 		= СтрокаПредметСнабжения.НомерСтроки;
		Область.Параметры.НаименованиеПВН 	= Строка(СтрокаПредметСнабжения.ПредметСнабжения);
		Область.Параметры.Обозначение 		= СоответствиеОбозначений.Получить(СтрокаПредметСнабжения.ПредметСнабжения);
		Область.Параметры.ЕдиницаИзмерения 	= Строка(СтрокаПредметСнабжения.ЕдиницаИзмерения);
		Результат.Вывести(Область);
		
		
		Если ЕстьЦенаТекущегоГода Тогда
			Область = Макет.ПолучитьОбласть("Строка|Цена5");
			Область.Параметры.Цена5 			= СтрокаПредметСнабжения.ЦенаТекущегоГода;
			Результат.Присоединить(Область);
		КонецЕсли;  // Если ЕстьЦенаТекущегоГода Тогда
			
		Если ЕстьЦенаСледующегоГода Тогда
			Область = Макет.ПолучитьОбласть("Строка|Цена6");
			Область.Параметры.Цена6 			= СтрокаПредметСнабжения.ЦенаСледующегоГода;
			Результат.Присоединить(Область);
		КонецЕсли; // Если ЕстьЦенаСледующегоГода Тогда
		
		Если ЕстьЦенаГодаЧерез1 Тогда
			Область = Макет.ПолучитьОбласть("Строка|Цена7");
			Область.Параметры.Цена7 			= СтрокаПредметСнабжения.ЦенаГодаЧерез1;
			Результат.Присоединить(Область);
		КонецЕсли;  // Если ЕстьЦенаГодаЧерез1 Тогда
		
		Область = Макет.ПолучитьОбласть("Строка|Основное2");
		Область.Параметры.Стоимость 			= СтрокаПредметСнабжения.ЦенаОСК;
		Область.Параметры.Заказчик 				= Заказчик + ", " + Строка(Валюта) + ", " + ГодСтрокой + ", " + УсловияПоставки;
		Область.Параметры.ИсточникИнформации 	= СтрокаПредметСнабжения.ИсточникЦеновойИнформации;
		Область.Параметры.Обоснование 			= Формат(НомерОбоснования, "ЧГ=0");
		Результат.Присоединить(Область);
		
	КонецЦикла;
	
	// Отступ
	Область = Макет.ПолучитьОбласть("Отступ");
	Результат.Вывести(Область);
	
	// Обоснования
	Область = Макет.ПолучитьОбласть("ПримечаниеШапка");
	Результат.Вывести(Область);
	
	Счет = 1;
	Для каждого ЭлементМассива Из МассивЦенообразования Цикл
		Область = Макет.ПолучитьОбласть("ПримечаниеСтрока");
		Область.Параметры.Обоснование = "" + Счет + " - " + ЭлементМассива;
		Результат.Вывести(Область);
		Счет = Счет + 1;
	КонецЦикла; // Для каждого ЭлементМассива Из МассивЦенообразования Цикл
	
	// Подвал
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Начальник = "Начальник отдела ценообразования: " + ПолучитьНачальникаОтделаЦенообразования();
	Результат.Вывести(Область);
	
	Возврат	Результат;
	
КонецФункции // ПодготовитьТабличныйДокументЗаявкаПриложениеКПисьмуФСВТС

#КонецОбласти

#Область ВзаимодействиеСРЭО

Функция ПодготовитьТабличныйДокументВзаимодействиеСРЭО(КолонкиМетаданные, Знач ПредметыСнабжения, Каталог) Экспорт
	
	Результат = Новый ТабличныйДокумент;
	
	СчетчикСтрок   = 1;
	СчетчикКолонок = 1;
	
	//Сделаем шапку, из синонимов реквизитов ТЧ
	Для каждого Рекв Из КолонкиМетаданные Цикл
		Результат.Область(СчетчикСтрок, СчетчикКолонок).Текст = Рекв.Синоним;
		СчетчикКолонок=СчетчикКолонок+1;
	КонецЦикла; 
	
	// 
	СчетчикСтрок = СчетчикСтрок + 1;
	
	// Заполняем строки
	Для каждого ТекСтрока Из ПредметыСнабжения Цикл
		
		СчетчикКолонок=1;
		
		Для каждого ТекКолонка Из КолонкиМетаданные Цикл
			Результат.Область(СчетчикСтрок, СчетчикКолонок).Текст = Строка(ТекСтрока[ТекКолонка.Имя]);
			СчетчикКолонок=СчетчикКолонок+1;
		КонецЦикла;
		
		// Получаем список файлов
		МассивФайлов = ПолучитьПрисоединенныеФайлы(ТекСтрока.СсылкаПС); НомерПП = 1;
		Для каждого ТекФайл Из МассивФайлов Цикл
			// получаем данные файла
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ТекФайл);
			// Сохраняем
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(Каталог + "\"+СокрЛП(ТекСтрока.Обозначение)+"-"+Строка(НомерПП)+"."+ДанныеФайла.Расширение);
			
			НомерПП = НомерПП + 1;
		КонецЦикла; 
		
		СчетчикСтрок = СчетчикСтрок + 1;

	КонецЦикла; 
	
	Возврат	Результат;
	
КонецФункции

#КонецОбласти

