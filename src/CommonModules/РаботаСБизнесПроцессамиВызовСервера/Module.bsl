#Область СлужебныеПроцедурыИФункции_РаботаСДеревомПроцессовИЗадач

// Процедура инициализации дерева процессов и задач, списка активных задач.
//   Форма - УправляемаяФорма - форма с деревом задач, списком активных задач.
//   Объект - ссылка на предмет
//   ЗаполнитьДерево - Булево - указывает необходимость заполнения дерева процессов и задач.
//   ОтображатьСписокАктивныхЗадач - Булево - указывает на необходимость отображения списка активных задач.
//
Процедура ДеревоПроцессовИЗадач_ПриСозданииНаСервере(
	Форма, Объект, ЗаполнитьДерево = Ложь, ОтображатьСписокАктивныхЗадач = Истина) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДаты = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	Форма.Элементы.ДеревоЗадачСрокИсполнения.Формат = ФорматДаты;
	Форма.Элементы.ДеревоЗадачДатаВыполнения.Формат = ФорматДаты;
	Форма.Элементы.СписокАктивныхЗадачСрокИсполнения.Формат = ФорматДаты;
	
	ЖирныйШрифт = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
	
	// Условное оформление в дереве задач
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Принята к исполнению (дерево задач)'; en = 'Accepted (task tree)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = ЖирныйШрифт;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадачНаименование");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
	Форма.УсловноеОформление, НСтр("ru = 'Просрочена (дерево задач)'; en = 'Overdue (task tree)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Просрочена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадачСрокИсполнения");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Выполнена (дерево задач)'; en = 'Executed (task tree)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ВыполненнаяЗадача;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадачНаименование");
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадачИсполнитель");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Помечен(а) на удаление (дерево задач)'; en = 'Marked for deletion (task tree)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЗадач.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗадач");
	
	// Условное оформление в списке активных задач
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
		Форма.УсловноеОформление, НСтр("ru = 'Принята к исполнению (список активных задач)'; en = 'Accepted (list of active tasks)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокАктивныхЗадач.ПринятаКИсполнению");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("Шрифт");
	ЭлементОформления.Значение = ЖирныйШрифт;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СписокАктивныхЗадачНаименование");
	
	Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
	Форма.УсловноеОформление, НСтр("ru = 'Просрочена (список активных задач)'; en = 'Overdue (list of active tasks)'"));
	ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокАктивныхЗадач.Просрочена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
	ЭлементОформления.Использование = Истина;
	Поле = Эл.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных("СписокАктивныхЗадачСрокИсполнения");
	
	// Заполнение дерева задач
	Если ЗаполнитьДерево Тогда
		Форма.ЗаполнитьДеревоПроцессовИЗадач();
	КонецЕсли;
	
	Форма.Элементы.СписокАктивныхЗадач.Видимость = ОтображатьСписокАктивныхЗадач;
	Форма.Элементы.ВсеЗадачи.ОтображатьЗаголовок = ОтображатьСписокАктивныхЗадач;
	
	// Команда ПерейтиКТекущемуОбъекту
	Форма.Элементы.СписокАктивныхЗадачПерейтиКТекущемуОбъекту.Видимость = Ложь;
	Форма.Элементы.ДеревоЗадачПерейтиКТекущемуОбъекту.Видимость = Ложь;
	Если ЗначениеЗаполнено(Объект) Тогда
		
		МетаданныеОбъекта = Объект.Метаданные();
		
		ЗаголовокКоманды = НСтр("ru = 'Перейти к текущему объекту'; en = 'Go to current object'");
		
		Если ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ЗаголовокКоманды = НСтр("ru = 'Перейти к текущей задаче'; en = 'Go to current task'");
			Форма.Элементы.СписокАктивныхЗадачПерейтиКТекущемуОбъекту.Видимость = Истина;
			Форма.Элементы.ДеревоЗадачПерейтиКТекущемуОбъекту.Видимость = Истина;
		ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
			Форма.Элементы.ДеревоЗадачПерейтиКТекущемуОбъекту.Видимость = Истина;
			ЗаголовокКоманды = НСтр("ru = 'Перейти к текущему процессу'; en = 'Go to current process'");
		КонецЕсли;
		
		Форма.Команды["ПерейтиКТекущемуОбъекту"].Заголовок = ЗаголовокКоманды;
	КонецЕсли;
	
КонецПроцедуры

//+ 11.05.2017 15:27:03 Администратор СЭД Задача: 
Процедура ДобавитьКомментарийВДерево(Дерево)
	
	Для каждого Стр Из Дерево.Строки Цикл
		Если ТипЗнч(Стр.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Если НЕ Стр.Ссылка.РезультатВыполнения = "" Тогда
				НовСтр = Стр.Строки.Добавить();
				НовСтр.Наименование = Стр.Ссылка.РезультатВыполнения;
				НовСтр.Важность = 10;
				НовСтр.Тип = 1;
				НовСтр.СостояниеКартинка = 10;
				НовСтр.СостояниеКонтроля = 1;
				НовСтр.Ссылка = Стр.Ссылка;
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		ДобавитьКомментарийВДерево(Стр);
	КонецЦикла; 
	
КонецПроцедуры
//- 11.05.2017 15:27:03 Администратор СЭД Задача: 

// Заполняет дерево процессов и задач, список активных задач (задачи в работе) в форме предмета.
//
// Параметры:
//   Форма - УправляемаяФорма - форма с деревом задач, списком активных задач.
//   Предмет - ссылка на предмет
//
Процедура ЗаполнитьПроцессыИЗадачиПоПредмету(Форма, Предмет) Экспорт
	
	Дерево = ДанныеФормыВЗначение(Форма.ДеревоЗадач, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Список = ДанныеФормыВЗначение(Форма.СписокАктивныхЗадач, Тип("ТаблицаЗначений"));
	Список.Очистить();
	
	ПроцессыПоПредмету = ПроцессыПоПредмету(Предмет);
	
	ГоловныеПроцессы = ГоловныеПроцессы(ПроцессыПоПредмету.ВсеПроцессы);
	
	ТипПредмета = ТипЗнч(Предмет);
	
	ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач = Истина;
		
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
	Если Форма.Элементы.СписокАктивныхЗадач.Видимость
		И ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач Тогда
		
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ГоловныеПроцессы,
			ПроцессыПоПредмету.ВспомогательныеПроцессы,ИспользоватьДатуИВремяВСрокахЗадач, Список);
	Иначе
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ГоловныеПроцессы,
			ПроцессыПоПредмету.ВспомогательныеПроцессы, ИспользоватьДатуИВремяВСрокахЗадач);
	КонецЕсли;
		
	//+ 11.05.2017 15:31:37 Администратор СЭД Задача:
	ДобавитьКомментарийВДерево(Дерево);
	//- 11.05.2017 15:31:37 Администратор СЭД Задача:
	
	ЗначениеВДанныеФормы(Дерево, Форма.ДеревоЗадач);
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(Форма.ДеревоЗадач.ПолучитьЭлементы(), Форма);
	
	Если Форма.Элементы.СписокАктивныхЗадач.Видимость
		И Не ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач Тогда
		
		ЗаполнитьСписокАктивныхЗадачПоПредмету(Предмет, Список);
	КонецЕсли;
	
	ЗначениеВДанныеФормы(Список, Форма.СписокАктивныхЗадач);
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтрокуВСпискеАктивныхЗадач(Форма);
	
КонецПроцедуры

// Получает все процессы по предмету.
// Если в качестве предмета передается задача,
// тогда возвращается ее процесс, если передается процесс -
// он же возвращается в массиве, если передается предмет, тогда
// возвращаются его процессы.
//
// Параметры:
//   Предмет - ссылка на предмет, процесс, задачу.
//
// Возвращаемое значение:
//   Массив процессов
//
Функция ПроцессыПоПредмету(Предмет)
	
	Результат = Новый Структура;
	Результат.Вставить("ВсеПроцессы", Новый Массив);
	Результат.Вставить("ВспомогательныеПроцессы", Новый Массив);
	
	Предметы = Новый Массив;
	Проекты = Новый Массив;
	ПроектныеЗадачи = Новый Массив;
	
	ТипОбъекта = ТипЗнч(Предмет);
	
	Если ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПроцессЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "БизнесПроцесс");
		Результат.ВсеПроцессы.Добавить(ПроцессЗадачи);
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(Предмет.Метаданные()) Тогда
		Результат.ВсеПроцессы.Добавить(Предмет);
	// + 23.04.2018 15:49:10 Базунов Д.А. Задача: 
	//ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Мероприятия") Тогда
	//	
	//	Предметы.Добавить(Предмет);
	//	
	//	// Для мероприятия следует отображать задачи по программе и по протоколу
	//	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	//		Предмет, "МатериалПрограмма, МатериалПротокол");
	//	
	//	Если ЗначениеЗаполнено(РеквизитыМероприятия.МатериалПрограмма) Тогда 
	//		Предметы.Добавить(РеквизитыМероприятия.МатериалПрограмма);
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(РеквизитыМероприятия.МатериалПротокол) Тогда 
	//		Предметы.Добавить(РеквизитыМероприятия.МатериалПротокол);
	//	КонецЕсли;
	//	
	//ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
	//	Предметы.Добавить(Предмет);
	//	Проекты.Добавить(Предмет);
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	ПроектныеЗадачи.Ссылка
	//		|ИЗ
	//		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
	//		|ГДЕ
	//		|	ПроектныеЗадачи.Владелец = &Проект";
	//		
	//	Запрос.УстановитьПараметр("Проект", Предмет);
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//		Предметы.Добавить(Выборка.Ссылка);
	//		ПроектныеЗадачи.Добавить(Выборка.Ссылка);
	//	КонецЦикла;
	//	
	//ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
	//	Предметы.Добавить(Предмет);
	//	ПроектныеЗадачи.Добавить(Предмет);
	//	
	//ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
	//	
	//	Предметы.Добавить(Предмет);
	//	
	//	Запрос = Новый Запрос(
	//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//		|	ВходящиеДокументы.Ссылка
	//		|ИЗ
	//		|	Справочник.ВходящиеДокументы КАК ВходящиеДокументы
	//		|ГДЕ
	//		|	ВходящиеДокументы.Отправитель = &Предмет
	//		|
	//		|ОБЪЕДИНИТЬ ВСЕ
	//		|
	//		|ВЫБРАТЬ
	//		|	ВнутренниеДокументыКонтрагенты.Ссылка
	//		|ИЗ
	//		|	Справочник.ВнутренниеДокументы.Контрагенты КАК ВнутренниеДокументыКонтрагенты
	//		|ГДЕ
	//		|	ВнутренниеДокументыКонтрагенты.Контрагент = &Предмет
	//		|
	//		|
	//		|ОБЪЕДИНИТЬ ВСЕ
	//		|
	//		|ВЫБРАТЬ
	//		|	ИсходящиеДокументыПолучатели.Ссылка
	//		|ИЗ
	//		|	Справочник.ИсходящиеДокументы.Получатели КАК ИсходящиеДокументыПолучатели
	//		|ГДЕ
	//		|	ИсходящиеДокументыПолучатели.Получатель = &Предмет
	//		|");
	//		
	//	Запрос.УстановитьПараметр("Предмет", Предмет);
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//		Предметы.Добавить(Выборка.Ссылка);
	//	КонецЦикла;
	// - 23.04.2018 15:49:10 Базунов Д.А. Задача:		
	Иначе // все остальные типы
		
		Предметы.Добавить(Предмет);
		
	КонецЕсли;
	
	ЕстьПредметы = Предметы.Количество() > 0;
	ЕстьПроектыИПроектныеЗадачиПроцессов = 
		Проекты.Количество() > 0 Или ПроектныеЗадачи.Количество() > 0;
	
	Если ЕстьПредметы Или ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
		
		ТекстЗапросаДляПроцессовПоПредметам = "";
		ТекстЗапросаДляПроцессовПоПроектам = "";
		РазделительЗапросовДляПредметов = "";
		РазделительЗапросовДляПроектов = "";
		МетаданныеБизнесПроцессы = Метаданные.БизнесПроцессы;
		
		Для Каждого МетаданныеБП Из МетаданныеБизнесПроцессы Цикл
			
			Если ЕстьПредметы Тогда
				
				ТекстЗапросаДляТекущегоПроцесса = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПредметыПроцесса.Ссылка,
					|	ПредметыПроцесса.РольПредмета,
					|	ПредметыПроцесса.Предмет
					|ИЗ
					|	БизнесПроцесс.%ИмяПроцесса%.Предметы КАК ПредметыПроцесса
					|ГДЕ
					|	ПредметыПроцесса.Предмет В (&Предметы)";
					
				ТекстЗапросаДляТекущегоПроцесса = СтрЗаменить(
					ТекстЗапросаДляТекущегоПроцесса, "%ИмяПроцесса%", МетаданныеБП.Имя);
					
				Если ЗначениеЗаполнено(ТекстЗапросаДляПроцессовПоПредметам) Тогда
					ТекстЗапросаДляТекущегоПроцесса =
						СтрЗаменить(ТекстЗапросаДляТекущегоПроцесса, " РАЗРЕШЕННЫЕ", "");
				КонецЕсли;
					
				ТекстЗапросаДляПроцессовПоПредметам = ТекстЗапросаДляПроцессовПоПредметам
					+ РазделительЗапросовДляПредметов
					+ ТекстЗапросаДляТекущегоПроцесса;
					
				РазделительЗапросовДляПредметов = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			Если ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
				
				ТекстЗапросаДляТекущегоПроцесса = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Процессы.Ссылка
					|ИЗ
					|	БизнесПроцесс.%ИмяПроцесса% КАК Процессы
					|ГДЕ
					|	(Процессы.Проект В (&Проекты)
					|			ИЛИ Процессы.ПроектнаяЗадача В (&ПроектныеЗадачи))";
					
				ТекстЗапросаДляТекущегоПроцесса = СтрЗаменить(
					ТекстЗапросаДляТекущегоПроцесса, "%ИмяПроцесса%", МетаданныеБП.Имя);
					
				Если ЗначениеЗаполнено(ТекстЗапросаДляПроцессовПоПроектам) Тогда
					ТекстЗапросаДляТекущегоПроцесса =
						СтрЗаменить(ТекстЗапросаДляТекущегоПроцесса, " РАЗРЕШЕННЫЕ", "");
				КонецЕсли;
				
				ТекстЗапросаДляПроцессовПоПроектам = ТекстЗапросаДляПроцессовПоПроектам
					+ РазделительЗапросовДляПроектов
					+ ТекстЗапросаДляТекущегоПроцесса;
				
				РазделительЗапросовДляПроектов = Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос();
		
		Если ЕстьПредметы Тогда
			Запрос.Текст = ТекстЗапросаДляПроцессовПоПредметам;
			Запрос.УстановитьПараметр("Предметы", Предметы);
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТипСпрПроекты = Тип("СправочникСсылка.Проекты");
			ТипСпрПроектныеЗадачи = Тип("СправочникСсылка.ПроектныеЗадачи");
			
			Пока Выборка.Следующий() Цикл
				Если Результат.ВсеПроцессы.Найти(Выборка.Ссылка) = Неопределено Тогда
					Результат.ВсеПроцессы.Добавить(Выборка.Ссылка);
					
					ЭтоВспомогательныйПредмет = Ложь;
					ТипПредмета = ТипЗнч(Выборка.Предмет);
					Если ТипПредмета = ТипСпрПроекты
						Или ТипПредмета = ТипСпрПроектныеЗадачи Тогда
						
						ЭтоВспомогательныйПредмет = Истина;
					ИначеЕсли Выборка.РольПредмета <> Перечисления.РолиПредметов.Основной Тогда
						ЭтоВспомогательныйПредмет = Истина;
					КонецЕсли;
					
					Если ЭтоВспомогательныйПредмет Тогда
						Результат.ВспомогательныеПроцессы.Добавить(Выборка.Ссылка);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьПроектыИПроектныеЗадачиПроцессов Тогда
			Запрос.Текст = ТекстЗапросаДляПроцессовПоПроектам;
			Запрос.УстановитьПараметр("Проекты", Проекты);
			Запрос.УстановитьПараметр("ПроектныеЗадачи", ПроектныеЗадачи);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Результат.ВсеПроцессы.Найти(Выборка.Ссылка) = Неопределено Тогда
					Результат.ВсеПроцессы.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вычисляет головные процессы для переданного массива процессов
//
// Параметры
//   Процессы - массив - процессы, для которых следует определить головные процессы
//
// Возвращаемые параметры:
//   Массив
//     Ссылка на процесс
//
Функция ГоловныеПроцессы(Процессы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ГоловныеПроцессы = Новый Массив;
	
	Для Каждого Процесс Из Процессы Цикл
		
		ГоловнойПроцесс = ГоловнойПроцесс(Процесс);
		
		Если ГоловныеПроцессы.Найти(ГоловнойПроцесс) = Неопределено Тогда
			
			ГоловныеПроцессы.Добавить(ГоловнойПроцесс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГоловныеПроцессы;
	
КонецФункции

// Вычисляет головной процесс по главной/ведущей задаче текущего переданного процесса.
//
// Параметры:
//   Процесс - БизнесПроцессСсылка
//
Функция ГоловнойПроцесс(Процесс)
	
	ГоловнойПроцесс = Неопределено;
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"ВедущаяЗадача, ВедущаяЗадача.БизнесПроцесс, ГлавнаяЗадача, ГлавнаяЗадача.БизнесПроцесс");
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ВедущаяЗадача) Тогда
		ГоловнойПроцесс = ГоловнойПроцесс(РеквизитыПроцесса.ВедущаяЗадачаБизнесПроцесс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ГлавнаяЗадача) Тогда
		ГоловнойПроцесс = ГоловнойПроцесс(РеквизитыПроцесса.ГлавнаяЗадачаБизнесПроцесс);
	КонецЕсли;
	
	Если ГоловнойПроцесс = Неопределено Тогда
		ГоловнойПроцесс = Процесс;
	КонецЕсли;
	
	Возврат ГоловнойПроцесс;
	
КонецФункции

// Рекурсивная процедура, добавляет подчиненные процессы и задачи в дерево и список активных задач.
//
// Параметры:
//   Дерево - ДеревоЗначений - иерархия процессов и задач.
//   Процессы - Массив - массив ссылок на процессы текущего уровня. Первоначально передаются процессы находящиеся в корне дерева.
//   ВспомогательныеПроцессы - Массив - массив ссылок на вспомогательные процессы. Вспомогательным процессам имеют Тип = 2.
//   Список - ТаблицаЗначений - список активных задач (задачи в работе). Если список активных задач не задан, то он не заполняется.
//
Процедура ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, Процессы, ВспомогательныеПроцессы,
	ИспользоватьДатуИВремяВСрокахЗадач, Список = Неопределено, СтрокиСВедущимиЗадачами = Неопределено)
	
	// Инициализируем список ведущих задач
	Если СтрокиСВедущимиЗадачами = Неопределено Тогда
		СтрокиСВедущимиЗадачами = Новый Соответствие;
	КонецЕсли;
	
	Если ТипЗнч(Процессы) = Тип("Массив") Тогда
		ТаблицаПроцессов = Новый ТаблицаЗначений;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.ОтправкаВКСУНСИНаПоискПоКоду"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.ОтправкаВКСУНСИНаКлассификацию"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.ВзаимодействиеСРОЭ"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.УведомлениеОФормированииЗаявки"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.КорректировкаСправочников"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.РедактированиеЭлектроннойСтруктурыКорабля"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.ЗапросНаАктуализациюКаталогаПоставщика"));
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка.ФормированиеЗаявки"));
		
		ТаблицаПроцессов.Колонки.Добавить("Процесс", Новый ОписаниеТипов(МассивТипов));
		
		Для Каждого СтрПроцесс Из Процессы Цикл
			СтрТаб = ТаблицаПроцессов.Добавить();
			СтрТаб.Процесс = СтрПроцесс;
		КонецЦикла;
	Иначе
		ТаблицаПроцессов = Процессы;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Процессы.Процесс
		|ПОМЕСТИТЬ ТаблицаПроцессов
		|ИЗ
		|	&Процессы КАК Процессы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПроцессов.Процесс.ГлавнаяЗадача КАК ГлавнаяЗадача,
		|	ТаблицаПроцессов.Процесс.ВедущаяЗадача КАК ВедущаяЗадача,
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Наименование,
		|	ДанныеБизнесПроцессов.Завершен,
		|	ДанныеБизнесПроцессов.Дата,
		|	ТаблицаПроцессов.Процесс.Важность КАК Важность,
		|	ТаблицаПроцессов.Процесс.Состояние КАК Состояние,
		|	ДанныеБизнесПроцессов.Стартован,
		|	ДанныеБизнесПроцессов.ПометкаУдаления
		|ПОМЕСТИТЬ Процессы
		|ИЗ
		|	ТаблицаПроцессов КАК ТаблицаПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ТаблицаПроцессов.Процесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Наименование,
		|	ВЫБОР
		|		КОГДА ПРЕДСТАВЛЕНИЕ(ЗадачаИсполнителя.Исполнитель) ЕСТЬ NULL
		|			ТОГДА ЗадачаИсполнителя.РольИсполнителя
		|		ИНАЧЕ ЗадачаИсполнителя.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.Важность,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.ПометкаУдаления
		|ПОМЕСТИТЬ ЗадачиПроцессов
		|ИЗ
		|	Процессы КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО Процессы.БизнесПроцесс = ЗадачаИсполнителя.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Процессы.ГлавнаяЗадача,
		|	Процессы.ВедущаяЗадача,
		|	Процессы.БизнесПроцесс КАК Ссылка,
		|	Процессы.Наименование,
		|	Процессы.Завершен КАК Выполнена,
		|	Процессы.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА Процессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА Процессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 1
		|		КОГДА НЕ Процессы.Стартован
		|				И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 2
		|		КОГДА НЕ Процессы.Стартован
		|				И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|				И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
		|				И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 3
		|		КОГДА Процессы.Завершен = ИСТИНА
		|			ТОГДА 4
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	0 КАК СостояниеКонтроля,
		|	Процессы.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Процессы КАК Процессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДляЗапуска КАК ПроцессыДляЗапуска
		|		ПО Процессы.БизнесПроцесс = ПроцессыДляЗапуска.БизнесПроцесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПроцессов.Ссылка,
		|	ЗадачиПроцессов.Наименование,
		|	ЗадачиПроцессов.Исполнитель КАК Исполнитель,
		|	ЗадачиПроцессов.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Выполнена
		|			ТОГДА ЗадачиПроцессов.ДатаИсполнения
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаВыполнения,
		|	ЗадачиПроцессов.Выполнена,
		|	ЗадачиПроцессов.РезультатВыполнения,
		|	ЗадачиПроцессов.ПринятаКИсполнению,
		|	ЗадачиПроцессов.Автор,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Низкая)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиЗадачи.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Выполнена = ИСТИНА
		|			ТОГДА 4
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага,
		|	0 КАК СостояниеКонтроля,
		|	ЗадачиПроцессов.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса,
		|	ЗадачиПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачиПроцессов.Дата КАК Дата,
		|	ЗадачиПроцессов.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	ЗадачиПроцессов КАК ЗадачиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачиПроцессов.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ ПО
		|	БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК Процесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Процессы КАК Процессы
		|		ПО Процессы.БизнесПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс.ВедущаяЗадача.БизнесПроцесс";
	
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК Процесс
		//|ИЗ
		//|	Процессы КАК Процессы
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		//|		ПО Процессы.БизнесПроцесс = ДочерниеБизнесПроцессы.РодительскийПроцесс";
		
	Запрос.УстановитьПараметр("Процессы", ТаблицаПроцессов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	РезультатыЗапрос = Запрос.ВыполнитьПакет();
	
	// Заполнение процессами
	ВыборкаПроцессовКДобавлению = РезультатыЗапрос[3].Выбрать();
	Пока ВыборкаПроцессовКДобавлению.Следующий() Цикл
		
		СтрокаПроцесс = Неопределено;
		
		Если ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ГлавнаяЗадача) Тогда
			СтрокаРодитель = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ГлавнаяЗадача, "Ссылка", Истина);
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаПроцесс = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ВедущаяЗадача) Тогда
			// Заменяем ведущую строку ведомым процессом
			СтрокаПроцесс = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ВедущаяЗадача, "Ссылка", Истина);
			
			// Удаляем ведущую задачу из списка
			СтрокиСВедущимиЗадачами.Удалить(ВыборкаПроцессовКДобавлению.ВедущаяЗадача);
		КонецЕсли;
		
		Если СтрокаПроцесс = Неопределено Тогда
			СтрокаПроцесс = Дерево.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПроцесс, ВыборкаПроцессовКДобавлению);
		Если ЗначениеЗаполнено(СтрокаПроцесс.Родитель)
			И ЗначениеЗаполнено(СтрокаПроцесс.Родитель.Родитель)
			И СтрокаПроцесс.Родитель.Родитель.Тип = 2 Тогда
			
			СтрокаПроцесс.Тип = 2;
		ИначеЕсли ВспомогательныеПроцессы.Найти(СтрокаПроцесс.Ссылка) <> Неопределено Тогда
			СтрокаПроцесс.Тип = 2;
		Иначе
			СтрокаПроцесс.Тип = 0;
		КонецЕсли;
		
		СтрокаПроцесс.ПринятаКИсполнению = Истина;
		
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Заполнение задачами процессов
	ВыборкаЗадачКДобавлению = РезультатыЗапрос[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗадачКДобавлению.Следующий() Цикл
		
		СтрокаПроцесс = Дерево.Строки.Найти(
			ВыборкаЗадачКДобавлению.БизнесПроцесс, "Ссылка", Истина);
		
		ВыборкаЗадачДетальныеЗаписи = ВыборкаЗадачКДобавлению.
			Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗадачДетальныеЗаписи.Следующий() Цикл
			СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
			Если ВыборкаЗадачДетальныеЗаписи.Выполнена
				Или ВыборкаЗадачДетальныеЗаписи.СрокИсполнения = Дата(1,1,1) Тогда
				
				СтрокаЗадача.Просрочена = Ложь;
				
			ИначеЕсли ИспользоватьДатуИВремяВСрокахЗадач Тогда
				Если ВыборкаЗадачДетальныеЗаписи.СрокИсполнения < ТекущаяДатаСеанса Тогда
					СтрокаЗадача.Просрочена = Истина;
				КонецЕсли;
			Иначе
				Если КонецДня(ВыборкаЗадачДетальныеЗаписи.СрокИсполнения) < ТекущаяДатаСеанса Тогда
					СтрокаЗадача.Просрочена = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаЗадачДетальныеЗаписи.Исполнитель) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадачДетальныеЗаписи);
				// Добавление задачи в список активных
				Если Список <> Неопределено
					И Не ВыборкаЗадачДетальныеЗаписи.Выполнена
					И Не ВыборкаЗадачДетальныеЗаписи.ПометкаУдаления
					И ВыборкаЗадачДетальныеЗаписи.СостояниеБизнесПроцесса = 
						Перечисления.СостоянияБизнесПроцессов.Активен Тогда
					
					СтрокаАктивнаяЗадача = Список.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаАктивнаяЗадача, СтрокаЗадача);
				КонецЕсли;
			Иначе // Для ведущих задач. У ведущих задач нет исполнителя.
				ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадачДетальныеЗаписи, "Ссылка, Наименование");
				СтрокиСВедущимиЗадачами.Вставить(СтрокаЗадача.Ссылка, СтрокаЗадача);
			КонецЕсли;
			СтрокаЗадача.Тип = 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ПодчиненныеПроцессы = РезультатыЗапрос[5].Выгрузить();
	
	Если ПодчиненныеПроцессы.Количество() > 0 Тогда
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ПодчиненныеПроцессы, ВспомогательныеПроцессы,
			ИспользоватьДатуИВремяВСрокахЗадач, Список, СтрокиСВедущимиЗадачами);
	Иначе
		//Удаление из дерева ведущих задач
		Для Каждого СтрЗадача Из СтрокиСВедущимиЗадачами Цикл
			КоллекцияСтрок = СтрЗадача.Значение.Родитель.Строки;
			КоллекцияСтрок.Удалить(СтрЗадача.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список активных задач по предмету.
//   Предмет - ссылка на предмет.
//   Список - ТаблицаЗначений - список активных задач (задачи в работе).
//
Процедура ЗаполнитьСписокАктивныхЗадачПоПредмету(Предмет, Список)
	
	УсловиеПоТипуПредмета = "";
	ВнутреннееСоединение = "";
	ТипПредмета = ТипЗнч(Предмет);
	Если ОбщегоНазначения.ЭтоБизнесПроцесс(Предмет.Метаданные()) Тогда
		УсловиеПоТипуПредмета = "ЗадачаИсполнителя.БизнесПроцесс = &Предмет";
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Проекты") Тогда
		УсловиеПоТипуПредмета = "(ЗадачаИсполнителя.Проект = &Предмет ИЛИ ЗадачаИсполнителя.Предметы.Предмет = &Предмет)";
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		УсловиеПоТипуПредмета = "(ЗадачаИсполнителя.ПроектнаяЗадача = &Предмет ИЛИ ЗадачаИсполнителя.Предметы.Предмет = &Предмет)";
	Иначе
		УсловиеПоТипуПредмета = "ЗадачаИсполнителя.Предметы.Предмет = &Предмет";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Автор,
		|	ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка)) КАК Флаг,
		|	ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерФлага,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.Выполнена КАК Выполнена,
		|	ЗадачаИсполнителя.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ИСТИНА
		|			ТОГДА ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|		КОГДА &ИспользоватьДатуИВремяВСрокахЗадач = ЛОЖЬ
		|			ТОГДА КОНЕЦПЕРИОДА(ЗадачаИсполнителя.СрокИсполнения, ДЕНЬ) < &ТекущаяДата
		|	КОНЕЦ КАК Просрочена,
		|	ВЫБОР
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ВыполнениеОтменено)
		|			ТОГДА 9
		|		КОГДА ЗадачиДляВыполнения.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачДляВыполнения.ГотоваКВыполнению)
		|			ТОГДА 8
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА ЗадачаИсполнителя.Выполнена = ИСТИНА
		|			ТОГДА 4
		|		КОГДА ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачаИсполнителя.Ссылка = ФлагиОбъектов.Объект
		|			И (ФлагиОбъектов.Пользователь = &ТекущийПользователь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО ЗадачаИсполнителя.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиДляВыполнения КАК ЗадачиДляВыполнения
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачиДляВыполнения.Задача
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> НЕОПРЕДЕЛЕНО
		|	И %УсловиеПоТипуПредмета%
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоТипуПредмета%", УсловиеПоТипуПредмета);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВнутреннееСоединение%", ВнутреннееСоединение);
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИспользоватьДатуИВремяВСрокахЗадач", ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрСписка = Список.Добавить();
		ЗаполнитьЗначенияСвойств(СтрСписка, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество активных задач по предмету.
//   Предмет - ссылка на предмет.
//
Функция КоличествоАктивныхЗадачПоПредмету(Предмет) Экспорт
	
	УсловиеПоТипуПредмета = "";
	ВнутреннееСоединение = "";
	ТипПредмета = ТипЗнч(Предмет);
	Если ОбщегоНазначения.ЭтоБизнесПроцесс(Предмет.Метаданные()) Тогда
		УсловиеПоТипуПредмета = "ЗадачаИсполнителя.БизнесПроцесс = &Предмет";
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Проекты") Тогда
		УсловиеПоТипуПредмета = "(ЗадачаИсполнителя.Проект = &Предмет ИЛИ ЗадачаИсполнителя.Предметы.Предмет = &Предмет)";
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		УсловиеПоТипуПредмета = "(ЗадачаИсполнителя.ПроектнаяЗадача.Предмет ИЛИ ЗадачаИсполнителя.Предметы.Предмет = &Предмет)";
	Иначе
		УсловиеПоТипуПредмета = "ЗадачаИсполнителя.Предметы.Предмет = &Предмет";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> НЕОПРЕДЕЛЕНО
		|	И %УсловиеПоТипуПредмета%";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоТипуПредмета%", УсловиеПоТипуПредмета);
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

// Возвращает значение настройки ИзменятьЗаданияЗаднимЧислом
//
Функция ИзменятьЗаданияЗаднимЧислом() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	
КонецФункции

#КонецОбласти
