// Процедура - Записать элемент ХМЛ
// 	
// Параметры:
//  ЗаписьХМЛ	 - 	 - 
//  Имя			 - 	 - 
//  Значение	 - 	 - 
//
Процедура ЗаписатьЭлементХМЛ(ЗаписьХМЛ, Имя, Значение)
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента(Имя);
	ЗаписьХМЛ.ЗаписатьТекст(Значение);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // Version
		
КонецПроцедуры 

// Функция - Установить результат выполнения
//
// Параметры:
//  БизнесПроцесс	 - Ссылка - ссылка на Бизнес процесс
//  ОписаниеОшибки	 - Строка - описание ошибки
//  UID_НСИ			 - Строка - строка ГУИД
//  Запрос			 - Строка - Текст запроса
//  Ответ			 - Строка - Текст ответа
// 
// Возвращаемое значение:
//  булево - 
//
Функция УстановитьРезультатВыполнения(БизнесПроцесс, ОписаниеОшибки="", UID_НСИ="", Запрос="", Ответ="")
	
	БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
	
	Если НЕ ОписаниеОшибки = "" Тогда
		БизнесПроцессОбъект.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	Если НЕ UID_НСИ = "" Тогда
		БизнесПроцессОбъект.UID_НСИ = UID_НСИ;
	КонецЕсли;
	Если НЕ Запрос = "" Тогда
		БизнесПроцессОбъект.ЗапросХМЛ = Запрос;
	КонецЕсли;
	Если НЕ Ответ = "" Тогда
		БизнесПроцессОбъект.ОтветХМЛ = Ответ;
	КонецЕсли;
	
	Попытка
		БизнесПроцессОбъект.Записать();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
		
КонецФункции
  
// Функция - Получить настройки веб сервера
// 
// Возвращаемое значение:
//  Структура - настройки для подключения к веб сервису
//
Функция ПолучитьНастройкиВебСервера()
	
	Структура = Новый Структура;
	
	Сервер = Справочники.ИсточникиДанных.WebСервисНСИ;
	
	Структура.Вставить("СсылкаНаWebСервис", Сервер.СсылкаНаWebСервис);
	Структура.Вставить("Пользователь", 		Сервер.Пользователь);
	Структура.Вставить("Пароль", 			Сервер.Пароль);
	Структура.Вставить("КодАбонента", 		Сервер.КодАбонента);
	
	Возврат Структура
	
КонецФункции
 
// Функция - Получить ссылку динамически
//
// Параметры:
//  НастройкиВебСервера	 - Структура - Структура с настройками
// 
// Возвращаемое значение:
//   - WSПрокси
//
Функция ПолучитьСсылкуДинамически(НастройкиВебСервера, ОшибкаПодключения="")
	
	Адрес 		 = НастройкиВебСервера.СсылкаНаWebСервис;
	Пользователь = НастройкиВебСервера.Пользователь;
	Пароль 	     = НастройкиВебСервера.Пароль;
	
	Попытка
		Определение = Новый WSОпределения(Адрес, Пользователь, Пароль,,,);
	Исключение
	    ОшибкаПодключения = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка создания WSОпределения", УровеньЖурналаРегистрации.Информация,,, ОшибкаПодключения);
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		Прокси = Новый WSПрокси(Определение, "http://www.axelot.ru/1CMDM/mdmExchange", "mdmExchange", "mdmExchangeSoap12"); 
	Исключение
	    ОшибкаПодключения = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Ошибка создания WSПрокси", УровеньЖурналаРегистрации.Информация,,, ОшибкаПодключения);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Прокси;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ++ Отправка запросов 

// Функция - Отправить запрос на веб сервис
//
// Параметры:
//  Адрес				 - Адрес хранилища с запросом
//  НастройкиВебСервера	 - Настройки веб сервиса 
//  ОписаниеОшибки		 - Описание ошибки, возвращаемый параметр
// 
// Возвращаемое значение:
//  ОтветИД - ИД записи в базе НСИ
//
Функция ОтправитьЗапросНаВебСервис(Адрес, НастройкиВебСервера, ОписаниеОшибки="")
	
	ОшибкаПодключения = "";
	
	Прокси = ПолучитьСсылкуДинамически(НастройкиВебСервера, ОшибкаПодключения);
	
	Если Прокси = Неопределено Тогда
		ОписаниеОшибки = ОшибкаПодключения;
		Возврат "";
	КонецЕсли; 
	
	ДанныеЗапрос = ПолучитьИзВременногоХранилища(Адрес);
	
	Фабрика = Прокси.ФабрикаXDTO;
	// Идет вторым параметром, обязательный
	ТипМассивФайлов = Фабрика.Создать(Фабрика.Тип("http://seaproject.ru/verf_m_mdm_bp", "ArrayOfFiles"));
	
	Прокси.Пользователь = НастройкиВебСервера.Пользователь;
	Прокси.Пароль 	    = НастройкиВебСервера.Пароль;
	
	ТекстовыйОтветХМЛ = "";
	Прокси.SendRequest(ДанныеЗапрос, ТипМассивФайлов, ТекстовыйОтветХМЛ);
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(ТекстовыйОтветХМЛ);
	Попытка
		Ответ = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	ОтветИД = "";
	Если ТипЗнч(Ответ) = Тип("ОбъектXDTO") Тогда
		Попытка
			ОтветИД = Ответ.ResponseMessageInfo.Id;
		Исключение
		    ОтветИД = "";
		КонецПопытки;
		Попытка
			Статус = Ответ.ResponseMessageInfo.Status.Name;
		Исключение
		    Статус = "";
			ОписаниеОшибки = "Не найден статус";
		КонецПопытки;
		Если СтрНайти(НРег(Статус), "ошибка") > 0 Тогда
			ОписаниеОшибки = Формат(ТекущаяДата(), "") + " Новый статус - Ошибка! " + Ответ.ResponseMessageInfo.Status.Description;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ОтветИД;
	
КонецФункции

// Функция - ОтправитьЗапросДляПолученияРезультатаОбработкиЗапроса
//
// Параметры:
//  ИДЗапросаНСИ - 	 - 
//  ТипЗапроса	 - 	 - 
// 
// Возвращаемое значение:
//  Ответ - хмл ответ от НСИ
//
Функция ОтправитьЗапросДляПолученияРезультатаОбработкиЗапроса(ИДЗапросаНСИ, ТипЗапроса = "")
	
	Если ИДЗапросаНСИ = "" Тогда
		Возврат "";
	КонецЕсли; 
	
	НастройкиВебСервера = ПолучитьНастройкиВебСервера();
	
	Прокси = ПолучитьСсылкуДинамически(НастройкиВебСервера);
	
	Прокси.Пользователь = НастройкиВебСервера.Пользователь;
	Прокси.Пароль 	    = НастройкиВебСервера.Пароль;
	
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("UTF-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("GetResultMessage");
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("MessageInfo");
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Type",      ТипЗапроса);
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "AbonentId", НастройкиВебСервера.КодАбонента);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // MessageInfo
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("MessageData");
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Id", ИДЗапросаНСИ);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // MessageData
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // RequestMessage

	Данные = ЗаписьХМЛ.Закрыть();
	
	Ответ = "";
	
	Прокси.GetResponse(Данные, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// -- Отправка запросов 

////////////////////////////////////////////////////////////////////////////////
// ++ Обработка запросов 

// Процедура - Сформировать и отправить запрос на классификацию
//
// Параметры:
//  Структура	 - Структура - ИДЗапроса, БизнесПроцесс
//
Процедура _ОтправитьЗапросНаКлассификацию(Структура)
	
	БизнесПроцесс = Структура.БизнесПроцесс;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификацияПредметыСнабжения.ПредметСнабжения КАК Ссылка,
	|	КлассификацияПредметыСнабжения.ПредметСнабжения.Обозначение КАК Обозначение,
	|	КлассификацияПредметыСнабжения.ПредметСнабжения.Наименование КАК Наименование,
	|	КаталогПредметовСнабжения.Характеристики.(
	|		Характеристика КАК Характеристика,
	|		Значение КАК Значение
	|	) КАК Характеристики
	|ИЗ
	|	БизнесПроцесс.ОтправкаВКСУНСИНаКлассификацию.ПредметыСнабжения КАК КлассификацияПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО КлассификацияПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|	КлассификацияПредметыСнабжения.Ссылка = &БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НастройкиВебСервера = ПолучитьНастройкиВебСервера();
	
	ТипЗапроса = "ПрисвоениеКода";
	
	КодАбонента = НастройкиВебСервера.КодАбонента;
	
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("UTF-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("RequestMessage");
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("MessageInfo");
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Type",      ТипЗапроса);
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "AbonentId", КодАбонента);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // MessageInfo
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("MessageData");
	
	Пока Выборка.Следующий() Цикл
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Request");
		
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "ItemID", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Code", Строка(Выборка.Обозначение));
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Name", Строка(Выборка.Наименование));
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ArrayOfProperties");
		ВыборкаХар = Выборка.Характеристики.Выбрать();
		Пока ВыборкаХар.Следующий() Цикл
			
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Property");
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Name",  Строка(ВыборкаХар.Характеристика));
			ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Value", XMLСтрока(ВыборкаХар.Значение));
			ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // Property
			
		КонецЦикла;
		
		// ++ Дополняем заполненными реквизитами
		
		ТекущаяСсылка = Выборка.Ссылка;
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Property");
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Name",  "Код");
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Value", ТекущаяСсылка.Код);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // Property
		
		Для каждого Рекв Из ТекущаяСсылка.Метаданные().Реквизиты Цикл
			
			Если ЗначениеЗаполнено(ТекущаяСсылка[Рекв.Имя]) Тогда
				ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Property");
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Name",  Рекв.Имя);
				ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Value", Строка(ТекущаяСсылка[Рекв.Имя]));
				ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // Property
			КонецЕсли; 
			
		КонецЦикла; 
		
		//ПутьДоПроекта = Строка(Структура.Проект) + ?(ЗначениеЗаполнено(Структура.Заказ), "/"+Строка(Структура.Заказ) + ?(ЗначениеЗаполнено(Структура.СтруктураКорабля), "/"+Строка(Структура.СтруктураКорабля), ""), "");
		//
		//ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Property");
		//ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Name",  "Входимость");
		//ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Value", ПутьДоПроекта +"/"+ Выборка.Входимость);
		//ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // Property
		// ++ 
		
		ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // ArrayOfProperties
			
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("ArrayOfFilesInfo");
		ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // ArrayOfFilesInfo
		
		ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // Request
		
	КонецЦикла; 
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // MessageData
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // RequestMessage
	
	ТекстЗапросаХМЛ = ЗаписьХМЛ.Закрыть();
	
	Адрес = ПоместитьВоВременноеХранилище(ТекстЗапросаХМЛ);
	
	ОписаниеОшибки = "";
	УИД_НСИ = ОтправитьЗапросНаВебСервис(Адрес, НастройкиВебСервера, ОписаниеОшибки);
	
	Если НЕ ОписаниеОшибки = "" Тогда
		
		УстановитьРезультатВыполнения(БизнесПроцесс, ОписаниеОшибки);
		ЗавершитьТекущуюЗадачу(Структура.БизнесПроцесс);
		
	ИначеЕсли НЕ УИД_НСИ = "" Тогда
		
		Если УстановитьРезультатВыполнения(БизнесПроцесс, , УИД_НСИ, ТекстЗапросаХМЛ) Тогда
			ЗавершитьТекущуюЗадачу(БизнесПроцесс);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьЗапросНаКлассификацию(Структура)
	
	БизнесПроцесс = Структура.БизнесПроцесс;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификацияПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	КлассификацияПредметыСнабжения.ПредметСнабжения.Обозначение КАК Обозначение,
	|	КлассификацияПредметыСнабжения.ПредметСнабжения.Наименование КАК Наименование,
	|	КаталогПредметовСнабжения.Характеристики.(
	|		Характеристика КАК Характеристика,
	|		Значение КАК Значение
	|	) КАК Характеристики
	|ИЗ
	|	БизнесПроцесс.ОтправкаВКСУНСИНаКлассификацию.ПредметыСнабжения КАК КлассификацияПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО КлассификацияПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|	КлассификацияПредметыСнабжения.Ссылка = &БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПрисвоениеКода = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПрисвоениеКода.Добавить(Новый Структура("ПредметСнабжения,Обозначение", 
													Выборка.ПредметСнабжения,
													Выборка.Обозначение));
	КонецЦикла; // Пока Выборка.Следующий() Цикл
	Если ОбменСНСИ.СформироватьЗапросНаПрисвоениеКода(СтруктураПрисвоениеКода) Тогда
		ЗавершитьТекущуюЗадачу(Структура.БизнесПроцесс);
	КонецЕсли; // Если ОбменСНСИ.СформироватьЗапросНаПрисвоениеКода(СтруктураПрисвоениеКода) Тогда	
КонецПроцедуры

// Процедура - Сформировать и отправить запрос на поиск
//
// Параметры:
//  Структура	 - Структура - ИДЗапроса, БизнесПроцесс
//
Процедура _ОтправитьЗапросНаПоиск(Структура) Экспорт
	
	БизнесПроцесс = Структура.БизнесПроцесс;
	
	ИмяРеквизита = "";
	ВариантПоиска = БизнесПроцесс.ВариантыПоискаПоКоду;
	Если ВариантПоиска = Перечисления.ВариантыПоискаПоКоду.ФНН Тогда
		ИмяРеквизита = "ФНН";
	ИначеЕсли ВариантПоиска = Перечисления.ВариантыПоискаПоКоду.NSN Тогда
		ИмяРеквизита = "NSN";
	ИначеЕсли ВариантПоиска = Перечисления.ВариантыПоискаПоКоду.Обозначение Тогда
		ИмяРеквизита = "Обозначение";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоискПредметыСнабжения.ПредметСнабжения КАК Ссылка,
	|	ПоискПредметыСнабжения.ПредметСнабжения."+ИмяРеквизита+" КАК Код,
	|	ПоискПредметыСнабжения.ПредметСнабжения.Наименование КАК ПредметСнабженияНаименование
	|ИЗ
	|	БизнесПроцесс.ОтправкаВКСУНСИНаПоискПоКоду.ПредметыСнабжения КАК ПоискПредметыСнабжения
	|ГДЕ
	|	ПоискПредметыСнабжения.Ссылка = &БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НастройкиВебСервера = ПолучитьНастройкиВебСервера();
	
	ТипЗапроса  = "Поиск"; //"ЗапросНаКлассификацию";
	КодАбонента = НастройкиВебСервера.КодАбонента;
	
	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.УстановитьСтроку("UTF-8");
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("SearchMessage");
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("MessageInfo");
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Type",      ТипЗапроса);
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "AbonentId", КодАбонента);
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // MessageInfo
	
	ЗаписьХМЛ.ЗаписатьНачалоЭлемента("MessageData");
	
	СтрокаОшибки = "";
	Пока Выборка.Следующий() Цикл
		
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента("Search");
		
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "ItemID", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Code",   Строка(Выборка.Код));
		ЗаписатьЭлементХМЛ(ЗаписьХМЛ, "Name",   ""); // Выборка.ПредметСнабженияНаименование
	
		ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // Search
		
		//Если СокрЛП(Строка(Выборка.Код)) = "" Тогда
		//	СтрокаОшибки = ?(СтрокаОшибки="", "", Символы.ПС) + СтрокаОшибки + "Не заполнен """+ИмяРеквизита+""" у " + Строка(Выборка.ПредметСнабженияНаименование)+"("+строка(Выборка.Ссылка.Код)+")";
		//КонецЕсли;
		
	КонецЦикла; 
	
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // MessageData
	ЗаписьХМЛ.ЗаписатьКонецЭлемента(); // SearchMessage
	
	ТекстЗапросаХМЛ = ЗаписьХМЛ.Закрыть();
	
	//Если НЕ СтрокаОшибки = "" Тогда
	//	
	//	Если УстановитьРезультатВыполнения(БизнесПроцесс, СтрокаОшибки) Тогда
	//		ЗавершитьТекущуюЗадачу(БизнесПроцесс);
	//	КонецЕсли; 
	//	
	//	Возврат;
	//	
	//КонецЕсли; 
	
	Адрес = ПоместитьВоВременноеХранилище(ТекстЗапросаХМЛ);
	
	ОписаниеОшибки = "";
	УИД_НСИ = ОтправитьЗапросНаВебСервис(Адрес, НастройкиВебСервера, ОписаниеОшибки);
	
	Если НЕ ОписаниеОшибки = "" Тогда
		
		УстановитьРезультатВыполнения(БизнесПроцесс, ОписаниеОшибки);
		ЗавершитьТекущуюЗадачу(Структура.БизнесПроцесс);
		
	ИначеЕсли НЕ УИД_НСИ = "" Тогда
		
		Если УстановитьРезультатВыполнения(БизнесПроцесс, , УИД_НСИ, ТекстЗапросаХМЛ) Тогда
			ЗавершитьТекущуюЗадачу(Структура.БизнесПроцесс);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтправитьЗапросНаПоиск(Структура) Экспорт
	
	БизнесПроцесс = Структура.БизнесПроцесс;
	
	ИмяРеквизита = "";
	ВариантПоиска = БизнесПроцесс.ВариантыПоискаПоКоду;
	Если ВариантПоиска = Перечисления.ВариантыПоискаПоКоду.ФНН Тогда
		ИмяРеквизита = "ФНН";
	ИначеЕсли ВариантПоиска = Перечисления.ВариантыПоискаПоКоду.NSN Тогда
		ИмяРеквизита = "NSN";
	ИначеЕсли ВариантПоиска = Перечисления.ВариантыПоискаПоКоду.Обозначение Тогда
		ИмяРеквизита = "Обозначение";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоискПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ПоискПредметыСнабжения.ПредметСнабжения."+ИмяРеквизита+" КАК Значение,
	|	ПоискПредметыСнабжения.ПредметСнабжения.Наименование КАК ПредметСнабженияНаименование
	|ИЗ
	|	БизнесПроцесс.ОтправкаВКСУНСИНаПоискПоКоду.ПредметыСнабжения КАК ПоискПредметыСнабжения
	|ГДЕ
	|	ПоискПредметыСнабжения.Ссылка = &БизнесПроцесс";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтруктураПоиска = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Добавить(Новый Структура("ПредметСнабжения,Значение", 
													Выборка.ПредметСнабжения,
													Выборка.Значение));
	КонецЦикла; // Пока Выборка.Следующий() Цикл
	Если ОбменСНСИ.СформироватьЗапросНаПоиск(СтруктураПоиска) Тогда
		ЗавершитьТекущуюЗадачу(Структура.БизнесПроцесс);
	КонецЕсли; // Если ОбменСНСИ.СформироватьЗапросНаПоиск(СтруктураПоиска) Тогда
		
КонецПроцедуры

// Обрабатывает ответа от веб сервиса
// Возвращаемое значение: 
// 	Массив структур 
Функция ОбработатьОтветЗапросаXDTO(ОтветХМЛ)
	
	МассивЭлементов = Новый Массив;

	Если ТипЗнч(ОтветХМЛ) = Тип("ОбъектXDTO") Тогда
		Попытка
			Статус = ОтветХМЛ.ResponseMessageInfo.Status.Name;
		Исключение
		    Статус = "";
		КонецПопытки;
		
		Если НЕ Статус = "" Тогда
			Если Статус = "Обработано" Тогда
				
				Попытка
					Список = ОтветХМЛ.ResponseData.Item;
				Исключение
				    Возврат МассивЭлементов;
				КонецПопытки;
				
				Если ТипЗнч(Список) = Тип("ОбъектXDTO") Тогда
					
					СтруктураЭлемента = Новый Структура;
					СтруктураЭлемента.Вставить("ГУИД", 		   Список.ItemID);
					СтруктураЭлемента.Вставить("Наименование", Список.Name);
					СтруктураЭлемента.Вставить("КодБазовый",   Список.CodeBase);
					СтруктураЭлемента.Вставить("КодОСК",	   Список.CodeOSK);
					СтруктураЭлемента.Вставить("КодКласса",    Список.ClassCode);
					СтруктураЭлемента.Вставить("НаименованиеКласса", Список.ClassName);
					
					МассивХарактеристик = Новый Массив;
					Если Список.ArrayOfCharacteristics.Свойства().Количество() > 0 Тогда
						СписокХарактеристик = Список.ArrayOfCharacteristics.Characteristic;
						Если СписокХарактеристик.Количество() > 0 Тогда
							Для каждого Характеристика Из СписокХарактеристик Цикл
								ЗначХарактеристики = СокрЛП(СтрЗаменить(Строка(Характеристика.Value), "ОбъектXDTO", ""));
								Если НЕ ЗначХарактеристики = "" Тогда
									СтруктураХарактеристики = Новый Структура;
									СтруктураХарактеристики.Вставить("Наименование", 	 Характеристика.Name);
									СтруктураХарактеристики.Вставить("ЕдиницаИзмерения", СтрЗаменить(Характеристика.Unit, "ОбъектXDTO", ""));
									СтруктураХарактеристики.Вставить("Значение",  		 ЗначХарактеристики);
									МассивХарактеристик.Добавить(СтруктураХарактеристики);
								КонецЕсли; 
							КонецЦикла; 
						КонецЕсли; 
					КонецЕсли; 
					
					СтруктураЭлемента.Вставить("Характеристики", МассивХарактеристик);
					
					МассивЭлементов.Добавить(СтруктураЭлемента);
					
				Иначе
					
					Для каждого Элемент Из Список Цикл
						
						СтруктураЭлемента = Новый Структура;
						СтруктураЭлемента.Вставить("ГУИД", 		   Элемент.ItemID);
						СтруктураЭлемента.Вставить("Наименование", Элемент.Name);
						СтруктураЭлемента.Вставить("КодБазовый",   Элемент.CodeBase);
						Если НЕ Элемент.Свойства().Получить("CodeOSK") = Неопределено Тогда
							СтруктураЭлемента.Вставить("КодОСК",   Элемент.CodeOSK);
						Иначе
							СтруктураЭлемента.Вставить("КодОСК",   "");
						КонецЕсли; 
						СтруктураЭлемента.Вставить("КодКласса",    Элемент.ClassCode);
						СтруктураЭлемента.Вставить("НаименованиеКласса", Элемент.ClassName);
						
						МассивХарактеристик = Новый Массив;
						Если Элемент.ArrayOfCharacteristics.Свойства().Количество() > 0 Тогда
							СписокХарактеристик = Элемент.ArrayOfCharacteristics.Characteristic;
							Если СписокХарактеристик.Количество() > 0 Тогда
								Для каждого Характеристика Из СписокХарактеристик Цикл
									ЗначХарактеристики = СокрЛП(СтрЗаменить(Строка(Характеристика.Value), "ОбъектXDTO", ""));
									Если НЕ ЗначХарактеристики = "" Тогда
										СтруктураХарактеристики = Новый Структура;
										СтруктураХарактеристики.Вставить("Наименование", 	 Характеристика.Name);
										СтруктураХарактеристики.Вставить("ЕдиницаИзмерения", СтрЗаменить(Характеристика.Unit, "ОбъектXDTO", ""));
										СтруктураХарактеристики.Вставить("Значение",  		 ЗначХарактеристики);
										МассивХарактеристик.Добавить(СтруктураХарактеристики);
									КонецЕсли; 
								КонецЦикла; 
							КонецЕсли; 
						КонецЕсли; 
						
						СтруктураЭлемента.Вставить("Характеристики", МассивХарактеристик);
						
						МассивЭлементов.Добавить(СтруктураЭлемента);
						
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 

	Возврат МассивЭлементов;
	
КонецФункции

// Читает файл ответа от веб сервиса
// Возвращаемое значение: Структура:
//  ОтветХМЛ - Данные XDTO из файла ответа
//  Статус   - статус обработки из файла ответа 
Функция ПрочитатьФайлОтветаВПакетXDTO(Ответ)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.УстановитьСтроку(Ответ);
	//Фабрика = Прокси.ФабрикаXDTO;
	//ТипРезультат = Фабрика.Тип("http://seaproject.ru/verf_m_mdm_bp", "ResponseMessage");
	Попытка
		ОтветХМЛ = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
	Исключение
		ОтветХМЛ = "";
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	Попытка
		Статус = ОтветХМЛ.ResponseMessageInfo.Status.Name;
	Исключение
		Статус = "";
	КонецПопытки; 
	
	Структура = Новый Структура;
	Структура.Вставить("ОтветХМЛ", ОтветХМЛ);
	Структура.Вставить("Статус", Статус);
	
	Возврат Структура
	
КонецФункции

// -- Обработка запросов 

////////////////////////////////////////////////////////////////////////////////
// ++ обработка результатов запросов:

// ++ запроса на классификацию

// Процедура - Обработать результаты запроса на классификацию, получение статуса обработки запроса из НСИ, обновление данных в БП
//
// Параметры:
//  Структура	 - Структура - ИДЗапроса,
//
Процедура _ОбработатьРезультатыЗапросаНаКлассификацию(Структура)
	
	ТипЗапроса = "ЗапросОтвета";
	БизнесПроцесс  = Структура.БизнесПроцесс;
	
	Ответ = ОтправитьЗапросДляПолученияРезультатаОбработкиЗапроса(БизнесПроцесс.UID_НСИ, ТипЗапроса);
	
	Если НЕ Ответ = "" Тогда
		
		УстановитьРезультатВыполнения(БизнесПроцесс,,,, Ответ);
		
		Рез = ПрочитатьФайлОтветаВПакетXDTO(Ответ);
		
		ОтветХМЛ = Рез.ОтветХМЛ;
		Статус   = Рез.Статус;
		
		Если СтрНайти(НРег(Статус), "обработано") > 0 Тогда
			
			// Обновить информацию в БП
			Результат = ОбновитьДанныеВТаблЧастиБизнецПроцесса(БизнесПроцесс);
			
			Если НЕ Результат.Выполнено Тогда
				УстановитьРезультатВыполнения(БизнесПроцесс, Результат.Описание);
				//Возврат;
			КонецЕсли; 
			
			// Завершить задачу БП
			ЗавершитьТекущуюЗадачу(БизнесПроцесс);
			
		КонецЕсли; 
		
		Если СтрНайти(НРег(Статус), "ошибка") > 0 Тогда
			
			Попытка
				ОписаниеОшибки = ОтветХМЛ.ResponseMessageInfo.Status.Description;
			Исключение
				ОписаниеОшибки = "Неизвестная ошибка";
			КонецПопытки; 
			
			УстановитьРезультатВыполнения(БизнесПроцесс, ОписаниеОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаНаКлассификацию(ПредметСнабжения)
	Результат 		= Неопределено;
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ОбменСНСИ.Состояние КАК Состояние,
	             	  |	ОбменСНСИ.КодОСК КАК КодОСК
	             	  |ИЗ
	             	  |	РегистрСведений.ОбменСНСИ КАК ОбменСНСИ
	             	  |ГДЕ
	             	  |	ОбменСНСИ.Объект = &ПредметСнабжения
	             	  |	И ОбменСНСИ.Дата >= &Дата
	             	  |	И (ОбменСНСИ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменаСНСИ.КодОСКПрисвоен)
	             	  |			ИЛИ ОбменСНСИ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменаСНСИ.КодОСКНеПрисвоен))
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	ОбменСНСИ.Дата УБЫВ";
	Запрос.УстановитьПараметр("ПредметСнабжения", 	ПредметСнабжения);
	Запрос.УстановитьПараметр("Дата", 				ТекущаяДата() - 2 * 60 * 60);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("Состояние,КодОСК", 
										Выборка.Состояние, 
										Выборка.КодОСК);
	КонецЕсли; // Если Выборка.Следующий() Тогда     	
	Возврат Результат;
КонецФункции // ПолучитьРезультатЗапросаНаПоиск

Процедура ОбработатьРезультатыЗапросаНаКлассификацию(Структура)
	
	БизнесПроцесс  	= Структура.БизнесПроцесс.ПолучитьОбъект();;
	
	КоличествоСтрокСРезультатом = 0;
	Для Каждого Строка Из БизнесПроцесс.ПредметыСнабжения Цикл
		РезультатПоиска = ПолучитьРезультатЗапросаНаКлассификацию(Строка.ПредметСнабжения);
		Если РезультатПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли; // Если РезультатПоиска = Неопределено Тогда
		
		Строка.КодОСК = РезультатПоиска.КодОСК;
		Если РезультатПоиска.Состояние = Перечисления.СостоянияОбменаСНСИ.КодОСКПрисвоен Тогда
			Строка.РезультатЗапроса = Перечисления.ВидыРезультатовЗапроса.ЭталонНайден;
		КонецЕсли; // Если РезультатПоиска.Состояние = Перечисления.СостоянияОбменаСНСИ.КодОСКПрисвоен Тогда
		
		Если РезультатПоиска.Состояние = Перечисления.СостоянияОбменаСНСИ.КодОСКНеПрисвоен Тогда
			Строка.РезультатЗапроса = Перечисления.ВидыРезультатовЗапроса.ЭталонНеНайден;
		КонецЕсли; // Если РезультатПоиска.Состояние = Перечисления.СостоянияОбменаСНСИ.КодОСКНеПрисвоен Тогда
		
		Если ЗначениеЗаполнено(Строка.РезультатЗапроса) Тогда
			КоличествоСтрокСРезультатом = КоличествоСтрокСРезультатом + 1;
		КонецЕсли; // Если ЗначениеЗаполнено(Строка.РезультатЗапроса) Тогда		
	КонецЦикла; // Для Каждого Строка Из БизнесПроцесс.ПредметыСнабжения Цикл
	
	БизнесПроцесс.Записать();
	Если КоличествоСтрокСРезультатом = БизнесПроцесс.ПредметыСнабжения.Количество() Тогда
		ЗавершитьТекущуюЗадачу(БизнесПроцесс.Ссылка);
	КонецЕсли; // Если КоличествоСтрокСРезультатом = БизнесПроцесс.ПредметыСнабжения.Количество() Тогда

	
КонецПроцедуры

// -- запроса на классификацию

// ++ запроса на поиск

// Устанавливает в табличной части БП код ОСК и строковые данные ответа по каждому ПС
Функция ОбновитьДанныеВТаблЧастиБизнецПроцесса(БизнесПроцесс)
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	Ответ = БизнесПроцесс.ОтветХМЛ;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ГУИД");
	ТЗ.Колонки.Добавить("КодОСК");
	ТЗ.Колонки.Добавить("Текст");
		
	ХМЛДок = Новый COMОбъект("Microsoft.XMLDOM");
	ХМЛДок.async = 0;
	ХМЛДок.loadXML(Ответ);
	node = ХМЛДок.getElementsByTagName("Item");
	
	Для к=0 по node.length-1 Цикл
		ТекЭлем = node.item(к);
		НовСтр = ТЗ.Добавить();
		ItemID = ТекЭлем.getElementsByTagName("ItemID");
		Если ItemID.length > 0 Тогда
			НовСтр.ГУИД = ItemID.item(0).text;
		Иначе
			НовСтр.ГУИД = "";
		КонецЕсли; 
		CodeOSK = ТекЭлем.getElementsByTagName("CodeOSK");
		Если CodeOSK.length > 0 Тогда
			НовСтр.КодОСК = CodeOSK.item(0).text;
		Иначе
			НовСтр.КодОСК = "";
		КонецЕсли; 
		НовСтр.Текст  = ТекЭлем.xml;
	КонецЦикла;   

	КоличествоЭлементов = ТЗ.Количество();
	// Нет ни одного элемента в ответе
	Если КоличествоЭлементов = 0 Тогда
		Результат.Выполнено = Ложь;
		Результат.Описание  = "Пустой ответ от КСУ НСИ";
	КонецЕсли; 
	
	// Есть элементы, проверяем на заполненность кода ОСК
	Если КоличествоЭлементов > 0 Тогда
		ВсегоПустых = 0;
		Для каждого Строка Из ТЗ Цикл
			Если СокрЛП(Строка.КодОСК) = "" Тогда
				ВсегоПустых = ВсегоПустых + 1;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ТЗ.Количество() = ВсегоПустых Тогда
			Результат.Выполнено = Ложь;
			Результат.Описание  = "В ответе нет ни одного эталона с кодом ОСК";
			Возврат Результат;
		КонецЕсли; 
	КонецЕсли; 
	
	БП_Объект = БизнесПроцесс.ПолучитьОбъект();
	
	Для каждого СтрокаТЧ Из БП_Объект.ПредметыСнабжения Цикл
		
		НайденныйПС = ТЗ.Найти(Строка(СтрокаТЧ.ПредметСнабжения.УникальныйИдентификатор()), "ГУИД");
		
		Если НЕ НайденныйПС = Неопределено Тогда
			
			Если СокрЛП(НайденныйПС.КодОСК) = "" Тогда
				СтрокаТЧ.РезультатЗапроса = Перечисления.ВидыРезультатовЗапроса.ЭталонНеНайден;
			Иначе
				СтрокаТЧ.КодОСК = НайденныйПС.КодОСК;
				СтрокаТЧ.РезультатЗапроса = Перечисления.ВидыРезультатовЗапроса.ЭталонНайден;
			КонецЕсли; 
			
			СтрокаТЧ.Ответ = НайденныйПС.Текст;
			
		Иначе
			
			СтрокаТЧ.РезультатЗапроса = Перечисления.ВидыРезультатовЗапроса.ЭталонНеНайден;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Попытка
		БП_Объект.Записать();
	Исключение
		Результат.Выполнено = Ложь;
		Результат.Описание  = "Не удалось обновить информацию в бизнес процессе";
		Возврат Результат;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Завершает активную задачу БП
Процедура ЗавершитьТекущуюЗадачу(БизнесПроцесс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Выборка.Ссылка);
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура - Обработать результаты запроса на поиск, получение статуса обработки запроса из НСИ, обновление данных в БП
//
// Параметры:
//  Структура	 - Структура - ИДЗапроса 
//
Процедура _ОбработатьРезультатыЗапросаНаПоиск(Структура)
	
	ТипЗапроса = "ЗапросОтвета";
	БизнесПроцесс  = Структура.БизнесПроцесс;
	
	Ответ = ОтправитьЗапросДляПолученияРезультатаОбработкиЗапроса(БизнесПроцесс.UID_НСИ, ТипЗапроса);
	
	Если НЕ Ответ = "" Тогда
		
		УстановитьРезультатВыполнения(БизнесПроцесс,,,, Ответ);
		
		Рез = ПрочитатьФайлОтветаВПакетXDTO(Ответ);
		
		ОтветХМЛ = Рез.ОтветХМЛ;
		Статус   = Рез.Статус;
		
		Попытка
			Если ТипЗнч(ОтветХМЛ.ResponseData.Item) = Тип("ОбъектXDTO") Тогда
				КоличествоВсего = 1;
			Иначе
				КоличествоВсего = ОтветХМЛ.ResponseData.Item.Количество();
			КонецЕсли;
		Исключение
			КоличествоВсего = 0;
		КонецПопытки;
		
		Если СтрНайти(НРег(Статус), "обработано") > 0 Тогда
			
			// Обновить информацию в БП
			Результат = ОбновитьДанныеВТаблЧастиБизнецПроцесса(БизнесПроцесс);
			
			Если НЕ Результат.Выполнено Тогда
				УстановитьРезультатВыполнения(БизнесПроцесс, Результат.Описание);
			КонецЕсли; 
			
			// Завершить задачу БП
			ЗавершитьТекущуюЗадачу(БизнесПроцесс);
			
		ИначеЕсли СтрНайти(НРег(Статус), "ошибка") > 0 Тогда
			
			Попытка
				ОписаниеОшибки = ОтветХМЛ.ResponseMessageInfo.Status.Description;
			Исключение
				ОписаниеОшибки = "Неизвестная ошибка";
			КонецПопытки; 
			
			УстановитьРезультатВыполнения(БизнесПроцесс, ОписаниеОшибки);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаНаПоиск(ПредметСнабжения)
	Результат 		= Неопределено;
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ОбменСНСИ.Состояние КАК Состояние,
	             	  |	ОбменСНСИ.КодОСК КАК КодОСК
	             	  |ИЗ
	             	  |	РегистрСведений.ОбменСНСИ КАК ОбменСНСИ
	             	  |ГДЕ
	             	  |	ОбменСНСИ.Объект = &ПредметСнабжения
	             	  |	И ОбменСНСИ.Дата >= &Дата
	             	  |	И (ОбменСНСИ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменаСНСИ.КодОСКНайден)
	             	  |			ИЛИ ОбменСНСИ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменаСНСИ.КодОСКНеНайден))
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	ОбменСНСИ.Дата УБЫВ";
	Запрос.УстановитьПараметр("ПредметСнабжения", 	ПредметСнабжения);
	Запрос.УстановитьПараметр("Дата", 				ТекущаяДата() - 2 * 60 * 60);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("Состояние,КодОСК", 
										Выборка.Состояние, 
										Выборка.КодОСК);
	КонецЕсли; // Если Выборка.Следующий() Тогда     	
	Возврат Результат;
КонецФункции // ПолучитьРезультатЗапросаНаПоиск

Процедура ОбработатьРезультатыЗапросаНаПоиск(Структура)
	
	БизнесПроцесс  	= Структура.БизнесПроцесс.ПолучитьОбъект();;
	
	КоличествоСтрокСРезультатом = 0;
	Для Каждого Строка Из БизнесПроцесс.ПредметыСнабжения Цикл
		РезультатПоиска = ПолучитьРезультатЗапросаНаПоиск(Строка.ПредметСнабжения);
		Если РезультатПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли; // Если РезультатПоиска = Неопределено Тогда
		
		Строка.КодОСК = РезультатПоиска.КодОСК;
		Если РезультатПоиска.Состояние = Перечисления.СостоянияОбменаСНСИ.КодОСКНайден Тогда
			Строка.РезультатЗапроса = Перечисления.ВидыРезультатовЗапроса.ЭталонНайден;
		КонецЕсли; // Если РезультатПоиска.Состояние = Перечисления.СостоянияОбменаСНСИ.КодОСКНайден Тогда
		
		Если РезультатПоиска.Состояние = Перечисления.СостоянияОбменаСНСИ.КодОСКНеНайден Тогда
			Строка.РезультатЗапроса = Перечисления.ВидыРезультатовЗапроса.ЭталонНеНайден;
		КонецЕсли; // Если РезультатПоиска.Состояние = Перечисления.СостоянияОбменаСНСИ.КодОСКНеНайден Тогда
		
		Если ЗначениеЗаполнено(Строка.РезультатЗапроса) Тогда
			КоличествоСтрокСРезультатом = КоличествоСтрокСРезультатом + 1;
		КонецЕсли; // Если ЗначениеЗаполнено(Строка.РезультатЗапроса) Тогда		
	КонецЦикла; // Для Каждого Строка Из БизнесПроцесс.ПредметыСнабжения Цикл
	
	БизнесПроцесс.Записать();
	Если КоличествоСтрокСРезультатом = БизнесПроцесс.ПредметыСнабжения.Количество() Тогда
		ЗавершитьТекущуюЗадачу(БизнесПроцесс.Ссылка);
	КонецЕсли; // Если КоличествоСтрокСРезультатом = БизнесПроцесс.ПредметыСнабжения.Количество() Тогда
	
КонецПроцедуры

// -- запроса на поиск


// -- Обработка запросов  

// ++ Обработка БП


Функция ПакетXDTOВТаблицуЗначений(Знач ПакетXDTO) Экспорт 
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
	ТаблицаРеквизитов.Колонки.Добавить("Значение");
	
	Свойства = ПакетXDTO.Свойства();
	
	Для каждого Свойство Из Свойства Цикл
		ИмяСвойства = Свойство.Имя;
		Если СтрНайти(ИмяСвойства, "Array") > 0 Тогда
			Продолжить;
		КонецЕсли; 
		НовСтр = ТаблицаРеквизитов.Добавить();
		НовСтр.ИмяРеквизита = ИмяСвойства;
		НовСтр.Значение = ПакетXDTO[ИмяСвойства];
	КонецЦикла; 
	
	Если ПакетXDTO.ArrayOfCharacteristics.Свойства().Количество() > 0 Тогда
		СписокХарактеристик = ПакетXDTO.ArrayOfCharacteristics.Characteristic;
		Если ТипЗнч(СписокХарактеристик) = Тип("ОбъектXDTO") Тогда
			НовСтр = ТаблицаРеквизитов.Добавить();
			НовСтр.ИмяРеквизита = СписокХарактеристик.Name;
			НовСтр.Значение = СокрЛП(СтрЗаменить(Строка(СписокХарактеристик.Value), "ОбъектXDTO", ""));
		Иначе 
			Если СписокХарактеристик.Количество() > 0 Тогда
				Для каждого Характеристика Из СписокХарактеристик Цикл
					НовСтр = ТаблицаРеквизитов.Добавить();
					НовСтр.ИмяРеквизита = Характеристика.Name;
					НовСтр.Значение = СокрЛП(СтрЗаменить(Строка(Характеристика.Value), "ОбъектXDTO", ""));;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Процедура - Изменение данных табличной части бизнец процесса
//
// Параметры:
//  Структура	Ссылка - БизнесПроцесс, Данные - текст ответа
//
Процедура _ИзменениеДанныхСправочникаПСИзБизнецПроцесса(Структура)
	
	БизнесПроцесс = Структура.БизнесПроцесс;
	
	БП_Объект = БизнесПроцесс.ПолучитьОбъект();
	
	Результат = Истина;
	ОписаниеОшибки = "";
	
	Для каждого СтрокаТЧ Из БП_Объект.ПредметыСнабжения Цикл
		
		ТекПредметСнабжения = СтрокаТЧ.ПредметСнабжения;
		
		Если НЕ СтрокаТЧ.КодОСК = "" И НЕ ТекПредметСнабжения.НомерОСК = СтрокаТЧ.КодОСК Тогда
			
			СпрОб = СтрокаТЧ.ПредметСнабжения.ПолучитьОбъект();
			СпрОб.НомерОСК = СтрокаТЧ.КодОСК;
			СпрОб.Статус   = Справочники.СтатусыЗаписейСправочниковИКаталогов.ПровереноОСК;
			
			// 
			ОтветСтруктура = ПрочитатьФайлОтветаВПакетXDTO(СтрокаТЧ.Ответ);
			
			ТаблицаПакета = ПакетXDTOВТаблицуЗначений(ОтветСтруктура.ОтветХМЛ);
			
			ТЧ_ДанныеНСИ = СпрОб.ДанныеИзКСУНСИ;
			ТЧ_ДанныеНСИ.Очистить();
			
			Для каждого Элем Из ТаблицаПакета Цикл
				ЗаполнитьЗначенияСвойств(ТЧ_ДанныеНСИ.Добавить(), Элем);
			КонецЦикла; 
			
			Попытка
				СпрОб.Записать();
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Результат = Ложь;
				Прервать;
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Попытка
		БП_Объект.Записать();
	Исключение
		ОписаниеОшибкиБП = ОписаниеОшибки();
		Результат = Ложь;
	КонецПопытки;

	Если НЕ Результат Тогда
		ОписаниеОшибкиПолное = ОписаниеОшибки + ?(ОписаниеОшибкиБП = "", "", Символы.ПС + ОписаниеОшибкиБП);
		УстановитьРезультатВыполнения(БизнесПроцесс, ОписаниеОшибкиПолное);
	КонецЕсли; 
	
	// Завершает текущую задачу
	ЗавершитьТекущуюЗадачу(БизнесПроцесс);
	
КонецПроцедуры

Процедура ИзменениеДанныхСправочникаПСИзБизнецПроцесса(Структура)
	Результат 		= Истина;
	ОписаниеОшибки 	= "";
	
	БизнесПроцесс 	= Структура.БизнесПроцесс;	
	БП_Объект 		= БизнесПроцесс.ПолучитьОбъект();	
	
	Для каждого СтрокаТЧ Из БП_Объект.ПредметыСнабжения Цикл
		
		ТекПредметСнабжения = СтрокаТЧ.ПредметСнабжения;
		
		Если НЕ СтрокаТЧ.КодОСК = "" И НЕ ТекПредметСнабжения.НомерОСК = СтрокаТЧ.КодОСК Тогда
			
			СпрОб = СтрокаТЧ.ПредметСнабжения.ПолучитьОбъект();
			СпрОб.НомерОСК = СтрокаТЧ.КодОСК;
			СпрОб.Статус   = Справочники.СтатусыЗаписейСправочниковИКаталогов.ПровереноОСК;
						
			Попытка
				СпрОб.Записать();
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Результат = Ложь;
				Прервать;
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Попытка
		БП_Объект.Записать();
	Исключение
		ОписаниеОшибкиБП = ОписаниеОшибки();
		Результат = Ложь;
	КонецПопытки;

	Если НЕ Результат Тогда
		ОписаниеОшибкиПолное = ОписаниеОшибки + ?(ОписаниеОшибкиБП = "", "", Символы.ПС + ОписаниеОшибкиБП);
		УстановитьРезультатВыполнения(БизнесПроцесс, ОписаниеОшибкиПолное);
	КонецЕсли; 
	
	// Завершает текущую задачу
	ЗавершитьТекущуюЗадачу(БизнесПроцесс);
	
КонецПроцедуры

// -- Обработка БП


////////////////////////////////////////////////////////////////////////////////
// Взаимодействие СНСИ

// Процедура - Взаимодействие СНСИ
// Регламетное задание, отправка и получение запросов в/от НСИ
Процедура ВзаимодействиеСНСИ_ОтправкаИПолучениеЗапросов() Экспорт
	
	// Новые записи
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкаМаршрута)";
	
	МассивТочек = Новый Массив;
	МассивТочек.Добавить(БизнесПроцессы.ОтправкаВКСУНСИНаПоискПоКоду.ТочкиМаршрута.ОтправкаЗапроса);
	МассивТочек.Добавить(БизнесПроцессы.ОтправкаВКСУНСИНаКлассификацию.ТочкиМаршрута.ОтправкаЗапроса);
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочек);
	
	Выборка = Запрос.Выполнить().Выбрать();     
	
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("БизнесПроцесс", Выборка.БизнесПроцесс);
		
		Если ТипЗнч(Выборка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.ОтправкаВКСУНСИНаКлассификацию") Тогда
						
			ОтправитьЗапросНаКлассификацию(Структура);
			
		ИначеЕсли ТипЗнч(Выборка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.ОтправкаВКСУНСИНаПоискПоКоду") Тогда
			
			ОтправитьЗапросНаПоиск(Структура);
			
		КонецЕсли; 
		
	КонецЦикла;  
	
	// Записи в обработке
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкаМаршрута)";

	МассивТочек = Новый Массив;
	МассивТочек.Добавить(БизнесПроцессы.ОтправкаВКСУНСИНаПоискПоКоду.ТочкиМаршрута.ОжиданиеПолученияОтвета);
	МассивТочек.Добавить(БизнесПроцессы.ОтправкаВКСУНСИНаКлассификацию.ТочкиМаршрута.ОжиданиеПолученияОтвета);
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочек);
	
	Выборка = Запрос.Выполнить().Выбрать();     
	
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("БизнесПроцесс", Выборка.БизнесПроцесс);
		
		Если ТипЗнч(Выборка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.ОтправкаВКСУНСИНаКлассификацию") Тогда
			
			ОбработатьРезультатыЗапросаНаКлассификацию(Структура);
			
		ИначеЕсли ТипЗнч(Выборка.БизнесПроцесс) = Тип("БизнесПроцессСсылка.ОтправкаВКСУНСИНаПоискПоКоду") Тогда 
			
			ОбработатьРезультатыЗапросаНаПоиск(Структура);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Взаимодействие СНСИ обработка результатов
// Регламетное задание, обработка результатов БП и запись данных НСИ в справочник ПС
Процедура ВзаимодействиеСНСИ_ОбработкаРезультатовЗапросов() Экспорт
	
	// Записи в обработке
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкаМаршрута)";
	
	МассивТочек = Новый Массив;
	МассивТочек.Добавить(БизнесПроцессы.ОтправкаВКСУНСИНаПоискПоКоду.ТочкиМаршрута.ОбработкаРезультатаОтвета);
	МассивТочек.Добавить(БизнесПроцессы.ОтправкаВКСУНСИНаКлассификацию.ТочкиМаршрута.ОбработкаРезультатаОтвета);
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", МассивТочек);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("БизнесПроцесс", Выборка.БизнесПроцесс);
		
		ИзменениеДанныхСправочникаПСИзБизнецПроцесса(Структура);
		
	КонецЦикла;
	
КонецПроцедуры
