 #Область Служебное

// Завершает активную задачу БП
Процедура ЗавершитьТекущуюЗадачу(БизнесПроцесс, ТочкиМаршрута)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)";	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(Выборка.Ссылка);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьЗадачи(ТочкиМаршрута)
	
	// Записи в обработке
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.БизнесПроцесс КАК БизнесПроцесс
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачаИсполнителя.Дата";
	Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат РезультатЗапроса.Выбрать();
		
	КонецЕсли;
	
КонецФункции

//процедура предназначена для отключения возможности редактирования и записи изменений формы элемента
Процедура ОтключитьНепосредственноеИзменениеДанных(Форма, ЕстьБизнесПроцессКорректировки = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыДляКорректировкиСправочников") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого ЭлементФормы Из Форма.Элементы Цикл
		
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда //режим редактирования табличных частей и дополнительной информации
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				
				Если (ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Или ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка) И
					ЭтоПолеРеквизита(Форма.Объект.Ссылка.Метаданные(), ЭлементФормы.ПутьКДанным) Тогда
					
					ЭлементФормы.ТолькоПросмотр = Истина;
					ЭлементФормы.ТекстПодвала = "ЭтоРеквизитОбъекта";
					
				ИначеЕсли ЭлементФормы.Имя = "ФНН" Или ЭлементФормы.Имя = "НаименованиеДополнительное" Тогда //исключения
					
					ЭлементФормы.ТолькоПросмотр = Истина;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") И (ЭлементФормы.Имя = "НРЕГ" Или ЭлементФормы.Имя = "ВНижнийРегистр") Тогда //исключения
				
				ЭлементФормы.Доступность = Ложь;
				
			КонецЕсли;
			
		Иначе //режим редактирования основных реквизитов
			
			Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
				
				ЭлементФормы.ТолькоПросмотр = Истина;
				
			ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ПолеФормы") Тогда
				
				Если Не ((ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Или ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка) И
					ЭтоПолеРеквизита(Форма.Объект.Ссылка.Метаданные(), ЭлементФормы.ПутьКДанным)) Тогда
					
					ЭлементФормы.ТолькоПросмотр = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаЗаписать") = Неопределено Тогда
	//	
	//	Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписать.Видимость = Ложь;
	//	
	//КонецЕсли;
	
	Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаЗаписатьИЗакрыть") = Неопределено Тогда
		
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ЗаписатьИЗакрытьПрограммно") = Неопределено Тогда
		
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ЗаписатьИЗакрытьПрограммно.Видимость = Ложь;
		
	КонецЕсли;
	
	//Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ЗаписатьПрограммно") = Неопределено Тогда
	//	
	//	Форма.КоманднаяПанель.ПодчиненныеЭлементы.ЗаписатьПрограммно.Видимость = Ложь;
	//	
	//КонецЕсли;
	
	Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаУстановитьПометкуУдаления") = Неопределено Тогда
		
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаУстановитьПометкуУдаления.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаУдалить") = Неопределено Тогда
		
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаУдалить.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЕстьБизнесПроцессКорректировки Тогда
		
		// ++ 10.07.2018 16:08:48 Базунов Д.А. Задача: Обход ошибки
		Если Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаОбщаяКомандаВнестиИзмененияВСправочник") = Неопределено Тогда
			Возврат;
		КонецЕсли; 		
		// -- 10.07.2018 16:08:48 Базунов Д.А. Задача:		
		
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОбщаяКомандаВнестиИзмененияВСправочник.Доступность =
		ПравоДоступа("Редактирование", Форма.Объект.Ссылка.Метаданные());
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОбщаяКомандаАкцептоватьИзмененияВСправочнике.Доступность =
		Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОбщаяКомандаВнестиИзмененияВСправочник.Доступность;
			
		Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			
			Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОбщаяКомандаВнестиИзмененияВСправочник.Видимость = Ложь;
			
			Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаЗаписать") = Неопределено Тогда
				
				Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписать.Видимость = Ложь;
				
			КонецЕсли;
			
			Если Не Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ЗаписатьПрограммно") = Неопределено Тогда
				
				Форма.КоманднаяПанель.ПодчиненныеЭлементы.ЗаписатьПрограммно.Видимость = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Форма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаОбщаяКомандаАкцептоватьИзмененияВСправочнике.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоПолеРеквизита(МетаданныеСправочника, ПутьКДанным) Экспорт
	
	Если Не Лев(ПутьКДанным, 7) = "Объект." Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ИмяРеквизита = Сред(ПутьКДанным, 8, СтрДлина(ПутьКДанным));
	
	ЭтоРеквизит = Не (МетаданныеСправочника.Реквизиты.Найти(ИмяРеквизита) = Неопределено);
	ЭтоСтандартныйРеквизит = (ИмяРеквизита = "Наименование" Или ИмяРеквизита = "Код" Или ИмяРеквизита = "ПометкаУдаления" Или ИмяРеквизита = "Ссылка"
		Или ИмяРеквизита = "Владелец" Или ИмяРеквизита = "Родитель");
	
	Возврат ЭтоРеквизит Или ЭтоСтандартныйРеквизит;
	
КонецФункции

#КонецОбласти

#Область БизнесПроцессКорректировкаСправочников

Процедура КорректировкаСправочников() Экспорт
	
	ЗадачиНаКорректировку = ПолучитьЗадачи(БизнесПроцессы.КорректировкаСправочников.ТочкиМаршрута.ОбновлениеДанныхСправочника);
	
	Если ЗадачиНаКорректировку = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Пока ЗадачиНаКорректировку.Следующий() Цикл
		
		БизнесПроцесс = ЗадачиНаКорректировку.БизнесПроцесс;
		
		Результат = ОбновитьДанныеСправочника(БизнесПроцесс.Предмет, БизнесПроцесс.РеквизитыСправочника);
		
		Если Результат Тогда
			
			ЗавершитьТекущуюЗадачу(БизнесПроцесс, БизнесПроцессы.КорректировкаСправочников.ТочкиМаршрута.ОбновлениеДанныхСправочника);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбновитьДанныеСправочника(Ссылка, РеквизитыСправочника)
	
	СправочникОбъект = ?(ЗначениеЗаполнено(Ссылка), Ссылка.ПолучитьОбъект(), Справочники[Ссылка.Метаданные().Имя].СоздатьЭлемент());
	
	Для каждого РеквизитСправочника Из РеквизитыСправочника Цикл
		
		СправочникОбъект[РеквизитСправочника.ИмяРеквизита] = РеквизитСправочника.НовоеЗначение;
		
	КонецЦикла;
	
	Попытка
		
		СправочникОбъект.Записать();
		Возврат Истина;
		
	Исключение
		
		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ИнформацияОбОшибке().Описание, Перечисления.ПриоритетыОшибок.Средний);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область БизнесПроцессРедактированиеЭлектроннойСтруктурыКорабля

Функция КорабльНаходитсяВПроцессеРедактирования(Корабль, ВключатьТочкуПроверки = Ложь) Экспорт
	
	МассивТочекМаршрута = Новый Массив;
	МассивТочекМаршрута.Добавить(БизнесПроцессы.РедактированиеЭлектроннойСтруктурыКорабля.ТочкиМаршрута.РедактированиеСтруктурыКорабля);
	МассивТочекМаршрута.Добавить(БизнесПроцессы.РедактированиеЭлектроннойСтруктурыКорабля.ТочкиМаршрута.ИсправлениеЗамечанийПоСтруктуреКорабля);
	
	Если ВключатьТочкуПроверки Тогда
		
		МассивТочекМаршрута.Добавить(БизнесПроцессы.РедактированиеЭлектроннойСтруктурыКорабля.ТочкиМаршрута.ПринятиеРешенияОбИзменении);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка КАК Ссылка
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	НЕ ЗадачаИсполнителя.Выполнена
	|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)
	|	И ЗадачаИсполнителя.БизнесПроцесс В
	|			(ВЫБРАТЬ
	|				РедактированиеЭлектроннойСтруктурыКорабля.Ссылка КАК БизнесПроцесс
	|			ИЗ
	|				БизнесПроцесс.РедактированиеЭлектроннойСтруктурыКорабля КАК РедактированиеЭлектроннойСтруктурыКорабля
	|			ГДЕ
	|				НЕ РедактированиеЭлектроннойСтруктурыКорабля.Завершен
	|				И НЕ РедактированиеЭлектроннойСтруктурыКорабля.ПометкаУдаления
	|				И РедактированиеЭлектроннойСтруктурыКорабля.Стартован
	|				И РедактированиеЭлектроннойСтруктурыКорабля.Предмет = &Корабль)
	|	И (НЕ ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаИсправлениеЗамечаний
	|			ИЛИ ЗадачаИсполнителя.Исполнитель = &Исполнитель)
	|	И (НЕ ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаИсправлениеЗамечаний
	|			ИЛИ ЗадачаИсполнителя.Исполнитель = &Исполнитель)";
	Запрос.УстановитьПараметр("ТочкиМаршрута", МассивТочекМаршрута);
	Запрос.УстановитьПараметр("Корабль", Корабль);
	Запрос.УстановитьПараметр("ТочкаИсправлениеЗамечаний", МассивТочекМаршрута[1]);
	Запрос.УстановитьПараметр("Исполнитель", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область ОбменДаннымиСПоставщиками

#Область БизнесПроцессЗапросНаАктуализациюКаталогаПоставщика

Процедура АктуализацияДанныхКаталогаПредметовСнабжения() Экспорт
	
	ТочкиМаршрута = Новый Массив;
	ТочкиМаршрута.Добавить(БизнесПроцессы.ЗапросНаАктуализациюКаталогаПоставщика.ТочкиМаршрута.ОбновлениеДанныхВКаталогеПС);
	ТочкиМаршрута.Добавить(БизнесПроцессы.ЗапросНаАктуализациюКаталогаПоставщика.ТочкиМаршрута.ВнесениеСогласованныхИзменений);
	
	ЗадачиАктуализация = ПолучитьЗадачи(ТочкиМаршрута);
	
	Если ЗадачиАктуализация = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Пока ЗадачиАктуализация.Следующий() Цикл
		
		БизнесПроцесс = ЗадачиАктуализация.БизнесПроцесс;
		
		Результат = ОбновитьДанныеКаталогаПредметовСнабжения(БизнесПроцесс);
		
		Если Результат Тогда
			
			ЗавершитьТекущуюЗадачу(БизнесПроцесс, ТочкиМаршрута);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбновитьДанныеКаталогаПредметовСнабжения(БизнесПроцесс)
	
	Поставщик = БизнесПроцесс.Предмет;
	
	ДанныеФайлаИмпорта = ПолучитьДанныеФайлаИмпорта(БизнесПроцесс);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	//заполнение данных каталога предметов снабжения
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.Наименование КАК Наименование,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.Обозначение КАК Обозначение,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.СрокИзготовления КАК СрокИзготовления,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.Цена КАК Цена,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.ДатаЦены КАК ДатаЦены,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.Идентификатор КАК Идентификатор,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.Согласовано КАК Согласовано,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.ИмяФайлаКартинки КАК ИмяФайлаКартинки
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	БизнесПроцесс.ЗапросНаАктуализациюКаталогаПоставщика.ПредметыСнабжения КАК ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения
	|ГДЕ
	|	ЗапросНаАктуализациюКаталогаПоставщикаПредметыСнабжения.Ссылка = &БизнесПроцесс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	Согласовано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики.ПредметСнабжения КАК ПредметСнабжения,
	|	ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики.Характеристика КАК Характеристика,
	|	ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики.Значение КАК Значение,
	|	ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики.Основная КАК Основная,
	|	ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики.Идентификатор КАК Идентификатор,
	|	ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики.Наименование КАК НаименованиеХарактеристики
	|ПОМЕСТИТЬ втХарактеристики
	|ИЗ
	|	БизнесПроцесс.ЗапросНаАктуализациюКаталогаПоставщика.Характеристики КАК ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики
	|ГДЕ
	|	ЗапросНаАктуализациюКаталогаПоставщикаХарактеристики.Ссылка = &БизнесПроцесс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапросНаАктуализациюКаталогаПоставщикаАналоги.ПредметСнабжения КАК ПредметСнабжения,
	|	ЗапросНаАктуализациюКаталогаПоставщикаАналоги.Аналог КАК Аналог,
	|	ЗапросНаАктуализациюКаталогаПоставщикаАналоги.Идентификатор КАК Идентификатор,
	|	ЗапросНаАктуализациюКаталогаПоставщикаАналоги.ИдентификаторАналога КАК ИдентификаторАналога
	|ПОМЕСТИТЬ втАналоги
	|ИЗ
	|	БизнесПроцесс.ЗапросНаАктуализациюКаталогаПоставщика.Аналоги КАК ЗапросНаАктуализациюКаталогаПоставщикаАналоги
	|ГДЕ
	|	ЗапросНаАктуализациюКаталогаПоставщикаАналоги.Ссылка = &БизнесПроцесс";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ВыполнитьОбновлениеДанныхКаталогаПредметовСнабжения(Запрос, ДанныеФайлаИмпорта, Поставщик, БизнесПроцесс);
	
КонецФункции

Функция ВыполнитьОбновлениеДанныхКаталогаПредметовСнабжения(Запрос, ДанныеФайлаИмпорта, Поставщик, БизнесПроцесс = Неопределено) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ВЫБОР
	|		КОГДА НЕ втПредметыСнабжения.Наименование = """"
	|				И НЕ втПредметыСнабжения.Наименование = ЕСТЬNULL(КаталогПредметовСнабжения.Наименование, """")
	|			ТОГДА втПредметыСнабжения.Наименование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ втПредметыСнабжения.Обозначение = """"
	|				И НЕ втПредметыСнабжения.Обозначение = ЕСТЬNULL(КаталогПредметовСнабжения.Обозначение, """")
	|			ТОГДА втПредметыСнабжения.Обозначение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Обозначение,
	|	ВЫБОР
	|		КОГДА НЕ втПредметыСнабжения.ДокументНаПоставку = """"
	|				И НЕ втПредметыСнабжения.ДокументНаПоставку = ЕСТЬNULL(КаталогПредметовСнабжения.ДокументНаПоставку, """")
	|			ТОГДА втПредметыСнабжения.ДокументНаПоставку
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументНаПоставку,
	|	втПредметыСнабжения.СрокИзготовления КАК СрокИзготовления,
	|	ВЫБОР
	|		КОГДА НЕ втПредметыСнабжения.ПравилаУпаковкиТранспортировкиХранения = """"
	|				И НЕ втПредметыСнабжения.ПравилаУпаковкиТранспортировкиХранения = (ВЫРАЗИТЬ(ЕСТЬNULL(КаталогПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения, """") КАК СТРОКА(200)))
	|			ТОГДА втПредметыСнабжения.ПравилаУпаковкиТранспортировкиХранения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ПравилаУпаковкиТранспортировкиХранения,
	|	втПредметыСнабжения.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|	втПредметыСнабжения.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втОсновныеРеквизитыПредметовСнабжения
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО втПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|	втПредметыСнабжения.Согласовано
	|	И НЕ втПредметыСнабжения.Наименование = """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втХарактеристики.ПредметСнабжения КАК ПредметСнабжения,
	|	втХарактеристики.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ втХарактеристики.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ОКЕИ.ПустаяСсылка)
	|				И НЕ втХарактеристики.ЕдиницаИзмерения = ЕСТЬNULL(КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ОКЕИ.ПустаяСсылка))
	|			ТОГДА втХарактеристики.ЕдиницаИзмерения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА НЕ втХарактеристики.Значение = 0
	|				И НЕ втХарактеристики.Значение = """"
	|				И НЕ втХарактеристики.Значение = ЕСТЬNULL(КаталогПредметовСнабженияХарактеристики.Значение, НЕОПРЕДЕЛЕНО)
	|			ТОГДА втХарактеристики.Значение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Значение,
	|	ВЫБОР
	|		КОГДА втХарактеристики.Основная
	|			ТОГДА втХарактеристики.Основная
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Основная,
	|	втХарактеристики.Идентификатор КАК Идентификатор,
	|	втХарактеристики.НаименованиеХарактеристики КАК НаименованиеХарактеристики
	|ПОМЕСТИТЬ втХарактеристикиОтбор
	|ИЗ
	|	втХарактеристики КАК втХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|		ПО втХарактеристики.ПредметСнабжения = КаталогПредметовСнабженияХарактеристики.Ссылка
	|			И втХарактеристики.ПредметСнабжения = КаталогПредметовСнабженияХарактеристики.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОсновныеРеквизитыПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втОсновныеРеквизитыПредметовСнабжения.Наименование КАК Наименование,
	|	втОсновныеРеквизитыПредметовСнабжения.Обозначение КАК Обозначение,
	|	втОсновныеРеквизитыПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втОсновныеРеквизитыПредметовСнабжения.СрокИзготовления КАК СрокИзготовления,
	|	втОсновныеРеквизитыПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	втОсновныеРеквизитыПредметовСнабжения.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|	ЕСТЬNULL(втХарактеристики.Характеристика, НЕОПРЕДЕЛЕНО) КАК Характеристика,
	|	втХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втХарактеристики.Значение КАК Значение,
	|	втХарактеристики.Основная КАК Основная,
	|	втОсновныеРеквизитыПредметовСнабжения.Идентификатор КАК Идентификатор,
	|	втХарактеристики.НаименованиеХарактеристики КАК НаименованиеХарактеристики
	|ИЗ
	|	втОсновныеРеквизитыПредметовСнабжения КАК втОсновныеРеквизитыПредметовСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втХарактеристикиОтбор КАК втХарактеристики
	|		ПО втОсновныеРеквизитыПредметовСнабжения.Идентификатор = втХарактеристики.Идентификатор
	|ИТОГИ
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(Обозначение),
	|	МАКСИМУМ(ДокументНаПоставку),
	|	МАКСИМУМ(СрокИзготовления),
	|	МАКСИМУМ(ПравилаУпаковкиТранспортировкиХранения),
	|	МАКСИМУМ(Характеристика),
	|	МАКСИМУМ(ИмяФайлаКартинки)
	|ПО
	|	ПредметСнабжения,
	|	Идентификатор";
		
	Если БизнесПроцесс = Неопределено Тогда
		
		ПредметыСнабженияБизнесПроцесса = Неопределено;
		
	Иначе
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		ПредметыСнабженияБизнесПроцесса = БизнесПроцессОбъект.ПредметыСнабжения;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	СоответствиеПредметовСнабжения = Новый Соответствие;
	
	ВыборкаНайденныеПредметыСнабжения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию(); //оптимизировать
	
	Пока ВыборкаНайденныеПредметыСнабжения.Следующий() Цикл
		
		ВыборкаПредметыСнабжения = ВыборкаНайденныеПредметыСнабжения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПредметыСнабжения.Следующий() Цикл
			
			ПредметСнабженияОбъект = ПолучитьПредметСнабжения(ВыборкаПредметыСнабжения, Поставщик);
			
			//реквизиты шапки
			УстановитьЗначениеРеквизита(ПредметСнабженияОбъект, ВыборкаПредметыСнабжения, "Наименование");
			УстановитьЗначениеРеквизита(ПредметСнабженияОбъект, ВыборкаПредметыСнабжения, "Обозначение");
			УстановитьЗначениеРеквизита(ПредметСнабженияОбъект, ВыборкаПредметыСнабжения, "ДокументНаПоставку");
			УстановитьЗначениеРеквизита(ПредметСнабженияОбъект, ВыборкаПредметыСнабжения, "ПравилаУпаковкиТранспортировкиХранения");
			
			//срок изготовления
			УстановитьСрокИзготовления(ПредметСнабженияОбъект, Поставщик, ВыборкаПредметыСнабжения.СрокИзготовления);
			
			// + 04.07.2018 10:19:37 Базунов Д.А. Задача: 
			// файлы
			
			Если НЕ ВыборкаПредметыСнабжения.ИмяФайлаКартинки = "" Тогда
				НайдСтрока = БизнесПроцессОбъект.ПредметыСнабжения.Найти(ВыборкаПредметыСнабжения.Идентификатор);
				Если НЕ НайдСтрока = Неопределено Тогда
					ДанныеФайла = НайдСтрока.ХранилищеКартинки.Получить();
					Если НЕ ДанныеФайла = Неопределено Тогда
						АдресВременный = ПоместитьВоВременноеХранилище(ДанныеФайла);
						ДобавитьФайлВПрисоединенныеФайлыСервер(ВыборкаПредметыСнабжения.ИмяФайлаКартинки , АдресВременный, ВыборкаПредметыСнабжения.ПредметСнабжения);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			// - 04.07.2018 10:19:37 Базунов Д.А. Задача:
			
			//характеристики
			Если Не ВыборкаПредметыСнабжения.Характеристика = Неопределено Тогда
				
				тчХарактеристики = ПредметСнабженияОбъект.Характеристики;
				
				ВыборкаХарактеристики = ВыборкаПредметыСнабжения.Выбрать();
				
				Пока ВыборкаХарактеристики.Следующий() Цикл
					
					Характеристика = ПолучитьХарактеристику(ВыборкаХарактеристики, ДанныеФайлаИмпорта);
					
					Если Не ЗначениеЗаполнено(Характеристика) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
						
						СтрокаХарактеристика = тчХарактеристики.Найти(Характеристика, "Характеристика");
						
						Если СтрокаХарактеристика = Неопределено Тогда
							
							СтрокаХарактеристика = тчХарактеристики.Добавить();
							СтрокаХарактеристика.Характеристика = ВыборкаХарактеристики.Характеристика;
							
						КонецЕсли;
						
					Иначе
						
						СтрокаХарактеристика = тчХарактеристики.Добавить();
						СтрокаХарактеристика.Характеристика = Характеристика;
						
					КонецЕсли;
					
					УстановитьЗначениеРеквизита(СтрокаХарактеристика, ВыборкаХарактеристики, "ЕдиницаИзмерения");
					УстановитьЗначениеРеквизита(СтрокаХарактеристика, ВыборкаХарактеристики, "Значение");
					УстановитьЗначениеРеквизита(СтрокаХарактеристика, ВыборкаХарактеристики, "Основная");
					
				КонецЦикла;
				
			КонецЕсли;
			
			//запись элемента
			
			ЭтоНовый = ПредметСнабженияОбъект.ЭтоНовый();
			
			Если ЭтоНовый Или ПредметСнабженияОбъект.Модифицированность() Тогда
				
				Попытка
					
					ПредметСнабженияОбъект.Записать();
					СоответствиеПредметовСнабжения.Вставить(ВыборкаПредметыСнабжения.Идентификатор, ПредметСнабженияОбъект.Ссылка);
					
				Исключение
					
					ОтменитьТранзакцию();
					ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ИнформацияОбОшибке().Описание, Перечисления.ПриоритетыОшибок.Средний);
					Возврат Ложь;
					
				КонецПопытки;
				
				Если ЭтоНовый Тогда
					
					ЗаписатьВЛог(ДанныеФайлаИмпорта, ПредметСнабженияОбъект.Ссылка, "Создан предмет снабжения");
					
				КонецЕсли;
				
			Иначе
				
				СоответствиеПредметовСнабжения.Вставить(ВыборкаПредметыСнабжения.Идентификатор, ВыборкаПредметыСнабжения.ПредметСнабжения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если БизнесПроцесс = Неопределено Тогда
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		Для каждого ЭлементСоответствия Из СоответствиеПредметовСнабжения Цикл
			
			СтрокаПредметСнабженияБизнесПроцесса = ПредметыСнабженияБизнесПроцесса.Найти(ЭлементСоответствия.Ключ, "Идентификатор");
			
			Если СтрокаПредметСнабженияБизнесПроцесса = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаПредметСнабженияБизнесПроцесса.ПредметСнабжения = ЭлементСоответствия.Значение;
			
		КонецЦикла;
		
		Попытка
			
			БизнесПроцессОбъект.Записать();
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ИнформацияОбОшибке().Описание, Перечисления.ПриоритетыОшибок.Средний);
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	//создание контракта
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Цена КАК Цена,
	|	втПредметыСнабжения.ДатаЦены КАК ДатаЦены,
	|	втПредметыСнабжения.Идентификатор КАК Идентификатор
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|ГДЕ
	|	НЕ (втПредметыСнабжения.ДатаЦены, втПредметыСнабжения.ПредметСнабжения, втПредметыСнабжения.Цена) В
	|				(ВЫБРАТЬ
	|					ЦеныПредметовСнабжения.Период КАК ДатаЦены,
	|					ЦеныПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|					ЦеныПредметовСнабжения.Цена КАК Цена
	|				ИЗ
	|					РегистрСведений.ЦеныПредметовСнабжения КАК ЦеныПредметовСнабжения
	|				ГДЕ
	|					ЦеныПредметовСнабжения.ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внутренняя)
	|					И ЦеныПредметовСнабжения.Контрагент = &Контрагент)
	|	И втПредметыСнабжения.Цена > 0
	|	И втПредметыСнабжения.Согласовано
	|ИТОГИ ПО
	|	ДатаЦены";
	Запрос.УстановитьПараметр("Контрагент", Поставщик);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	КонтрактыМенеджер = Документы.Контракт;
	
	Вид = Перечисления.ВидыКонтрактов.КонтрактСПоставщиком;
	Тип = Перечисления.ТипыКонтрактов.КоммерческоеПредложение;
	Валюта = Константы.ОсновнаяВалюта.Получить();
	
	ВыборкаШапка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОтветственноеЛицоПоКонтрактам = Константы.ОтветственноеЛицоПоКонтрактам.Получить(); 
	
	Пока ВыборкаШапка.Следующий() Цикл
		
		Контракт = КонтрактыМенеджер.СоздатьДокумент();
		
		Контракт.УстановитьНовыйНомер("АКП");
		Контракт.Дата = ?(ЗначениеЗаполнено(ВыборкаШапка.ДатаЦены), ВыборкаШапка.ДатаЦены, ТекущаяДата());
		Контракт.Вид = Вид;
		Контракт.Тип = Тип;
		Контракт.Контрагент = Поставщик;
		Контракт.Валюта = Валюта;
		Контракт.Статус = Перечисления.СтатусыКонтрактов.Активен;
		Контракт.ОтветственноеЛицо = ОтветственноеЛицоПоКонтрактам;
		
		ВыборкаТабличнаяЧасть = ВыборкаШапка.Выбрать();
		
		Пока ВыборкаТабличнаяЧасть.Следующий() Цикл
			
			ПредметСнабжения = ПолучитьСсылкуНаПредметСнабжения("ПредметСнабжения", "Идентификатор", ВыборкаТабличнаяЧасть, СоответствиеПредметовСнабжения, ПредметыСнабженияБизнесПроцесса);
			
			Если ПредметСнабжения = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаТЧ = Контракт.ПредметыСнабжения.Добавить();
			СтрокаТЧ.ПредметСнабжения = ПредметСнабжения;
			СтрокаТЧ.Цена = ВыборкаТабличнаяЧасть.Цена;
			СтрокаТЧ.Количество = 1;
			СтрокаТЧ.ЕдиницаИзмерения = ПредметСнабжения.ЕдиницаИзмерения;
			
		КонецЦикла;
		
		Если Контракт.ПредметыСнабжения.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			Контракт.Записать(РежимЗаписиДокумента.Проведение); 
			
		Исключение
			
			ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Средний);
			Возврат Ложь;
			
		КонецПопытки;
		
		ЗаписатьВЛог(ДанныеФайлаИмпорта, Контракт.Ссылка, "Создан контракт");
		
	КонецЦикла;
	
	//создание аналогов
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втАналоги.ПредметСнабжения КАК ПредметСнабжения,
	|	втАналоги.Аналог КАК Аналог,
	|	втАналоги.Идентификатор КАК Идентификатор,
	|	втАналоги.ИдентификаторАналога КАК ИдентификаторАналога
	|ИЗ
	|	втАналоги КАК втАналоги
	|ГДЕ
	|	втАналоги.ПредметСнабжения В
	|			(ВЫБРАТЬ
	|				втПредметыСнабжения.ПредметСнабжения
	|			ИЗ
	|				втПредметыСнабжения КАК втПредметыСнабжения
	|			ГДЕ
	|				втПредметыСнабжения.Согласовано)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредметСнабжения = ПолучитьСсылкуНаПредметСнабжения("ПредметСнабжения", "Идентификатор", Выборка, СоответствиеПредметовСнабжения, ПредметыСнабженияБизнесПроцесса);
		
		Если ПредметСнабжения = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Аналог = ПолучитьСсылкуНаПредметСнабжения("Аналог", "ИдентификаторАналога", Выборка, СоответствиеПредметовСнабжения, ПредметыСнабженияБизнесПроцесса);
		
		Если Аналог = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗаписатьАналог(ПредметСнабжения, Аналог, ДанныеФайлаИмпорта) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Не ЗаписатьАналог(Аналог, ПредметСнабжения, ДанныеФайлаИмпорта) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСсылкуНаПредметСнабжения(ИмяКолонки, ИмяКолонкиИдентификатора, Выборка, СоответствиеПредметовСнабжения, ПредметыСнабженияБизнесПроцесса)
	
	ПредметСнабжения = Выборка[ИмяКолонки];
	
	Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда
		
		ПредметСнабжения = СоответствиеПредметовСнабжения.Получить(Выборка[ИмяКолонкиИдентификатора]);
		
		Если ПредметСнабжения = Неопределено Тогда
			
			Если Не ПредметыСнабженияБизнесПроцесса = Неопределено Тогда
				
				СтрокаПредметСнабжения = ПредметыСнабженияБизнесПроцесса.Найти(Выборка[ИмяКолонкиИдентификатора], "Идентификатор");
				
				Если СтрокаПредметСнабжения = Неопределено Тогда
					
					Возврат Неопределено;
					
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаПредметСнабжения.ПредметСнабжения) Тогда
					
					Возврат Неопределено;
					
				Иначе
					
					Возврат СтрокаПредметСнабжения.ПредметСнабжения;
					
				КонецЕсли;
				
			Иначе
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			Возврат ПредметСнабжения;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ПредметСнабжения;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьАналог(ПредметСнабжения, Аналог, ДанныеФайла)
	
	ПредметСнабженияОбъект = ПредметСнабжения.ПолучитьОбъект();
	
	Если Не ПредметСнабженияОбъект.Аналоги.Найти(Аналог, "Аналог") = Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	СтрокаАналог = ПредметСнабженияОбъект.Аналоги.Добавить();
	СтрокаАналог.Аналог = Аналог;
	СтрокаАналог.ТипЗамены = Константы.ТипЗаменыПоУмолчанию.Получить();
	
	Попытка
		
		ПредметСнабженияОбъект.Записать();
		ЗаписатьВЛог(ДанныеФайла, ПредметСнабженияОбъект.Ссылка, "Добавлен аналог " + Строка(Аналог));
		Возврат Истина;
		
	Исключение
		
		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Средний);
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Процедура ЗаписатьВЛог(ДанныеФайла, Ссылка, Описание)
	
	ЛогЗагрузкиМенеджер = РегистрыСведений.ЛогЗагрузки.СоздатьМенеджерЗаписи();
	ЛогЗагрузкиМенеджер.Период = ТекущаяДата();
	ЛогЗагрузкиМенеджер.ГУИД = Строка(Новый УникальныйИдентификатор());
	ЛогЗагрузкиМенеджер.Файл = ?(ДанныеФайла = Неопределено, "", ДанныеФайла.ИмяФайла);
	ЛогЗагрузкиМенеджер.Объект1С = Ссылка;
	ЛогЗагрузкиМенеджер.Описание = Описание;
	ЛогЗагрузкиМенеджер.ПутьКФайлу = ?(ДанныеФайла = Неопределено, "", ДанныеФайла.ПутьКФайлу);
	ЛогЗагрузкиМенеджер.Записать();
	
КонецПроцедуры

Функция ПолучитьДанныеФайлаИмпорта(БизнесПроцесс)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапросНаАктуализациюКаталогаПоставщикаПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПрисоединенныеФайлы.Наименование КАК Наименование,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ЗапросНаАктуализациюКаталогаПоставщикаПрисоединенныеФайлы.ПутьКФайлу КАК ПутьКФайлу
	|ПОМЕСТИТЬ втПрисоединенныеФайлы
	|ИЗ
	|	Справочник.ЗапросНаАктуализациюКаталогаПоставщикаПрисоединенныеФайлы КАК ЗапросНаАктуализациюКаталогаПоставщикаПрисоединенныеФайлы
	|ГДЕ
	|	ЗапросНаАктуализациюКаталогаПоставщикаПрисоединенныеФайлы.ВладелецФайла = &БизнесПроцесс
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаСоздания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втПрисоединенныеФайлы.ДатаСоздания) КАК ДатаСоздания
	|ПОМЕСТИТЬ втМаксимальнаяДата
	|ИЗ
	|	втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаСоздания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПрисоединенныеФайлы.Наименование + ""."" + втПрисоединенныеФайлы.Расширение КАК ИмяФайла,
	|	втПрисоединенныеФайлы.ПутьКФайлу КАК ПутьКФайлу
	|ИЗ
	|	втПрисоединенныеФайлы КАК втПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМаксимальнаяДата КАК втМаксимальнаяДата
	|		ПО втПрисоединенныеФайлы.ДатаСоздания = втМаксимальнаяДата.ДатаСоздания";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0];
	
КонецФункции

Функция ПолучитьПредметСнабжения(Выборка, Поставщик)
	
	Если ЗначениеЗаполнено(Выборка.ПредметСнабжения) Тогда
		
		Возврат Выборка.ПредметСнабжения.ПолучитьОбъект();
		
	Иначе
		
		ПредметСнабженияОбъект = Справочники.КаталогПредметовСнабжения.СоздатьЭлемент();
		ПредметСнабженияОбъект.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияШтука.Получить();
		
		СтрокаПоставщик = ПредметСнабженияОбъект.ИзготовителиИПоставщики.Добавить();
		СтрокаПоставщик.Контрагент = Поставщик;
		СтрокаПоставщик.Поставщик = Истина;
		
		Возврат ПредметСнабженияОбъект;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьХарактеристику(Выборка, ДанныеФайла)
	
	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		
		Возврат Выборка.Характеристика;
		
	КонецЕсли;
	
	ХарактеристикаСсылка = Справочники.ХарактеристикиПредметовСнабжения.НайтиПоНаименованию(Выборка.НаименованиеХарактеристики, Истина);
	
	Если ЗначениеЗаполнено(ХарактеристикаСсылка) Тогда
		
		Возврат ХарактеристикаСсылка;
		
	КонецЕсли;
	
	ХарактеристикаОбъект = Справочники.ХарактеристикиПредметовСнабжения.СоздатьЭлемент();
	ХарактеристикаОбъект.Наименование = Выборка.НаименованиеХарактеристики;
	
	Попытка
		
		ХарактеристикаОбъект.Записать();
		
	Исключение
		
		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ОписаниеОшибки(), Перечисления.ПриоритетыОшибок.Средний);
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЗаписатьВЛог(ДанныеФайла, ХарактеристикаОбъект.Ссылка, "Создана характеристика");
	
	Возврат ХарактеристикаОбъект.Ссылка;
	
КонецФункции

Процедура УстановитьЗначениеРеквизита(Объект, Выборка, ИмяРеквизита)
	
	Если Не Выборка[ИмяРеквизита] = Неопределено Тогда
		
		Объект[ИмяРеквизита] = Выборка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСрокИзготовления(Объект, Контрагент, СрокИзготовления)
	
	Если СрокИзготовления = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаПоставщик = Объект.ИзготовителиИПоставщики.Найти(Контрагент, "Контрагент");
	
	Если СтрокаПоставщик = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не СрокИзготовления = СтрокаПоставщик.СрокиИзготовления Тогда
		
		СтрокаПоставщик.СрокиИзготовления = СрокИзготовления;
		СтрокаПоставщик.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияДень.Получить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьСравнениеСДаннымиБД(ПредметыСнабжения, Характеристики, Поставщик) Экспорт
	
	//предметы снабжения
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ПредметыСнабжения.Входимость КАК Входимость,
	|	ПредметыСнабжения.Наименование КАК Наименование,
	|	ПредметыСнабжения.Обозначение КАК Обозначение,
	|	ПредметыСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ПредметыСнабжения.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|	ПредметыСнабжения.СрокИзготовления КАК СрокИзготовления,
	|	ПредметыСнабжения.Цена КАК Цена,
	|	ПредметыСнабжения.ДатаЦены КАК ДатаЦены,
	|	ПредметыСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	ПредметыСнабжения.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|	ПредметыСнабжения.ХранилищеКартинкиВременное КАК ХранилищеКартинкиВременное,
	|	ПредметыСнабжения.ВходимостьОбозначение КАК ВходимостьОбозначение,
	|	ПредметыСнабжения.Идентификатор КАК Идентификатор,
	|	ПредметыСнабжения.Согласовано КАК Согласовано,
	|	ПредметыСнабжения.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втТаблицаСравнения
	|ИЗ
	|	&ПредметыСнабжения КАК ПредметыСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка КАК ПредметСнабжения,
	|	ВЫБОР
	|		КОГДА КаталогПредметовСнабженияИзготовителиИПоставщики.ЕдиницаИзмерения = &День
	|			ТОГДА КаталогПредметовСнабженияИзготовителиИПоставщики.СрокиИзготовления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СрокИзготовления,
	|	ЛОЖЬ КАК ВозможностьИзготовления
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|ГДЕ
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент = &Поставщик
	|	И КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка В
	|			(ВЫБРАТЬ
	|				втТаблицаСравнения.ПредметСнабжения КАК ПредметСнабжения
	|			ИЗ
	|				втТаблицаСравнения КАК втТаблицаСравнения
	|			ГДЕ
	|				НЕ втТаблицаСравнения.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))
	|	И НЕ КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	КаталогПредметовСнабжения.Наименование КАК Наименование,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втПредметыСнабжения.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|	втПредметыСнабжения.СрокИзготовления КАК СрокИзготовления,
	|	ВЫРАЗИТЬ(КаталогПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК СТРОКА(200)) КАК ПравилаУпаковкиТранспортировкиХранения
	|ПОМЕСТИТЬ втПредметыСнабженияРеквизиты
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО втПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПредметыСнабженияРеквизиты.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабженияРеквизиты.Наименование КАК Наименование,
	|	втПредметыСнабженияРеквизиты.Обозначение КАК Обозначение,
	|	втПредметыСнабженияРеквизиты.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втПредметыСнабженияРеквизиты.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|	втПредметыСнабженияРеквизиты.СрокИзготовления КАК СрокИзготовления,
	|	втПредметыСнабженияРеквизиты.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	ЕСТЬNULL(ЦеныПредметовСнабженияСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЦены,
	|	ЕСТЬNULL(ЦеныПредметовСнабженияСрезПоследних.Цена, 0) КАК Цена
	|ПОМЕСТИТЬ втПредметыСнабженияЦены
	|ИЗ
	|	втПредметыСнабженияРеквизиты КАК втПредметыСнабженияРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних КАК ЦеныПредметовСнабженияСрезПоследних
	|		ПО втПредметыСнабженияРеквизиты.ПредметСнабжения = ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения
	|			И (ЦеныПредметовСнабженияСрезПоследних.ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внутренняя))
	|			И (ЦеныПредметовСнабженияСрезПоследних.Контрагент = &Поставщик)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСравнения.ПредметСнабжения КАК ПредметСнабжения,
	|	втТаблицаСравнения.Входимость КАК Входимость,
	|	втТаблицаСравнения.Наименование КАК Наименование,
	|	втТаблицаСравнения.Обозначение КАК Обозначение,
	|	втТаблицаСравнения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втТаблицаСравнения.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|	втТаблицаСравнения.СрокИзготовления КАК СрокИзготовления,
	|	втТаблицаСравнения.Цена КАК Цена,
	|	втТаблицаСравнения.ДатаЦены КАК ДатаЦены,
	|	втТаблицаСравнения.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	втТаблицаСравнения.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|	втТаблицаСравнения.ХранилищеКартинкиВременное КАК ХранилищеКартинкиВременное,
	|	втТаблицаСравнения.ВходимостьОбозначение КАК ВходимостьОбозначение,
	|	втТаблицаСравнения.Идентификатор КАК Идентификатор,
	|	втТаблицаСравнения.Согласовано КАК Согласовано,
	|	ЕСТЬNULL(втПредметыСнабженияЦены.Наименование, """") КАК НаименованиеБД,
	|	ЕСТЬNULL(втПредметыСнабженияЦены.Обозначение, """") КАК ОбозначениеБД,
	|	ЕСТЬNULL(втПредметыСнабженияЦены.ДокументНаПоставку, """") КАК ДокументНаПоставкуБД,
	|	ЕСТЬNULL(втПредметыСнабженияЦены.ВозможностьИзготовления, ЛОЖЬ) КАК ВозможностьИзготовленияБД,
	|	ЕСТЬNULL(втПредметыСнабженияЦены.СрокИзготовления, 0) КАК СрокИзготовленияБД,
	|	ЕСТЬNULL(втПредметыСнабженияЦены.ПравилаУпаковкиТранспортировкиХранения, """") КАК ПравилаУпаковкиТранспортировкиХраненияБД,
	|	ЕСТЬNULL(втПредметыСнабженияЦены.ДатаЦены, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЦеныБД,
	|	ЕСТЬNULL(втПредметыСнабженияЦены.Цена, 0) КАК ЦенаБД,
	|	втТаблицаСравнения.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втРезультатБезСравненияХарактеристики
	|ИЗ
	|	втТаблицаСравнения КАК втТаблицаСравнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредметыСнабженияЦены КАК втПредметыСнабженияЦены
	|		ПО втТаблицаСравнения.ПредметСнабжения = втПредметыСнабженияЦены.ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультатБезСравнения.ПредметСнабжения КАК ПредметСнабжения,
	|	втРезультатБезСравнения.Входимость КАК Входимость,
	|	втРезультатБезСравнения.Наименование КАК Наименование,
	|	втРезультатБезСравнения.Обозначение КАК Обозначение,
	|	втРезультатБезСравнения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втРезультатБезСравнения.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|	втРезультатБезСравнения.СрокИзготовления КАК СрокИзготовления,
	|	втРезультатБезСравнения.Цена КАК Цена,
	|	втРезультатБезСравнения.ДатаЦены КАК ДатаЦены,
	|	втРезультатБезСравнения.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	втРезультатБезСравнения.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|	втРезультатБезСравнения.ХранилищеКартинкиВременное КАК ХранилищеКартинкиВременное,
	|	втРезультатБезСравнения.ВходимостьОбозначение КАК ВходимостьОбозначение,
	|	втРезультатБезСравнения.Идентификатор КАК Идентификатор,
	|	втРезультатБезСравнения.Согласовано КАК Согласовано,
	|	втРезультатБезСравнения.НаименованиеБД КАК НаименованиеБД,
	|	втРезультатБезСравнения.ОбозначениеБД КАК ОбозначениеБД,
	|	втРезультатБезСравнения.ДокументНаПоставкуБД КАК ДокументНаПоставкуБД,
	|	втРезультатБезСравнения.ВозможностьИзготовленияБД КАК ВозможностьИзготовленияБД,
	|	втРезультатБезСравнения.СрокИзготовленияБД КАК СрокИзготовленияБД,
	|	втРезультатБезСравнения.ПравилаУпаковкиТранспортировкиХраненияБД КАК ПравилаУпаковкиТранспортировкиХраненияБД,
	|	втРезультатБезСравнения.ДатаЦеныБД КАК ДатаЦеныБД,
	|	втРезультатБезСравнения.ЦенаБД КАК ЦенаБД,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.Наименование = втРезультатБезСравнения.НаименованиеБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаименованиеИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.Обозначение = втРезультатБезСравнения.ОбозначениеБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОбозначениеИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.ДокументНаПоставку = втРезультатБезСравнения.ДокументНаПоставкуБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДокументНаПоставкуИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.ВозможностьИзготовления = втРезультатБезСравнения.ВозможностьИзготовленияБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВозможностьИзготовленияИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.СрокИзготовления = втРезультатБезСравнения.СрокИзготовленияБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СрокИзготовленияИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.ПравилаУпаковкиТранспортировкиХранения = втРезультатБезСравнения.ПравилаУпаковкиТранспортировкиХраненияБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПравилаУпаковкиТранспортировкиХраненияИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.ДатаЦены = втРезультатБезСравнения.ДатаЦеныБД
	|				ИЛИ втРезультатБезСравнения.ДатаЦены = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДатаЦеныИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.Цена = втРезультатБезСравнения.ЦенаБД
	|				ИЛИ втРезультатБезСравнения.Цена = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЦенаИзменено,
	|	"""" КАК Примечание,
	|	втРезультатБезСравнения.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втПредварительныйРезультат
	|ИЗ
	|	втРезультатБезСравненияХарактеристики КАК втРезультатБезСравнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредварительныйРезультат.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредварительныйРезультат.Входимость КАК Входимость,
	|	втПредварительныйРезультат.Наименование КАК Наименование,
	|	втПредварительныйРезультат.Обозначение КАК Обозначение,
	|	втПредварительныйРезультат.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втПредварительныйРезультат.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|	втПредварительныйРезультат.СрокИзготовления КАК СрокИзготовления,
	|	втПредварительныйРезультат.Цена КАК Цена,
	|	втПредварительныйРезультат.ДатаЦены КАК ДатаЦены,
	|	втПредварительныйРезультат.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	втПредварительныйРезультат.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|	втПредварительныйРезультат.ХранилищеКартинкиВременное КАК ХранилищеКартинкиВременное,
	|	втПредварительныйРезультат.ВходимостьОбозначение КАК ВходимостьОбозначение,
	|	втПредварительныйРезультат.Идентификатор КАК Идентификатор,
	|	втПредварительныйРезультат.Согласовано КАК Согласовано,
	|	втПредварительныйРезультат.НаименованиеБД КАК НаименованиеБД,
	|	втПредварительныйРезультат.ОбозначениеБД КАК ОбозначениеБД,
	|	втПредварительныйРезультат.ДокументНаПоставкуБД КАК ДокументНаПоставкуБД,
	|	втПредварительныйРезультат.ВозможностьИзготовленияБД КАК ВозможностьИзготовленияБД,
	|	втПредварительныйРезультат.СрокИзготовленияБД КАК СрокИзготовленияБД,
	|	втПредварительныйРезультат.ПравилаУпаковкиТранспортировкиХраненияБД КАК ПравилаУпаковкиТранспортировкиХраненияБД,
	|	втПредварительныйРезультат.ДатаЦеныБД КАК ДатаЦеныБД,
	|	втПредварительныйРезультат.ЦенаБД КАК ЦенаБД,
	|	втПредварительныйРезультат.НаименованиеИзменено КАК НаименованиеИзменено,
	|	втПредварительныйРезультат.ОбозначениеИзменено КАК ОбозначениеИзменено,
	|	втПредварительныйРезультат.ДокументНаПоставкуИзменено КАК ДокументНаПоставкуИзменено,
	|	втПредварительныйРезультат.ВозможностьИзготовленияИзменено КАК ВозможностьИзготовленияИзменено,
	|	втПредварительныйРезультат.СрокИзготовленияИзменено КАК СрокИзготовленияИзменено,
	|	втПредварительныйРезультат.ПравилаУпаковкиТранспортировкиХраненияИзменено КАК ПравилаУпаковкиТранспортировкиХраненияИзменено,
	|	втПредварительныйРезультат.ДатаЦеныИзменено КАК ДатаЦеныИзменено,
	|	втПредварительныйРезультат.ЦенаИзменено КАК ЦенаИзменено,
	|	втПредварительныйРезультат.Примечание КАК Примечание,
	|	втПредварительныйРезультат.НаименованиеИзменено
	|		ИЛИ втПредварительныйРезультат.ОбозначениеИзменено
	|		ИЛИ втПредварительныйРезультат.ДокументНаПоставкуИзменено
	|		ИЛИ втПредварительныйРезультат.ВозможностьИзготовленияИзменено
	|		ИЛИ втПредварительныйРезультат.СрокИзготовленияИзменено
	|		ИЛИ втПредварительныйРезультат.ПравилаУпаковкиТранспортировкиХраненияИзменено
	|		ИЛИ втПредварительныйРезультат.ДатаЦеныИзменено
	|		ИЛИ втПредварительныйРезультат.ЦенаИзменено КАК ЕстьИзменения,
	|	втПредварительныйРезультат.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	втПредварительныйРезультат КАК втПредварительныйРезультат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер";
	Запрос.УстановитьПараметр("ПредметыСнабжения", ПредметыСнабжения.Выгрузить());
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("День", Константы.ЕдиницаИзмеренияДень.Получить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ПредметыСнабжения.Загрузить(ТаблицаЗапроса);
	
	//характеристики
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Характеристики.ПредметСнабжения КАК ПредметСнабжения,
	|	Характеристики.Характеристика КАК Характеристика,
	|	Характеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Характеристики.Значение КАК Значение,
	|	Характеристики.Основная КАК Основная,
	|	Характеристики.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Характеристики.Идентификатор КАК Идентификатор,
	|	Характеристики.Наименование КАК Наименование,
	|	Характеристики.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втТаблицаСравненияХарактеристик
	|ИЗ
	|	&Характеристики КАК Характеристики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КаталогПредметовСнабженияХарактеристики.Ссылка КАК ПредметСнабжения,
	|	КаталогПредметовСнабженияХарактеристики.Характеристика КАК Характеристика,
	|	КаталогПредметовСнабженияХарактеристики.Значение КАК Значение,
	|	КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КаталогПредметовСнабженияХарактеристики.Основная КАК Основная
	|ПОМЕСТИТЬ втХарактеристики
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОКЕИ КАК ОКЕИ
	|		ПО КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения = ОКЕИ.Ссылка
	|ГДЕ
	|	КаталогПредметовСнабженияХарактеристики.Ссылка В
	|			(ВЫБРАТЬ
	|				втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|			ИЗ
	|				втПредметыСнабжения КАК втПредметыСнабжения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСравнения.ПредметСнабжения КАК ПредметСнабжения,
	|	втТаблицаСравнения.Характеристика КАК Характеристика,
	|	втТаблицаСравнения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втТаблицаСравнения.Значение КАК Значение,
	|	втТаблицаСравнения.Основная КАК Основная,
	|	втТаблицаСравнения.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	втТаблицаСравнения.Идентификатор КАК Идентификатор,
	|	втТаблицаСравнения.Наименование КАК Наименование,
	|	ЕСТЬNULL(втХарактеристики.Значение, НЕОПРЕДЕЛЕНО) КАК ЗначениеБД,
	|	ЕСТЬNULL(втХарактеристики.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ОКЕИ.ПустаяСсылка)) КАК ЕдиницаИзмеренияБД,
	|	ЕСТЬNULL(втХарактеристики.Основная, ЛОЖЬ) КАК ОсновнаяБД,
	|	втТаблицаСравнения.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втРезультатБезСравнения
	|ИЗ
	|	втТаблицаСравненияХарактеристик КАК втТаблицаСравнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втХарактеристики КАК втХарактеристики
	|		ПО втТаблицаСравнения.ПредметСнабжения = втХарактеристики.ПредметСнабжения
	|			И втТаблицаСравнения.Характеристика = втХарактеристики.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультатБезСравнения.ПредметСнабжения КАК ПредметСнабжения,
	|	втРезультатБезСравнения.Характеристика КАК Характеристика,
	|	втРезультатБезСравнения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втРезультатБезСравнения.Значение КАК Значение,
	|	втРезультатБезСравнения.Основная КАК Основная,
	|	втРезультатБезСравнения.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	втРезультатБезСравнения.Идентификатор КАК Идентификатор,
	|	втРезультатБезСравнения.Наименование КАК Наименование,
	|	втРезультатБезСравнения.ЗначениеБД КАК ЗначениеБД,
	|	втРезультатБезСравнения.ЕдиницаИзмеренияБД КАК ЕдиницаИзмеренияБД,
	|	втРезультатБезСравнения.ОсновнаяБД КАК ОсновнаяБД,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.ЕдиницаИзмерения = втРезультатБезСравнения.ЕдиницаИзмеренияБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕдиницаИзмеренияИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.Значение = втРезультатБезСравнения.ЗначениеБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗначениеИзменено,
	|	ВЫБОР
	|		КОГДА втРезультатБезСравнения.Основная = втРезультатБезСравнения.ОсновнаяБД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОсновнаяИзменено,
	|	втРезультатБезСравнения.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втПредварительныйРезультат1
	|ИЗ
	|	втРезультатБезСравнения КАК втРезультатБезСравнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредварительныйРезультат.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредварительныйРезультат.Характеристика КАК Характеристика,
	|	втПредварительныйРезультат.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втПредварительныйРезультат.Значение КАК Значение,
	|	втПредварительныйРезультат.Основная КАК Основная,
	|	втПредварительныйРезультат.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	втПредварительныйРезультат.Идентификатор КАК Идентификатор,
	|	втПредварительныйРезультат.Наименование КАК Наименование,
	|	втПредварительныйРезультат.ЗначениеБД КАК ЗначениеБД,
	|	втПредварительныйРезультат.ЕдиницаИзмеренияБД КАК ЕдиницаИзмеренияБД,
	|	втПредварительныйРезультат.ОсновнаяБД КАК ОсновнаяБД,
	|	втПредварительныйРезультат.ЕдиницаИзмеренияИзменено КАК ЕдиницаИзмеренияИзменено,
	|	втПредварительныйРезультат.ЗначениеИзменено КАК ЗначениеИзменено,
	|	втПредварительныйРезультат.ОсновнаяИзменено КАК ОсновнаяИзменено,
	|	втПредварительныйРезультат.ЕдиницаИзмеренияИзменено
	|		ИЛИ втПредварительныйРезультат.ЗначениеИзменено
	|		ИЛИ втПредварительныйРезультат.ОсновнаяИзменено КАК ЕстьИзменения,
	|	втПредварительныйРезультат.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	втПредварительныйРезультат1 КАК втПредварительныйРезультат
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер";
	Запрос.УстановитьПараметр("Характеристики", Характеристики.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Характеристики.Загрузить(ТаблицаЗапроса);
	
	Для каждого СтрокаПредметСнабжения Из ПредметыСнабжения Цикл
		
		Если Не СтрокаПредметСнабжения.ЕстьИзменения Тогда
			
			Отбор = Новый Структура("Идентификатор, ЕстьИзменения", СтрокаПредметСнабжения.Идентификатор, Истина);
			СтрокаПредметСнабжения.ЕстьИзменения = (Характеристики.НайтиСтроки(Отбор).Количество() > 0);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма, ТаблицыВОбъекте) Экспорт
	
	Префикс = ?(ТаблицыВОбъекте, "Объект.", "");
	
	//предметы снабжения
	ПутьКДаннымКлюча1 = Префикс + "ПредметыСнабжения.ПредметСнабжения";
	
	УстановитьУсловноеОформлениеСтроки(Форма, "ПредметыСнабжения", ПутьКДаннымКлюча1); 
	
	УстановитьУсловноеОформлениеЯчейки(Форма, "ПредметыСнабженияНаименование", Префикс + "ПредметыСнабжения.Наименование", ПутьКДаннымКлюча1);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ПредметыСнабженияОбозначение", Префикс + "ПредметыСнабжения.Обозначение", ПутьКДаннымКлюча1);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ПредметыСнабженияДокументНаПоставку", Префикс + "ПредметыСнабжения.ДокументНаПоставку", ПутьКДаннымКлюча1);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ПредметыСнабженияВозможностьИзготовления", Префикс + "ПредметыСнабжения.ВозможностьИзготовления", ПутьКДаннымКлюча1);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ПредметыСнабженияСрокИзготовления", Префикс + "ПредметыСнабжения.СрокИзготовления", ПутьКДаннымКлюча1);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ПредметыСнабженияЦена", Префикс + "ПредметыСнабжения.Цена", ПутьКДаннымКлюча1);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ПредметыСнабженияДатаЦены", Префикс + "ПредметыСнабжения.ДатаЦены", ПутьКДаннымКлюча1);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ПредметыСнабженияПравилаУпаковкиТранспортировкиХранения", 
		Префикс + "ПредметыСнабжения.ПравилаУпаковкиТранспортировкиХранения", ПутьКДаннымКлюча1);
		
	//характеристики
	ПутьКДаннымКлюча1 = Префикс + "Характеристики.ПредметСнабжения";
	ПутьКДаннымКлюча2 = Префикс + "Характеристики.Характеристика";
	
	УстановитьУсловноеОформлениеСтроки(Форма, "Характеристики", ПутьКДаннымКлюча1, ПутьКДаннымКлюча2);
	
	УстановитьУсловноеОформлениеЯчейки(Форма, "ХарактеристикиЕдиницаИзмерения", Префикс + "Характеристики.ЕдиницаИзмерения", ПутьКДаннымКлюча1, ПутьКДаннымКлюча2);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ХарактеристикиЗначение", Префикс + "Характеристики.Значение", ПутьКДаннымКлюча1, ПутьКДаннымКлюча2);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ХарактеристикиОсновная", Префикс + "Характеристики.Основная", ПутьКДаннымКлюча1, ПутьКДаннымКлюча2);
	
	//характеристики предмета снабжения
	ПутьКДаннымКлюча1 = "ХарактеристикиПредметаСнабжения.ПредметСнабжения";
	ПутьКДаннымКлюча2 = "ХарактеристикиПредметаСнабжения.Характеристика";
		
	УстановитьУсловноеОформлениеЯчейки(Форма, "ХарактеристикиПредметаСнабженияЕдиницаИзмерения", 
		"ХарактеристикиПредметаСнабжения.ЕдиницаИзмерения", ПутьКДаннымКлюча1, ПутьКДаннымКлюча2);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ХарактеристикиПредметаСнабженияЗначение", 
		"ХарактеристикиПредметаСнабжения.Значение", ПутьКДаннымКлюча1, ПутьКДаннымКлюча2);
	УстановитьУсловноеОформлениеЯчейки(Форма, "ХарактеристикиПредметаСнабженияОсновная", 
		"ХарактеристикиПредметаСнабжения.Основная", ПутьКДаннымКлюча1, ПутьКДаннымКлюча2);	
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСтроки(Форма, ИмяЭлементаФормы, ПутьКДаннымКлюча1, ПутьКДаннымКлюча2 = Неопределено)
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(176, 196, 222));
	
	ПолеУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеУсловногоОформления.Использование = Истина;
	ПолеУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаФормы);
	
	Если ПутьКДаннымКлюча2 = Неопределено Тогда
		
		ЭлементОтбораУсловногоОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУсловногоОформления.Использование = Истина;
		ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымКлюча1);
		ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораУсловногоОформления.ПравоеЗначение = Справочники.КаталогПредметовСнабжения.ПустаяСсылка();
		
	Иначе
		
		ГруппаОтбораУсловногоОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораУсловногоОформления.Использование = Истина;
		ГруппаОтбораУсловногоОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбораУсловногоОформления = ГруппаОтбораУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУсловногоОформления.Использование = Истина;
		ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымКлюча1);
		ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораУсловногоОформления.ПравоеЗначение = Справочники.КаталогПредметовСнабжения.ПустаяСсылка();
		
		ЭлементОтбораУсловногоОформления = ГруппаОтбораУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУсловногоОформления.Использование = Истина;
		ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымКлюча2);
		ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораУсловногоОформления.ПравоеЗначение = Справочники.ХарактеристикиПредметовСнабжения.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеЯчейки(Форма, ИмяЭлементаФормы, ПутьКДанным, ПутьКДаннымКлюча1, ПутьКДаннымКлюча2 = Неопределено)
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 236, 139));
	
	ПолеУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеУсловногоОформления.Использование = Истина;
	ПолеУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаФормы);
	ПолеУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеУсловногоОформления.Использование = Истина;
	ПолеУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаФормы + "БД");
	
	ГруппаОтбораУсловногоОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораУсловногоОформления.Использование = Истина;
	ГруппаОтбораУсловногоОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораУсловногоОформления = ГруппаОтбораУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораУсловногоОформления.Использование = Истина;
			
	ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + "Изменено");
	ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораУсловногоОформления.ПравоеЗначение = Истина;
	
	ЭлементОтбораУсловногоОформления = ГруппаОтбораУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораУсловногоОформления.Использование = Истина;
	ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымКлюча1);
	ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораУсловногоОформления.ПравоеЗначение = Справочники.КаталогПредметовСнабжения.ПустаяСсылка();
	
	Если Не ПутьКДаннымКлюча2 = Неопределено Тогда
		
		ЭлементОтбораУсловногоОформления = ГруппаОтбораУсловногоОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУсловногоОформления.Использование = Истина;
		ЭлементОтбораУсловногоОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымКлюча2);
		ЭлементОтбораУсловногоОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбораУсловногоОформления.ПравоеЗначение = Справочники.ХарактеристикиПредметовСнабжения.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьШаблонФайлаОбменаСПоставщиками() Экспорт
	
	 Возврат ПолучитьОбщийМакет("ШаблонФайлаОбменаСПоставщиками");
	
 КонецФункции
 
Функция ЗаполнитьПредметыСнабженияИХарактеристики(Массив, Параметры) Экспорт
	 
	Если Параметры.ВариантЗаполнения = 0 Тогда
		 
		МассивПС = Неопределено; 
	
	ИначеЕсли Параметры.ВариантЗаполнения = 1 Тогда
		
		МассивПС = Массив;
		
	ИначеЕсли Параметры.ВариантЗаполнения = 2 Тогда
		
		МассивПС = Новый Массив;
		
		Для каждого Док Из Массив Цикл
			
			Для каждого СтрТЧ Из Док.Спецификация Цикл
				
				МассивПС.Добавить(СтрТЧ.ПредметСнабжения);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли Параметры.ВариантЗаполнения = 3 Тогда
		
		МассивПС = Новый Массив;
		
		Для каждого Док Из Массив Цикл
			
			Для каждого СтрТЧ Из Док.ПредметыСнабжения Цикл
				
				МассивПС.Добавить(СтрТЧ.ПредметСнабжения);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли Параметры.ВариантЗаполнения = 4 Тогда
		
		МассивПС = Массив;
		
	КонецЕсли;
	
	Параметры = ЗаполнитьДанныеПредметовСнабжения(МассивПС, Параметры);
	
	Возврат Параметры;
	
КонецФункции

Функция ЗаполнитьДанныеПредметовСнабжения(МассивПредметовСнабжения, Параметры) Экспорт
		
	//таблица предметов снабжения
	
	Параметры.ПредметыСнабжения.Очистить();
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Если не Параметры.Свойство("ВариантЗаполнения") или (Параметры.Свойство("ВариантЗаполнения") и Параметры.ВариантЗаполнения <> 4) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка КАК ПредметСнабжения,
		|	ВЫБОР
		|		КОГДА КаталогПредметовСнабженияИзготовителиИПоставщики.ЕдиницаИзмерения = &День
		|			ТОГДА КаталогПредметовСнабженияИзготовителиИПоставщики.СрокиИзготовления
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СрокИзготовления,
		|	ЛОЖЬ КАК ВозможностьИзготовления,
		|	0 КАК Цена,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаЦены,
		|	"""" КАК ИмяФайлаКартинки
		|ПОМЕСТИТЬ втПредметыСнабжения
		|ИЗ
		|	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
		|ГДЕ
		|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент = &Контрагент
		|	И КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка В(&МассивПредметовСнабжения)
		|	И НЕ КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПредметСнабжения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
		|	КаталогПредметовСнабжения.Наименование КАК Наименование,
		|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
		|	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
		|	втПредметыСнабжения.ВозможностьИзготовления КАК ВозможностьИзготовления,
		|	втПредметыСнабжения.СрокИзготовления КАК СрокИзготовления,
		|	втПредметыСнабжения.Цена КАК Цена,
		|	втПредметыСнабжения.ДатаЦены КАК ДатаЦены,
		|	ВЫРАЗИТЬ(КаталогПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК СТРОКА(200)) КАК ПравилаУпаковкиТранспортировкиХранения,
		|	втПредметыСнабжения.ИмяФайлаКартинки КАК ИмяФайлаКартинки
		|ПОМЕСТИТЬ втПредметыСнабженияРеквизиты
		|ИЗ
		|	втПредметыСнабжения КАК втПредметыСнабжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		|		ПО втПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПредметСнабжения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПредметыСнабженияРеквизиты.ПредметСнабжения КАК ПредметСнабжения,
		|	МАКСИМУМ(ЕСТЬNULL(СпецификацииПредметовСнабжения.ПредметСнабжения, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))) КАК Входимость,
		|	втПредметыСнабженияРеквизиты.Наименование КАК Наименование,
		|	втПредметыСнабженияРеквизиты.Обозначение КАК Обозначение,
		|	втПредметыСнабженияРеквизиты.ДокументНаПоставку КАК ДокументНаПоставку,
		|	втПредметыСнабженияРеквизиты.ВозможностьИзготовления КАК ВозможностьИзготовления,
		|	втПредметыСнабженияРеквизиты.СрокИзготовления КАК СрокИзготовления,
		|	втПредметыСнабженияРеквизиты.Цена КАК Цена,
		|	втПредметыСнабженияРеквизиты.ДатаЦены КАК ДатаЦены,
		|	втПредметыСнабженияРеквизиты.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
		|	втПредметыСнабженияРеквизиты.ИмяФайлаКартинки КАК ИмяФайлаКартинки
		|ПОМЕСТИТЬ втВходимость
		|ИЗ
		|	втПредметыСнабженияРеквизиты КАК втПредметыСнабженияРеквизиты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
		|		ПО втПредметыСнабженияРеквизиты.ПредметСнабжения = СпецификацииПредметовСнабжения.СоставляющаяЧасть
		|
		|СГРУППИРОВАТЬ ПО
		|	втПредметыСнабженияРеквизиты.ДатаЦены,
		|	втПредметыСнабженияРеквизиты.ВозможностьИзготовления,
		|	втПредметыСнабженияРеквизиты.ДокументНаПоставку,
		|	втПредметыСнабженияРеквизиты.ПредметСнабжения,
		|	втПредметыСнабженияРеквизиты.Обозначение,
		|	втПредметыСнабженияРеквизиты.ИмяФайлаКартинки,
		|	втПредметыСнабженияРеквизиты.Наименование,
		|	втПредметыСнабженияРеквизиты.СрокИзготовления,
		|	втПредметыСнабженияРеквизиты.Цена,
		|	втПредметыСнабженияРеквизиты.ПравилаУпаковкиТранспортировкиХранения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Входимость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВходимость.ПредметСнабжения КАК ПредметСнабжения,
		|	втВходимость.Входимость КАК Входимость,
		|	втВходимость.Наименование КАК Наименование,
		|	втВходимость.Обозначение КАК Обозначение,
		|	втВходимость.ДокументНаПоставку КАК ДокументНаПоставку,
		|	втВходимость.ВозможностьИзготовления КАК ВозможностьИзготовления,
		|	втВходимость.СрокИзготовления КАК СрокИзготовления,
		|	втВходимость.Цена КАК Цена,
		|	втВходимость.ДатаЦены КАК ДатаЦены,
		|	втВходимость.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
		|	втВходимость.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
		|	ЕСТЬNULL(КаталогПредметовСнабжения.Обозначение, """") КАК ВходимостьОбозначение,
		|	ЛОЖЬ КАК Согласовано,
		|	втВходимость.Наименование КАК НаименованиеБД,
		|	втВходимость.Обозначение КАК ОбозначениеБД,
		|	втВходимость.ДокументНаПоставку КАК ДокументНаПоставкуБД,
		|	втВходимость.ВозможностьИзготовления КАК ВозможностьИзготовленияБД,
		|	втВходимость.СрокИзготовления КАК СрокИзготовленияБД,
		|	втВходимость.Цена КАК ЦенаБД,
		|	втВходимость.ДатаЦены КАК ДатаЦеныБД,
		|	втВходимость.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХраненияБД,
		|	ЛОЖЬ КАК НаименованиеИзменено,
		|	ЛОЖЬ КАК ОбозначениеИзменено,
		|	ЛОЖЬ КАК ДокументНаПоставкуИзменено,
		|	ЛОЖЬ КАК ВозможностьИзготовленияИзменено,
		|	ЛОЖЬ КАК СрокИзготовленияИзменено,
		|	ЛОЖЬ КАК ЦенаИзменено,
		|	ЛОЖЬ КАК ДатаЦеныИзменено,
		|	ЛОЖЬ КАК ПравилаУпаковкиТранспортировкиХраненияИзменено,
		|	"""" КАК Примечание,
		|	0 КАК ПорядковыйНомер
		|ИЗ
		|	втВходимость КАК втВходимость
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		|		ПО втВходимость.Входимость = КаталогПредметовСнабжения.Ссылка";

	ИначеЕсли Параметры.Свойство("ВариантЗаполнения") и Параметры.ВариантЗаполнения = 4 Тогда
		ТЗПредметовСнабжения = Новый ТаблицаЗначений;
		ТЗПредметовСнабжения.Колонки.Добавить("Инд", новый ОписаниеТипов("Число"));
		ТЗПредметовСнабжения.Колонки.Добавить("ПС", новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения"));
		ТЗПредметовСнабжения.Колонки.Добавить("Входимость", новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения"));		
		
		Итератор = 0;
		
		Для Сч = 0 По МассивПредметовСнабжения.Количество() - 1 Цикл
			НайденнаяСтрока = ТЗПредметовСнабжения.Найти(МассивПредметовСнабжения[Сч][0], "ПС");
			Если НайденнаяСтрока = Неопределено Тогда
				Стр 	= ТЗПредметовСнабжения.Добавить();
				Стр.Инд	= Итератор;
				Стр.ПС	= МассивПредметовСнабжения[Сч][0];
				Стр.Входимость = МассивПредметовСнабжения[Сч][1];
				Итератор = Итератор + 1;
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЦикла;
		
		ЗапросУпорядочивание = Новый Запрос;
		ЗапросУпорядочивание.МенеджерВременныхТаблиц = МенеджерВТ;
		
		ЗапросУпорядочивание.Текст = 
		"ВЫБРАТЬ
		|	ТЗПредметовСнабжения.ПС КАК ПС,
		|	ТЗПредметовСнабжения.Инд КАК Порядок,
		|   ТЗПредметовСнабжения.Входимость КАК Входимость
		|
		|ПОМЕСТИТЬ ТЗПредметовСнабжения
		|ИЗ
		|	&ТЗПредметовСнабжения КАК ТЗПредметовСнабжения";
		
		
		ЗапросУпорядочивание.УстановитьПараметр("ТЗПредметовСнабжения", ТЗПредметовСнабжения);
		ЗапросУпорядочивание.Выполнить();

		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка КАК ПредметСнабжения,
		               |	ВЫБОР
		               |		КОГДА КаталогПредметовСнабженияИзготовителиИПоставщики.ЕдиницаИзмерения = &День
		               |			ТОГДА КаталогПредметовСнабженияИзготовителиИПоставщики.СрокиИзготовления
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК СрокИзготовления,
		               |	ЛОЖЬ КАК ВозможностьИзготовления,
		               |	0 КАК Цена,
		               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаЦены,
		               |	"""" КАК ИмяФайлаКартинки,
		               |	ТЗПредметовСнабжения.Входимость КАК Входимость,
		               |	ТЗПредметовСнабжения.Порядок КАК Порядок
		               |ПОМЕСТИТЬ втПредметыСнабжения
		               |ИЗ
		               |	ТЗПредметовСнабжения КАК ТЗПредметовСнабжения
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
		               |		ПО (КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка = ТЗПредметовСнабжения.ПС)
		               |ГДЕ
		               |	НЕ КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка.ПометкаУдаления
		               |	И КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент = &Контрагент
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ПредметСнабжения
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КаталогПредметовСнабжения.Наименование КАК Наименование,
		               |	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
		               |	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
		               |	ВЫРАЗИТЬ(КаталогПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК СТРОКА(200)) КАК ПравилаУпаковкиТранспортировкиХранения,
		               |	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
		               |	втПредметыСнабжения.ВозможностьИзготовления КАК ВозможностьИзготовления,
		               |	втПредметыСнабжения.СрокИзготовления КАК СрокИзготовления,
		               |	втПредметыСнабжения.Цена КАК Цена,
		               |	втПредметыСнабжения.ДатаЦены КАК ДатаЦены,
		               |	втПредметыСнабжения.Входимость КАК Входимость,
		               |	втПредметыСнабжения.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
		               |	втПредметыСнабжения.Порядок КАК Порядок
		               |ПОМЕСТИТЬ втВходимость
		               |ИЗ
		               |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыСнабжения КАК втПредметыСнабжения
		               |		ПО (втПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	втПредметыСнабжения.ДатаЦены,
		               |	втПредметыСнабжения.ВозможностьИзготовления,
		               |	втПредметыСнабжения.ИмяФайлаКартинки,
		               |	КаталогПредметовСнабжения.ДокументНаПоставку,
		               |	втПредметыСнабжения.ПредметСнабжения,
		               |	КаталогПредметовСнабжения.Обозначение,
		               |	КаталогПредметовСнабжения.Наименование,
		               |	втПредметыСнабжения.СрокИзготовления,
		               |	втПредметыСнабжения.Цена,
		               |	ВЫРАЗИТЬ(КаталогПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК СТРОКА(200)),
		               |	втПредметыСнабжения.Входимость,
		               |	втПредметыСнабжения.Порядок
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Входимость
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втВходимость.ПредметСнабжения КАК ПредметСнабжения,
		               |	втВходимость.Входимость КАК Входимость,
		               |	втВходимость.Наименование КАК Наименование,
		               |	втВходимость.Обозначение КАК Обозначение,
		               |	втВходимость.ДокументНаПоставку КАК ДокументНаПоставку,
		               |	втВходимость.ВозможностьИзготовления КАК ВозможностьИзготовления,
		               |	втВходимость.СрокИзготовления КАК СрокИзготовления,
		               |	втВходимость.Цена КАК Цена,
		               |	втВходимость.ДатаЦены КАК ДатаЦены,
		               |	втВходимость.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
		               |	втВходимость.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
		               |	ЕСТЬNULL(КаталогПредметовСнабжения.Обозначение, """") КАК ВходимостьОбозначение,
		               |	ЛОЖЬ КАК Согласовано,
		               |	втВходимость.Наименование КАК НаименованиеБД,
		               |	втВходимость.Обозначение КАК ОбозначениеБД,
		               |	втВходимость.ДокументНаПоставку КАК ДокументНаПоставкуБД,
		               |	втВходимость.ВозможностьИзготовления КАК ВозможностьИзготовленияБД,
		               |	втВходимость.СрокИзготовления КАК СрокИзготовленияБД,
		               |	втВходимость.Цена КАК ЦенаБД,
		               |	втВходимость.ДатаЦены КАК ДатаЦеныБД,
		               |	втВходимость.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХраненияБД,
		               |	ЛОЖЬ КАК НаименованиеИзменено,
		               |	ЛОЖЬ КАК ОбозначениеИзменено,
		               |	ЛОЖЬ КАК ДокументНаПоставкуИзменено,
		               |	ЛОЖЬ КАК ВозможностьИзготовленияИзменено,
		               |	ЛОЖЬ КАК СрокИзготовленияИзменено,
		               |	ЛОЖЬ КАК ЦенаИзменено,
		               |	ЛОЖЬ КАК ДатаЦеныИзменено,
		               |	ЛОЖЬ КАК ПравилаУпаковкиТранспортировкиХраненияИзменено,
		               |	"""" КАК Примечание,
		               |	0 КАК ПорядковыйНомер
		               |ИЗ
		               |	втВходимость КАК втВходимость
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		               |		ПО втВходимость.Входимость = КаталогПредметовСнабжения.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗПредметовСнабжения КАК ТЗПредметовСнабжения
		               |		ПО втВходимость.ПредметСнабжения = ТЗПредметовСнабжения.ПС
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ТЗПредметовСнабжения.Порядок";
				
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", Параметры.Поставщик);
	Запрос.УстановитьПараметр("День", Константы.ЕдиницаИзмеренияДень.Получить()); //код по ОКЕИ
	
	Если не Параметры.Свойство("ВариантЗаполнения") или (Параметры.Свойство("ВариантЗаполнения") и Параметры.ВариантЗаполнения <> 4) Тогда 
		Если Не МассивПредметовСнабжения = Неопределено Тогда 		
			Запрос.УстановитьПараметр("МассивПредметовСнабжения", МассивПредметовСнабжения); 			
		Иначе			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка В(&МассивПредметовСнабжения)", "");
		КонецЕсли;
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Параметры.ПредметыСнабжения.Загрузить(РезультатЗапроса.Выгрузить());
	
	Сч = 1;
	
	Для каждого СтрокаТаблицы Из Параметры.ПредметыСнабжения Цикл
		
		СтрокаТаблицы.Идентификатор = СтрокаТаблицы.ПредметСнабжения.УникальныйИдентификатор();
		СтрокаТаблицы.ПорядковыйНомер = Сч;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	//таблица характеристик

	
	Параметры.Характеристики.Очистить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КаталогПредметовСнабженияХарактеристики.Ссылка КАК ПредметСнабжения,
	|	КаталогПредметовСнабженияХарактеристики.Характеристика КАК Характеристика,
	|	КаталогПредметовСнабженияХарактеристики.Значение КАК Значение,
	|	КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КаталогПредметовСнабженияХарактеристики.Основная КАК Основная,
	|	ЕСТЬNULL(ОКЕИ.Код, """") КАК ЕдиницаИзмеренияКод,
	|	КаталогПредметовСнабженияХарактеристики.Значение КАК ЗначениеБД,
	|	КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБД,
	|	КаталогПредметовСнабженияХарактеристики.Основная КАК ОсновнаяБД,
	|	ЛОЖЬ КАК ЗначениеИзменено,
	|	ЛОЖЬ КАК ЕдиницаИзмеренияИзменено,
	|	ЛОЖЬ КАК ОсновнаяИзменено,
	|	0 КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОКЕИ КАК ОКЕИ
	|		ПО КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения = ОКЕИ.Ссылка
	|ГДЕ
	|	КаталогПредметовСнабженияХарактеристики.Ссылка В
	|			(ВЫБРАТЬ
	|				втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|			ИЗ
	|				втПредметыСнабжения КАК втПредметыСнабжения)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Параметры.Характеристики.Загрузить(РезультатЗапроса.Выгрузить());
	
	Сч = 1;
	
	Для каждого СтрокаТаблицы Из Параметры.Характеристики Цикл
		
		СтрокаТаблицы.Идентификатор = СтрокаТаблицы.ПредметСнабжения.УникальныйИдентификатор();
		СтрокаТаблицы.ПорядковыйНомер = Сч;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьХарактеристикуПоНаименованию(Наименование, ПредметСнабжения) Экспорт
	
	// + 03.07.2018 10:09:48 Базунов Д.А. Задача: 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабженияХарактеристики.Характеристика КАК Характеристика,
	|	КаталогПредметовСнабженияХарактеристики.Характеристика.Наименование КАК ХарактеристикаНаименование
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|ГДЕ
	|	КаталогПредметовСнабженияХарактеристики.Характеристика.Наименование = &Наименование
	|	И КаталогПредметовСнабженияХарактеристики.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Ссылка", ПредметСнабжения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	   	Возврат Выборка.Характеристика
	Иначе
		Возврат Выборка.Характеристика
	КонецЕсли;
	
	//Возврат Справочники.ХарактеристикиПредметовСнабжения.НайтиПоНаименованию(Наименование, Истина);
	
	// - 03.07.2018 10:09:48 Базунов Д.А. Задача:
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(Код, Наименование) Экспорт
	
	ОКЕИМенеджер = Справочники.ОКЕИ;
	
	Если Не ЗначениеЗаполнено(Код) И Не ЗначениеЗаполнено(Наименование) Тогда
		
		Возврат ОКЕИМенеджер.ПустаяСсылка();
		
	КонецЕсли;
	
	Результат = ОКЕИМенеджер.НайтиПоКоду(Код);
	
	Если Результат.Пустая() Тогда
		
		Результат = ОКЕИМенеджер.НайтиПоНаименованию(Наименование);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСсылкуПоГУИД(ГУИД, ИмяСправочника) Экспорт
	
	Попытка
		
		Результат = Справочники[ИмяСправочника].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		
	Исключение
		
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат ?(ЗначениеЗаполнено(Результат.Наименование), Результат, Справочники[ИмяСправочника].ПустаяСсылка());
	
КонецФункции
// + 04.07.2018 10:25:43 Базунов Д.А. Задача: 

Функция ФайлСуществует(ДопПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабженияПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабженияПрисоединенныеФайлы КАК КаталогПредметовСнабженияПрисоединенныеФайлы
	|ГДЕ
	|	КаталогПредметовСнабженияПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И КаталогПредметовСнабженияПрисоединенныеФайлы.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДопПараметры.Владелец);
	Запрос.УстановитьПараметр("Наименование",  ДопПараметры.ИмяБезРасширения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
		
КонецФункции

Процедура ДобавитьФайлВПрисоединенныеФайлыСервер(ПутьКФайлу, АдресВоВременномХранилище, Владелец) Экспорт 
	
	ПолныйФайл = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);
	ИмяБезРасширения   = ПолныйФайл.ИмяБезРасширения;
	РасширениеБезТочки = СтрЗаменить(ПолныйФайл.Расширение, ".", "");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Владелец", Владелец);
	ДопПараметры.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	
	Если ФайлСуществует(ДопПараметры) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Владелец);
	ПараметрыФайла.Вставить("Автор",                       ПараметрыСеанса.ТекущийПользователь);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресВоВременномХранилище, "", "");
	
КонецПроцедуры

// - 04.07.2018 10:25:43 Базунов Д.А. Задача:
#КонецОбласти

