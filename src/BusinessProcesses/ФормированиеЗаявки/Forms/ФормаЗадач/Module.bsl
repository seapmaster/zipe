
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	АвторСтрокой = Строка(Объект.Автор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКонтрактов, "Заявка", Объект.Предмет, Истина);
	
	Если ЗначениеЗаполнено(Объект.ОсновнойОбъектАдресации) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокКонтрактов, "Контрагент", Объект.ОсновнойОбъектАдресации, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализацияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	БизнесПроцессыИЗадачиКлиент.ФормаЗадачиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОткрытьФормуЗадачиНажатие(Элемент)
	
	ПоказатьЗначение(,Объект.Ссылка);
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсполненияПриИзменении(Элемент)
	
	Если Объект.ДатаИсполнения = НачалоДня(Объект.ДатаИсполнения) Тогда
		Объект.ДатаИсполнения = КонецДня(Объект.ДатаИсполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненаВыполнить(Команда)

	Если НЕ ПроверитьВыполнениеЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	Выполнена = БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтотОбъект, Истина);
	
	Если Выполнена Тогда 
		УстановитьСледующийЭтапВыполненияЗаявки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Дополнительно(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьДопИнформациюОЗадаче(Объект.Ссылка);
	
КонецПроцедуры

#Область РаботаСКоммерческимиПредложениями

&НаКлиенте
Процедура ОткрытьФормированиеЗаявокНаКП(Команда)
	
	ПараметрыОткрытияОбработки = Новый Структура;
	Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.Заявка") Тогда
		ПараметрыОткрытияОбработки.Вставить("Заявка", Объект.Предмет);
	ИначеЕсли ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЗапросТКПRFP") Тогда
		ПараметрыОткрытияОбработки.Вставить("ЗапросТКПRFP", Объект.Предмет);
	КонецЕсли;
		
	ОткрытьФорму("Обработка.ФормированиеЗаявокНаКомерческиеПредложения.Форма.Форма", 
		ПараметрыОткрытияОбработки);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработкуЗапросаКП(Команда)
	
	ПараметрыОткрытияОбработки = Новый Структура;
	Если ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.Заявка") Тогда
		ПараметрыОткрытияОбработки.Вставить("Заявка", Объект.Предмет);
	ИначеЕсли ТипЗнч(Объект.Предмет) = Тип("ДокументСсылка.ЗапросТКПRFP") Тогда
		ПараметрыОткрытияОбработки.Вставить("ЗапросТКПRFP", Объект.Предмет);
	КонецЕсли;

	ОткрытьФорму("Обработка.ОбработкаЗапросаКоммерческогоПредложения.Форма.Форма", 
		ПараметрыОткрытияОбработки);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	Если ЗначениеЗаполнено(Объект.БизнесПроцесс) Тогда
		ПараметрыФормы = БизнесПроцессыИЗадачиВызовСервера.ФормаВыполненияЗадачи(Объект.Ссылка);
		ЕстьФормаЗадачи = ПараметрыФормы.Свойство("ИмяФормы");
		Элементы.Выполнена.Доступность = НЕ ЕстьФормаЗадачи;
	КонецЕсли;
	НачальныйПризнакВыполнения = Объект.Выполнена;
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		Объект.СрокИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Элементы.Предмет.Гиперссылка = Объект.Предмет <> Неопределено И НЕ Объект.Предмет.Пустая();
	ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Объект.Предмет);	
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокНачалаИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	Элементы.ДатаИсполненияВремя.Видимость = ИспользоватьДатуИВремяВСрокахЗадач;
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Элементы.СрокИсполнения);
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Элементы.Дата);
	
	БизнесПроцессыИЗадачиСервер.ФормаЗадачиПриСозданииНаСервере(ЭтотОбъект, Объект, 
		Элементы.ГруппаСостояние, Элементы.ДатаИсполнения);
		
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Элементы.Автор.Видимость = Ложь;
		Элементы.АвторСтрокой.Видимость = Истина;
		Элементы.Исполнитель.КнопкаОткрытия = Ложь;
	КонецЕсли;
	
	Элементы.Выполнена.Доступность = ПравоДоступа("Изменение", Метаданные.Задачи.ЗадачаИсполнителя);
	
	Если Объект.РольИсполнителя.Пустая() Тогда
		Элементы.РольИсполнителя.Видимость = Ложь;
		Элементы.Исполнитель.Видимость = Истина;
	Иначе
		Элементы.РольИсполнителя.Видимость = Истина;
		Элементы.Исполнитель.Видимость = Ложь;
	КонецЕсли;
	
	// + 27.02.2018 14:11:26 Базунов Д.А. Задача: 
	
	Точки = БизнесПроцессы.ФормированиеЗаявки.ТочкиМаршрута;
	
	Если Объект.ТочкаМаршрута = Точки.ПодготовкаКП ИЛИ 
		Объект.ТочкаМаршрута = Точки.ФормированиеТКПСЗаказчиком ИЛИ
		Объект.ТочкаМаршрута = Точки.ФормированиеПроектаКонтрактаНаПоставкуПС Тогда
		Элементы.ГруппаСписокКонтрактов.Видимость = Истина;
	ИначеЕсли Объект.ТочкаМаршрута = Точки.АкцептованиеДЗО Тогда
		Элементы.ГруппаСписокКонтрактов.Видимость = Истина;
		Элементы.СписокКонтрактовСоздатьКП.Видимость = Ложь;
	КонецЕсли; 
	
	//Тип	Равно	Перечисление.ТипыКонтрактов.КоммерческоеПредложение	
	//Вид	Равно	Перечисление.ВидыКонтрактов.КонтрактСПоставщиком	
	
	Если Объект.ТочкаМаршрута = Точки.ФормированиеТКПСЗаказчиком Тогда
		
		Элементы.СписокКонтрактовСоздатьКП.Заголовок = "Создать ТКП";
		
		СписокОтборов = СписокКонтрактов.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		СписокОтборов.Очистить();
		НовОтбор = СписокОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тип");
		НовОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		НовОтбор.ПравоеЗначение = Перечисления.ТипыКонтрактов.ТКП;
		НовОтбор.Использование = Истина;
		НовОтбор = СписокОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Вид");
		НовОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		НовОтбор.ПравоеЗначение = Перечисления.ВидыКонтрактов.КонтрактСЗаказчиком;
		НовОтбор.Использование = Истина;
		
	ИначеЕсли Объект.ТочкаМаршрута = Точки.ФормированиеПроектаКонтрактаНаПоставкуПС Тогда
		
		Элементы.СписокКонтрактовСоздатьКП.Заголовок = "Создать контракт";
		СписокОтборов = СписокКонтрактов.КомпоновщикНастроек.Настройки.Отбор.Элементы;
		СписокОтборов.Очистить();
		НовОтбор = СписокОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Тип");
		НовОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		НовОтбор.ПравоеЗначение = Перечисления.ТипыКонтрактов.Контракт;
		НовОтбор.Использование = Истина;
		НовОтбор = СписокОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Вид");
		НовОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		НовОтбор.ПравоеЗначение = Перечисления.ВидыКонтрактов.КонтрактСЗаказчиком;
		НовОтбор.Использование = Истина;
		
	КонецЕсли; 
	
	Элементы.ФормаГруппаОбработокКП.Видимость = ((Объект.ТочкаМаршрута = Точки.ОпределениеОтветственногоДЗО) ИЛИ (Объект.ТочкаМаршрута = Точки.ПодготовкаКП));
	
	Если ТолькоПросмотр Тогда
		Элементы.Выполнена.Доступность = Ложь;
	КонецЕсли; 
	
	// - 27.02.2018 14:11:26 Базунов Д.А. Задача:
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СокрЛП(Объект.РезультатВыполнения) = "" Тогда
		Если Объект.ВыбранныйВариант = "" Тогда
			Объект.РезультатВыполнения = "Выполнена";
		Иначе
			Объект.РезультатВыполнения = СокрЛП(Объект.ВыбранныйВариант);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// + 27.02.2018 11:44:32 Базунов Д.А. Задача: 

&НаСервере
Функция ПроверитьВыполнениеЗадачи()
	
	Точки = БизнесПроцессы.ФормированиеЗаявки.ТочкиМаршрута;
	
	Если Объект.ТочкаМаршрута = Точки.ОпределениеОтветственногоДЗО Тогда
		
		// Проверка что все исполнители ДЗО заполнены
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаСпецификация.ИсполнительДЗО КАК ИсполнительДЗО
		|ИЗ
		|	Документ.Заявка.Спецификация КАК ЗаявкаСпецификация
		|ГДЕ
		|	ЗаявкаСпецификация.Ссылка = &Ссылка
		|	И ЗаявкаСпецификация.ИсполнительДЗО = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Предмет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Сообщить("В заявке не указаны Исполнители ДЗО!");
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли Объект.ТочкаМаршрута = Точки.АкцептованиеДЗО Тогда
		
		Ошибка = Ложь;
		ЗапросТКП = Объект.Предмет.ЗапросТКПRFP;
		Если Объект.Предмет.СпециалистДЭ.Пустая() Тогда
			Сообщить("В заявке не указан специалист департамента экономики!");
			Ошибка = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЗапросТКП.НомерФСВТС) Тогда
			Сообщить("В запросе не указан Номер ФС ВТС!");
			Ошибка = Истина;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(ЗапросТКП.ДатаРегистрацииФСВТС) Тогда
			Сообщить("В запросе не указана Дата регистрации ФС ВТС!");
			Ошибка = Истина;
		КонецЕсли; 
		Если Ошибка Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДобавитьЭтапВЗаявку(Этап = Неопределено)
	
	Если Этап = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат ОбщиеФункцииСервер.ДобавитьЭтапКЗаявке(Объект.Предмет, Этап, ТекущаяДата());
	
КонецФункции
 
&НаСервере
Функция УстановитьСледующийЭтапВыполненияЗаявки()
	
	Точки = БизнесПроцессы.ФормированиеЗаявки.ТочкиМаршрута;
	
	Если Объект.ТочкаМаршрута = Точки.ОпределениеОтветственногоДЗО Тогда
		
		ДобавитьЭтапВЗаявку(Константы.ЭтапЗаявкиОпределениеОтветственногоДЗО.Получить());
		
	ИначеЕсли Объект.ТочкаМаршрута = Точки.АкцептованиеДЗО Тогда
		
		ДобавитьЭтапВЗаявку(Константы.ЭтапЗаявкиАкцептованиеДЗО.Получить());
		
	ИначеЕсли Объект.ТочкаМаршрута = Точки.ФормированиеПредварительныхВнешнихЦен Тогда
		
		ДобавитьЭтапВЗаявку(Константы.ЭтапЗаявкиФормированиеПредварительныхВнешнихЦен.Получить());
		
	ИначеЕсли Объект.ТочкаМаршрута = Точки.КорректировкаВнешнихЦен Тогда
		
		ДобавитьЭтапВЗаявку(Константы.ЭтапЗаявкиКорректировкаВнешнихЦен.Получить());
		
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ВернутьТипСозданияКонтракта()
	
	Точки = БизнесПроцессы.ФормированиеЗаявки.ТочкиМаршрута;
	
	Если Объект.ТочкаМаршрута = Точки.ПодготовкаКП Тогда 
		Возврат "ТКПСПоставщиком";
	ИначеЕсли Объект.ТочкаМаршрута = Точки.ФормированиеТКПСЗаказчиком Тогда
		Возврат "ТКПСЗаказчиком";
	ИначеЕсли Объект.ТочкаМаршрута = Точки.ФормированиеПроектаКонтрактаНаПоставкуПС Тогда
		Возврат "КонтрактСЗаказчиком";
	КонецЕсли;
	
КонецФункции
 
&НаКлиенте
Процедура СоздатьКП(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить(ВернутьТипСозданияКонтракта());
	ПараметрыОткрытия.Вставить("ЗаявкаСсылка", Объект.Предмет);
	// ++ 09.07.2018 15:56:54 Базунов Д.А. Задача: 
	Если ЗначениеЗаполнено(Объект.ОсновнойОбъектАдресации) Тогда
		Массив = Новый Массив();
		Массив.Добавить(Объект.ОсновнойОбъектАдресации);
		ПараметрыОткрытия.Вставить("ИсполнительДЗО", Массив);
	КонецЕсли; 
	// -- 09.07.2018 15:56:54 Базунов Д.А. Задача:
	
	ОткрытьПодборПозицийЗаявок(ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПозицийЗаявок(ПараметрыОткрытия)

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПодбораПозицийЗаявок", Этотобъект, ПараметрыОткрытия);
	
	ОткрытьФорму("Документ.Контракт.Форма.ФормаПодбораПозицийЗаявок", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	

КонецПроцедуры // ОткрытьПодборПозицийЗаявок()

&НаКлиенте
Процедура ОбработчикПодбораПозицийЗаявок(АдресВременногоХранилища, ДопПараметры) Экспорт

	Если Не АдресВременногоХранилища = Неопределено Тогда
		
		ДопПараметры.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		Если ДопПараметры.Свойство("ТКПСПоставщиком") Тогда
			ДопПараметры.Вставить("ВидКонтракта", ПредопределенноеЗначение("Перечисление.ВидыКонтрактов.КонтрактСПоставщиком"));
			ОткрытьФорму("Документ.Контракт.Форма.ФормаКонтрактаСПоставщиком", ДопПараметры);
		Иначе
			ДопПараметры.Вставить("ВидКонтракта", ПредопределенноеЗначение("Перечисление.ВидыКонтрактов.КонтрактСЗаказчиком"));
			ОткрытьФорму("Документ.Контракт.Форма.ФормаКонтрактаСЗаказчиком", ДопПараметры);
		КонецЕсли; 
		
	КонецЕсли;	

КонецПроцедуры // ОбработчикПодбораПозицийЗаявок()


// - 27.02.2018 11:44:32 Базунов Д.А. Задача:

#КонецОбласти



