////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьАктивныеЗадачи(БизнесПроцесс, Задача)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ЗадачаИсполнителя.Ссылка КАК Ссылка
	             	  |ИЗ
	             	  |	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	             	  |ГДЕ
	             	  |	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	             	  |	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
	             	  |	И НЕ ЗадачаИсполнителя.Выполнена
	             	  |	И НЕ ЗадачаИсполнителя.Ссылка = &Задача";
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.СогласованиеРаспределенияЗаявкиФСВТС.ТочкиМаршрута.УстановкаВизы);
	Запрос.УстановитьПараметр("Задача", 		Задача);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ПолучитьАктивныеЗадачи

Функция ЗавершитьЗадачу(Задача)
	ЗадачаОбъект 						= Задача.ПолучитьОбъект();
	ЗадачаОбъект.ОбменДанными.Загрузка 	= Истина;
	ЗадачаОбъект.ВыполнитьЗадачу();
КонецФункции // ЗавершитьЗадачу

////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс для подсистемы бизнес-процессов и задач.

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   ТочкаМаршрутаБизнесПроцесса - точка маршрута.
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.СогласованиеРаспределенияЗаявкиФСВТС.ТочкиМаршрута.УстановкаВизы Тогда
		Результат.Вставить("ИмяФормы", "БизнесПроцесс.СогласованиеРаспределенияЗаявкиФСВТС.Форма.ФормаУстановкиВизы");
	КонецЕсли; // Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.СогласованиеРаспределенияЗаявкиФСВТС.ТочкиМаршрута.УстановкаВизы Тогда

	Возврат Результат;
	
КонецФункции // ФормаВыполненияЗадачи

// Вызывается при перенаправлении задачи.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   НоваяЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	
	БизнесПроцессОбъект = ЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
	БизнесПроцессОбъект.РезультатВыполнения = РезультатВыполненияПриПеренаправлении(ЗадачаСсылка) 
		+ БизнесПроцессОбъект.РезультатВыполнения;
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессОбъект.Записать();
	
КонецПроцедуры

// Вызывается при выполнении задачи из формы списка.
//
// Параметры:
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача.
//   БизнесПроцессСсылка - БизнесПроцессСсылка - бизнес-процесс, по которому сформирована задача ЗадачаСсылка.
//   ТочкаМаршрутаБизнесПроцесса - точка маршрута.
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт
	
КонецПроцедуры // ОбработкаВыполненияПоУмолчанию	

Функция РезультатВыполненияПриПеренаправлении(Знач ЗадачаСсылка)  
	
	СтрокаФормат = НСтр("ru = '%1, %2 перенаправил(а) задачу:
		|%3
		|'");
	
	Комментарий = СокрЛП(ЗадачаСсылка.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, ЗадачаСсылка.ДатаИсполнения, ЗадачаСсылка.Исполнитель, Комментарий);
	Возврат Результат;

КонецФункции

Процедура ПослеУстановкиВизы(Ссылка, Задача) Экспорт
	НеСогласовано = Ложь;
	Для Каждого Строка Из Ссылка.УстановленныеВизы.НайтиСтроки(Новый Структура("Исполнитель", Задача.Исполнитель)) Цикл
		Если Строка.Виза = Перечисления.ВизыСогласования.НеСогласовано Тогда
			НеСогласовано = Истина;
		КонецЕсли; // Если Строка.Виза = Перечисления.ВизыСогласования.НеСогласовано Тогда
	КонецЦикла; // Для Каждого Строка Из Ссылка.УстановленныеВизы.НайтиСтроки(Новый Структура("Исполнитель", Задача.Исполнитель)) Цикл
	
	Если НеСогласовано = Ложь Тогда
		Возврат;
	КонецЕсли; // Если НеСогласовано = Ложь Тогда
	
	АктивныеЗадачи 		= ПолучитьАктивныеЗадачи(Ссылка, Задача);
	БизнесПроцессОбъект = Ссылка.ПолучитьОбъект();
	Для Каждого АктивнаяЗадача Из АктивныеЗадачи Цикл
		Строка 				= БизнесПроцессОбъект.УстановленныеВизы.Добавить();
		Строка.Исполнитель 	= АктивнаяЗадача.Исполнитель;
		Строка.Дата 		= ТекущаяДата();
		Строка.Виза 		= Перечисления.ВизыСогласования.НеСогласовано;
		Строка.Комментарий	= "Установлена автоматически";
	КонецЦикла; // Для Каждого Задача Из АктивныеЗадачи Цикл
	БизнесПроцессОбъект.Записать();
	Для Каждого АктивнаяЗадача Из АктивныеЗадачи Цикл
		ЗавершитьЗадачу(АктивнаяЗадача);
	КонецЦикла; // Для Каждого Задача Из АктивныеЗадачи Цикл		
	
КонецПроцедуры // ПослеУстановкиВизы

Функция ПолучитьБизнесПроцессСогласования(Заявка) Экспорт
	Результат 		= Неопределено;
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	СогласованиеРаспределенияЗаявкиФСВТС.Ссылка КАК Ссылка
	             	  |ИЗ
	             	  |	БизнесПроцесс.СогласованиеРаспределенияЗаявкиФСВТС КАК СогласованиеРаспределенияЗаявкиФСВТС
	             	  |ГДЕ
	             	  |	СогласованиеРаспределенияЗаявкиФСВТС.Согласовано
	             	  |	И СогласованиеРаспределенияЗаявкиФСВТС.Завершен
	             	  |	И СогласованиеРаспределенияЗаявкиФСВТС.Заявка = &Заявка";
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Выборка 		= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат 	= Выборка.Ссылка;
	КонецЕсли; // Если Выборка.Следующий() Тогда	
	Возврат Результат;
КонецФункции // ПолучитьБизнесПроцессСогласования
