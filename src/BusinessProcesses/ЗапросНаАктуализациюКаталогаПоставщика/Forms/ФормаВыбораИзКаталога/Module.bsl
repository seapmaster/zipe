
//////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


 &НаСервере
Процедура ОчиститьНаСервере()
   Дерево = РеквизитФормыВЗначение("ДеревоСтруктуры");  
   Дерево.Строки.Очистить();  
   ЗначениеВРеквизитФормы(Дерево, "ДеревоСтруктуры");
КонецПроцедуры  

&НаСервере
Функция ПолучитьТаблицуДанных()
	Запрос 			= Новый Запрос;
	#Область ТекстЗапроса
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктуры,
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	             	  |	ЕСТЬNULL(КодыINCATПредставление.Представление, """") КАК КодINCAT,
	             	  |	ВЫБОР
	             	  |		КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	             	  |				И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	             	  |			ТОГДА 0
	             	  |		КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	             	  |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	             	  |			ТОГДА 1
	             	  |		КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	             	  |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные
	             	  |				И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	             	  |			ТОГДА 2
	             	  |		КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	             	  |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные
	             	  |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	             	  |			ТОГДА 3
	             	  |		КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	             	  |				И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные
	             	  |				И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	             	  |			ТОГДА 4
	             	  |		КОГДА СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)
	             	  |				И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЕстьПодчиненные
	             	  |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	             	  |			ТОГДА 5
	             	  |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	             	  |	КОНЕЦ КАК ИДТипа,
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР,
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП
	             	  |ПОМЕСТИТЬ ВТ_ЭлементыСтруктуры
	             	  |ИЗ
	             	  |	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыINCATПредставление КАК КодыINCATПредставление
	             	  |		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = КодыINCATПредставление.ПредметСнабжения
	             	  |ГДЕ
	             	  |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Заказ
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             	  |	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка КАК ПредметСнабжения,
	             	  |	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка.Обозначение КАК Обозначение,
	             	  |	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка.ДокументНаПоставку КАК ДокументНаПоставку
	             	  |ПОМЕСТИТЬ ВТ_ПредметыСнабженияПоставщика
	             	  |ИЗ
	             	  |	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	             	  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭлементыСтруктуры КАК ВТ_ЭлементыСтруктуры
	             	  |		ПО КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка = ВТ_ЭлементыСтруктуры.ПредметСнабжения
	             	  |ГДЕ
	             	  |	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент = &Поставщик
	             	  |	И КаталогПредметовСнабженияИзготовителиИПоставщики.Поставщик
	             	  |;
	             	  |
	             	  |////////////////////////////////////////////////////////////////////////////////
	             	  |ВЫБРАТЬ
	             	  |	ВТ_ЭлементыСтруктуры.ЭлементСтруктуры КАК ЭлементСтруктуры,
	             	  |	ВТ_ЭлементыСтруктуры.Родитель КАК Родитель,
	             	  |	ВТ_ЭлементыСтруктуры.ПредметСнабжения КАК ПредметСнабжения,
	             	  |	ВТ_ЭлементыСтруктуры.Количество КАК Количество,
	             	  |	ВТ_ЭлементыСтруктуры.КодINCAT КАК КодINCAT,
	             	  |	ВЫБОР
	             	  |		КОГДА ЕСТЬNULL(ВТ_ПредметыСнабженияПоставщика.ПредметСнабжения, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	             	  |			ТОГДА ЛОЖЬ
	             	  |		ИНАЧЕ ИСТИНА
	             	  |	КОНЕЦ КАК Целевой,
	             	  |	ВТ_ЭлементыСтруктуры.ИДТипа КАК ИДТипа,
	             	  |	ВТ_ЭлементыСтруктуры.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	             	  |	ВТ_ЭлементыСтруктуры.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	             	  |	ВТ_ЭлементыСтруктуры.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	             	  |	ВТ_ЭлементыСтруктуры.КоличествоВЗИПР КАК КоличествоВЗИПР,
	             	  |	ВТ_ЭлементыСтруктуры.ЗИП КАК ЗИП,
	             	  |	ВТ_ПредметыСнабженияПоставщика.Обозначение КАК Обозначение,
	             	  |	ВТ_ПредметыСнабженияПоставщика.ДокументНаПоставку КАК ДокументНаПоставку
	             	  |ИЗ
	             	  |	ВТ_ЭлементыСтруктуры КАК ВТ_ЭлементыСтруктуры
	             	  |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредметыСнабженияПоставщика КАК ВТ_ПредметыСнабженияПоставщика
	             	  |		ПО ВТ_ЭлементыСтруктуры.ПредметСнабжения = ВТ_ПредметыСнабженияПоставщика.ПредметСнабжения";
	#КонецОбласти
	Запрос.УстановитьПараметр("Поставщик", Параметры.ПоставщикПараметр);
	Запрос.УстановитьПараметр("Заказ", ЭтотОбъект.Заказ);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ПолучитьТаблицуДанных


&НаСервере
Функция ПолучитьТаблицуДанныхДерева()
	ТаблицаДанных 			= ПолучитьТаблицуДанных();
	ТаблицаДанныхЦелевые 	= ТаблицаДанных.Скопировать(Новый Структура("Целевой", Истина));
	ТаблицаДанныхИтоговая	= ТаблицаДанныхЦелевые.Скопировать();
	ТаблицаДанныхИтоговая.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхЦелевые Цикл
		ТекущаяСтрока = СтрокаТаблицы;
		Пока Истина Цикл			
			НайденныеСтроки = ТаблицаДанныхИтоговая.НайтиСтроки(Новый Структура("ЭлементСтруктуры", ТекущаяСтрока.ЭлементСтруктуры));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаДанныхИтоговая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			ИначеЕсли ТекущаяСтрока.Целевой Тогда
				НайденныеСтроки[0].Целевой = Истина;
			КонецЕсли; // Если НайденныеСтроки.Количество() = 0 Тогда
			
			Если ТекущаяСтрока.Родитель = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка() Тогда
				Прервать;
			КонецЕсли; // Если ТекущаяСтрока.Родитель = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка() Тогда
			
			РодительскиеСтроки = ТаблицаДанных.НайтиСтроки(Новый Структура("ЭлементСтруктуры", ТекущаяСтрока.Родитель));
			Если РодительскиеСтроки.Количество() = 0 Тогда
				Прервать;
			Иначе
				ТекущаяСтрока = РодительскиеСтроки[0];
			КонецЕсли; // Если РодительскиеСтроки.Количество() = 0 Тогда
		КонецЦикла; // 	Пока Истина Цикл	
	КонецЦикла; // Для Каждого СтрокаТаблицы Из ТаблицаДанныхЦелевые Цикл
	
	Возврат ТаблицаДанныхИтоговая;
КонецФункции // ПолучитьТаблицуДанныхДерева

&НаСервере
Процедура ДобавитьСтроки(ТаблицаДанных, ТекущийРодитель, ТекущийУзел)
	Для каждого СтрокаТаблицы Из ТаблицаДанных.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель)) Цикл
		НоваяСтрока = ТекущийУзел.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		ДобавитьСтроки(ТаблицаДанных, СтрокаТаблицы.ЭлементСтруктуры, НоваяСтрока);
	КонецЦикла; // Для Каждого СтрокаТаблицы Из ТаблицаДанных.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель)) Цикл
КонецПроцедуры // ДобавитьСтроки

&НаСервере
Процедура ЗаполнитьДерево()
	ДеревоЗначений	 	= РеквизитФормыВЗначение("ДеревоСтруктуры");
	ТаблицаДанных 		= ПолучитьТаблицуДанныхДерева(); 	
	ТекущийРодитель 	= Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
	ДобавитьСтроки(ТаблицаДанных, ТекущийРодитель, ДеревоЗначений);
	ДеревоЗначений.Строки.Сортировать("ЭлементСтруктуры", Истина);
	ЗначениеВДанныеФормы(ДеревоЗначений, ДеревоСтруктуры);
	
	Элементы.ДеревоСтруктуры.ИзменятьПорядокСтрок = Ложь;
	Элементы.ДеревоСтруктуры.ИзменятьСоставСтрок = Ложь;

КонецПроцедуры // ЗаполнитьДерево


&НаКлиенте
Процедура ВыбратьСтроки(ПодчиненныеСтроки, Выбор)	
	Для каждого Строка из ПодчиненныеСтроки Цикл		
		  Строка.Выбран = Выбор;
		  ВложенныеСтроки = Строка.ПолучитьЭлементы();  		  
		  Если ВложенныеСтроки.Количество() > 0 Тогда
			  ВыбратьСтроки(ВложенныеСтроки, Выбор);
		  КонецЕсли;		
	КонецЦикла;	  
КонецПроцедуры // ВыбратьСтроки	


&НаСервере
Функция СформироватьМассив()	
	МассивПС	= Новый Массив;
	Дерево		= РеквизитФормыВЗначение("ДеревоСтруктуры");
	ОбойтиСтроки(Дерево, МассивПС);
	Возврат МассивПС;	
КонецФункции // СформироватьМассив 

&НаСервере
Процедура ОбойтиСтроки(Дерево, МассивПС, Предыдущий = Неопределено)	
	Для каждого Строка из Дерево.Строки Цикл
		Если Строка.Выбран и Строка.Целевой Тогда
			МассивПара = Новый Массив;
			МассивПара.Добавить(Строка.ПредметСнабжения);
			Если Предыдущий	= Неопределено Тогда
				Предыдущий	= Справочники.КаталогПредметовСнабжения.ПустаяСсылка();
			КонецЕсли;	
			МассивПара.Добавить(Предыдущий);
		 	МассивПС.Добавить(МассивПара);
		КонецЕсли;		  		  
		Если Строка.Строки.Количество() > 0 Тогда
			ОбойтиСтроки(Строка, МассивПС, Строка.ПредметСнабжения);
		КонецЕсли;		
	  КонецЦикла;	  
КонецПроцедуры	// ОбойтиСтроки


&НаКлиенте
Процедура ВыделитьВсеДетально(ПодчиненныеСтроки)
	Для каждого Строка из ПодчиненныеСтроки Цикл
		Строка.Выбран = Истина;
		Если Строка.ПолучитьЭлементы().Количество() > 0 Тогда
			  ВыделитьВсеДетально(Строка.ПолучитьЭлементы());
		 КонецЕсли;
	КонецЦикла;	
 КонецПроцедуры // ВыделитьВсеДетально
 

&НаКлиенте
Процедура СнятьВсеДетально(ПодчиненныеСтроки)
	Для каждого Строка из ПодчиненныеСтроки Цикл
		Строка.Выбран = Ложь;
		 Если Строка.ПолучитьЭлементы().Количество() > 0 Тогда
			  СнятьВсеДетально(Строка.ПолучитьЭлементы());
		 КонецЕсли;
	 КонецЦикла;
КонецПроцедуры // СнятьВсеДетально


//////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД


&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Заказ) Тогда 
		Сообщение		= Новый СообщениеПользователю();
		Сообщение.Текст	= "Выберите заказ!";
		Сообщение.Поле	= "Заказ";
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Сообщить();  		
	Иначе
		ОчиститьНаСервере();
		ЗаполнитьДерево();		
	КонецЕсли;
КонецПроцедуры // КомандаЗаполнить

&НаКлиенте
Процедура Выбрать(Команда) 
	ЭтаФорма.Закрыть(СформироватьМассив());	
КонецПроцедуры //Выбрать

&НаКлиенте
Процедура ВыделитьВсе(Команда)	
	ПодчиненныеСтроки = ДеревоСтруктуры.ПолучитьЭлементы();
	ВыделитьВсеДетально(ПодчиненныеСтроки);	
КонецПроцедуры // ВыделитьВсе

&НаКлиенте
Процедура СнятьВсе(Команда)	
	ПодчиненныеСтроки = ДеревоСтруктуры.ПолучитьЭлементы();
	СнятьВсеДетально(ПодчиненныеСтроки);	
КонецПроцедуры // СнятьВсе 
 


//////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура ДеревоЗначенийВыбранПриИзменении(Элемент)	
	ИдСтроки		= Элементы.ДеревоСтруктуры.ТекущаяСтрока; 
	ВыбратьВсе		= ЭтотОбъект.ВыделятьПодчиненные;
	ТекущаяСтрока	= ДеревоСтруктуры.НайтиПоИдентификатору(ИдСтроки); 	
	Если ВыбратьВсе Тогда		
		Выбор 				= ТекущаяСтрока.Выбран;
		ПодчиненныеСтроки 	= ТекущаяСтрока.ПолучитьЭлементы();		
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ВыбратьСтроки(ПодчиненныеСтроки, Выбор);
		КонецЕсли;		
	КонецЕсли; 	
КонецПроцедуры // ДеревоЗначенийВыбранПриИзменении


&НаКлиенте
Процедура ДеревоСтруктурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.ЭлементСтруктуры);	
КонецПроцедуры // ДеревоСтруктурыВыбор


