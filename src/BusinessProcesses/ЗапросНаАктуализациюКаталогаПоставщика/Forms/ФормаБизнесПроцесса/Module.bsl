#Область ОписаниеПеременных

&НаКлиенте
Перем ОткрытаФормаВыбораИсполнителя;  // Признак того, что исполнитель выбирается из формы, а не быстрым вводом.

&НаКлиенте
Перем ОткрытаФормаВыбораПроверяющего; // Признак того, что проверяющий выбирается из формы, а не быстрым вводом.

&НаКлиенте
Перем КонтекстВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		
		Возврат;
		
	КонецЕсли;
		
	ДанныеБизнесПроцесса = Неопределено;
	
	Если Параметры.Свойство("ДанныеБизнесПроцесса", ДанныеБизнесПроцесса) Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеБизнесПроцесса);
		
		ДополнительныеПараметры = Новый Структура("ПредметыСнабжения, Характеристики, Поставщик", Объект.ПредметыСнабжения, Объект.Характеристики, Объект.Предмет);
		
		ПараметрыЗаполнения = КорректировкаДанныхСправочников.ЗаполнитьДанныеПредметовСнабжения(Неопределено, ДополнительныеПараметры);
	
		КопироватьДанныеФормы(Объект.ПредметыСнабжения, ПараметрыЗаполнения.ПредметыСнабжения);
		КопироватьДанныеФормы(Объект.Характеристики, ПараметрыЗаполнения.Характеристики);
		
		Поставщик = Объект.Предмет;
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда
		
		Объект.Наименование = "Запрос на актуализацию информации о предметах снабжения";
		Объект.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		Объект.Дата = ТекущаяДата();
		Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
		Объект.АвторСтрокой = Строка(Объект.Автор);
		Объект.Исполнитель = Объект.Автор;
		Объект.Содержание = "При старте бизнес-процесса будет сформирован файл для отправки поставщику и создана задача для обработки принятия ответа";
		Объект.НаПроверке = Ложь;
		Объект.Проверяющий = Неопределено;
		
	КонецЕсли;
	
	// Для нового объекта выполняем код инициализации формы в ПриСозданииНаСервере.
	// Для существующего - в ПриЧтенииНаСервере.
	Если Объект.Ссылка.Пустая() Тогда
		
		ИнициализацияФормы();
		
	КонецЕсли;
	
	// + 03.07.2018 16:33:43 Базунов Д.А. Задача:
	Соответствие = Новый Соответствие;
	ПроцессОбъект = ДанныеФормыВЗначение(Объект, Тип("БизнесПроцессОбъект.ЗапросНаАктуализациюКаталогаПоставщика"));
	Для каждого Строка Из ПроцессОбъект.ПредметыСнабжения Цикл
		Если Строка.ИмяФайлаКартинки = "" Тогда
			Продолжить;
		КонецЕсли; 
		Соответствие.Вставить(Строка.Идентификатор, ПоместитьВоВременноеХранилище(Строка.ХранилищеКартинки.Получить(), Новый УникальныйИдентификатор));
	КонецЦикла;
	ЗначениеВДанныеФормы(ПроцессОбъект, Объект);
	Для каждого Элем Из Соответствие Цикл
		Найд = Объект.ПредметыСнабжения.НайтиСтроки(Новый Структура("Идентификатор", Элем.Ключ));
		Найд[0].ХранилищеКартинкиВременное = Элем.Значение;
	КонецЦикла; 
	// - 03.07.2018 16:33:43 Базунов Д.А. Задача:
	
	Если Объект.Стартован Тогда
		
		Элементы.ФормаВыгрузитьВФайлИСтартовать.Доступность = Ложь;
		Элементы.ГруппаЭкспорт.Видимость = Ложь;
		
		Если Не Элементы.Найти("ФормаСтарт") = Неопределено Тогда
			
			КоманднаяПанель.ПодчиненныеЭлементы.ФормаСтарт.Видимость = Ложь;
			
		КонецЕсли;
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Объект.ВариантЗаполнения = 0;
	
	Если Не Элементы.Найти("ФормаСтарт") = Неопределено Тогда
		
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаСтарт.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ПредметыСнабженияСогласовано.Видимость = Объект.Стартован;
	Элементы.ПредметыСнабжения.ТолькоПросмотр = Объект.Стартован;
	Элементы.Характеристики.ТолькоПросмотр = Объект.Стартован;
	Элементы.ГруппаАналоги.Видимость = Объект.Стартован;
	Элементы.Аналоги.ТолькоПросмотр = Объект.Стартован;
	
	КорректировкаДанныхСправочников.УстановитьУсловноеОформление(ЭтаФорма, Истина);
	
	ОтображатьХарактеристикиПредметаСнабжения = Истина;
	
	СравнитьСДаннымиБД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДоступностьКомандОстановки();
	
	ЗаполнитьХарактеристикиПредметаСнабжения();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализацияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборРолиИсполнителя") Тогда
		
		Если КонтекстВыбора = "ИсполнительПриИзменении" Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
				Объект.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
			КонецЕсли;
			
			УстановитьДоступностьПроверяющего(ЭтотОбъект);
			
		ИначеЕсли КонтекстВыбора = "ПроверяющийПриИзменении" Тогда
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
				Объект.Проверяющий = ВыбранноеЗначение.РольИсполнителя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаНастройкаОтложенногоСтарта" Тогда
		Отложен = (Параметр.Отложен И Параметр.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту"));
		ДатаОтложенногоСтарта = Параметр.ДатаОтложенногоСтарта;
		УстановитьСвойстваЭлементовФормы(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ПроверитьДатуЗавершенияОтложенногоПроцесса(ТекущийОбъект, Отказ);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	Если НачальныйПризнакСтарта И ИзменятьЗаданияЗаднимЧислом Тогда
		УстановитьПривилегированныйРежим(Истина); 
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_Задание", ПараметрыЗаписи, Объект.Ссылка);
	Оповестить("Запись_ЗадачаИсполнителя", ПараметрыЗаписи, Неопределено);
КонецПроцедуры

#КонецОбласти

#Область СобытияПредметыСнабжения

&НаКлиенте
Процедура ПредметыСнабженияПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ПредметыСнабжения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПредыдущийИдентификатор = Элементы.ПредметыСнабжения.ТекущиеДанные.Идентификатор;
	ПредыдущийПредметСнабжения = Элементы.ПредметыСнабжения.ТекущиеДанные.ПредметСнабжения; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияПриИзменении(Элемент)
	
	Если Элементы.ПредметыСнабжения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Элементы.ПредметыСнабжения.ТекущийЭлемент = Элементы.ПредметыСнабженияСогласовано И Элементы.ПредметыСнабженияСогласовано.Видимость Тогда
	
		Элементы.ПредметыСнабжения.ТекущиеДанные.Согласовано = Истина;
		
	КонецЕсли;
	
	ИмяТекущегоЭлемента = Элементы.ПредметыСнабжения.ТекущийЭлемент.Имя;
	ИмяТекущегоЭлемента = Прав(ИмяТекущегоЭлемента, СтрДлина(ИмяТекущегоЭлемента) - 17);
	
	ТекущиеДанные = Элементы.ПредметыСнабжения.ТекущиеДанные;
	
	Попытка
		
		Если ИмяТекущегоЭлемента = "ДатаЦены" Или ИмяТекущегоЭлемента = "Цена" И Не ЗначениеЗаполнено(ТекущиеДанные[ИмяТекущегоЭлемента]) Тогда
			
			ТекущиеДанные[ИмяТекущегоЭлемента + "Изменено"] = Ложь;
			
		Иначе
			
			ТекущиеДанные[ИмяТекущегоЭлемента + "Изменено"] = (ТекущиеДанные[ИмяТекущегоЭлемента] <> ТекущиеДанные[ИмяТекущегоЭлемента + "БД"]);
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	ТекущиеДанные.ЕстьИзменения = ТекущиеДанные.НаименованиеИзменено Или ТекущиеДанные.ОбозначениеИзменено Или ТекущиеДанные.ДокументНаПоставкуИзменено
		Или ТекущиеДанные.ВозможностьИзготовленияИзменено Или ТекущиеДанные.СрокИзготовленияИзменено Или ТекущиеДанные.ЦенаИзменено Или ТекущиеДанные.ДатаЦеныИзменено
		Или ТекущиеДанные.ПравилаУпаковкиТранспортировкиХраненияИзменено;
		
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриИзменении(Элемент)
	
	ИмяТекущегоЭлемента = Элементы.Характеристики.ТекущийЭлемент.Имя;
	ИмяТекущегоЭлемента = Прав(ИмяТекущегоЭлемента, СтрДлина(ИмяТекущегоЭлемента) - 14);
	
	ТекущиеДанные = Элементы.Характеристики.ТекущиеДанные;
	
	Попытка
	
		ТекущиеДанные[ИмяТекущегоЭлемента + "Изменено"] = (ТекущиеДанные[ИмяТекущегоЭлемента] <> ТекущиеДанные[ИмяТекущегоЭлемента + "БД"]);
		
	Исключение
		
	КонецПопытки;
	
	ТекущиеДанные.ЕстьИзменения = ТекущиеДанные.ЕдиницаИзмеренияИзменено Или ТекущиеДанные.ЗначениеИзменено Или ТекущиеДанные.ОсновнаяИзменено;
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияПредметСнабженияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПредметыСнабжения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредметСнабжения) И 
		Объект.ПредметыСнабжения.НайтиСтроки(Новый Структура("ПредметСнабжения", ТекущиеДанные.ПредметСнабжения)).Количество() > 1 Тогда
		
		Сообщить("В таблице уже есть такой предмет снабжения!");
		ТекущиеДанные.ПредметСнабжения = ПредыдущийПредметСнабжения;
		Возврат;
		
	КонецЕсли;	
	
	УдалитьХарактеристикиПредметаСнабжения();		
	
	ДанныеПредметаСнабжения = ЗаполнитьДанныеПредметаСнабжения(ТекущиеДанные.ПредметСнабжения);
	
	ТекущиеДанные.Идентификатор = ?(ЗначениеЗаполнено(ТекущиеДанные.ПредметСнабжения), ТекущиеДанные.ПредметСнабжения.УникальныйИдентификатор(), "");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПредметаСнабжения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПредметаСнабжения(ПредметСнабжения)
	
	//основные данные
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|	ВложенныйЗапрос.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Обозначение КАК Обозначение,
	|	ВложенныйЗапрос.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ВложенныйЗапрос.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|	ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	ВложенныйЗапрос.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|	ВложенныйЗапрос.СрокИзготовления КАК СрокИзготовления,
	|	ВложенныйЗапрос.Входимость КАК Входимость,
	|	ЕСТЬNULL(ЦеныПредметовСнабженияСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныПредметовСнабженияСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЦены
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|		ВложенныйЗапрос.Наименование КАК Наименование,
	|		ВложенныйЗапрос.Обозначение КАК Обозначение,
	|		ВложенныйЗапрос.ДокументНаПоставку КАК ДокументНаПоставку,
	|		ВложенныйЗапрос.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|		ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|		ВложенныйЗапрос.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|		ВложенныйЗапрос.СрокИзготовления КАК СрокИзготовления,
	|		МАКСИМУМ(ЕСТЬNULL(СпецификацииПредметовСнабжения.ПредметСнабжения, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))) КАК Входимость
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|			ВложенныйЗапрос.Наименование КАК Наименование,
	|			ВложенныйЗапрос.Обозначение КАК Обозначение,
	|			ВложенныйЗапрос.ДокументНаПоставку КАК ДокументНаПоставку,
	|			ВложенныйЗапрос.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|			ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|			ВложенныйЗапрос.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ЕСТЬNULL(КаталогПредметовСнабженияИзготовителиИПоставщики.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) = &День
	|						ТОГДА КаталогПредметовСнабженияИзготовителиИПоставщики.СрокиИзготовления
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК СрокИзготовления
	|		ИЗ
	|			(ВЫБРАТЬ
	|				КаталогПредметовСнабжения.Ссылка КАК ПредметСнабжения,
	|				КаталогПредметовСнабжения.Наименование КАК Наименование,
	|				КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|				КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|				ЛОЖЬ КАК ВозможностьИзготовления,
	|				ВЫРАЗИТЬ(КаталогПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК СТРОКА(200)) КАК ПравилаУпаковкиТранспортировкиХранения,
	|				"""" КАК ИмяФайлаКартинки
	|			ИЗ
	|				Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|			ГДЕ
	|				КаталогПредметовСнабжения.Ссылка = &ПредметСнабжения) КАК ВложенныйЗапрос
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|				ПО ВложенныйЗапрос.ПредметСнабжения = КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка
	|					И (КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент = &Поставщик)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.ИмяФайлаКартинки,
	|			ВложенныйЗапрос.ДокументНаПоставку,
	|			ВложенныйЗапрос.ВозможностьИзготовления,
	|			ВложенныйЗапрос.Обозначение,
	|			ВложенныйЗапрос.Наименование,
	|			ВложенныйЗапрос.ПредметСнабжения,
	|			ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|			ПО ВложенныйЗапрос.ПредметСнабжения = СпецификацииПредметовСнабжения.СоставляющаяЧасть
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ПредметСнабжения,
	|		ВложенныйЗапрос.Наименование,
	|		ВложенныйЗапрос.Обозначение,
	|		ВложенныйЗапрос.ДокументНаПоставку,
	|		ВложенныйЗапрос.ВозможностьИзготовления,
	|		ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения,
	|		ВложенныйЗапрос.ИмяФайлаКартинки,
	|		ВложенныйЗапрос.СрокИзготовления) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних КАК ЦеныПредметовСнабженияСрезПоследних
	|		ПО ВложенныйЗапрос.ПредметСнабжения = ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения
	|			И (ЦеныПредметовСнабженияСрезПоследних.ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внутренняя))
	|			И (ЦеныПредметовСнабженияСрезПоследних.Контрагент = &Поставщик)";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("Поставщик", Объект.Предмет);
	Запрос.УстановитьПараметр("День", Константы.ЕдиницаИзмеренияДень.Получить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ЕстьДанные = (ТаблицаЗапроса.Количество() > 0);
	
	Результат = Новый Структура;
	
	Для каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		
		Значение = ?(ЕстьДанные, ТаблицаЗапроса[0][Колонка.Имя], Неопределено);
		
		Результат.Вставить(Колонка.Имя, Значение);
		Результат.Вставить(Колонка.Имя + "БД", Значение);
		
	КонецЦикла;
	
	//характеристики
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Значение КАК Значение,
	|	ВложенныйЗапрос.Основная КАК Основная,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВложенныйЗапрос.Характеристика) КАК Наименование,
	|	ЕСТЬNULL(ОКЕИ.Код, """") КАК ЕдиницаИзмеренияКод,
	|	&ПредметСнабжения КАК ПредметСнабжения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБД,
	|	ВложенныйЗапрос.Значение КАК ЗначениеБД,
	|	ВложенныйЗапрос.Основная КАК ОсновнаяБД
	|ИЗ
	|	(ВЫБРАТЬ
	|		КаталогПредметовСнабженияХарактеристики.Характеристика КАК Характеристика,
	|		КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		КаталогПредметовСнабженияХарактеристики.Значение КАК Значение,
	|		КаталогПредметовСнабженияХарактеристики.Основная КАК Основная
	|	ИЗ
	|		Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|	ГДЕ
	|		КаталогПредметовСнабженияХарактеристики.Ссылка = &ПредметСнабжения) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОКЕИ КАК ОКЕИ
	|		ПО ВложенныйЗапрос.ЕдиницаИзмерения = ОКЕИ.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаХарактеристика = Объект.Характеристики.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаХарактеристика, Выборка);
		СтрокаХарактеристика.Идентификатор = ПредметСнабжения.УникальныйИдентификатор();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредметыСнабженияПередУдалением(Элемент, Отказ)
	
	Если Элементы.ПредметыСнабжения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПредыдущийИдентификатор = Элементы.ПредметыСнабжения.ТекущиеДанные.Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияПослеУдаления(Элемент)
	
	 УдалитьХарактеристикиПредметаСнабжения();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристикиПредметаСнабжения()
	
	Если Не ЗначениеЗаполнено(ПредыдущийИдентификатор) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ХарактеристикиПС = Объект.Характеристики.НайтиСтроки(Новый Структура("Идентификатор", ПредыдущийИдентификатор));
	
	Для каждого СтрокаХарактеристика Из ХарактеристикиПС Цикл
		
		Объект.Характеристики.Удалить(СтрокаХарактеристика);
		
	КонецЦикла;
	
	АналогиПС = Объект.Аналоги.НайтиСтроки(Новый Структура("Идентификатор", ПредыдущийИдентификатор));
	
	Для каждого СтрокаАналог Из АналогиПС Цикл
		
		Объект.Аналоги.Удалить(СтрокаАналог);
		
	КонецЦикла;
	
	АналогиПС = Объект.Аналоги.НайтиСтроки(Новый Структура("ИдентификаторАналога", ПредыдущийИдентификатор));
	
	Для каждого СтрокаАналог Из АналогиПС Цикл
		
		Объект.Аналоги.Удалить(СтрокаАналог);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияПриАктивизацииСтроки(Элемент)
	
	 ЗаполнитьХарактеристикиПредметаСнабжения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристикиПредметаСнабжения()
	
	Если Элементы.ХарактеристикиПредметаСнабжения.Видимость И Не Элементы.ПредметыСнабжения.ТекущиеДанные = Неопределено Тогда
		
		ХарактеристикиПредметаСнабжения.Очистить();
		
		МассивХарактеристик = Объект.Характеристики.НайтиСтроки(Новый Структура("Идентификатор", Элементы.ПредметыСнабжения.ТекущиеДанные.Идентификатор));
		
		Если МассивХарактеристик.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для каждого ЭлементМассиваХарактеристик Из МассивХарактеристик Цикл
			
			СтрокаХарактеристик = ХарактеристикиПредметаСнабжения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаХарактеристик, ЭлементМассиваХарактеристик);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПредметыСнабженияИмяФайлаКартинки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекДанные = Элементы.ПредметыСнабжения.ТекущиеДанные;
		ИмяКартинки = ТекДанные.ИмяФайлаКартинки;
		
		Если НЕ ИмяКартинки = "" И ЭтоАдресВременногоХранилища(ТекДанные.ХранилищеКартинкиВременное) Тогда
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекДанные.ХранилищеКартинкиВременное);
			Если НЕ ДвоичныеДанные = Неопределено Тогда
				ИмяФайла = КаталогВременныхФайлов() + ИмяКартинки;
				ДвоичныеДанные.Записать(ИмяФайла);
				ЗапуститьПриложение(ИмяФайла);			
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли Элементы.ПредметыСнабжения.ТолькоПросмотр Тогда
	
		ПоказатьЗначение(, Элементы.ПредметыСнабжения.ТекущиеДанные.ПредметСнабжения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаПроверкеПриИзменении(Элемент)
	
	УстановитьДоступностьПроверяющего(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.ГлавнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфоНадписьЗаголовокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьНастройкуОтложенногоСтарта();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ВыбратьИсполнителя(Элемент, Объект.Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Если ОткрытаФормаВыбораИсполнителя = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	Если ТипЗнч(Объект.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(Объект.Исполнитель) Тогда 
		
		Если ИспользуетсяСОбъектамиАдресации(Объект.Исполнитель) Тогда 
			
			КонтекстВыбора = "ИсполнительПриИзменении";
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", Объект.Исполнитель);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьПроверяющего(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОткрытаФормаВыбораИсполнителя = ТипЗнч(ВыбранноеЗначение) = Тип("Структура");
	Если ОткрытаФормаВыбораИсполнителя Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Исполнитель = ВыбранноеЗначение.РольИсполнителя;
		Объект.ОсновнойОбъектАдресации = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Объект.ДополнительныйОбъектАдресации = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БизнесПроцессыИЗадачиКлиент.ВыбратьИсполнителя(Элемент, Объект.Проверяющий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	Если ОткрытаФормаВыбораПроверяющего = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойОбъектАдресации = Неопределено;
	ДополнительныйОбъектАдресации = Неопределено;
	
	Если ТипЗнч(Объект.Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей") И ЗначениеЗаполнено(Объект.Проверяющий) Тогда
		
		Если ИспользуетсяСОбъектамиАдресации(Объект.Проверяющий) Тогда
			
			КонтекстВыбора = "ПроверяющийПриИзменении";
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РольИсполнителя", Объект.Проверяющий);
			ПараметрыФормы.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
			ПараметрыФормы.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
			
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОткрытаФормаВыбораПроверяющего = ТипЗнч(ВыбранноеЗначение) = Тип("Структура");
	Если ОткрытаФормаВыбораПроверяющего Тогда
		СтандартнаяОбработка = Ложь;
		Объект.Проверяющий = ВыбранноеЗначение.РольИсполнителя;
		Объект.ОсновнойОбъектАдресацииПроверяющий = ВыбранноеЗначение.ОсновнойОбъектАдресации;
		Объект.ДополнительныйОбъектАдресацииПроверяющий = ВыбранноеЗначение.ДополнительныйОбъектАдресации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БизнесПроцессыИЗадачиВызовСервера.СформироватьДанныеВыбораИсполнителя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	Если Объект.СрокИсполнения = НачалоДня(Объект.СрокИсполнения) Тогда
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СрокПроверкиПриИзменении(Элемент)
	Если Объект.СрокПроверки = НачалоДня(Объект.СрокПроверки) Тогда
		Объект.СрокПроверки = КонецДня(Объект.СрокПроверки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	ОбновитьДоступностьКомандОстановки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	ОбновитьДоступностьКомандОстановки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтложенныйСтарт(Команда)
	ОткрытьНастройкуОтложенногоСтарта();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	НачальныйПризнакСтарта = Объект.Стартован;
	
	УстановитьРеквизитыОтложенногоСтарта();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ИспользоватьПодчиненныеБизнесПроцессы = ПолучитьФункциональнуюОпцию("ИспользоватьПодчиненныеБизнесПроцессы");
	
	ПредметСтрокой = ОбщегоНазначения.ПредметСтрокой(Объект.Предмет);
	
	Если Объект.ГлавнаяЗадача = Неопределено Или Объект.ГлавнаяЗадача.Пустая() Тогда
		
		ГлавнаяЗадачаСтрокой = НСтр("ru = 'не задана'");
		
	Иначе
		
		ГлавнаяЗадачаСтрокой = Строка(Объект.ГлавнаяЗадача);
		
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормы(ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандОстановки()
	
	Если Объект.Завершен Тогда
		
		Элементы.ФормаОстановить.Доступность = Ложь;
		Элементы.ФормаПродолжить.Доступность = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен") Тогда
		
		Элементы.ФормаОстановить.Доступность = Ложь;
		Элементы.ФормаПродолжить.Доступность = Истина;
		
	Иначе
		
		Элементы.ФормаОстановить.Доступность = Истина;
		Элементы.ФормаПродолжить.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПроверяющего(Форма)
	
	ДоступностьПоля = Форма.Объект.НаПроверке;
	Форма.Элементы.ГруппаПроверяющий.Доступность = ДоступностьПоля;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяСОбъектамиАдресации(ПроверяемыйОбъект)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйОбъект, "ИспользуетсяСОбъектамиАдресации");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваЭлементовФормы(Форма)
	
	Если Форма.ТолькоПросмотр Тогда
		
		Форма.Элементы.ФормаОстановить.Видимость = Ложь;
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		Форма.Элементы.ФормаНастроитьОтложенныйСтарт.Видимость = Ложь;
		Форма.Элементы.ФормаЗаписать.Видимость = Ложь;
		Форма.Элементы.ФормаПродолжить.Видимость = Ложь;
		
	Иначе
		
		Форма.Элементы.СрокИсполненияВремя.Видимость = Форма.ИспользоватьДатуИВремяВСрокахЗадач;
		Форма.Элементы.СрокПроверкиВремя.Видимость = Форма.ИспользоватьДатуИВремяВСрокахЗадач;
		Форма.Элементы.Дата.Формат = ?(Форма.ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
		
		Форма.Элементы.Предмет.Гиперссылка = Форма.Объект.Предмет <> Неопределено И НЕ Форма.Объект.Предмет.Пустая();
		
		//Форма.Элементы.ФормаСтартИЗакрыть.Видимость = Не ОбъектСтартован(Форма);
		//Форма.Элементы.ФормаСтартИЗакрыть.КнопкаПоУмолчанию = Не ОбъектСтартован(Форма);
		Форма.Элементы.ФормаСтарт.Видимость = Не ОбъектСтартован(Форма); 
		Форма.Элементы.ФормаЗаписатьИЗакрыть.Видимость = ОбъектСтартован(Форма); 
		Форма.Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ОбъектСтартован(Форма);
		
		Форма.Элементы.ФормаНастроитьОтложенныйСтарт.Доступность = Не Форма.Объект.Стартован;
		
		Если Форма.Объект.ГлавнаяЗадача = Неопределено Или Форма.Объект.ГлавнаяЗадача.Пустая() Тогда
			Форма.Элементы.ГлавнаяЗадача.Гиперссылка = Ложь;
		КонецЕсли;
		
		Если Не Форма.ИспользоватьПодчиненныеБизнесПроцессы Тогда
			Форма.Элементы.ГлавнаяЗадача.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСвойстваГруппеСостояний(Форма);
	УстановитьДоступностьПроверяющего(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваГруппеСостояний(Форма)
	
	ОтображатьГруппу = Форма.Объект.Завершен Или ОбъектСтартован(Форма);
	Форма.Элементы.ГруппаСостояние.Видимость = ОтображатьГруппу;
	
	Если НЕ ОтображатьГруппу Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Высота = 1;
	
	Если Форма.Объект.Завершен Тогда
		ДатаЗавершенияСтрокой = ?(Форма.ИспользоватьДатуИВремяВСрокахЗадач, 
			Формат(Форма.Объект.ДатаЗавершения, "ДЛФ=DT"), Формат(Форма.Объект.ДатаЗавершения, "ДЛФ=D"));
		СтрокаТекста = ?(Форма.Объект.Выполнено, 
			НСтр("ru = 'Задание выполнено %1.'"), 
			НСтр("ru = 'Задание отменено %1.'"));
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаТекста, ДатаЗавершенияСтрокой);
		МассивСтрок.Добавить(ТекстСостояния);
		
		Для каждого Элемент Из Форма.Элементы Цикл
			Если ТипЗнч(Элемент) <> Тип("ПолеФормы") И ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда
				Продолжить;
			КонецЕсли;
			Элемент.ТолькоПросмотр = Истина;
		КонецЦикла;	
		
	ИначеЕсли Форма.Объект.Стартован Тогда
		ТекстСостояния = ?(Форма.ИзменятьЗаданияЗаднимЧислом, 
			НСтр("ru = 'Изменения формулировки, важности, автора, а также перенос сроков исполнения и проверки задания вступят в силу немедленно для ранее выданной задачи.'"), 
			НСтр("ru = 'Изменения формулировки, важности, автора, а также перенос сроков исполнения и проверки задания не будут отражены в ранее выданной задаче.'"));
		МассивСтрок.Добавить(ТекстСостояния);
		Высота = 2;
		
	ИначеЕсли Форма.Отложен Тогда
		ДатаОтложенногоСтартаСтрокой = ?(Форма.ИспользоватьДатуИВремяВСрокахЗадач, 
			Формат(Форма.ДатаОтложенногоСтарта, "ДЛФ=DT"), Формат(Форма.ДатаОтложенногоСтарта, "ДЛФ=D"));
		ТекстСостояния = НСтр("ru = 'Задание будет запущено'") + " ";
		МассивСтрок.Добавить(ТекстСостояния);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ДатаОтложенногоСтартаСтрокой,,,, "ОткрытьНастройкуОтложенногоСтарта"));
	КонецЕсли;

	Форма.ИнфоНадписьЗаголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	Форма.Элементы.ИнфоНадписьЗаголовок.МаксимальнаяВысота = Высота;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДатуЗавершенияОтложенногоПроцесса(ПроверяемыйОбъект, Отказ)

	Если Не ЗначениеЗаполнено(ПроверяемыйОбъект.СрокИсполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтложенногоСтарта = БизнесПроцессыИЗадачиСервер.ДатаОтложенногоСтартаПроцесса(ПроверяемыйОбъект.Ссылка);
	
	Если ПроверяемыйОбъект.СрокИсполнения < ДатаОтложенногоСтарта Тогда
		Ошибки = Неопределено;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.СрокИсполнения",
			НСтр("ru = 'Срок исполнения задания не может быть меньше даты отложенного старта.'"), "");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтложенногоСтарта()

	Если КлючевыеРеквизитыФормыЗаполнены() Тогда
		БизнесПроцессыИЗадачиКлиент.НастроитьОтложенныйСтарт(Объект.Ссылка, Объект.СрокИсполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция КлючевыеРеквизитыФормыЗаполнены()

	Если Объект.Стартован Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОшибкиПользователю = Неопределено;
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПользователю,
			"Объект.Исполнитель",
			НСтр("ru = 'Поле ""Исполнитель"" не заполнено.'"),
			"");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПользователю,
			"Объект.Наименование",
			НСтр("ru = 'Поле ""Задание"" не заполнено.'"),
			"");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			ОшибкиПользователю,
			"Объект.СрокИсполнения",
			НСтр("ru = 'Поле ""Срок"" исполнения не заполнено.'"),
			"");
	КонецЕсли;

	РеквизитыФормыНеЗаполнены = Ложь;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ОшибкиПользователю, РеквизитыФормыНеЗаполнены);
	
    Возврат Не РеквизитыФормыНеЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектСтартован(Форма)
	Возврат Форма.Объект.Стартован ИЛИ Форма.Отложен;
КонецФункции

&НаСервере
Процедура УстановитьРеквизитыОтложенногоСтарта()

	ДатаОтложенногоСтарта = БизнесПроцессыИЗадачиСервер.ДатаОтложенногоСтартаПроцесса(Объект.Ссылка);
	Отложен = (ДатаОтложенногоСтарта <> '00010101');
	
КонецПроцедуры
 
&НаКлиенте
Функция ВыгрузитьВФайл(ПутьКФайлу)
	
	Шаблон = ПолучитьМакетНаСервере("ШаблонExcel");
	
	Попытка
		
		Шаблон.Записать(ПутьКФайлу);
		
		Excel = Новый COMОбъект("Excel.Application");
		Книга = Excel.WorkBooks.Open(ПутьКФайлу);
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	ЛистПредметовСнабжения = Книга.WorkSheets(1);
	Сч = 3;
	
	ДатаНачала = ТекущаяДата();
	ВсегоСтрок = Объект.ПредметыСнабжения.Количество();
	
	Для каждого СтрокаПредметСнабжения Из Объект.ПредметыСнабжения Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Запись изделий в файл...", ДатаНачала, Сч - 2, ВсегоСтрок);
		
		ЛистПредметовСнабжения.Cells(Сч, 1).Value = Строка(СтрокаПредметСнабжения.ПредметСнабжения.УникальныйИдентификатор());
		ЛистПредметовСнабжения.Cells(Сч, 2).Value = Строка(СтрокаПредметСнабжения.Входимость) + " " + СтрокаПредметСнабжения.ВходимостьОбозначение;
		ЛистПредметовСнабжения.Cells(Сч, 3).Value = СтрокаПредметСнабжения.Наименование;
		ЛистПредметовСнабжения.Cells(Сч, 4).Value = СтрокаПредметСнабжения.Обозначение;
		ЛистПредметовСнабжения.Cells(Сч, 5).Value = СтрокаПредметСнабжения.ДокументНаПоставку;
		ЛистПредметовСнабжения.Cells(Сч, 7).Value = ?(СтрокаПредметСнабжения.СрокИзготовления > 0, СтрокаПредметСнабжения.СрокИзготовления, "");
		ЛистПредметовСнабжения.Cells(Сч, 10).Value = СтрокаПредметСнабжения.ПравилаУпаковкиТранспортировкиХранения;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	ЛистХарактеристик = Книга.WorkSheets(2);
	Сч = 3;
	
	ДатаНачала = ТекущаяДата();
	ВсегоСтрок = Объект.Характеристики.Количество();
	
	Для каждого СтрокаХарактеристика Из Объект.Характеристики Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Запись характеристик в файл...", ДатаНачала, Сч - 2, ВсегоСтрок);
		
		ЛистХарактеристик.Cells(Сч, 1).Value = Строка(СтрокаХарактеристика.ПредметСнабжения.УникальныйИдентификатор());
		ЛистХарактеристик.Cells(Сч, 2).Value = Строка(СтрокаХарактеристика.Характеристика);
		ЛистХарактеристик.Cells(Сч, 3).Value = Строка(СтрокаХарактеристика.ЕдиницаИзмерения);
		ЛистХарактеристик.Cells(Сч, 4).Value = СтрокаХарактеристика.ЕдиницаИзмеренияКод;
		ЛистХарактеристик.Cells(Сч, 5).Value = СтрокаХарактеристика.Значение;
		ЛистХарактеристик.Cells(Сч, 6).Value = ?(СтрокаХарактеристика.Основная, "Да", "");
		
		Сч = Сч + 1;
		
	КонецЦикла;
		
	Попытка
		
		Excel.Application.DisplayAlerts = False;
		Книга.SaveAs(ПутьКФайлу);
		Excel.Application.Quit();
		
	Исключение
		
	    ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("Документ Excel не записан: " + ОписаниеОшибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Excel = "";
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
		
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОтчетОбъект.ПолучитьМакет(ИмяМакета);
	
	Возврат Макет;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьРасширениеФайла(Знач ИмяФайла)
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	Возврат РасширениеФайла;
	
КонецФункции

&НаСервере
Процедура ДобавитьФайлВПрисоединенныеФайлы(ПутьКФайлу, АдресВоВременномХранилище)
	
	ПолныйФайл= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);
	ИмяБезРасширения   = ПолныйФайл.ИмяБезРасширения;
	РасширениеБезТочки = СтрЗаменить(ПолныйФайл.Расширение, ".", "");
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Объект.Ссылка);
	ПараметрыФайла.Вставить("Автор",                       ПараметрыСеанса.ТекущийПользователь);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",          РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзменения",              Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресВоВременномХранилище, "", "");
	
КонецПроцедуры

&НаСервере
Функция СтартоватьБизнецПроцесс()
	
	БПОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		
		БПОбъект.Записать();
		БПОбъект.Старт();
		
		ЗначениеВРеквизитФормы(БПОбъект, "Объект");
		
		Возврат Истина;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	             	
КонецФункции

&НаСервере
Функция ПолучитьИмяФайлаВыгрузки()
	
	Если Не ЗначениеЗаполнено(Объект.Номер) Тогда
		
		БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
		БизнесПроцессОбъект.УстановитьНовыйНомер();
		ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
		
	КонецЕсли;
	
	Возврат Объект.Номер + " " +Объект.Предмет.Код + ".xlsx";
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьВФайлИСтартовать(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Предмет) Тогда
		
		ПоказатьПредупреждение(, "Не указан поставщик!");
		Возврат;
		
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПолучитьИмяФайлаВыгрузки();
	
	ПутьКФайлу = КорректировкаДанныхСправочниковКлиент.ВыгрузитьФайлПоставщику(Объект.ПредметыСнабжения, Объект.Характеристики, ИмяФайлаВыгрузки);
	
	Если ПутьКФайлу = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Старт	
	Если СтартоватьБизнецПроцесс() Тогда
		
		Сообщить("Бизнес-процесс успешно стартовал. Файл для отправки поставщику сформирован по адресу " + ПутьКФайлу);
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаВыгрузитьВФайлИСтартовать.Видимость = Ложь;
		
		// Сохранение в присоединенные файлы
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу));
		
		// Добавляем присоединенный файл
		ДобавитьФайлВПрисоединенныеФайлы(ПутьКФайлу, АдресВоВременномХранилище);
		
		// Снимаем доступность у кнопки, чтобы ещё раз не выгружать
		Элементы.ФормаВыгрузитьВФайлИСтартовать.Доступность = Ложь;
		Элементы.ГруппаЭкспорт.Видимость = Ложь;
		
		Если Не Элементы.Найти("ФормаСтарт") = Неопределено Тогда
			
			КоманднаяПанель.ПодчиненныеЭлементы.ФормаСтарт.Видимость = Ложь;
			
		КонецЕсли;
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		
		Если Модифицированность Тогда
			
			Записать();
			
		КонецЕсли;
		
	Иначе
		
		УдалитьФайлы(ПутьКФайлу);
		Сообщить("Не удалось стартовать бизнес-процесс. Повторите попытку");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура Заполнить(Команда)
	
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект.Поставщик) И Объект.ВариантЗаполнения = 4 Тогда

		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Выберите поставщика!";
		Сообщение.Поле = "Поставщик";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
	Иначе	
	
		ДополнительныеПараметры = Новый Структура("ПредметыСнабжения, Характеристики, Аналоги, Поставщик, ВариантЗаполнения, Форма", 
				Объект.ПредметыСнабжения, Объект.Характеристики, Объект.Аналоги, Объект.Предмет, Объект.ВариантЗаполнения, ЭтаФорма);
		
		Если Объект.ПредметыСнабжения.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПродолжение", КорректировкаДанныхСправочниковКлиент, ДополнительныеПараметры), 
				"Табличная часть будет перезаполнена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			КорректировкаДанныхСправочниковКлиент.ЗаполнитьПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	Объект.Предмет = Поставщик;
	
	Объект.ПредметыСнабжения.Очистить();
	
	Объект.Характеристики.Очистить();
	
	//ДополнительныеПараметры = Новый Структура("ПредметыСнабжения, Характеристики, Поставщик", Объект.ПредметыСнабжения, Объект.Характеристики, Объект.Предмет);
	//
	//ПараметрыЗаполнения = КорректировкаДанныхСправочников.ЗаполнитьДанныеПредметовСнабжения(Неопределено, ДополнительныеПараметры);
	//
	//КопироватьДанныеФормы(ПараметрыЗаполнения.ПредметыСнабжения, Объект.ПредметыСнабжения);
	//КопироватьДанныеФормы(ПараметрыЗаполнения.Характеристики, Объект.Характеристики);
	//
	//ИнициализацияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеБД(Команда)
	
	 СравнитьСДаннымиБД();
	
КонецПроцедуры

&НаСервере
Процедура СравнитьСДаннымиБД()
	
	КорректировкаДанныхСправочников.ВыполнитьСравнениеСДаннымиБД(Объект.ПредметыСнабжения, Объект.Характеристики, Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоИзмененныеПриИзменении(Элемент)
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрок()
	
	ОтборСтрок = ?(ТолькоИзмененные, Новый ФиксированнаяСтруктура("ЕстьИзменения", Истина), Неопределено);
	
	Элементы.ПредметыСнабжения.ОтборСтрок = ОтборСтрок;
	Элементы.Характеристики.ОтборСтрок = ОтборСтрок;
	Элементы.ХарактеристикиПредметаСнабжения.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОтображатьХарактеристикиПредметаСнабженияПриИзменении(Элемент)
	
	Элементы.ГруппаХарактеристикиПредметаСнабжения.Видимость = ОтображатьХарактеристикиПредметаСнабжения;
	
	ЗаполнитьХарактеристикиПредметаСнабжения();
	
КонецПроцедуры

#КонецОбласти