#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) создается прикладным разработчиком
//  в модулях объектов, тип которых задан в одной из подписок на событие.
//  ЗаписатьНаборыЗначенийДоступа или ЗаписатьЗависимыеНаборыЗначенийДоступа.
//  В процедуре выполняется заполнение наборов значений доступа по свойствам объекта.
//  
// Параметры:
//  Таблица - ТаблицаЗначений - возвращаемая функцией ТаблицаНаборыЗначенийДоступа.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения для
	// - чтения:    Автор ИЛИ Исполнитель (с учетом адресации) ИЛИ Проверяющий (с учетом адресации)
	// - изменения: Автор.
	
	// Если предмет не задан (т.е. бизнес-процесс без основания),
	// тогда предмет не участвует в логике ограничения.
	
	// Чтение, Изменение: набор № 1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	// Чтение: набор № 2.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
	
	// Чтение: набор № 3.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 3;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = ГруппаИсполнителейЗадачПроверяющий;

	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Пользователи") Тогда
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 4;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
		
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 5;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадачПроверяющий;
		
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 6;
		Строка.ЗначениеДоступа = Предмет;
		
	ИначеЕсли ЗначениеЗаполнено(Предмет) И МодульУправлениеДоступом.ВозможноЗаполнитьНаборыЗначенийДоступа(Предмет) Тогда
		
		НаборыГруппыДоступаИсполнителей = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
		Строка = НаборыГруппыДоступаИсполнителей.Добавить();
		Строка.НомерНабора     = 1;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
		
		Строка = НаборыГруппыДоступаИсполнителей.Добавить();
		Строка.НомерНабора     = 2;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадачПроверяющий;
		
		НаборыПредмета = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
		УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Предмет, НаборыПредмета, Ссылка);
		НаборыПредмета = НаборыПредмета.Скопировать(НаборыПредмета.НайтиСтроки(Новый Структура("Чтение", Истина)));
		
		// Умножение наборов предмета на наборы группы доступа исполнителей.
		УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(НаборыПредмета, НаборыГруппыДоступаИсполнителей, Истина);
		
		// Добавление результата к таблице наборов.
		УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПредмета);
		
	Иначе // Без зависимости от предмета.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 4;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
		
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 5;
		Строка.Чтение          = Истина;
		Строка.ЗначениеДоступа = ГруппаИсполнителейЗадачПроверяющий;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Актуализирует значения реквизит невыполненных задач 
// согласно реквизитам бизнес-процесса Задание:
//   Важность, СрокИсполнения, Наименование и Автор.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач() Экспорт

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Ссылка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос( 
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.Выполнена = ЛОЖЬ");
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.СрокИсполнения = 
				?(ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Задание.ТочкиМаршрута.Выполнить, 
				СрокИсполненияЗадачиДляВыполнения(), СрокИсполненияЗадачиДляПроверки());
			ЗадачаОбъект.Наименование = 
				?(ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Задание.ТочкиМаршрута.Выполнить, 
				НаименованиеЗадачиДляВыполнения(), НаименованиеЗадачиДляПроверки());
			ЗадачаОбъект.Автор = Автор;
			// Не выполняем предварительную блокировку данных для редактирования, т.к.
			// Это изменение имеет более высокий приоритет над открытыми формами задач.
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса.

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Автор <> Неопределено И Не Автор.Пустая() Тогда
		АвторСтрокой = Строка(Автор);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ПроверитьПраваНаИзменениеСостоянияБизнесПроцесса(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ГлавнаяЗадача) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлавнаяЗадача, "БизнесПроцесс") = ЭтотОбъект.Ссылка Тогда
		
		ВызватьИсключение НСтр("ru = 'Собственная задача бизнес-процесса не может быть указана как главная задача.'");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ГруппаИсполнителейЗадач = ?(ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"), 
		БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации), 
		Исполнитель);
	ГруппаИсполнителейЗадачПроверяющий = ?(ТипЗнч(Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей"), 
		БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(Проверяющий, ОсновнойОбъектАдресацииПроверяющий, ДополнительныйОбъектАдресацииПроверяющий), 
		Проверяющий);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Предмет") <> Предмет Тогда
		ИзменитьПредметЗадач();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.АвторизованныйПользователь();
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		//НаПроверке = Истина;
		//Проверяющий = Пользователи.АвторизованныйПользователь();
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Пользователи") Тогда
			Исполнитель = ДанныеЗаполнения;
		Иначе
			// Для возможности автоподбора в незаполненном поле Исполнитель.
			Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") 
		И ДанныеЗаполнения <> Задачи.ЗадачаИсполнителя.ПустаяСсылка() Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Предмет = ДанныеЗаполнения;
		Иначе
			Предмет = ДанныеЗаполнения.Предмет;
		КонецЕсли;
		
	КонецЕсли;	
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если Не НаПроверке Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Проверяющий");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерИтерации = 0;
	Выполнено = Ложь;
	Подтверждено = Ложь;
	РезультатВыполнения = "";
	ДатаЗавершения = '00010101000000';
	Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута.

Процедура ВыполнитьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	НомерИтерации = НомерИтерации + 1;
	Записать();
	
	КартаБП = ПолучитьКартуМаршрута().ЭлементыГрафическойСхемы;
	
	ТочкиМаршрута = БизнесПроцессы.ЗапросНаАктуализациюКаталогаПоставщика.ТочкиМаршрута;
	
	// Устанавливаем реквизиты адресации и доп. реквизиты для каждой задачи.
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		
		Если ЗначениеЗаполнено(ТочкаМаршрутаБизнесПроцесса.РольИсполнителя) Тогда
			
			Задача.РольИсполнителя = ТочкаМаршрутаБизнесПроцесса.РольИсполнителя;
			Задача.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
			Задача.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
			Задача.Исполнитель = Неопределено;
			
		Иначе
			
			Задача.Исполнитель = ТочкаМаршрутаБизнесПроцесса.Исполнитель;
			
		КонецЕсли; 
		
		// + 26.01.2018 10:36:33 Базунов Д.А. Задача: 
		Задача.Наименование = ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;
		Задача.Описание = КартаБП[ТочкаМаршрутаБизнесПроцесса.Имя].Подсказка;
		// - 26.01.2018 10:36:33 Базунов Д.А. Задача:
		
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляВыполнения();
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
		Если ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.ОжиданиеПолученияОтвета Или ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.ПринятиеИзменений 
			Или ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.ОповещениеОбОтклонении Тогда
			
			Задача.Исполнитель = Автор;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Предмет = Неопределено Или Предмет.Пустая() Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	РезультатВыполнения = РезультатВыполненияТочкиВыполнить(Задача);
	Записать();
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаЗавершения = БизнесПроцессыИЗадачиСервер.ДатаЗавершенияБизнесПроцесса(Ссылка);
	Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьПредметЗадач()

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Ссылка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс");

		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.Предмет = Предмет;
			// Не выполняем предварительную блокировку данных для редактирования, т.к.
			// Это изменение имеет более высокий приоритет над открытыми формами задач.
			ЗадачаОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

Функция НаименованиеЗадачиДляВыполнения()
	
	Возврат Наименование;	
	
КонецФункции

Функция СрокИсполненияЗадачиДляВыполнения()
	
	Возврат СрокИсполнения;	
	
КонецФункции

Функция НаименованиеЗадачиДляПроверки()
	
	Возврат БизнесПроцессы.Задание.ТочкиМаршрута.Проверить.НаименованиеЗадачи + ": " + Наименование;
	
КонецФункции

Функция СрокИсполненияЗадачиДляПроверки()
	
	Возврат СрокПроверки;	
	
КонецФункции

Функция РезультатВыполненияТочкиВыполнить(Знач ЗадачаСсылка)
	
	СтрокаФормат = ?(ЗадачаСсылка.Выполнена,
	    НСтр("ru = '%1, %2 выполнил(а) задачу:
		           |%3
				   |
		           |%4
		           |'"),
		НСтр("ru = '%1, %2 отклонил(а) задачу:
		           |%3
				   |
		           |%4
		           |'"));
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель,ТочкаМаршрута");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, ЗадачаДанные.ДатаИсполнения, ЗадачаДанные.Исполнитель, ЗадачаДанные.ТочкаМаршрута.НаименованиеЗадачи, Комментарий);
	Возврат Результат;
	
КонецФункции

Функция РезультатВыполненияТочкиПроверить(Знач ЗадачаСсылка)  
	
	Если НЕ Подтверждено Тогда
		СтрокаФормат = НСтр("ru = '%1, %2 вернул(а) задачу на доработку:
			|%3
			|'");
	Иначе
		СтрокаФормат = ?(Выполнено,
			НСтр("ru = '%1, %2 подтвердил(а) выполнение задачи:
			           |%3
			           |'"),
			НСтр("ru = '%1, %2 подтвердил(а) отмену задачи:
			           |%3
			           |'"));
	КонецЕсли;
	
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, ЗадачаДанные.ДатаИсполнения, ЗадачаДанные.Исполнитель, Комментарий);
	Возврат Результат;

КонецФункции

Процедура ВариантыДальнейшихДействийОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Результат = ТочкаВыбораВарианта.Варианты[ПолучитьРезультатВыбора(БизнесПроцессы.ЗапросНаАктуализациюКаталогаПоставщика.ТочкиМаршрута.ОжиданиеПолученияОтвета)]; 
	
КонецПроцедуры

Процедура РезультатСогласованияИзмененийОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Результат = ТочкаВыбораВарианта.Варианты[ПолучитьРезультатВыбора(БизнесПроцессы.ЗапросНаАктуализациюКаталогаПоставщика.ТочкиМаршрута.СогласованиеИзменений)];
	
КонецПроцедуры

Функция ПолучитьРезультатВыбора(ТочкаМаршрута)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.ВыбранныйВариант КАК ВыбранныйВариант
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Выполнена
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ВыбранныйВариант;
	
КонецФункции

Процедура ПовторныйЗапросПоОтклоненнымПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	Если Не ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.ЗапросНаАктуализациюКаталогаПоставщика.ТочкиМаршрута.ПовторныйЗапросПоОтклоненным Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПовторныйЗапросПоОтклоненнымПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	ФормируемыйБизнесПроцесс = ФормируемыеБизнесПроцессы[0];
	
	ФормируемыйБизнесПроцесс.Наименование = "Запрос на актуализацию информации о предметах снабжения контрагенту";
	ФормируемыйБизнесПроцесс.Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
	ФормируемыйБизнесПроцесс.Дата = ТекущаяДата();
	ФормируемыйБизнесПроцесс.Автор = Автор;
	ФормируемыйБизнесПроцесс.АвторСтрокой = Строка(ФормируемыйБизнесПроцесс.Автор);
	ФормируемыйБизнесПроцесс.Исполнитель = Автор;
	ФормируемыйБизнесПроцесс.Предмет = Предмет;
	ФормируемыйБизнесПроцесс.Содержание =  "При старте бизнес-процесса будет сформирован файл для отправки поставщику и создана задача для обработки принятия ответа";
	ФормируемыйБизнесПроцесс.НаПроверке = Ложь;
	ФормируемыйБизнесПроцесс.Проверяющий = Неопределено;
	
	НеСогласованныеПредметыСнабжения = ПредметыСнабжения.НайтиСтроки(Новый Структура("Согласовано", Ложь));
	МассивИдентификаторов = Новый Массив;
	
	Для каждого СтрокаНеСогласованныйПредметСнабжения Из НеСогласованныеПредметыСнабжения Цикл
		
		СтрокаПредметСнабжения = ФормируемыйБизнесПроцесс.ПредметыСнабжения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредметСнабжения, СтрокаНеСогласованныйПредметСнабжения);
		МассивИдентификаторов.Добавить(СтрокаНеСогласованныйПредметСнабжения.Идентификатор);
		
	КонецЦикла;
	
	Для каждого СтрокаХарактеристика Из Характеристики Цикл
		
		Если Не МассивИдентификаторов.Найти(СтрокаХарактеристика.Идентификатор) = Неопределено Тогда 
		
			СтрокаХарактеристикаНовая = ФормируемыйБизнесПроцесс.Характеристики.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаХарактеристикаНовая, СтрокаХарактеристика); 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВариантПринятияИзмененийОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Результат = ТочкаВыбораВарианта.Варианты[ПолучитьРезультатВыбора(БизнесПроцессы.ЗапросНаАктуализациюКаталогаПоставщика.ТочкиМаршрута.ПринятиеИзменений)];
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли