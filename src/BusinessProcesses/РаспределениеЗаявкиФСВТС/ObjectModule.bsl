////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЗаполнитьОрганизацию(Организация)
	Для Каждого Строка Из ПредметыСнабжения Цикл
		Строка.Организация = Организация;
	КонецЦикла; // Для Каждого Строка Из ПредметыСнабжения Цикл	
КонецФункции // ЗаполнитьОрганизацию

Функция ОпределитьОсновногоИсполнителя(Исполнители)
	Если Исполнители.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; // Если Исполнители.Количество() = 0 Тогда 	
	Таблица 				= Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Организация");
	Таблица.Колонки.Добавить("Количество");
	Для Каждого Исполнитель Из Исполнители Цикл
		Строка 				= Таблица.Добавить();
		Строка.Организация 	= Исполнитель;
		Строка.Количество 	= 1;
	КонецЦикла; // Для Каждого Исполнитель Из Исполнители Цикл	
	Таблица.Свернуть("Организация", "Количество");
	Таблица.Сортировать("Количество Убыв");
	Возврат Таблица[0].Организация;
КонецФункции // ОпределитьОсновногоИсполнителя

Процедура РаспределитьПоИсполнителям() Экспорт
	// Первый шаг - назначение исполнителя исходя из проекта
	Исполнители = РегистрыСведений.ИсполнителиПоПроектам.ПолучитьИсполнителей(Документы.ЗаявкаФСВТС.ПолучитьПроекты(Заявка));
	Если Исполнители.Количество() > 0 Тогда
		ЗаполнитьОрганизацию(Исполнители[0]);
		Возврат;
	КонецЕсли; // Если Исполнители.Количество() > 0 Тогда
	
	// Получим производителей головных изделий
	Исполнители = Новый Массив;
	Для Каждого Строка Из ПредметыСнабжения Цикл
		Если Не ЗначениеЗаполнено(Строка.Изделие) Тогда
			Продолжить;
		КонецЕсли; // Если Не ЗначениеЗаполнено(Строка.Изделие) Тогда
		
		ИзделиеВерхнегоУровня = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПолучитьИзделиеВерхнегоУровня(Строка.Изделие);
		Если ИзделиеВерхнегоУровня = Неопределено Тогда
			Продолжить;
		КонецЕсли; // Если ИзделиеВерхнегоУровня = Неопределено Тогда
		
		Поставщики = Справочники.КаталогПредметовСнабжения.ПолучитьПоставщиков(ИзделиеВерхнегоУровня.Предметснабжения, Истина);
		Для Каждого Поставщик Из Поставщики Цикл
			Исполнители.Добавить(Поставщик);
		КонецЦикла; // Для Каждого Поставщик Из Поставщики Цикл
	КонецЦикла; // Для Каждого Строка Из ПредметыСнабжения Цикл	
	
	
	ОсновнойИсполнитель = ОпределитьОсновногоИсполнителя(Исполнители);
	Если ЗначениеЗаполнено(ОсновнойИсполнитель) Тогда
		ЗаполнитьОрганизацию(ОсновнойИсполнитель);
	Иначе
		ЗаполнитьОрганизацию(Константы.ОсновнаяОрганизация.Получить());
	КонецЕсли; // Если ЗначениеЗаполнено(ОсновнойИсполнитель) Тогда	
		
КонецПроцедуры // РаспределитьПоИсполнителям

Процедура СоздатьРаспределение(Заявка, Исполнитель, ВыборкаПоПредметамСнабжения)
	Распределение 				= Документы.РаспределениеЗаявки.СоздатьДокумент();
	Распределение.Дата 			= ТекущаяДата();
	Распределение.Заявка 		= Заявка;
	Распределение.Исполнитель 	= Исполнитель;
	Пока ВыборкаПоПредметамСнабжения.Следующий() Цикл
		Строка 					= Распределение.ПредметыСнабжения.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ВыборкаПоПредметамСнабжения);
	КонецЦикла; // Пока ВыборкаПоПредметамСнабжения.Следующий() Цикл
	Распределение.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры // СоздатьРаспределение

////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТОЧЕК МАРШРУТА

#Область ПроверкаСогласованияРаспределения

Процедура ПроверкаСогласованияРаспределенияПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = РаспределениеСогласовано;
КонецПроцедуры // ПроверкаСогласованияРаспределенияПроверкаУсловия

#КонецОбласти

#Область  НазначениеРегиональногоРуководителя

Процедура НазначениеРегиональногоРуководителяПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	Для Каждого Задача Из ФормируемыеЗадачи Цикл
		Задача.Автор 		= Автор;
		Задача.Важность 	= Перечисления.ВариантыВажностиЗадачи.Обычная;
		Задача.Предмет 		= Заявка;
		Задача.ДатаНачала	= ТекущаяДата();
		Задача.Описание		= "Необходимо указать регионального руководителя для распределения заявки по объектам";
	КонецЦикла; // Для Каждого Задача Из ФормируемыеЗадачи Цикл	
КонецПроцедуры // НазначениеРегиональногоРуководителяПриСозданииЗадач

Процедура НазначениеРегиональногоРуководителяПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если Не ЗначениеЗаполнено(РегиональныйРуководитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан региональный руководитель!",,,"РегиональныйРуководитель", Отказ);
	КонецЕсли; // Если Не ЗначениеЗаполнено(РегиональныйРуководитель) Тогда	
КонецПроцедуры // НазначениеРегиональногоРуководителяПередВыполнением

#КонецОбласти

#Область  НазначениеЭксперта

Процедура НазначениеЭкспертаПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	Задача 					= Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Наименование		= ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;
	Задача.БизнесПроцесс	= Ссылка;
	Задача.ТочкаМаршрута	= ТочкаМаршрутаБизнесПроцесса;
	Задача.ДатаНачала		= ТекущаяДата();
	Задача.Дата				= ТекущаяДата();
	Задача.Автор 			= Пользователи.ТекущийПользователь();
	Задача.Предмет 			= Заявка;       	
	Задача.Описание			= "Необходимо указать эксперта для распределения заявки по объектам";
	Задача.Исполнитель		= РегиональныйРуководитель;
	ФормируемыеЗадачи.Добавить(Задача);
КонецПроцедуры // НазначениеЭкспертаПередСозданиемЗадач

Процедура НазначениеЭкспертаПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если Не ЗначениеЗаполнено(Эксперт) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан эксперт!",,,"Эксперт", Отказ);
	КонецЕсли; // Если Не ЗначениеЗаполнено(РегиональныйРуководитель) Тогда	
КонецПроцедуры // НазначениеЭкспертаПередВыполнением

#КонецОбласти

#Область  РаспределениеПоИсполнителям

Процедура РаспределениеПоИсполнителямПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	Задача 					= Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Наименование		= ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;
	Задача.БизнесПроцесс	= Ссылка;
	Задача.ТочкаМаршрута	= ТочкаМаршрутаБизнесПроцесса;
	Задача.ДатаНачала		= ТекущаяДата();
	Задача.Дата				= ТекущаяДата();
	Задача.Автор 			= Пользователи.ТекущийПользователь();
	Задача.Предмет 			= Заявка;       	
	Задача.Описание			= "Необходимо распределить позиции по объектам-исполнителям";
	Задача.Исполнитель		= Эксперт;
	ФормируемыеЗадачи.Добавить(Задача);
	
	БизнесПроцесс 			= Ссылка.ПолучитьОбъект();
	БизнесПроцесс.ПредметыСнабжения.Загрузить(Заявка.ПредметыСнабжения.Выгрузить());
	РаспределитьПоИсполнителям();
	БизнесПроцесс.Записать();
КонецПроцедуры // РаспределениеПоИсполнителямПередСозданиемЗадач

Процедура РаспределениеПоИсполнителямПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Для Сч = 0 По ПредметыСнабжения.Количество() - 1 Цикл
		Если Не ЗначениеЗаполнено(ПредметыСнабжения[Сч].Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строка №" + (Сч + 1) + ": не указана организация!",,,"ПредметыСнабжения[" + Сч + "].Организация", Отказ);
		КонецЕсли; // Если Не ЗначениеЗаполнено(ПредметыСнабжения[Сч].Организация) Тогда		
	КонецЦикла; // Для Сч = 0 По ПредметыСнабжения.Количество() - 1 Цикл
КонецПроцедуры // РаспределениеПоИсполнителямПередВыполнением

Процедура РаспределениеПоИсполнителямПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	РаспределениеЗаявкиФСВТСПредметыСнабжения.Организация КАК Исполнитель,
	             	  |	РаспределениеЗаявкиФСВТСПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	             	  |	РаспределениеЗаявкиФСВТСПредметыСнабжения.Количество КАК Количество
	             	  |ИЗ
	             	  |	БизнесПроцесс.РаспределениеЗаявкиФСВТС.ПредметыСнабжения КАК РаспределениеЗаявкиФСВТСПредметыСнабжения
	             	  |ГДЕ
	             	  |	РаспределениеЗаявкиФСВТСПредметыСнабжения.Ссылка = &Ссылка
	             	  |ИТОГИ ПО
	             	  |	Исполнитель";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Исполнитель");
	НачатьТранзакцию();
	Попытка
		Пока ВыборкаОрганизация.Следующий() Цикл
			СоздатьРаспределение(Заявка, ВыборкаОрганизация.Исполнитель, ВыборкаОрганизация.Выбрать());
		КонецЦикла; // Пока ВыборкаОрганизация.Следующий() Цикл		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось создать распределение заявки: " + ОписаниеОшибки(),,,, Отказ);
	КонецПопытки;     
КонецПроцедуры // РаспределениеПоИсполнителямПриВыполнении

#КонецОбласти

#Область  СогласованиеРаспределения

Процедура СогласованиеРаспределенияПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	Для Каждого БизнесПроцесс Из ФормируемыеБизнесПроцессы Цикл
		БизнесПроцесс.Основание = Ссылка;
		БизнесПроцесс.Заявка 	= Заявка;
	КонецЦикла; // Для Каждого БизнесПроцесс Из ФормируемыеБизнесПроцессы Цикл	
КонецПроцедуры // СогласованиеРаспределенияПриСозданииВложенныхБизнесПроцессов

#КонецОбласти

#Область  РедактированиеРаспределения

Процедура РедактированиеРаспределенияПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	Задача 					= Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Наименование		= ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;
	Задача.БизнесПроцесс	= Ссылка;
	Задача.ТочкаМаршрута	= ТочкаМаршрутаБизнесПроцесса;
	Задача.ДатаНачала		= ТекущаяДата();
	Задача.Дата				= ТекущаяДата();
	Задача.Автор 			= Пользователи.ТекущийПользователь();
	Задача.Предмет 			= Заявка;       	
	Задача.Описание			= "Необходимо изменить распределение по объектам-исполнителям";
	Задача.Исполнитель		= Эксперт;
	ФормируемыеЗадачи.Добавить(Задача);
КонецПроцедуры // РедактированиеРаспределенияПередСозданиемЗадач

#КонецОбласти

#Область  ФормированиеДокументов

Процедура ФормированиеДокументовПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	СтандартнаяОбработка 	= Ложь;
	Задача 					= Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Наименование		= ТочкаМаршрутаБизнесПроцесса.НаименованиеЗадачи;
	Задача.БизнесПроцесс	= Ссылка;
	Задача.ТочкаМаршрута	= ТочкаМаршрутаБизнесПроцесса;
	Задача.ДатаНачала		= ТекущаяДата();
	Задача.Дата				= ТекущаяДата();
	Задача.Автор 			= Пользователи.ТекущийПользователь();
	Задача.Предмет 			= Заявка;       	
	Задача.Описание			= "Распределение согласовано. Сформируйте необходимые документы";
	Задача.Исполнитель		= Эксперт;
	ФормируемыеЗадачи.Добавить(Задача);
КонецПроцедуры // ФормированиеДокументовПередСозданиемЗадач

#КонецОбласти

////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ БИЗНЕС ПРОЦЕССА

Процедура ПередЗаписью(Отказ)
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли; // Если Не ЗначениеЗаполнено(Автор) Тогда
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Наименование = "Распределение заявки №" + Заявка.Номер 
												+ " от " 
												+ Формат(Заявка.Дата, "ДЛФ=DD")	
												+ "/"
												+ Заявка.Заказчик
												+ "/"
												+ Заявка.НомерЗаказчика;
	КонецЕсли; // Если Не ЗначениеЗаполнено(Наименование) Тогда	
КонецПроцедуры // ПередЗаписью



















