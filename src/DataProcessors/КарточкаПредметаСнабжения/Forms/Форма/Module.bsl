&НаСервере
Функция ПолучитьТаблицуПрименяемость(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Заказы.Владелец.Наименование КАК Проект,
	|	Заказы.Заказчик.Представление КАК Флот,
	|	Заказы.Ссылка.Представление КАК Корабль,
	|	Заказы.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ВЫРАЗИТЬ(ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии КАК СТРОКА(1000)) КАК ОписаниеИерархии,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Заказы КАК Заказы
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = Заказы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|		ПО (ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка)
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	Массив = Новый Массив;
	
	// Имена колонок
	Структура = Новый Структура;
	Структура.Вставить("Поле1", "Проект корабля");
	Структура.Вставить("Поле2", "Флот");
	Структура.Вставить("Поле3", "Название корабля Заказчика");
	Структура.Вставить("Поле4", "Заводской №");
	Структура.Вставить("Поле5", "Группа/Система/Изделие");
	Структура.Вставить("Поле6", "Количество в изделии");
	Структура.Вставить("Поле7", "Количество на корабле");
	Структура.Вставить("Поле8", "Количество в ЗИП-бортовой");
	Структура.Вставить("Поле9", "Количествов ЗИП-Б");
	Структура.Вставить("Поле10", "Количество в ЗИП-ДЭ");

	Массив.Добавить(Структура);
	
	Попытка
		ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Исключение
	    Возврат Массив;
	КонецПопытки;
	
	КолонкиТЗ = ТаблицаЗначений.Колонки;
	
	Для каждого СтрТЗ Из ТаблицаЗначений Цикл
		
		Структура = Новый Структура;
		
		Для каждого Колонка Из КолонкиТЗ Цикл
			Структура.Вставить(Колонка.Имя, СтрТЗ[Колонка.Имя]);
		КонецЦикла;
		Массив.Добавить(Структура);
		
	КонецЦикла; 
	
	Возврат Массив;
		
КонецФункции
 
&НаСервере
Функция ПолучитьОбщиеДанныеПС(ТекущаяСсылка = Неопределено)
	
	СписокЗначений = Новый СписокЗначений;
	
	Если ТекущаяСсылка = Неопределено Тогда
		Возврат СписокЗначений;
	КонецЕсли; 
	
	// Заголовки
	СписокЗначений.Добавить("Значение", 		"Наименование");
	
	СписокЗначений.Добавить(ТекущаяСсылка.НомерОСК, 				"№ в каталоге ОСК");
	СписокЗначений.Добавить(ТекущаяСсылка.Наименование, 			"Наименование предмета поставки");
	СписокЗначений.Добавить(Строка(ТекущаяСсылка.ЕдиницаИзмерения), "Единица измерения");
	СписокЗначений.Добавить(ТекущаяСсылка.Обозначение, 				"Обозначение");
	СписокЗначений.Добавить(ТекущаяСсылка.ДокументНаПоставку, 		"Документ на поставку");
	СписокЗначений.Добавить(Строка(ТекущаяСсылка.NSN),				"NSN");
	СписокЗначений.Добавить(Строка(ТекущаяСсылка.ЕКПС),				"Группа ЕКПС");
	СписокЗначений.Добавить(Лев(ТекущаяСсылка.ЕКПС, 2), 			"Класс ЕКПС");
	СписокЗначений.Добавить(ТекущаяСсылка.НоменклатурныйНомерВМФ, 	"Номенклатурный номер ВМФ");
	
	ИзготовителиИПоставщики = ТекущаяСсылка.ИзготовителиИПоставщики;
	
	Массив = Новый Массив;
	Массив.Добавить("Разработчик");
	Массив.Добавить("Поставщик");
	Массив.Добавить("Изготовитель");
	
	Для каждого ТипКонтрагента Из Массив Цикл
		Разработчики = ИзготовителиИПоставщики.НайтиСтроки(Новый Структура(ТипКонтрагента, Истина));
		Если Разработчики.Количество() > 0 Тогда
			Для каждого Строка Из Разработчики Цикл
				СписокЗначений.Добавить(Строка.Контрагент, ТипКонтрагента);
			КонецЦикла;
		Иначе
			СписокЗначений.Добавить("", ТипКонтрагента);
		КонецЕсли; 
	КонецЦикла; 
	
	СписокЗначений.Добавить(ТекущаяСсылка.ВерсияПрошивки, 	"Версия прошивки (ПО)");
	СписокЗначений.Добавить(ТекущаяСсылка.ДатаПрошивки, 	"Год выпуска прошивки (ПО)");
	
	
	Возврат СписокЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьТехническиеХарактеристики(ТекущаяСсылка = Неопределено)
	
	СписокЗначений = Новый СписокЗначений;
	
	Если ТекущаяСсылка = Неопределено Тогда
		Возврат СписокЗначений;
	КонецЕсли; 
	
	Массив = Новый Массив;
	
	Структура = Новый Структура;
	Структура.Вставить("Поле1", "Наименование характеристик");
	Структура.Вставить("Поле2", "Единица измерения");
	Структура.Вставить("Поле3", "Значение");
	Структура.Вставить("Поле4", "Признак основной характеристики");

	Массив.Добавить(Структура);
	
	Для каждого СтрХар Из ТекущаяСсылка.Характеристики Цикл
		
		Структура = Новый Структура;
		
		Структура.Вставить("Поле1", Строка(СтрХар.Характеристика));
		Структура.Вставить("Поле2", Строка(СтрХар.ЕдиницаИзмерения));
		Структура.Вставить("Поле3", СтрХар.Значение);
		Структура.Вставить("Поле4", Формат(СтрХар.ОтображениеДляЗаказчика, "БЛ=Нет; БИ=Да"));
		
		Массив.Добавить(Структура);
		
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция ПолучитьЦены(ТекущаяСсылка, ТипЦен = 1)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныПредметовСнабжения.Цена КАК Цена,
	|	ЦеныПредметовСнабжения.Валюта КАК Валюта,
	|	ГОД(ВЫБОР
	|			КОГДА ЦеныПредметовСнабжения.Регистратор ССЫЛКА Документ.Контракт
	|					ИЛИ ЦеныПредметовСнабжения.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковЦен
	|				ТОГДА ЦеныПредметовСнабжения.Период
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОНЕЦ) КАК Дата,
	|	ЦеныПредметовСнабжения.Количество КАК Количество,
	|	ЕстьNull(ЦеныПредметовСнабжения.Регистратор.Представление, """") КАК Регистратор,
	|	ЦеныПредметовСнабжения.Активность КАК Активность
	|ИЗ
	|	РегистрСведений.ЦеныПредметовСнабжения КАК ЦеныПредметовСнабжения
	|ГДЕ
	|	ЦеныПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|	И ЦеныПредметовСнабжения.ТипЦены = &ТипЦены";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ТекущаяСсылка);
	Если ТипЦен = 1 Тогда
		Запрос.УстановитьПараметр("ТипЦены", Перечисления.ТипыЦен.Внутренняя);
	Иначе
		Запрос.УстановитьПараметр("ТипЦены", Перечисления.ТипыЦен.Внешняя);
	КонецЕсли; 
	
	Массив = Новый Массив;
	
	Структура = Новый Структура;
	Если ТипЦен = 1 Тогда
		Структура.Вставить("Поле1", "Цена внутренняя");
		Структура.Вставить("Поле2", "Валюта внутренней цены");
		Структура.Вставить("Поле3", "Год внутренней цены");
		Структура.Вставить("Поле4", "Количество единиц в поставке для указанной внутренней цены	число");
		Структура.Вставить("Поле5", "Ссылка на документ внутренней цены");
	Иначе
		Структура.Вставить("Поле1", "Цена внешняя");
		Структура.Вставить("Поле2", "Валюта внешней цены");
		Структура.Вставить("Поле3", "Год внешней цены");
		Структура.Вставить("Поле4", "Количество единиц в поставке для указанной внутренней цены	число");
		Структура.Вставить("Поле5", "Ссылка на документ внутренней цены");
		Структура.Вставить("Поле6", "Статус Записи");
	КонецЕсли;
	
	Массив.Добавить(Структура);
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныПредметовСнабжения) Тогда
		Возврат Массив;
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Структура.Вставить("Поле1", Выборка.Цена);
		Структура.Вставить("Поле2", Строка(Выборка.Валюта));
		Структура.Вставить("Поле3", Выборка.Дата);
		Структура.Вставить("Поле4", Выборка.Количество);
		Структура.Вставить("Поле5", Строка(Выборка.Регистратор));
		Если НЕ ТипЦен = 1 Тогда
			Структура.Вставить("Поле6", Выборка.Активность);
		Иначе
			Структура.Вставить("Поле6", "");
		КонецЕсли;
		Массив.Добавить(Структура);
		
	КонецЦикла;  

	Возврат Массив;
	
КонецФункции

&НаСервере
Функция ПолучитьАналоги(ТекущаяСсылка)
	
	СписокЗначений = Новый СписокЗначений;
	
	Если ТекущаяСсылка = Неопределено Тогда
		Возврат СписокЗначений;
	КонецЕсли; 
	
	Массив = Новый Массив;
	
	Структура = Новый Структура;
	Структура.Вставить("Поле1", "Аналог");
	Структура.Вставить("Поле2", "ТипЗамены");

	Массив.Добавить(Структура);
	
	Для каждого СтрХар Из ТекущаяСсылка.Аналоги Цикл
		
		Структура = Новый Структура;
		
		Структура.Вставить("Поле1", Строка(СтрХар.Аналог));
		Структура.Вставить("Поле2", Строка(СтрХар.ТипЗамены));
		
		Массив.Добавить(Структура);
		
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции
 
&НаСервере
Функция ПолучитьРемонтИМодернизацию(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РемонтИМодернизацияЗаказов.ВидРемонта КАК ВидРемонта,
	|	РемонтИМодернизацияЗаказов.ДатаНачала КАК ДатаНачала,
	|	РемонтИМодернизацияЗаказов.ДатаОкончания КАК ДатаОкончания,
	|	РемонтИМодернизацияЗаказов.ОбъемРабот КАК ОбъемРабот,
	|	РемонтИМодернизацияЗаказов.Исполнитель КАК Исполнитель,
	|	РемонтИМодернизацияЗаказов.Заказ КАК Заказ
	|ИЗ
	|	РегистрСведений.РемонтИМодернизацияЗаказов КАК РемонтИМодернизацияЗаказов
	|ГДЕ
	|	РемонтИМодернизацияЗаказов.Заказ В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец
	|			ИЗ
	|				Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|			ГДЕ
	|				СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения)";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	Массив = Новый Массив;
	Структура = Новый Структура;
	Структура.Вставить("Поле1", "Вид проведенного ремонта с указанием основных работ");
	Структура.Вставить("Поле2", "Завод-проводивший ремонт");
	Структура.Вставить("Поле3", "Дата начала");
	Структура.Вставить("Поле4", "Дата окончания");
	
	Массив.Добавить(Структура);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
	    Возврат Массив;
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		
		Структура = Новый Структура;
		Структура.Вставить("Поле1", Строка(Выборка.ВидРемонта));
		Структура.Вставить("Поле2", Строка(Выборка.Исполнитель));
		Структура.Вставить("Поле3", Выборка.ДатаНачала);
		Структура.Вставить("Поле4", Выборка.ДатаОкончания);
		Массив.Добавить(Структура);
		
	КонецЦикла;  
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция ПолучитьРеквизит(Ссылка, Имя="")
	
	Рез	= "";
	Выполнить("Рез = Ссылка."+Имя);
	Возврат Рез;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеНАТО(ТекущаяСсылка = Неопределено)
	
	СписокЗначений = Новый СписокЗначений;
	
	Если ТекущаяСсылка = Неопределено Тогда
		Возврат СписокЗначений;
	КонецЕсли; 
	Если НЕ ТипЗнч(ТекущаяСсылка.NSN) = Тип("СправочникСсылка.ПредметыСнабженияНАТО") Тогда
		Возврат СписокЗначений;
	КонецЕсли; 
	
	// + Заголовок
	СписокЗначений.Добавить("Значение",	"Наименование");
	// -
	
	СписокЗначений.Добавить(Строка(ТекущаяСсылка.NSN.КодNSN),	"NSN");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.CIN, 				"CIN");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.DATE_CREA, 		"ДатаСоздания");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.DATE_ASSI, 		"ДатаПрисвоения");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.DATE_CANC, 		"ДатаОтмены");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.Код,				"INC");
	СписокЗначений.Добавить("", 								"Утвержденное наименование ENG (ACodP-3)");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.AIN, 	 			"Утвержденное наименование Перевод RU (ACodP-3)");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.TIIC,				"TIIC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RPDMRC,			"RPDMRC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.NSG,				"NSG");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.NSC,				"NSC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.CODIFIED_BY,		"Кодификатор");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RN,				"Обозначение RU");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RN_TRANSLIT, 		"Обозначение ТРАНСЛИТ");
	
	//ИзготовителиИПоставщики = ТекущаяСсылка.NSN.ИзготовителиИПоставщики;
	
	//Массив = Новый Массив;
	//Массив.Добавить("Поставщик");
	//
	//Для каждого ТипКонтрагента Из Массив Цикл
	//	ТаблПоставщиков = ИзготовителиИПоставщики.НайтиСтроки(Новый Структура(ТипКонтрагента, Истина));
	//	Если ТаблПоставщиков.Количество() > 0 Тогда
	//		Для каждого Строка Из ТаблПоставщиков Цикл
	//			СписокЗначений.Добавить(Строка.Контрагент.КодCAGE,		"NCAGE");
	//			СписокЗначений.Добавить(Строка.Контрагент.Наименование,	"Организация РУС");
	//			СписокЗначений.Добавить(ОбщиеФункцииСервер.ТранслитироватьРусВАнг(Строка.Контрагент.Наименование),	"Организация ТРАНСЛИТ");
	//			СписокЗначений.Добавить(Строка.Контрагент.ОКПО,			"ОКПО");
	//		КонецЦикла;
	//	Иначе
	
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.NCAGE,	"NCAGE");
	СписокЗначений.Добавить("",	"Организация РУС");
	СписокЗначений.Добавить("",	"Организация ТРАНСЛИТ");
	СписокЗначений.Добавить("",	"ОКПО");
	
	//	КонецЕсли; 
	//КонецЦикла; 
	
	СписокЗначений.Добавить("",			"Заводское название РУС");
	СписокЗначений.Добавить("",			"Заводское название ТРАНСЛИТ");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RNCC,			"RNCC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RNVC,			"RNVC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.DAC,			"DAC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RNJC,			"RNJC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RNSC,			"RNSC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RNFC,			"RNFC");
	СписокЗначений.Добавить(ТекущаяСсылка.NSN.RNAAC,		"RNAAC");
	
	Возврат СписокЗначений;
	
КонецФункции

// Пока не используется
&НаСервере
Функция ПолучитьДанныеИНКАТ(ТекущаяСсылка)
	
	//СписокЗначений = Новый СписокЗначений;
	//
	//Если ТекущаяСсылка = Неопределено Тогда
	//	Возврат СписокЗначений;
	//КонецЕсли; 
	//
	//СписокЗначений.Добавить(ТекущаяСсылка.Код, 				"Уникод изделия/ItemCode");
	//СписокЗначений.Добавить(ТекущаяСсылка.Наименование, 	"Наименование изделия/ItemDesc (RU)");
	//СписокЗначений.Добавить(ТекущаяСсылка.ЕдиницаИзмерения, "Код единицы измерения/ ItemDeno");
	//СписокЗначений.Добавить(ТекущаяСсылка.СрокХранения, 	"Срок хранения/ MonthsShelfLife");
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСостава(ТекущаяСсылка = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПС.Количество КАК Количество,
	|	СпецификацииПС.НомерПозиции КАК НомерПозиции,
	|	СпецификацииПС.Тип КАК Тип,
	|	СпецификацииПС.ПричинаВыбораДляЗИП КАК ПричинаВыбораДляЗИП,
	|	СпецификацииПС.СоставляющаяЧасть.NSN КАК СоставляющаяЧастьNSN,
	|	СпецификацииПС.СоставляющаяЧасть.ЕКПС КАК СоставляющаяЧастьЕКПС,
	|	СпецификацииПС.СоставляющаяЧасть.Обозначение КАК СоставляющаяЧастьОбозначение,
	|	СпецификацииПС.СоставляющаяЧасть.ДокументНаПоставку КАК СоставляющаяЧастьДокументНаПоставку,
	|	СпецификацииПС.СоставляющаяЧасть.ФНН КАК СоставляющаяЧастьФНН,
	|	СпецификацииПС.СоставляющаяЧасть.НоменклатурныйНомерВМФ КАК СоставляющаяЧастьНоменклатурныйНомерВМФ,
	|	СпецификацииПС.ОбозначениеСНК КАК ОбозначениеСНК
	|ИЗ
	|	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	|ГДЕ
	|	СпецификацииПС.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ТекущаяСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Массив = Новый Массив;
	
	Структура = Новый Структура;
	Структура.Вставить("Поле1",  "Обозначение");
	Структура.Вставить("Поле2",  "ФНН");
	Структура.Вставить("Поле3",  "NSN");
	Структура.Вставить("Поле4",  "Группа ЕКПС");
	Структура.Вставить("Поле5",  "Класс ЕКПС");
	Структура.Вставить("Поле7",  "Номенклатурный номер ВМФ (Юпитер-СТО)");
	Структура.Вставить("Поле8",  "Обозначение позиции изделия утвержденному наименованию");
	//Структура.Вставить("Поле9",  "Номер позиции на иллюстрации изделия");
	Структура.Вставить("Поле10", "Чертеж иллюстрации изделия");
	Структура.Вставить("Поле11", "Порядковый номер записи");
	Структура.Вставить("Поле12", "Причина выбора (как ЗИП)");
	Структура.Вставить("Поле13", "Количество на сборочную единицу");
	//Структура.Вставить("Поле14", "Группа");

	Чертеж = ТекущаяСсылка.ДокументПоСтруктуре;
	
	Массив.Добавить(Структура);
	
	Пока Выборка.Следующий() Цикл
			
		Структура = Новый Структура;
		
		Структура.Вставить("Поле1",  Выборка.СоставляющаяЧастьОбозначение);
		Структура.Вставить("Поле2",  Выборка.СоставляющаяЧастьФНН);
		Структура.Вставить("Поле3",  Выборка.СоставляющаяЧастьNSN);
		Структура.Вставить("Поле4",  Строка(Выборка.СоставляющаяЧастьЕКПС.Родитель));
		Структура.Вставить("Поле5",  Строка(Выборка.СоставляющаяЧастьЕКПС));
		Структура.Вставить("Поле7",  Выборка.СоставляющаяЧастьНоменклатурныйНомерВМФ);
		Структура.Вставить("Поле8",  Выборка.ОбозначениеСНК);
		//Структура.Вставить("Поле9",  Выборка.Номер);
		Структура.Вставить("Поле10", Чертеж);
		Структура.Вставить("Поле11", Выборка.НомерПозиции);
		Структура.Вставить("Поле12", Строка(Выборка.ПричинаВыбораДляЗИП));
		Структура.Вставить("Поле13", Выборка.Количество);
		
		Массив.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции
 
&НаСервере
Функция МаксимальнаяШирина(СтароеЗначение, НовоеЗначение="")
	
	Если СтароеЗначение = Неопределено Тогда
		СтароеЗначение = 0;
	КонецЕсли; 
	
	//СтароеЗначение = СтрДлина(СокрЛП(Строка(СтароеЗначение)));
	НоваяШирина  = СтрДлина(СокрЛП(Строка(НовоеЗначение)));
	
	Если НоваяШирина >= СтароеЗначение Тогда
		Возврат НоваяШирина;
	КонецЕсли; 
	
	Если НоваяШирина >= 150 Тогда
		Возврат 150;
	КонецЕсли; 
		
	Возврат СтароеЗначение;
	
КонецФункции

// Формирование файла
&НаКлиенте
Процедура ВывестиПорциюНаЛист(МассивСтруктур, Лист, ТекстСообщения)
	
	СчетчикСтрок = 1;
	
	СтруктураШирина = Новый Структура; 
	ПерваяСтрока = Истина;
	
	ВсегоСтрок = МассивСтруктур.Количество();
	ДатаНачала = ТекущаяДата();
	
	Для каждого Элемент Из МассивСтруктур Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние(ТекстСообщения, ДатаНачала, СчетчикСтрок, ВсегоСтрок);
		
		СчКолонок=1;
		
		Для каждого ПодЭлемент Из Элемент Цикл
			
			Если ТипЗнч(ПодЭлемент.Значение) = Тип("Строка") Тогда
				
				Лист.Cells(СчетчикСтрок, СчКолонок).NumberFormatLocal = "@";
				
			КонецЕсли;
			
			Лист.Cells(СчетчикСтрок, СчКолонок).Value = ПодЭлемент.Значение;
			Лист.Cells(СчетчикСтрок, СчКолонок).Borders.Linestyle = 1;
			
			ПредШирина = ?(СтруктураШирина.Свойство("Кол"+Строка(СчКолонок)), СтруктураШирина["Кол"+Строка(СчКолонок)], 0);
			СтруктураШирина.Вставить("Кол"+Строка(СчКолонок), МаксимальнаяШирина(ПредШирина, ПодЭлемент.Значение));
			
			Если ПерваяСтрока Тогда
				
				Лист.Cells(СчетчикСтрок, СчКолонок).Font.Bold = 1;
				
			КонецЕсли;
			
			СчКолонок = СчКолонок + 1;
			
		КонецЦикла;
		
		СчетчикСтрок = СчетчикСтрок + 1;
		ПерваяСтрока = Ложь;
		
	КонецЦикла;
	
	Для каждого Стр Из СтруктураШирина Цикл
		
		Лист.Columns(Число(СтрЗаменить(Стр.Ключ, "Кол",""))).ColumnWidth = Стр.Значение;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВЭксель()
	
	//Создаем COM-объект для работы с Excel
	ОбъектExcel = Новый COMОбъект("Excel.Application");
	
	Книга = ОбъектExcel.WorkBooks.Add();
	
	КоличествоЛистов = Книга.Sheets.Count - 1;
	Для инд = 1 По КоличествоЛистов Цикл
		Книга.Sheets(инд).delete();
	КонецЦикла; 
	
	// Общие
	Лист = Книга.WorkSheets(1);
	Лист.Name = "Общие данные предмета поставки";
	
	СчетчикСтрок = 1;
	
	ОбщиеДанные = ПолучитьОбщиеДанныеПС(ПредметСнабжения);
	
	Сч = 1;
	ВсегоСтрок = ОбщиеДанные.Количество();
	ДатаНачала = ТекущаяДата();
	
	Для каждого Элемент Из ОбщиеДанные Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выводятся общие данные...", ДатаНачала, Сч, ВсегоСтрок);
		
		Лист.Cells(СчетчикСтрок, 1).Value = Элемент.Представление;
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			Лист.Cells(СчетчикСтрок, 2).NumberFormatLocal = "@";
		КонецЕсли; 
		Лист.Cells(СчетчикСтрок, 2).Value = Строка(Элемент.Значение);
		Лист.Cells(СчетчикСтрок, 1).Borders.Linestyle = 1;
		Лист.Cells(СчетчикСтрок, 2).Borders.Linestyle = 1;
		СчетчикСтрок = СчетчикСтрок + 1;
		Ширина1 = МаксимальнаяШирина(Ширина1, Элемент.Представление);
		Ширина2 = МаксимальнаяШирина(Ширина2, Элемент.Значение);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Лист.Columns(1).ColumnWidth = Ширина1;
	Лист.Columns(2).ColumnWidth = Ширина2;
	Лист.Cells(1,1).Font.Bold = 1;
	Лист.Cells(1,2).Font.Bold = 1;
	
	// Применяемость
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "Применяемость";

	ВывестиПорциюНаЛист(ПолучитьТаблицуПрименяемость(ПредметСнабжения), Лист, "Выводится применяемость...");
	
	// Характеристики
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "Технические характеристики";
	
	ВывестиПорциюНаЛист(ПолучитьТехническиеХарактеристики(ПредметСнабжения), Лист, "Выводятся технические характеристики...");
	
	// Информация о правилах упаковки, транспортировки и хранении ЗИП   и ТНВЭД ?
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "Правилах упаковки, транспорт.";
	
	// + Заголовки
	Лист.Cells(1, 1).Value = "Правила упаковки, транспортировки, хранения";
	Лист.Cells(2, 1).Value = "Код ТНВЭД";
	Лист.Cells(1, 1).Font.Bold = 1;
	Лист.Cells(2, 1).Font.Bold = 1;
	// -
	Лист.Cells(1, 2).Value = ПолучитьРеквизит(ПредметСнабжения, "ПравилаУпаковкиТранспортировкиХранения");
	Лист.Cells(2, 2).Value = ПолучитьРеквизит(ПредметСнабжения, "ТНВЭД.Код");
	Лист.Cells(1, 2).Borders.Linestyle = 1;
	Лист.Cells(2, 2).Borders.Linestyle = 1;
	Лист.Columns(1).ColumnWidth = 50;
	Лист.Columns(2).ColumnWidth = 100;

	
	// Цены внешние
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "Цена внутренняя";
	
	ВывестиПорциюНаЛист(ПолучитьЦены(ПредметСнабжения, 1), Лист, "Выводятся внутренние цены...");
	
	// Цены внешние
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "Цена внешняя";
	
	ВывестиПорциюНаЛист(ПолучитьЦены(ПредметСнабжения, 0), Лист, "Выводятся внешние цены...");	

	// Аналоги
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "Аналоги";
	
	ВывестиПорциюНаЛист(ПолучитьАналоги(ПредметСнабжения), Лист, "Выводятся аналоги...");	
	
	// Ремонт и модернизация
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "Ремонт и модернизация";
	
	ВывестиПорциюНаЛист(ПолучитьРемонтИМодернизацию(ПредметСнабжения), Лист, "Выводится ремонт и модернизация...");	
	
	// Нато
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "НАТО";
	
	ДанныеНАТО = ПолучитьДанныеНАТО(ПредметСнабжения);	
	СчетчикСтрок = 1; 
	ПерваяСтрока = Истина;
	ВсегоСтрок = ДанныеНАТО.Количество();
	ДатаНачала = ТекущаяДата();
	
	Для каждого Элемент Из ДанныеНАТО Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выводятся данные НАТО...", ДатаНачала, СчетчикСтрок, ВсегоСтрок);
		
		Если ПерваяСтрока Тогда
			
			Лист.Cells(СчетчикСтрок,1).Font.Bold = 1;
			Лист.Cells(СчетчикСтрок,2).Font.Bold = 1;
			ПерваяСтрока = Ложь;
			
		КонецЕсли;
		
		Лист.Cells(СчетчикСтрок, 1).Value = Элемент.Представление;
		
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			
			Лист.Cells(СчетчикСтрок, 2).NumberFormatLocal = "@";
			
		КонецЕсли;
		
		Лист.Cells(СчетчикСтрок, 2).Value = Строка(Элемент.Значение);
		Лист.Cells(СчетчикСтрок, 1).Borders.Linestyle = 1;
		Лист.Cells(СчетчикСтрок, 2).Borders.Linestyle = 1;
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		Ширина1 = МаксимальнаяШирина(Ширина1, Элемент.Представление);
		Ширина2 = МаксимальнаяШирина(Ширина2, Элемент.Значение);
		
	КонецЦикла;
	
	Лист.Columns(1).ColumnWidth = Ширина1;
	Лист.Columns(2).ColumnWidth = Ширина2;
	
	// Состав
	Лист = Книга.WorkSheets().Add(, Лист);
	Лист.Name = "Состав";
	
	ВывестиПорциюНаЛист(ПолучитьДанныеСостава(ПредметСнабжения), Лист, "Выводится состав...");	
		
	Попытка
		
		ОбъектExcel.Application.DisplayAlerts = False;
		ОбъектExcel.Visible = 1;
		//Книга.SaveAs(ИмяФайла);
		//ОбъектExcel.Application.Quit();
		
	Исключение
		
	    ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("Документ Эксель не записан: " + ОписаниеОшибки);
		
	КонецПопытки;
	
	ОбъектExcel = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКарточку(Команда)
	
	Если ПредметСнабжения.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаписатьВЭксель();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПредметСнабжения") Тогда
		
		ПредметСнабжения = Параметры.ПредметСнабжения;
		СформироватьБезОткрытия = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СформироватьБезОткрытия Тогда
		ЗаписатьВЭксель();
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры
