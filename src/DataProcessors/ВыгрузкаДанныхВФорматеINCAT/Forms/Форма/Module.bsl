Перем МассивПредметовСнабжения;

#Область Выгрузка

//функция выполняет предварительную проверку наличия кодов INCAT (либо NSN/ФНН) у выгрухаемых предметов снабжения
//возвращает истина, если предметов снабжения с пустыми кодами нет, если есть - ложь
&НаСервере
Функция ПроверитьНаличиеКодовINCAT()
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения
	|ПОМЕСТИТЬ втСтруктураЗаказа
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Корабль
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втСтруктураЗаказа.ПредметСнабжения КАК ПредметСнабжения
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КаталогПредметовСнабженияАналоги.Аналог
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.Аналоги КАК КаталогПредметовСнабженияАналоги
	|		ПО втСтруктураЗаказа.ПредметСнабжения = КаталогПредметовСнабженияАналоги.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ЗИП
	|ИЗ
	|	РегистрСведений.ЗИПТребуемыеДляТОПредметовСнабжения КАК ЗИПТребуемыеДляТОПредметовСнабжения
	|ГДЕ
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ПредметСнабжения В
	|			(ВЫБРАТЬ
	|				втСтруктураЗаказа.ПредметСнабжения
	|			ИЗ
	|				втСтруктураЗаказа КАК втСтруктураЗаказа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО втПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|КаталогПредметовСнабжения.INCAT = """"";
	Запрос.УстановитьПараметр("Корабль", Корабль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПредметыСнабжения.Загрузить(РезультатЗапроса.Выгрузить());
	
	Возврат Ложь;
	
КонецФункции

//процедура осуществляет вызов формирования файла в формате INCAT и его сохранение
&НаКлиенте
Процедура ВыполнитьВыгрузку()
	
	ИмяФайла = СтрЗаменить(Строка(Корабль), """", "") + ".accdb"; 
	
	ФайлВыгрузки = СформироватьФайлВыгрузки(ИмяФайла);
	
	Если ФайлВыгрузки = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
	
		ФайлВыгрузки.Записать(КаталогВыгрузки + "\" + ИмяФайла);
		
	Исключение
		
		Сообщить("Не удалось сохранить файл выгрузки на диск " + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		
	КонецПопытки;
	
КонецПроцедуры

//функция формирует файл выгрузки на сервере и возращает его на клиент в виде двоичных данных
&НаСервере
Функция СформироватьФайлВыгрузки(ИмяФайла)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + ИмяФайла; 
	
	ШаблонБДINCAT = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ШаблонБДINCAT");
	
	Попытка
	
		ШаблонБДINCAT.Записать(ИмяВременногоФайла);
		
	Исключение
		
		Сообщить("Не удалось сохранить шаблон БД на диск" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецПопытки;
		
	Соединение = Новый COMОбъект("ADODB.Connection");
	
	Попытка
		
		Соединение.Open("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" + ИмяВременногоФайла + ";");
		
	Исключение
		
		Сообщить("Не удалось подключиться к временному файлу БД " + Символы.ПС + ОписаниеОшибки());
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат Неопределено;
		
	КонецПопытки;
	
	РезультатЗаполнения = ЗаполнитьБазуINCAT(Соединение);
	
	Соединение.Close();
	Соединение = Неопределено;
	
	Если РезультатЗаполнения Тогда
		
		ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Возврат ФайлВыгрузки;
		
	Иначе
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции

//функция заполняет базу INCAT данными БД 1С
&НаСервере
Функция ЗаполнитьБазуINCAT(Соединение)
	
	Запрос = ПолучитьЗапросСВременнымиТаблицами();
	
	РезультатПроверки = ПроверитьДублиКодовINCAT(Запрос);
	
	Если Не РезультатПроверки Тогда
		
		Элементы.ОшибкиВыгрузки.Видимость = Истина;
		Сообщить("Обнаружены дублирующиеся коды INCAT. Выгрузка остановлена", СтатусСообщения.Важное);
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуItem(Запрос, Соединение);
	ЗаполнитьТаблицуVendor(Запрос, Соединение);
	ЗаполнитьТаблицуEqpt(Запрос, Соединение);
	ЗаполнитьТаблицуEqptRoutine(Запрос, Соединение);
	ЗаполнитьТаблицуCharacteristic(Запрос, Соединение);
//	ЗаполнитьТаблицуSpec(Запрос, Соединение);
	ЗаполнитьТаблицуSubstitute(Запрос, Соединение);
	ЗаполнитьТаблицуItemVendor(Запрос, Соединение);
	ЗаполнитьТаблицуEASK(Запрос, Соединение);
	
	Возврат Истина;
	
КонецФункции

#Область ВыгрузкаЗаполнениеТаблиц

//функция возвращает запрос, содержащий временные таблицы структуры заказа, предметов снабжения, поставщиков
&НаСервере
Функция ПолучитьЗапросСВременнымиТаблицами()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Код КАК Код,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втСтруктураЗаказа
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Корабль
	|	И (СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза > 0
	|			ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ > 0)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ
	|				(ВЫБРАТЬ
	|					СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|				ИЗ
	|					Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|				ГДЕ
	|					СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Корабль
	|					И (СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = ""Архив""
	|							И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка)
	|							И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|						ИЛИ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.NSN = """"
	|							И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.ФНН = """"
	|							И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.INCAT = """"))
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втСтруктураЗаказа.ПредметСнабжения КАК ПредметСнабжения,
	|	НЕОПРЕДЕЛЕНО КАК ОригинальныйПредметСнабжения,
	|	"""" КАК ТипЗамены
	|ПОМЕСТИТЬ втПредметыСнабженияКорабляИАналоги
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КаталогПредметовСнабженияАналоги.Аналог,
	|	КаталогПредметовСнабженияАналоги.Ссылка,
	|	КаталогПредметовСнабженияАналоги.ТипЗамены
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.Аналоги КАК КаталогПредметовСнабженияАналоги
	|		ПО втСтруктураЗаказа.ПредметСнабжения = КаталогПредметовСнабженияАналоги.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ЗИП,
	|	НЕОПРЕДЕЛЕНО,
	|	""""
	|ИЗ
	|	РегистрСведений.ЗИПТребуемыеДляТОПредметовСнабжения КАК ЗИПТребуемыеДляТОПредметовСнабжения
	|ГДЕ
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ПредметСнабжения В
	|			(ВЫБРАТЬ
	|				втСтруктураЗаказа.ПредметСнабжения
	|			ИЗ
	|				втСтруктураЗаказа КАК втСтруктураЗаказа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КаталогПредметовСнабжения.Ссылка КАК ПредметСнабжения,
	|	КаталогПредметовСнабжения.INCAT КАК Код,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДополнительныеНаименования.Перевод, """") = """"
	|				ТОГДА КаталогПредметовСнабжения.Наименование
	|			ИНАЧЕ ДополнительныеНаименования.Перевод
	|		КОНЕЦ, 1, 60) КАК Наименование,
	|	ПОДСТРОКА(ЕСТЬNULL(ОКЕИ.УсловноеОбозначениеМеждународное, """"), 1, 3) КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА РесурсыИСрокиСлужбыПредметовСнабжения.ЕдиницаИзмерения = &Месяц
	|				ТОГДА ЕСТЬNULL(РесурсыИСрокиСлужбыПредметовСнабжения.Значение, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СрокХранения,
	|	КаталогПредметовСнабжения.ОбозначениеТранслитированное КАК Обозначение,
	|	втПредметыСнабженияКорабляИАналоги.ОригинальныйПредметСнабжения КАК ОригинальныйПредметСнабжения,
	|	втПредметыСнабженияКорабляИАналоги.ТипЗамены КАК ТипЗамены,
	|	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	втПредметыСнабженияКорабляИАналоги КАК втПредметыСнабженияКорабляИАналоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
	|			ПО КаталогПредметовСнабжения.Ссылка = ДополнительныеНаименования.Владелец
	|				И (ДополнительныеНаименования.ИмяРеквизита = ""Наименование"")
	|				И (ДополнительныеНаименования.Язык = ЗНАЧЕНИЕ(Справочник.Языки.Английский))
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОКЕИ КАК ОКЕИ
	|			ПО КаталогПредметовСнабжения.ЕдиницаИзмерения = ОКЕИ.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РесурсыИСрокиСлужбыПредметовСнабжения КАК РесурсыИСрокиСлужбыПредметовСнабжения
	|			ПО КаталогПредметовСнабжения.Ссылка = РесурсыИСрокиСлужбыПредметовСнабжения.ПредметСнабжения
	|				И (РесурсыИСрокиСлужбыПредметовСнабжения.Показатель = ЗНАЧЕНИЕ(Справочник.ТипыПоказателейИзделий.СрокХранения))
	|		ПО втПредметыСнабженияКорабляИАналоги.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.INCAT = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	КаталогПредметовСнабжения.Ссылка,
	|	ПОДСТРОКА(ЕСТЬNULL(ОКЕИ.УсловноеОбозначениеМеждународное, """"), 1, 3),
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДополнительныеНаименования.Перевод, """") = """"
	|				ТОГДА КаталогПредметовСнабжения.Наименование
	|			ИНАЧЕ ДополнительныеНаименования.Перевод
	|		КОНЕЦ, 1, 60),
	|	КаталогПредметовСнабжения.ОбозначениеТранслитированное,
	|	втПредметыСнабженияКорабляИАналоги.ОригинальныйПредметСнабжения,
	|	втПредметыСнабженияКорабляИАналоги.ТипЗамены,
	|	КаталогПредметовСнабжения.ДокументНаПоставку,
	|	КаталогПредметовСнабжения.INCAT
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	ОригинальныйПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПредметыСнабженияКорабляИАналоги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.КодCAGE КАК Код,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА Организации.НазваниеОрганизацииАнгл = """"
	|				ТОГДА Организации.Наименование
	|			ИНАЧЕ Организации.НазваниеОрганизацииАнгл
	|		КОНЕЦ, 1, 50) КАК Наименование,
	|	ПОДСТРОКА(Организации.ИмяКонтакногоЛицаАнгл, 1, 30) КАК ИмяКонтакногоЛицаАнгл,
	|	ПОДСТРОКА(Организации.АдресАнгл, 1, 30) КАК АдресАнгл1,
	|	ПОДСТРОКА(Организации.АдресАнгл, 31, 30) КАК АдресАнгл2,
	|	ПОДСТРОКА(Организации.АдресАнгл, 61, 30) КАК АдресАнгл3,
	|	ПОДСТРОКА(Организации.ГородАнгл, 1, 30) КАК ГородАнгл,
	|	ПОДСТРОКА(Организации.РегионАнгл, 1, 20) КАК РегионАнгл,
	|	Организации.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	ПОДСТРОКА(Организации.ОКПО, 1, 9) КАК ОКПО,
	|	ПОДСТРОКА(ОрганизацииКонтактнаяИнформацияТелефон.Представление, 1, 100) КАК Телефоны,
	|	ОрганизацииКонтактнаяИнформацияФакс.Представление КАК Факс,
	|	ОрганизацииКонтактнаяИнформацияЭлектроннаяПочта.Представление КАК ЭлектроннаяПочта,
	|	ИСТИНА КАК ОсновнаяОрганизация,
	|	Организации.КодСертификата КАК КодСертификата,
	|	Организации.НомерСертификата КАК НомерСертификата
	|ПОМЕСТИТЬ втОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияТелефон
	|		ПО (ОрганизацииКонтактнаяИнформацияТелефон.Ссылка = Организации.Ссылка)
	|			И (ОрганизацииКонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияФакс
	|		ПО (ОрганизацииКонтактнаяИнформацияФакс.Ссылка = Организации.Ссылка)
	|			И (ОрганизацииКонтактнаяИнформацияФакс.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.Факс))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияЭлектроннаяПочта
	|		ПО (ОрганизацииКонтактнаяИнформацияЭлектроннаяПочта.Ссылка = Организации.Ссылка)
	|			И (ОрганизацииКонтактнаяИнформацияЭлектроннаяПочта.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЭлектроннаяПочта))
	|ГДЕ
	|	Организации.Ссылка В
	|			(ВЫБРАТЬ
	|				ОсновнаяОрганизация.Значение КАК Значение
	|			ИЗ
	|				Константа.ОсновнаяОрганизация КАК ОсновнаяОрганизация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОсновнаяОрганизация";
	
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ
	//|	Организации.Ссылка,
	//|	Организации.КодCAGE,
	//|	ПОДСТРОКА(ВЫБОР
	//|			КОГДА Организации.НазваниеОрганизацииАнгл = """"
	//|				ТОГДА Организации.Наименование
	//|			ИНАЧЕ Организации.НазваниеОрганизацииАнгл
	//|		КОНЕЦ, 1, 50),
	//|	ПОДСТРОКА(Организации.ИмяКонтакногоЛицаАнгл, 1, 30),
	//|	ПОДСТРОКА(Организации.АдресАнгл, 1, 30) КАК АдресАнгл1,
	//|	ПОДСТРОКА(Организации.АдресАнгл, 31, 30) КАК АдресАнгл2,
	//|	ПОДСТРОКА(Организации.АдресАнгл, 61, 30) КАК АдресАнгл3,
	//|	ПОДСТРОКА(Организации.ГородАнгл, 1, 30) КАК ГородАнгл,
	//|	ПОДСТРОКА(Организации.РегионАнгл, 1, 20) КАК РегионАнгл,
	//|	Организации.ПочтовыйИндекс КАК ПочтовыйИндекс,
	//|	ПОДСТРОКА(Организации.ОКПО, 1, 9) КАК ОКПО,
	//|	ПОДСТРОКА(Организации.Телефоны, 1, 100) КАК Телефоны,
	//|	Организации.Факс КАК Факс,
	//|	Организации.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
	//|	ЛОЖЬ КАК ОсновнаяОрганизация,
	//|	Организации.КодСертификата КАК КодСертификата,
	//|	Организации.НомерСертификата КАК НомерСертификата
	//|ИЗ
	//|	Справочник.Организации КАК Организации
	//|ГДЕ
	//|	Организации.УчастникВТС
	//|	И Организации.Ссылка В
	//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|				ИзготовителиИПоставщики.Контрагент КАК Контрагент
	//|			ИЗ
	//|				Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК ИзготовителиИПоставщики
	//|			ГДЕ
	//|				ИзготовителиИПоставщики.Поставщик
	//|				И ИзготовителиИПоставщики.Ссылка В
	//|					(ВЫБРАТЬ
	//|						втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения
	//|					ИЗ
	//|						втПредметыСнабжения КАК втПредметыСнабжения))
	
	
	Запрос.УстановитьПараметр("Корабль", Корабль);
	Запрос.УстановитьПараметр("Месяц", Справочники.ОКЕИ.НайтиПоКоду("362")); //коды в классификаторе стандартные, к поиску пригодны
	Запрос.УстановитьПараметр("КодПоставщика", Константы.ОсновнаяОрганизация.Получить().КодCAGE);
	
	Запрос.Выполнить();
	
	Возврат Запрос;
	
КонецФункции

//функция осуществляет проверку повторов кодов INCAT в таблице предметов снабжения
//возвращает истина, если проверка пройдена, ложь - в противном случае. элементы с дублирующимися кодами записываются в таблицу ошибок
&НаСервере
Функция ПроверитьДублиКодовINCAT(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Код КАК Код
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|ГДЕ
	|	втПредметыСнабжения.Код В
	|			(ВЫБРАТЬ
	|				втПредметыСнабжения.Код КАК Код
	|			ИЗ
	|				втПредметыСнабжения КАК втПредметыСнабжения
	|			СГРУППИРОВАТЬ ПО
	|				втПредметыСнабжения.Код
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втПредметыСнабжения.ПредметСнабжения) > 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаОшибок = ОшибкиВыгрузки.Добавить();
		СтрокаОшибок.Объект1С = Выборка.ПредметСнабжения;
		СтрокаОшибок.ОписаниеОшибки = "ItemCode " + Выборка.Код + " имеет более одного предмета снабжения";
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//процедура осуществляет заполнение таблицы Item (предметы снабжения) файла выгрузки
&НаСервере
Процедура ЗаполнитьТаблицуItem(Запрос, Соединение)
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|   втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Код КАК Код,
	|	втПредметыСнабжения.Наименование КАК Наименование,
	|	втПредметыСнабжения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втПредметыСнабжения.СрокХранения КАК СрокХранения
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM Item";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.Код; //ItemCode
		НаборЗаписей.Fields(1).Value = Выборка.Наименование; //ItemDesc
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 2, "ЕдиницаИзмерения"); //ItemDeno
		НаборЗаписей.Fields(3).Value = Выборка.СрокХранения; //MonthsShelfLife
		
	КонецЦикла;

    НаборЗаписей.Update();
	
	НаборЗаписей = Неопределено;
	
КонецПроцедуры

//процедура осуществляет заполнение таблицы Vendor (поставщики) файла выгрузки
&НаСервере
Процедура ЗаполнитьТаблицуVendor(Запрос, Соединение)
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втОрганизации.Организация КАК Организация,
	|	втОрганизации.Код КАК Код,
	|	втОрганизации.Наименование КАК Наименование,
	|	втОрганизации.ИмяКонтакногоЛицаАнгл КАК ИмяКонтакногоЛицаАнгл,
	|	втОрганизации.АдресАнгл1 КАК АдресАнгл1,
	|	втОрганизации.АдресАнгл2 КАК АдресАнгл2,
	|	втОрганизации.АдресАнгл3 КАК АдресАнгл3,
	|	втОрганизации.ГородАнгл КАК ГородАнгл,
	|	втОрганизации.РегионАнгл КАК РегионАнгл,
	|	втОрганизации.ПочтовыйИндекс КАК ПочтовыйИндекс,
	|	втОрганизации.ОКПО КАК ОКПО,
	|	втОрганизации.Телефоны КАК Телефоны,
	|	втОрганизации.Факс КАК Факс,
	|	втОрганизации.ЭлектроннаяПочта КАК ЭлектроннаяПочта
	|ИЗ
	|	втОрганизации КАК втОрганизации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM Vendor";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных
	Выборка = РезультатЗапроса.Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Код) Тогда //иначе будет сгенерировано исключение
			
			Продолжить;
			
		КонецЕсли;
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.Код; //VendorCode
		НаборЗаписей.Fields(1).Value = Выборка.Наименование; //Name
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 2, "ИмяКонтакногоЛицаАнгл"); //Addresee
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 3, "АдресАнгл1"); //AdressLine1
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 4, "АдресАнгл2"); //AdressLine2
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 5, "АдресАнгл3"); //AdressLine3
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 6, "ГородАнгл"); //City
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 7, "РегионАнгл"); //State
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 8, "ПочтовыйИндекс"); //PINCode
		НаборЗаписей.Fields(9).Value = "RUS"; //ContryCode 
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 10, "ОКПО"); //KompassControlCode
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 11, "Телефоны"); //TelephoneNumbers
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 12, "Факс"); //FaxNumbers
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 13, "ЭлектроннаяПочта"); //EMailAdress
		
	КонецЦикла;
	
	Если НаборЗаписей.RecordCount > 0 Тогда
		
		НаборЗаписей.Update();
		
	КонецЕсли;
	
	НаборЗаписей = Неопределено;
	
КонецПроцедуры

//процедура осуществляет заполнение таблицы Eqpt (ресурсы и сроки службы предметов снабжения) файла выгрузки
&НаСервере
Процедура ЗаполнитьТаблицуEqpt(Запрос, Соединение)
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втСтруктураЗаказа.ПредметСнабжения КАК ПредметСнабжения,
	|	ЕСТЬNULL(РесурсыИСрокиСлужбыПредметовСнабжения.Показатель, НЕОПРЕДЕЛЕНО) КАК Показатель,
	|	ЕСТЬNULL(РесурсыИСрокиСлужбыПредметовСнабжения.Значение, 0) КАК Значение,
	|	втПредметыСнабжения.Код КАК Код
	|ПОМЕСТИТЬ втРесурсы
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РесурсыИСрокиСлужбыПредметовСнабжения КАК РесурсыИСрокиСлужбыПредметовСнабжения
	|		ПО втСтруктураЗаказа.ПредметСнабжения = РесурсыИСрокиСлужбыПредметовСнабжения.ПредметСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыСнабжения КАК втПредметыСнабжения
	|		ПО втСтруктураЗаказа.ПредметСнабжения = втПредметыСнабжения.ПредметСнабжения
	|ГДЕ
	|	(НЕ РесурсыИСрокиСлужбыПредметовСнабжения.ПредметСнабжения ЕСТЬ NULL
	|			ИЛИ втСтруктураЗаказа.ПредметСнабжения В
	|				(ВЫБРАТЬ
	|					РегламентТОПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|				ИЗ
	|					РегистрСведений.РегламентТОПредметовСнабжения КАК РегламентТОПредметовСнабжения))
	|	И РесурсыИСрокиСлужбыПредметовСнабжения.ЕдиницаИзмерения = &Час
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|	ВложенныйЗапрос.СрокСлужбы КАК СрокСлужбы,
	|	ВложенныйЗапрос.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	ВложенныйЗапрос.НаработкаНаРемонт КАК НаработкаНаРемонт,
	|	ВложенныйЗапрос.Код КАК Код,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.СрокСлужбы > 0
	|				И &ГодПостройки > 0
	|			ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.СрокСлужбы / 8766 + &ГодПостройки КАК ЧИСЛО(10, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ГодУстаревания
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|		МАКСИМУМ(ВложенныйЗапрос.СрокСлужбы) КАК СрокСлужбы,
	|		МАКСИМУМ(ВложенныйЗапрос.НаработкаНаОтказ) КАК НаработкаНаОтказ,
	|		МАКСИМУМ(ВложенныйЗапрос.НаработкаНаРемонт) КАК НаработкаНаРемонт,
	|		ВложенныйЗапрос.Код КАК Код
	|	ИЗ
	|		(ВЫБРАТЬ
	|			втРесурсы.ПредметСнабжения КАК ПредметСнабжения,
	|			ВЫБОР
	|				КОГДА втРесурсы.Показатель = ЗНАЧЕНИЕ(Справочник.ТипыПоказателейИзделий.НазначенныйСрокСлужбыДоСписания)
	|					ТОГДА втРесурсы.Значение
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК СрокСлужбы,
	|			0 КАК НаработкаНаОтказ,
	|			0 КАК НаработкаНаРемонт,
	|			втРесурсы.Код КАК Код
	|		ИЗ
	|			втРесурсы КАК втРесурсы
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			втРесурсы.ПредметСнабжения,
	|			0,
	|			ВЫБОР
	|				КОГДА втРесурсы.Показатель = ЗНАЧЕНИЕ(Справочник.ТипыПоказателейИзделий.НаработкаНаОтказ)
	|					ТОГДА втРесурсы.Значение
	|				ИНАЧЕ 0
	|			КОНЕЦ,
	|			0,
	|			втРесурсы.Код
	|		ИЗ
	|			втРесурсы КАК втРесурсы
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			втРесурсы.ПредметСнабжения,
	|			0,
	|			0,
	|			ВЫБОР
	|				КОГДА втРесурсы.Показатель = ЗНАЧЕНИЕ(Справочник.ТипыПоказателейИзделий.НазначенныйРесурсДоЗаводскогоРемонта)
	|					ТОГДА втРесурсы.Значение
	|				ИНАЧЕ 0
	|			КОНЕЦ,
	|			втРесурсы.Код
	|		ИЗ
	|			втРесурсы КАК втРесурсы) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ПредметСнабжения,
	|		ВложенныйЗапрос.Код) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРесурсы";
	Запрос.УстановитьПараметр("Час", Справочники.ОКЕИ.НайтиПоКоду("356"));
	Запрос.УстановитьПараметр("Год", Справочники.ОКЕИ.НайтиПоКоду("366"));
	Запрос.УстановитьПараметр("ГодПостройки", Число(Формат(Корабль.ДатаПостройки, "ДФ=yyyy")));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM Eqpt";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.Код; //EqptItemCode
		НаборЗаписей.Fields(1).Value = Выборка.ГодУстаревания; //YearObsolenscence
		НаборЗаписей.Fields(2).Value = Выборка.СрокСлужбы; //HoursEstimatedLife
		НаборЗаписей.Fields(3).Value = Выборка.НаработкаНаОтказ; //HoursMTBF
		НаборЗаписей.Fields(4).Value = Выборка.НаработкаНаРемонт; //HoursMTBR
		
	КонецЦикла;

    НаборЗаписей.Update();
	
	НаборЗаписей = Неопределено;
	
КонецПроцедуры

//процедура осуществляет заполнение таблицы EqptRoutine (регламентное ТО)
&НаСервере
Процедура ЗаполнитьТаблицуEqptRoutine(Запрос, Соединение)
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегламентТОПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	РегламентТОПредметовСнабжения.ВидРабот КАК ВидРабот,
	|	РегламентТОПредметовСнабжения.Периодичность КАК Периодичность,
	|	ЗИПТребуемыеДляТОПредметовСнабжения.ЗИП КАК ЗИП,
	|	ЗИПТребуемыеДляТОПредметовСнабжения.Количество КАК Количество
	|ПОМЕСТИТЬ втРегламентТО
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентТОПредметовСнабжения КАК РегламентТОПредметовСнабжения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗИПТребуемыеДляТОПредметовСнабжения КАК ЗИПТребуемыеДляТОПредметовСнабжения
	|			ПО РегламентТОПредметовСнабжения.ПредметСнабжения = ЗИПТребуемыеДляТОПредметовСнабжения.ПредметСнабжения
	|				И РегламентТОПредметовСнабжения.ВидРабот = ЗИПТребуемыеДляТОПредметовСнабжения.ВидРабот
	|		ПО втСтруктураЗаказа.ПредметСнабжения = РегламентТОПредметовСнабжения.ПредметСнабжения
	|ГДЕ
	|	ЗИПТребуемыеДляТОПредметовСнабжения.Количество > 0
	|	И РегламентТОПредметовСнабжения.ЕдиницаИзмеренияПериодичности = &Час
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втРегламентТО.ПредметСнабжения КАК ПредметСнабжения,
	|	ПредметыСнабжения.Код КАК Код,
	|	втРегламентТО.ВидРабот КАК ВидРабот,
	|	втРегламентТО.Периодичность КАК Периодичность,
	|	втРегламентТО.ЗИП КАК ЗИП,
	|	ЗИПы.Код КАК КодЗИП,
	|	втРегламентТО.Количество КАК Количество
	|ИЗ
	|	втРегламентТО КАК втРегламентТО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыСнабжения КАК ПредметыСнабжения
	|		ПО втРегламентТО.ПредметСнабжения = ПредметыСнабжения.ПредметСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыСнабжения КАК ЗИПы
	|		ПО втРегламентТО.ЗИП = ЗИПы.ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРегламентТО";
	Запрос.УстановитьПараметр("Час", Справочники.ОКЕИ.НайтиПоКоду("356"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM EqptRoutine";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.Код; //EqptItemCode
		НаборЗаписей.Fields(1).Value = "H"; //RoutineType 
		НаборЗаписей.Fields(2).Value = Выборка.Периодичность;
		НаборЗаписей.Fields(3).Value = Выборка.КодЗИП; //ItemCode
		НаборЗаписей.Fields(4).Value = Выборка.Количество;
		
	КонецЦикла;

    НаборЗаписей.Update();
	
	НаборЗаписей = Неопределено;
	
КонецПроцедуры

//процедура осуществляет заполнение таблицы Characteristic (характеристики предметов снабжения)
&НаСервере
Процедура ЗаполнитьТаблицуCharacteristic(Запрос, Соединение)
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Код КАК Код,
	|	ПОДСТРОКА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДополнительныеНаименования.Перевод, """") = """"
	|				ТОГДА ХарактеристикиПредметовСнабжения.Наименование
	|			ИНАЧЕ ДополнительныеНаименования.Перевод
	|		КОНЕЦ, 1, 30) КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(КаталогПредметовСнабженияХарактеристики.Значение) КАК Значение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОКЕИ.УсловноеОбозначениеМеждународное, """") = """"
	|			ТОГДА ЕСТЬNULL(ОКЕИ.Наименование, """")
	|		ИНАЧЕ ЕСТЬNULL(ОКЕИ.УсловноеОбозначениеМеждународное, """")
	|	КОНЕЦ КАК ЕдиницаИзмерения
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
	|			ПО КаталогПредметовСнабженияХарактеристики.Характеристика = ДополнительныеНаименования.Владелец
	|				И (ДополнительныеНаименования.ИмяРеквизита = ""Наименование"")
	|				И (ДополнительныеНаименования.Язык = ЗНАЧЕНИЕ(Справочник.Языки.Английский))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
	|			ПО КаталогПредметовСнабженияХарактеристики.Характеристика = ХарактеристикиПредметовСнабжения.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОКЕИ КАК ОКЕИ
	|			ПО КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения = ОКЕИ.Ссылка
	|		ПО втПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабженияХарактеристики.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM Characteristic";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.Код; //ItemCode
		НаборЗаписей.Fields(1).Value = Выборка.Характеристика; //CharacteristicName
		
		Значение = СокрЛП(Лев(Выборка.Значение + " " + Выборка.ЕдиницаИзмерения, 60));
		
		Если ЗначениеЗаполнено(Значение) Тогда //Value
			
			НаборЗаписей.Fields(2).Value = Значение;
			
		КонецЕсли;
		
	КонецЦикла;

    НаборЗаписей.Update();
	
	НаборЗаписей = Неопределено;
	
КонецПроцедуры

//процедура осуществляет заполнение таблицы Spec (стандарты изготовления предметов снабжения)
&НаСервере
Процедура ЗаполнитьТаблицуSpec(Запрос, Соединение)
	
	//ДОДЕЛАТЬ - УТОЧНИТЬ АЛГОРИТМ И ХРАНЕНИЕ ДАННЫХ
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Код КАК Код
	|	втПредметыСнабжения.ДокументНаПоставку КАК Номер
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|ГДЕ
	|	втПредметыСнабжения.ДокументНаПоставку ПОДОБНО ""%ГОСТ%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM Spec";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.Код; //ItemCode
		НаборЗаписей.Fields(1).Value = "ГОСТ"; //SpecName
		
		Номер = Выборка.Номер;
		
		ПозицияГОСТ = СтрНайти(Номер, "ГОСТ");
		
		Номер = Сред(Номер, ПозицияГост + 4, 18);
		Номер = Лев(Лев(Номер, СтрНайти(Номер, "-", НаправлениеПоиска.СКонца) - 1), 20);
		Номер = ОбщиеФункцииКлиентСервер.ТранслитироватьОбозначениеРусВАнг(Номер);
		
		Если ЗначениеЗаполнено(Номер) Тогда
			
			НаборЗаписей.Fields(2).Value = Номер; //Value
			
		КонецЕсли;
		
	КонецЦикла;

    НаборЗаписей.Update();
	
	НаборЗаписей = Неопределено; 
	
КонецПроцедуры

//процедура осуществляет заполнение таблицы Spec (стандарты изготовления предметов снабжения)
&НаСервере
Процедура ЗаполнитьТаблицуSubstitute(Запрос, Соединение)
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Аналоги.ПредметСнабжения КАК ПредметСнабжения,
	|	Аналоги.Код КАК Код,
	|	ЕСТЬNULL(ТипыЗаменыПредметаСнабженияАналогом.Код, """") КАК ТипЗамены,
	|	Оригиналы.ПредметСнабжения КАК ОригиналСсылка,
	|	Оригиналы.Код КАК ОригиналКод
	|ИЗ
	|	втПредметыСнабжения КАК Аналоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыСнабжения КАК Оригиналы
	|		ПО Аналоги.ОригинальныйПредметСнабжения = Оригиналы.ПредметСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЗаменыПредметаСнабженияАналогом КАК ТипыЗаменыПредметаСнабженияАналогом
	|		ПО Аналоги.ТипЗамены = ТипыЗаменыПредметаСнабженияАналогом.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM Substitute";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.ОригиналКод; //ItemCode
		НаборЗаписей.Fields(1).Value = Выборка.Код; //SubstituteItemCode
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 2, "ТипЗамены"); //SubstituteType
				
	КонецЦикла;

    НаборЗаписей.Update();
	
	НаборЗаписей = Неопределено; 
	
КонецПроцедуры

//процедура осуществляет заполнение таблицы ItemVendor (поставщики предметов снабжения)
&НаСервере
Процедура ЗаполнитьТаблицуItemVendor(Запрос, Соединение)
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Код КАК КодПредметаСнабжения,
	|	втОрганизации.Организация КАК Организация,
	|	втОрганизации.Код КАК КодПоставщика,
	|	ПОДСТРОКА(втОрганизации.КодСертификата, 1, 3) КАК КодСертификата,
	|	втОрганизации.НомерСертификата КАК НомерСертификата
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрганизации КАК втОрганизации
	|		ПО (втОрганизации.ОсновнаяОрганизация)";
	
	//|ОБЪЕДИНИТЬ
	//|
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	втИзготовителиИПоставщики.ПредметСнабжения КАК ПредметСнабжения,
	//|	втИзготовителиИПоставщики.Код КАК КодПредметаСнабжения,
	//|	втОрганизации.Организация КАК Организация,
	//|	втОрганизации.Код КАК КодПоставщика,
	//|	ПОДСТРОКА(втОрганизации.КодСертификата, 1, 3) КАК КодСертификата,
	//|	втОрганизации.НомерСертификата КАК НомерСертификата
	//|ИЗ
	//|	втИзготовителиИПоставщики КАК втИзготовителиИПоставщики
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрганизации КАК втОрганизации
	//|		ПО втИзготовителиИПоставщики.Контрагент = втОрганизации.Организация
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM ItemVendor";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.КодПоставщика) Тогда //иначе будет сгенерировано исключение
			
			Продолжить;
			
		КонецЕсли;
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.КодПредметаСнабжения; //ItemCode
		НаборЗаписей.Fields(1).Value = Выборка.КодПоставщика; //VendorCode
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 2, "КодСертификата"); //CertificationType
		ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, 3, "НомерСертификата"); //CertificationNo
		НаборЗаписей.Fields(4).Value = " ";
		
	КонецЦикла;

    Если НаборЗаписей.RecordCount > 0 Тогда
		
		НаборЗаписей.Update();
		
	КонецЕсли;
	
	НаборЗаписей = Неопределено;
	
КонецПроцедуры

#Область ВыгрузкаЗаполнениеТаблицEASK

//процедура осуществляет заполнение таблицы EASK (структура предметов снабжения)
&НаСервере
Процедура ЗаполнитьТаблицуEASK(Запрос, Соединение)
	
	//получение данных
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втСтруктураЗаказа.Ссылка КАК Ссылка,
	|	втСтруктураЗаказа.Родитель КАК Родитель,
	|	втСтруктураЗаказа.Код КАК Код,
	|	втСтруктураЗаказа.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.Код КАК КодПредметаСнабжения,
	|	втСтруктураЗаказа.Количество КАК Количество,
	|	втСтруктураЗаказа.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втСтруктураЗаказа.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втСтруктураЗаказа.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	втПредметыСнабжения.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втСтруктураСДаннымиПС
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыСнабжения КАК втПредметыСнабжения
	|		ПО втСтруктураЗаказа.ПредметСнабжения = втПредметыСнабжения.ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРодители.ПредметСнабжения КАК ПредметСнабженияРодителя,
	|	втРодители.КодПредметаСнабжения КАК КодПредметаСнабженияРодителя,
	|	втРодители.Код КАК КодРодителя,
	|	втСтруктураСДаннымиПС.ПредметСнабжения КАК ПредметСнабжения,
	|	втСтруктураСДаннымиПС.КодПредметаСнабжения КАК КодПредметаСнабжения,
	|	втСтруктураСДаннымиПС.Код КАК Код,
	|	втРодители.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втСтруктураСДаннымиПС.Количество КАК Количество,
	|	втСтруктураСДаннымиПС.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втСтруктураСДаннымиПС.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втСтруктураСДаннымиПС.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ИЗ
	|	втСтруктураСДаннымиПС КАК втСтруктураСДаннымиПС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтруктураСДаннымиПС КАК втРодители
	|		ПО втСтруктураСДаннымиПС.Родитель = втРодители.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//построение иерархии
	Схема = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаEASK");
    Настройки = Схема.НастройкиПоУмолчанию;
    
    КомпоновщикНастроекДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
    КомпоновщикНастроекДанных.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроекДанных.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("СтруктураЗаказа", РезультатЗапроса.Выгрузить()));
	
	ТаблицаEASK = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаEASK);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Выборка = ОбработатьТаблицуEASK(ТаблицаEASK);
	
	//создание объекта для записи данных
	ТекстЗапроса = "SELECT * FROM EASK";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	НаборЗаписей.Open(ТекстЗапроса, Соединение, 1, 3);
	
	//запись данных	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.AddNew();
		НаборЗаписей.Fields(0).Value = Выборка.КодПредметаСнабженияРодителя; //EASKItemCode
		Если Не Выборка.Уровень = Неопределено Тогда //EASKType
			
			НаборЗаписей.Fields(1).Value = Формат(Выборка.Уровень, "ЧЦ=2; ЧН=00; ЧВН=");
			
		КонецЕсли;
		НаборЗаписей.Fields(2).Value = Выборка.КодПредметаСнабжения; //ItemCode
		НаборЗаписей.Fields(3).Value = Выборка.Количество; //QtyConstituent
		Если ЗначениеЗаполнено(Выборка.ДокументНаПоставку) Тогда //EASKBookRef
			
			НаборЗаписей.Fields(4).Value = Лев(ОбщиеФункцииКлиентСервер.ТранслитироватьОбозначениеРусВАнг(Выборка.ДокументНаПоставку), 32);
			
		КонецЕсли;
		НаборЗаписей.Fields(5).Value = Выборка.КоличествоВЗИПБаза; //QtyBDManufacturer
		НаборЗаписей.Fields(6).Value = Выборка.КоличествоВЗИПБорт; //QtyOBManufacturer
		НаборЗаписей.Fields(7).Value = Выборка.КоличествоВЗИПДЭ; //QtyLTEManufacturer
		
	КонецЦикла;

	НаборЗаписей.Update();
	
	НаборЗаписей = Неопределено;
	
КонецПроцедуры

//функция осуществляет сортировку таблицы EASK и удаление дублей, образовавшихся при построении иерархии
//возвращает выборку на основе обработанной таблицы
&НаСервере
Функция ОбработатьТаблицуEASK(ТаблицаEASK)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаEASK.Код КАК Код,
	|	ТаблицаEASK.КодРодителя КАК КодРодителя,
	|	ТаблицаEASK.ПредметСнабжения КАК ПредметСнабжения,
	|	ТаблицаEASK.ПредметСнабженияРодителя КАК ПредметСнабженияРодителя,
	|	ТаблицаEASK.КодПредметаСнабжения КАК КодПредметаСнабжения,
	|	ТаблицаEASK.КодПредметаСнабженияРодителя КАК КодПредметаСнабженияРодителя,
	|	ТаблицаEASK.СистемныеПоляУровень КАК СистемныеПоляУровень,
	|	ТаблицаEASK.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ТаблицаEASK.Количество КАК Количество,
	|	ТаблицаEASK.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	ТаблицаEASK.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	ТаблицаEASK.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втТаблицаEASK
	|ИЗ
	|	&ТаблицаEASK КАК ТаблицаEASK
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаEASK.Код КАК Код,
	|	втТаблицаEASK.КодРодителя КАК КодРодителя,
	|	втТаблицаEASK.ПредметСнабжения КАК ПредметСнабжения,
	|	втТаблицаEASK.ПредметСнабженияРодителя КАК ПредметСнабженияРодителя,
	|	втТаблицаEASK.КодПредметаСнабжения КАК КодПредметаСнабжения,
	|	втТаблицаEASK.КодПредметаСнабженияРодителя КАК КодПредметаСнабженияРодителя,
	|	МИНИМУМ(втТаблицаEASK.СистемныеПоляУровень - 1) КАК Уровень,
	|	втТаблицаEASK.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втТаблицаEASK.Количество КАК Количество,
	|	втТаблицаEASK.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втТаблицаEASK.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втТаблицаEASK.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ИЗ
	|	втТаблицаEASK КАК втТаблицаEASK
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаEASK.ДокументНаПоставку,
	|	втТаблицаEASK.КодРодителя,
	|	втТаблицаEASK.Код,
	|	втТаблицаEASK.ПредметСнабжения,
	|	втТаблицаEASK.Количество,
	|	втТаблицаEASK.КодПредметаСнабженияРодителя,
	|	втТаблицаEASK.ПредметСнабженияРодителя,
	|	втТаблицаEASK.КодПредметаСнабжения,
	|	втТаблицаEASK.КоличествоВЗИПБорт,
	|	втТаблицаEASK.КоличествоВЗИПБаза,
	|	втТаблицаEASK.КоличествоВЗИПДЭ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаEASK";
	Запрос.УстановитьПараметр("ТаблицаEASK", ТаблицаEASK);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

#КонецОбласти

//функция присваиват полю ADODB.RecordSet значение из выборки, если поле в выборке не пустое
&НаСервере
Процедура ПрисвоитьЗначениеПоля(НаборЗаписей, Выборка, НомерКолонкиНабора, ИмяКолонкиВыборки)
	
	ЗначениеПоля = Выборка[ИмяКолонкиВыборки];
	
	Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
		
		НаборЗаписей.Fields(НомерКолонкиНабора).Value = ЗначениеПоля;
		
	Иначе
		
		НаборЗаписей.Fields(НомерКолонкиНабора).Value = " ";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СобытияФормы

&НаКлиенте
Процедура ПутьКФайлуБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = КаталогВыгрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборКаталогаЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталогаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		КаталогВыгрузки = ВыбранныеФайлы[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если Не ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		
		ПоказатьПредупреждение(, "Не указан каталог выгрузки");
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Корабль) Тогда
		
		ПоказатьПредупреждение(, "Не выбран корабль!");
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыгрузитьПродолжение", ЭтаФорма), "Выполнить выгрузку данных?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПроверкаПройдена = ПроверитьНаличиеКодовINCAT();
		
		Если ПроверкаПройдена Тогда //необходимые для выгрузки коды в наличии
			
			ВыгрузитьЗавершение(Истина, Неопределено);
			
		Иначе //необходимые коды есть не у всех ПС, передаем пользователю для генерации кодов
			
			ПредметыСнабженияКопия = ПредметыСнабжения;
			
			ИмяФормыПроверки = "Обработка.ВыгрузкаДанныхВФорматеINCAT.Форма.ФормаПроверкиКодов";
			ПараметрыОткрытия = Новый Структура("ПредметыСнабжения", ПредметыСнабженияКопия);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтаФорма);
			
			ОткрытьФорму(ИмяФормыПроверки, ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, "Действие отменено!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПредметыСнабжения.Очистить();
	ОшибкиВыгрузки.Очистить();
	Элементы.ОшибкиВыгрузки.Видимость = Ложь;
	
	Если РезультатЗакрытия = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Сообщить("Выгрузка начата в " + ТекущаяДата());
	Состояние("Выгрузка данных...", , , БиблиотекаКартинок.ДлительнаяОперация48);
	
	ВыполнитьВыгрузку();
		
	Сообщить("Выгрузка окончена в " + ТекущаяДата());
	ПоказатьПредупреждение(, "Выгрузка завершена!");
	
КонецПроцедуры

#КонецОбласти