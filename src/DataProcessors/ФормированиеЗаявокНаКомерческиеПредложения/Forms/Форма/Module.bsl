

/////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СвойстваЭлементовФормы

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	ЭтаФорма.ЗаявкаСтрока = ПолучитьПредставлениеЗаявки(Заявка);
	Элементы.ДобавитьПоставщика.Видимость = ЗначениеЗаполнено(Заявка);
	
	Если ЗначениеЗаполнено(Заявка) Тогда
		
		СлужебныеТаблицы = СформироватьТаблицыПредметовСнабженияИПоставщиковПоЗаявке(Заявка);
		ТЗПоставщики = СлужебныеТаблицы.ТЗПоставщики;
		ТЗПредметыСнабжения = СлужебныеТаблицы.ТЗПредметыСнабжения;	
		ТЗПредметыСнабженияИПоставщики = СлужебныеТаблицы.ТЗПредметыСнабженияИПоставщики;
		
		СформироватьТабличныйДокумент(Заявка, ТЗПоставщики, ТЗПредметыСнабжения, ТЗПредметыСнабженияИПоставщики);
		
		ЗначениеВРеквизитФормы(ТЗПредметыСнабжения, "ТаблицаЗначенийПредметыСнабжения");
		СЗПоставщики.ЗагрузитьЗначения(ТЗПоставщики.ВыгрузитьКолонку("Поставщик"));
		
	КонецЕсли;

КонецПроцедуры //УстановитьСвойстваЭлементовФормы

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеЗаявки(ДокументЗаявка)
	МассивСтрок = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ДокументЗаявка) Тогда
		
		СтрокаГиперссылки = Новый ФорматированнаяСтрока(
			"Ввести заявку", ,
			Новый Цвет(0, 0, 255), ,
			"ОткрытьСписокЗаявок");
		
	Иначе
		
		СтрокаГиперссылки = Новый ФорматированнаяСтрока(
				Строка(ДокументЗаявка), ,
				Новый Цвет(0, 0, 255), ,
				ПолучитьНавигационнуюСсылку(ДокументЗаявка));
		
	КонецЕсли;
	МассивСтрок.Добавить(СтрокаГиперссылки);

	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции //ПолучитьПредставлениеЗаявки

#КонецОбласти

#Область ПостроениеТабличногоДокументаПредметыСнабжения

&НаСервере
Функция СформироватьТаблицыПредметовСнабженияИПоставщиковПоЗаявке(Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаявкаСпецификация.НомерСтроки КАК НомерСтроки,
	|	ЗаявкаСпецификация.ПредметСнабжения КАК ПредметСнабжения,
	|	ЗаявкаСпецификация.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаявкаСпецификация.Количество КАК Количество,
	|	ЗаявкаСпецификация.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент КАК Поставщик
	|ПОМЕСТИТЬ ВТ_ПредметыСнабжения
	|ИЗ
	|	Документ.Заявка.Спецификация КАК ЗаявкаСпецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|		ПО ЗаявкаСпецификация.ПредметСнабжения = КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка
	|ГДЕ
	|	ЗаявкаСпецификация.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПредметыСнабжения.Поставщик КАК Поставщик
	|ИЗ
	|	ВТ_ПредметыСнабжения КАК ВТ_ПредметыСнабжения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ПредметыСнабжения.Поставщик.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПредметыСнабжения.НомерСтроки КАК НомерСтроки,
	|	ВТ_ПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ВТ_ПредметыСнабжения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ПредметыСнабжения.Количество КАК Количество,
	|	ВТ_ПредметыСнабжения.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ИЗ
	|	ВТ_ПредметыСнабжения КАК ВТ_ПредметыСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПредметыСнабжения.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ВТ_ПредметыСнабжения.Поставщик КАК Поставщик
	|ИЗ
	|	ВТ_ПредметыСнабжения КАК ВТ_ПредметыСнабжения";
	#КонецОбласти
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("ТЗПоставщики", РезультатЗапроса[1].Выгрузить());
	Результат.Вставить("ТЗПредметыСнабжения", РезультатЗапроса[2].Выгрузить());
	Результат.Вставить("ТЗПредметыСнабженияИПоставщики", РезультатЗапроса[3].Выгрузить());
	
	Возврат Результат;
	
КонецФункции //СформироватьТаблицыПредметовСнабженияИПоставщиковПоЗаявке

&НаСервере
Процедура СформироватьТабличныйДокумент(Заявка, ТЗПоставщики, ТЗПредметыСнабжения, ТЗПредметыСнабженияИПоставщики)
	
	Если НЕ ЗначениеЗаполнено(Заявка) Тогда
		
		Возврат;
		
	КонецЕсли;   
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетПредметыСнабжения");	
	ТабличныйДокументПредметыСнабжения.Очистить();
	
	//Шапка таблицы
	
	ОбластьЗаголовокТаблицыПС = Макет.ПолучитьОбласть("Заголовок|ПредметСнабженияВертикаль");
	ОбластьЗаголовокТаблицыПоставщик = Макет.ПолучитьОбласть("Заголовок|ПоставщикВертикаль");
	ОбластьЗаголовокТаблицыПоставщикЗабивка = Макет.ПолучитьОбласть("Заголовок|ПоставщикВертикальПустая");
	
	ТабличныйДокументПредметыСнабжения.Вывести(ОбластьЗаголовокТаблицыПС);
	ТабличныйДокументПредметыСнабжения.ФиксацияСлева = ТабличныйДокументПредметыСнабжения.ШиринаТаблицы;
	РабочаяОбластьКолонка = ТабличныйДокументПредметыСнабжения.ШиринаТаблицы + 1;
	ТабличныйДокументПредметыСнабжения.Присоединить(ОбластьЗаголовокТаблицыПоставщик);
	
	Для Н = 2 По ТЗПоставщики.Количество() Цикл
		
		ТабличныйДокументПредметыСнабжения.Присоединить(ОбластьЗаголовокТаблицыПоставщикЗабивка);
		
	КонецЦикла;  
	
	ОбластьШапкаТаблицыПС = Макет.ПолучитьОбласть("ШапкаТаблицы|ПредметСнабженияВертикаль");
	ОбластьШапкаТаблицыПоставщик = Макет.ПолучитьОбласть("ШапкаТаблицы|ПоставщикВертикаль");
	ТабличныйДокументПредметыСнабжения.Вывести(ОбластьШапкаТаблицыПС);
	
	Для Каждого СтрокаПоставщики ИЗ ТЗПоставщики Цикл
		
		ОбластьШапкаТаблицыПоставщик.Параметры.Заполнить(СтрокаПоставщики);
		
		ОбластьШапкаТаблицыПоставщик.Параметры.РасшифровкаДействиеУстановитьВсе = Новый Структура("Действие, ОбластьДействия", "УстановитьВсе", "ВКолонке");
		ОбластьШапкаТаблицыПоставщик.Параметры.РасшифровкаДействиеСнятьВсе = Новый Структура("Действие, ОбластьДействия", "СнятьВсе", "ВКолонке");
		
		ТабличныйДокументПредметыСнабжения.Присоединить(ОбластьШапкаТаблицыПоставщик);
		
	КонецЦикла;
	
	РабочаяОбластьСтрока = ТабличныйДокументПредметыСнабжения.ВысотаТаблицы + 1;
	
	//Детальные записи
	ОбластьПредметСнабжения = Макет.ПолучитьОбласть("ПредметСнабженияГоризонталь|ПредметСнабженияВертикаль");
	ОбластьДетальныхЗаписейДоступен = Макет.ПолучитьОбласть("ПредметСнабженияГоризонталь|ПоставщикВертикаль");
	ОбластьДетальныхЗаписейНеДоступен = Макет.ПолучитьОбласть("ПредметСнабженияГоризонтальНеДоступен|ПоставщикВертикаль");

	Для Каждого СтрокаПредметыСнабжения Из ТЗПредметыСнабжения Цикл
		
		ОбластьПредметСнабжения.Параметры.Заполнить(СтрокаПредметыСнабжения);
		
		ОбластьПредметСнабжения.Параметры.РасшифровкаДействиеУстановитьВсе = Новый Структура("Действие, ОбластьДействия", "УстановитьВсе", "ВСтроке");
		ОбластьПредметСнабжения.Параметры.РасшифровкаДействиеСнятьВсе = Новый Структура("Действие, ОбластьДействия", "СнятьВсе", "ВСтроке");
		
		ТабличныйДокументПредметыСнабжения.Вывести(ОбластьПредметСнабжения);
	
		Для Каждого СтрокаПоставщики ИЗ ТЗПоставщики Цикл
			
			НайденныеСтроки = ТЗПредметыСнабженияИПоставщики.НайтиСтроки(Новый Структура("ИдентификаторПозиции, Поставщик", СтрокаПредметыСнабжения.ИдентификаторПозиции, СтрокаПоставщики.Поставщик));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ДанныеРасшифровки = Новый Структура("НомерСтроки, ПредметСнабжения, ЕдиницаИзмерения, Количество, ИдентификаторПозиции, Поставщик");
				ЗаполнитьЗначенияСвойств(ДанныеРасшифровки, СтрокаПредметыСнабжения);
				ДанныеРасшифровки.Поставщик = СтрокаПоставщики.Поставщик;
				
				ОбластьДетальныхЗаписейДоступен.Параметры.Отметка = Истина;
				ОбластьДетальныхЗаписейДоступен.Параметры.Расшифровка = Новый Структура("Действие, Отметка, ЯвляетсяПоставщиком, ДанныеРасшифровки", 
																			"УстановитьСнятьОтметку", Истина, Истина, ДанныеРасшифровки);
				
				ТабличныйДокументПредметыСнабжения.Присоединить(ОбластьДетальныхЗаписейДоступен);

			Иначе
				
				ДанныеРасшифровки = Новый Структура("НомерСтроки, ПредметСнабжения, ЕдиницаИзмерения, Количество, ИдентификаторПозиции, Поставщик");
				ЗаполнитьЗначенияСвойств(ДанныеРасшифровки, СтрокаПредметыСнабжения);
				ДанныеРасшифровки.Поставщик = СтрокаПоставщики.Поставщик;
				
				ОбластьДетальныхЗаписейНеДоступен.Параметры.Отметка = Ложь;
				ОбластьДетальныхЗаписейНеДоступен.Параметры.Расшифровка = Новый Структура("Действие, Отметка, ЯвляетсяПоставщиком, ДанныеРасшифровки", 
																			"УстановитьСнятьОтметку", Ложь, Ложь, ДанныеРасшифровки);

				ТабличныйДокументПредметыСнабжения.Присоединить(ОбластьДетальныхЗаписейНеДоступен); 
				
			КонецЕсли; 
						
		КонецЦикла; 
	    			
	КонецЦикла;  	
			
КонецПроцедуры //СформироватьТабличныйДокумент

&НаСервере
Процедура ДобавитьПоставщикаВТабличныйДокумент(Поставщик)
	
	Если НЕ ЗначениеЗаполнено(Поставщик) Тогда
		
		Возврат;
		
	КонецЕсли;   
	
	СЗПоставщики.Добавить(Поставщик);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетПредметыСнабжения");	
	ТЗПредметыСнабжения = РеквизитФормыВЗначение("ТаблицаЗначенийПредметыСнабжения");

	ТабДокНовыйПоставщик = Новый ТабличныйДокумент;
	
	ОбластьЗаголовокТаблицыПоставщикЗабивка = Макет.ПолучитьОбласть("Заголовок|ПоставщикВертикальПустая");
	ТабДокНовыйПоставщик.Вывести(ОбластьЗаголовокТаблицыПоставщикЗабивка);
		
	ОбластьШапкаТаблицыПоставщик = Макет.ПолучитьОбласть("ШапкаТаблицы|ПоставщикВертикаль");
	ОбластьШапкаТаблицыПоставщик.Параметры.Поставщик = Поставщик;
	ОбластьШапкаТаблицыПоставщик.Параметры.РасшифровкаДействиеУстановитьВсе = Новый Структура("Действие, ОбластьДействия", "УстановитьВсе", "ВКолонке");
	ОбластьШапкаТаблицыПоставщик.Параметры.РасшифровкаДействиеСнятьВсе = Новый Структура("Действие, ОбластьДействия", "СнятьВсе", "ВКолонке");
		
	ТабДокНовыйПоставщик.Вывести(ОбластьШапкаТаблицыПоставщик);
	
	//Детальные записи
	ОбластьДетальныхЗаписейНеДоступен = Макет.ПолучитьОбласть("ПредметСнабженияГоризонтальНеДоступен|ПоставщикВертикаль");

	Для Каждого СтрокаПредметыСнабжения Из ТЗПредметыСнабжения Цикл
		
		ДанныеРасшифровки = Новый Структура("НомерСтроки, ПредметСнабжения, ЕдиницаИзмерения, Количество, ИдентификаторПозиции, Поставщик");
		ЗаполнитьЗначенияСвойств(ДанныеРасшифровки, СтрокаПредметыСнабжения);
		ДанныеРасшифровки.Поставщик = Поставщик;
		
		ОбластьДетальныхЗаписейНеДоступен.Параметры.Отметка = Ложь;
		ОбластьДетальныхЗаписейНеДоступен.Параметры.Расшифровка = Новый Структура("Действие, Отметка, ЯвляетсяПоставщиком, ДанныеРасшифровки", 
						"УстановитьСнятьОтметку", Ложь, Ложь, ДанныеРасшифровки);  	
		
		ТабДокНовыйПоставщик.Вывести(ОбластьДетальныхЗаписейНеДоступен); 
		
	КонецЦикла;  
	
	ВыведеннаяОбласть = ТабличныйДокументПредметыСнабжения.ПолучитьОбласть(1,1,ТабличныйДокументПредметыСнабжения.ВысотаТаблицы,ТабличныйДокументПредметыСнабжения.ШиринаТаблицы); 
	ТабличныйДокументПредметыСнабжения.Очистить();
	ТабличныйДокументПредметыСнабжения.Вывести(ВыведеннаяОбласть);
	ТабличныйДокументПредметыСнабжения.Присоединить(ТабДокНовыйПоставщик);
		
КонецПроцедуры //ДобавитьПоставщикаВТабличныйДокумент

&НаКлиенте
Процедура УстановитьОтметкуОбласти(ТабличныйДокумент, Отметка, НомерСтроки1, НомерКолонки1, НомерСтроки2, НомерКолонки2, НеПроверять = Ложь)
	
	ОбластьТабДок = ТабличныйДокумент.Область(НомерСтроки1, НомерКолонки1, НомерСтроки2, НомерКолонки2);
	
	Если ЗначениеЗаполнено(ОбластьТабДок.Расшифровка) Тогда
		
		Если НеПроверять ИЛИ НЕ Отметка Тогда
			
			ОбластьТабДок.Расшифровка.Отметка = Отметка;
			
		Иначе
			
			ОбластьТабДок.Расшифровка.Отметка = ОбластьТабДок.Расшифровка.ЯвляетсяПоставщиком;			
			
		КонецЕсли;
		
		ОбластьТабДок.Текст = ?(ОбластьТабДок.Расшифровка.Отметка, "V", "");

	КонецЕсли;   
		
КонецПроцедуры  //УстановитьОтметкуОбласти

#КонецОбласти

#Область Сформировать

&НаСервере
Функция СоздатьДокументыЗапросНаКоммерческоеПредложениеПоЗаявке(Заявка, Валюта, СводнаяТаблицаПСПоПоставщикам, ФормироватьПочтовыеСообщения = Ложь, ФормироватьФайлы = Ложь, МассивТабличныхДокументов = Неопределено)
	
	СтруктураВозврата = Новый Структура("Отказ, ОписаниеОшибки", Ложь, "");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СводнаяТаблицаПСПоПоставщикам", СводнаяТаблицаПСПоПоставщикам);
	
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	СводнаяТаблицаПСПоПоставщикам.Поставщик 			КАК Поставщик,
	|	СводнаяТаблицаПСПоПоставщикам.ПредметСнабжения 		КАК ПредметСнабжения,
	|	СводнаяТаблицаПСПоПоставщикам.ЕдиницаИзмерения 		КАК ЕдиницаИзмерения,
	|	СводнаяТаблицаПСПоПоставщикам.Количество 			КАК Количество,
	|	СводнаяТаблицаПСПоПоставщикам.ИдентификаторПозиции 	КАК ИдентификаторПозиции
	|ПОМЕСТИТЬ ВТ_СводнаяТаблицаПСПоПоставщикам
	|ИЗ
	|	&СводнаяТаблицаПСПоПоставщикам КАК СводнаяТаблицаПСПоПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СводнаяТаблицаПСПоПоставщикам.Поставщик 				КАК Поставщик,
	|	ВТ_СводнаяТаблицаПСПоПоставщикам.ПредметСнабжения 		КАК ПредметСнабжения,
	|	ВТ_СводнаяТаблицаПСПоПоставщикам.ЕдиницаИзмерения 		КАК ЕдиницаИзмерения,
	|	ВТ_СводнаяТаблицаПСПоПоставщикам.Количество 			КАК Количество,
	|	ВТ_СводнаяТаблицаПСПоПоставщикам.ИдентификаторПозиции 	КАК ИдентификаторПозиции
	|ИЗ
	|	ВТ_СводнаяТаблицаПСПоПоставщикам КАК ВТ_СводнаяТаблицаПСПоПоставщикам
	|ИТОГИ ПО
	|	Поставщик";
	#КонецОбласти
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоставщик = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	Пока ВыборкаПоставщик.Следующий() Цикл
		
		//Создаем новый документ ЗапросНаКоммерческоеПредложение
		
		ЗапросНаКоммерческоеПредложениеОбъект = Документы.ЗапросНаКоммерческоеПредложение.СоздатьДокумент();
		ЗапросНаКоммерческоеПредложениеОбъект.Дата 			= ТекущаяДата();
		ЗапросНаКоммерческоеПредложениеОбъект.Заявка 		= Заявка;
		ЗапросНаКоммерческоеПредложениеОбъект.Валюта 		= Валюта;
		ЗапросНаКоммерческоеПредложениеОбъект.Поставщик 	= ВыборкаПоставщик.Поставщик;
		ЗапросНаКоммерческоеПредложениеОбъект.Ответственный = Пользователи.ТекущийПользователь();
		
	    ВыборкаДетальныеЗаписи = ВыборкаПоставщик.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаДокумента = ЗапросНаКоммерческоеПредложениеОбъект.ПредметыСнабжения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента, ВыборкаДетальныеЗаписи);			
			
		КонецЦикла;
		
		Попытка 
			
			ЗапросНаКоммерческоеПредложениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			ОтменитьТранзакцию();
			СтруктураВозврата.Отказ = Истина;
			СтруктураВозврата.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать документ запрос на коммерческое предложение для поставщика %1: %2'"), ВыборкаПоставщик.Поставщик, ОписаниеОшибки()); 
				
			Возврат СтруктураВозврата;
			
		КонецПопытки;
		
		Если ФормироватьПочтовыеСообщения Тогда
			
			ПочтовоеСообщениеОбъект = ПолучитьДокументПочтовоеСообщенияДляЗапроса(ЗапросНаКоммерческоеПредложениеОбъект.Ссылка);
			Попытка 
				
				ПочтовоеСообщениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				
				ОтменитьТранзакцию();
				СтруктураВозврата.Отказ = Истина;
				СтруктураВозврата.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать документ почтовое сообщение для поставщика %1: %2'"), ВыборкаПоставщик.Поставщик, ОписаниеОшибки()); 
				
				Возврат СтруктураВозврата;
				
			КонецПопытки;
			
			ШаблонСообщения = ПолучитьШаблонПочтовогоСообщения();
			Если ЗначениеЗаполнено(ШаблонСообщения) Тогда
				
				ЗаполнитьДокументПочтовоеСообщенияПоШаблону(ПочтовоеСообщениеОбъект, ШаблонСообщения); 
				
				Попытка 
					
					ПочтовоеСообщениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
					
					ОтменитьТранзакцию();
					СтруктураВозврата.Отказ = Истина;
					СтруктураВозврата.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось заполнить по шаблону документ почтовое сообщение для поставщика %1: %2'"), ВыборкаПоставщик.Поставщик, ОписаниеОшибки()); 
					
					Возврат СтруктураВозврата;
					
				КонецПопытки;
				
			КонецЕсли;
			
			
			НаборЗаписейПочтовыеСообщенияИсходящие = РегистрыСведений.ПочтовыеСообщенияИсходящие.СоздатьНаборЗаписей();
			НоваяЗапись = НаборЗаписейПочтовыеСообщенияИсходящие.Добавить();
			НоваяЗапись.ПочтовоеСообщение = ПочтовоеСообщениеОбъект.Ссылка;
			
			Попытка 
				
				НаборЗаписейПочтовыеСообщенияИсходящие.Записать(Ложь);
				
			Исключение
				
				ОтменитьТранзакцию();
				СтруктураВозврата.Отказ = Истина;
				СтруктураВозврата.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось записать набор записей регистра сведений ""Почтовые сообщения исходящие"" : %1'"), ОписаниеОшибки()); 
				
				Возврат СтруктураВозврата;

			КонецПопытки; 
			
			//Присоединенные файлы
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ЗапросНаКоммерческоеПредложениеОбъект.Ссылка);
			ТабДок = Документы.ЗапросНаКоммерческоеПредложение.СформироватьПечатнуюФормуЗапросНаКоммерческоеПредложение(МассивОбъектов, Неопределено);
			ИмяБезРасширения = "Запрос на коммерческое предложение (" + СтрЗаменить(ЗапросНаКоммерческоеПредложениеОбъект.Поставщик.Наименование,"""","") + ")";
			ИмяВремФайла = ПолучитьИмяВременногоФайла();
    		ТабДок.Записать(ИмяВремФайла, ТипФайлаТабличногоДокумента.XLSX);
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("ВладелецФайлов",              ПочтовоеСообщениеОбъект.Ссылка);
			ПараметрыФайла.Вставить("Автор",                       Пользователи.ТекущийПользователь());
			ПараметрыФайла.Вставить("ИмяБезРасширения",            ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки",          "xlsx");
			ПараметрыФайла.Вставить("ВремяИзменения",              ТекущаяДата());
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДата());
			
			ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВремФайла)));  
			
		КонецЕсли;	
		
		Если ФормироватьФайлы Тогда
			
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ЗапросНаКоммерческоеПредложениеОбъект.Ссылка);
			
			ДанныеДокумента = Новый Структура("Подкаталог, Типфайла, ИмяФайла, Данные, ТипФайлаДокумента");
			
			ДанныеДокумента.Подкаталог = СтрЗаменить(ЗапросНаКоммерческоеПредложениеОбъект.Поставщик.Наименование,"""","");
			ДанныеДокумента.Типфайла = "ТабличныйДокумент";
			ДанныеДокумента.ИмяФайла = "Запрос на коммерческое предложение (" + СтрЗаменить(ЗапросНаКоммерческоеПредложениеОбъект.Поставщик.Наименование,"""","") + ").xlsx";
			ДанныеДокумента.Данные = Документы.ЗапросНаКоммерческоеПредложение.СформироватьПечатнуюФормуЗапросНаКоммерческоеПредложение(МассивОбъектов, Неопределено);	
			ДанныеДокумента.ТипФайлаДокумента = ТипФайлаТабличногоДокумента.XLSX;
			
			МассивТабличныхДокументов.Добавить(ДанныеДокумента);
			
			ДанныеДокумента = Новый Структура("Подкаталог, Типфайла, ИмяФайла, Данные, ТипФайлаДокумента");
			//ДанныеДокумента.Подкаталог = СтрЗаменить(ЗапросНаКоммерческоеПредложениеОбъект.Поставщик.Наименование,"""","");
			//ДанныеДокумента.Типфайла = "Текст";
			//ДанныеДокумента.ИмяФайла = "Текст письма для " + СтрЗаменить(ЗапросНаКоммерческоеПредложениеОбъект.Поставщик.Наименование,"""","") + ".doc";
			//ДанныеДокумента.Данные = ПолучитьШаблонПочтовогоСообщения().ТекстШаблонаПисьма;				
			
			ДанныеДокумента.Подкаталог = СтрЗаменить(ЗапросНаКоммерческоеПредложениеОбъект.Поставщик.Наименование,"""","");
			ДанныеДокумента.Типфайла = "ТабличныйДокумент";
			ДанныеДокумента.ИмяФайла = "Текст письма для " + СтрЗаменить(ЗапросНаКоммерческоеПредложениеОбъект.Поставщик.Наименование,"""","") + ".docx";
			ДанныеДокумента.Данные = СформироватьПечатнуюФормуПисьма(МассивОбъектов);	
			ДанныеДокумента.ТипФайлаДокумента = ТипФайлаТабличногоДокумента.DOCX;

			МассивТабличныхДокументов.Добавить(ДанныеДокумента);			 		 
			
		КонецЕсли;	
				
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат СтруктураВозврата;
		
КонецФункции //СоздатьДокументыЗапросНаКоммерческоеПредложениеПоЗаявке

#Область СформироватьПочтовыеСообщения

&НаСервере
Функция ПолучитьТаблицуПредметовСнабженияИПоставщиковНаСервере()
	
	ТаблицаПСИПоставщики = Новый ТаблицаЗначений;
	ТаблицаПСИПоставщики.Колонки.Добавить("ПредметСнабжения",		Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения"));
	ТаблицаПСИПоставщики.Колонки.Добавить("Поставщик",				Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПСИПоставщики.Колонки.Добавить("ЕдиницаИзмерения",		Новый ОписаниеТипов("СправочникСсылка.ОКЕИ"));
	ТаблицаПСИПоставщики.Колонки.Добавить("Количество",				Новый ОписаниеТипов("Число")); 
	ТаблицаПСИПоставщики.Колонки.Добавить("ИдентификаторПозиции",	Новый ОписаниеТипов("Строка")); 

	Для НомерКолонки = РабочаяОбластьКолонка По ТабличныйДокументПредметыСнабжения.ШиринаТаблицы Цикл
		
		Для НомерСтроки = РабочаяОбластьСтрока По ТабличныйДокументПредметыСнабжения.ВысотаТаблицы Цикл
			
			ОбластьТабДокПредметыСнабжения = ТабличныйДокументПредметыСнабжения.Область(НомерСтроки,НомерКолонки,НомерСтроки,НомерКолонки);
			
			Если ТипЗнч(ОбластьТабДокПредметыСнабжения.Расшифровка) = Тип("Структура") И ОбластьТабДокПредметыСнабжения.Расшифровка.Отметка Тогда
				
				НоваяСтрока = ТаблицаПСИПоставщики.Добавить();	
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбластьТабДокПредметыСнабжения.Расшифровка.ДанныеРасшифровки);
								
			КонецЕсли;
			
		КонецЦикла;   		
		
	КонецЦикла; 
	
	Возврат ТаблицаПСИПоставщики;
	
КонецФункции //ПолучитьТаблицуПредметовСнабженияИПоставщиковНаСервере

&НаСервере
Функция СформироватьПочтовыеСообщенияНаСервере()
	
	//сбор данных
	СводнаяТаблица = ПолучитьТаблицуПредметовСнабженияИПоставщиковНаСервере();	
	
	//формирование документов
	ФормироватьПочтовыеСообщения = Истина;
	Результат = СоздатьДокументыЗапросНаКоммерческоеПредложениеПоЗаявке(Заявка, Валюта, СводнаяТаблица, ФормироватьПочтовыеСообщения); 
	
	Возврат Результат;
		
КонецФункции //СформироватьПочтовыеСообщенияНаСервере

&НаСервере
Функция ПолучитьДокументПочтовоеСообщенияДляЗапроса(ДокументЗапросНаКП)
	
	ПочтовоеСообщениеОбъект = Документы.ПочтовоеСообщение.СоздатьДокумент();
	ПочтовоеСообщениеОбъект.Дата 			= ТекущаяДата();
	ПочтовоеСообщениеОбъект.Отправитель 	= Справочники.Настройки.ПолучитьУчетнуюЗаписьДляОтправкиПочтовыхСообщений();
	ПочтовоеСообщениеОбъект.Ответственный 	= Пользователи.ТекущийПользователь();
	ПочтовоеСообщениеОбъект.Получатель 		= ДокументЗапросНаКП.Поставщик;
	
	ПочтовоеСообщениеОбъект.Заголовок = "Заголовок";
	ПочтовоеСообщениеОбъект.ТекстСообщения = "Текст сообщения!";
	
	Возврат ПочтовоеСообщениеОбъект;
	
КонецФункции //ПолучитьДокументПочтовоеСообщенияДляЗапроса

&НаСервере
Процедура ЗаполнитьДокументПочтовоеСообщенияПоШаблону(ПочтовоеСообщениеОбъект, ШаблонСообщения)
	
	СообщениеПоШаблону = ШаблоныСообщений.СформироватьСообщение(ШаблонСообщения, ПочтовоеСообщениеОбъект.Ссылка, УникальныйИдентификатор, 
	Новый Структура("ПреобразовыватьHTMLДляФорматированногоДокумента", Истина)); 
		
	ПочтовоеСообщениеОбъект.Заголовок = СообщениеПоШаблону.Тема;
	ПочтовоеСообщениеОбъект.ТекстСообщенияHTML = СообщениеПоШаблону.Текст;
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ПочтовоеСообщениеОбъект.ТекстСообщенияHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML); 
	ПочтовоеСообщениеОбъект.ТекстСообщения = ДокументHTML.Тело.ТекстовоеСодержимое;

КонецПроцедуры //ЗаполнитьДокументПочтовоеСообщенияПоШаблону

&НаСервере
Функция ПолучитьШаблонПочтовогоСообщения()
	
	Возврат Справочники.Настройки.ПолучитьШаблонСообщенияНаКоммерческоеПредложение();
	
КонецФункции //ПолучитьШаблонПочтовогоСообщения

#КонецОбласти

#Область СформироватьФайлы

&НаСервере
Функция СформироватьПечатнуюФормуПисьма(МассивОбъектов) Экспорт
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетПисьма");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);

	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапросНаКоммерческоеПредложение.Поставщик КАК Поставщик,
	|	ЗапросНаКоммерческоеПредложение.Поставщик.Наименование КАК ПоставщикНаименование,
	|	ЗапросНаКоммерческоеПредложение.Поставщик.ДолжностьРуководителя КАК ПоставщикДолжностьРуководителя,
	|	ЗапросНаКоммерческоеПредложение.Поставщик.ДолжностьРуководителяДательный КАК ПоставщикДолжностьРуководителяДательный,
	|	ЗапросНаКоммерческоеПредложение.Поставщик.ФИОРуководителя КАК ПоставщикФИОРуководителя,
	|	ОрганизацииКонтактнаяИнформацияПочтовыйАдрес.Представление КАК ПоставщикПочтовыйАдрес,
	|	ОрганизацииКонтактнаяИнформацияФакс.Представление КАК ПоставщикФакс,
	|	ОрганизацииКонтактнаяИнформацияАдресЭлектроннойПочты.Представление КАК ПоставщикЭлектронныйАдрес,
	|	ЗапросНаКоммерческоеПредложение.Ответственный КАК Ответственный,
	|	ЗапросНаКоммерческоеПредложение.Ответственный.Организация КАК ОтветственныйОрганизация,
	|	ЗапросНаКоммерческоеПредложение.Ответственный.Наименование КАК ОтветственныйНаименование,
	|	ПользователиКонтактнаяИнформацияАдресЭлектроннойПочты.Представление КАК ОтветственныйЭлектронныйАдрес,
	|	ПользователиКонтактнаяИнформацияТелефон.Представление КАК ОтветственныйТелефон
	|ИЗ
	|	Документ.ЗапросНаКоммерческоеПредложение КАК ЗапросНаКоммерческоеПредложение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияПочтовыйАдрес
	|		ПО ЗапросНаКоммерческоеПредложение.Поставщик = ОрганизацииКонтактнаяИнформацияПочтовыйАдрес.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияПочтовыйАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (ОрганизацииКонтактнаяИнформацияПочтовыйАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПочтовыйАдрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияФакс
	|		ПО ЗапросНаКоммерческоеПредложение.Поставщик = ОрганизацииКонтактнаяИнформацияФакс.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияФакс.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))
	|			И (ОрганизацииКонтактнаяИнформацияФакс.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.Факс))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформацияАдресЭлектроннойПочты
	|		ПО ЗапросНаКоммерческоеПредложение.Поставщик = ОрганизацииКонтактнаяИнформацияАдресЭлектроннойПочты.Ссылка
	|			И (ОрганизацииКонтактнаяИнформацияАдресЭлектроннойПочты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ОрганизацииКонтактнаяИнформацияАдресЭлектроннойПочты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЭлектроннаяПочта))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформацияТелефон
	|		ПО ЗапросНаКоммерческоеПредложение.Ответственный = ПользователиКонтактнаяИнформацияТелефон.Ссылка
	|			И (ПользователиКонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (ПользователиКонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПользователя))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформацияАдресЭлектроннойПочты
	|		ПО ЗапросНаКоммерческоеПредложение.Ответственный = ПользователиКонтактнаяИнформацияАдресЭлектроннойПочты.Ссылка
	|			И (ПользователиКонтактнаяИнформацияАдресЭлектроннойПочты.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (ПользователиКонтактнаяИнформацияАдресЭлектроннойПочты.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
	|ГДЕ
	|	ЗапросНаКоммерческоеПредложение.Ссылка В(&МассивДокументов)
	|";
	#КонецОбласти
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьТелоПисьма = Макет.ПолучитьОбласть("Детали");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗапросНаКоммерческоеПредложение_Письмо";
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ПоставщикДолжностьРуководителя = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПоставщикДолжностьРуководителяДательный), ВыборкаДетальныеЗаписи.ПоставщикДолжностьРуководителяДательный, "________________________________");
		ОбластьЗаголовок.Параметры.ПоставщикНаименование = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПоставщикНаименование), ВыборкаДетальныеЗаписи.ПоставщикНаименование, "________________________________");
		ОбластьЗаголовок.Параметры.ПоставщикПочтовыйАдрес = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПоставщикПочтовыйАдрес), ВыборкаДетальныеЗаписи.ПоставщикПочтовыйАдрес, "________________________________" + Символы.ПС + "________________________________");
		ОбластьЗаголовок.Параметры.ПоставщикФакс = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПоставщикФакс), ВыборкаДетальныеЗаписи.ПоставщикФакс, "___________________________");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ФИОРуководителя = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПоставщикФИОРуководителя), ВыборкаДетальныеЗаписи.ПоставщикФИОРуководителя, Неопределено);
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИОРуководителя);
	    ОбластьШапка.Параметры.ПоставщикИОРуководителя = ?(НЕ СтруктураФИО.Имя = Неопределено, СтруктураФИО.Имя, "______________") + " " + ?(НЕ СтруктураФИО.Отчество = Неопределено, СтруктураФИО.Отчество, "______________");
		ТабличныйДокумент.Вывести(ОбластьШапка);

		ОбластьТелоПисьма.Параметры.СимволТабуляции = Символы.Таб;
		ОбластьТелоПисьма.Параметры["ПоставщикЭлектронныйАдрес"] = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи["ПоставщикЭлектронныйАдрес"]), ВыборкаДетальныеЗаписи["ПоставщикЭлектронныйАдрес"], "____________________");; 			
		ОбластьТелоПисьма.Параметры["ОтветственныйОрганизация"] = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи["ОтветственныйОрганизация"]), ВыборкаДетальныеЗаписи["ОтветственныйОрганизация"], "____________________");; 			
		ОбластьТелоПисьма.Параметры["ОтветственныйНаименование"] = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи["ОтветственныйНаименование"]), ВыборкаДетальныеЗаписи["ОтветственныйНаименование"], "____________________");; 			
		ОбластьТелоПисьма.Параметры["ОтветственныйТелефон"] = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи["ОтветственныйТелефон"]), ВыборкаДетальныеЗаписи["ОтветственныйТелефон"], "____________________");; 			
		ОбластьТелоПисьма.Параметры["ОтветственныйЭлектронныйАдрес"] = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи["ОтветственныйЭлектронныйАдрес"]), ВыборкаДетальныеЗаписи["ОтветственныйЭлектронныйАдрес"], "____________________");; 			
		
		ТабличныйДокумент.Вывести(ОбластьТелоПисьма);
		
		ОбластьПодвал.Параметры["ОтветственныйОрганизация"] = ОбластьТелоПисьма.Параметры["ОтветственныйОрганизация"];
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьПечатнуюФормуПисьма 

&НаКлиенте
Асинх Функция ПолучитьКаталогДляСохраненияНабораФайлов()

	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог для сохранения файлов";
	
	РезультатВыбрать = Ждать ДиалогОткрытияФайла.ВыбратьАсинх();
	Если РезультатВыбрать = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатВыбрать[0] + "\";
	КонецЕсли;
	
КонецФункции //ПолучитьКаталогДляСохраненияНабораФайлов

&НаСервере
Функция СформироватьНаборФайловНаСервере(МассивТабличныхДокументов)
	
	//сбор данных
	СводнаяТаблица = ПолучитьТаблицуПредметовСнабженияИПоставщиковНаСервере();	
	
	//формирование документов
	ФормироватьПочтовыеСообщения = Ложь;
	ФормироватьФайлы = Истина;
	Результат = СоздатьДокументыЗапросНаКоммерческоеПредложениеПоЗаявке(Заявка, Валюта, СводнаяТаблица, ФормироватьПочтовыеСообщения, ФормироватьФайлы, МассивТабличныхДокументов); 
	
	Возврат Результат;
	
КонецФункции //СформироватьНаборФайловНаСервере

&НаКлиенте
Асинх Процедура СоздатьПодкаталог(Каталог, Подкаталог)
	
	КаталогНаДиске = Новый Файл(Каталог + Подкаталог);
	РезультатАсинх = Ждать КаталогНаДиске.СуществуетАсинх();
	
	Если Не РезультатАсинх Тогда
		СоздатьКаталогАсинх(Каталог + Подкаталог);
	КонецЕсли;	 // Если Не РезультатАсинх Тогда
		
КонецПроцедуры //СохранитьФайлыВКаталог  

&НаКлиенте
Процедура СохранитьФайлыВКаталог(МассивДокументов, Каталог, Результат)
	
	Попытка
		
		Для Каждого Документ Из МассивДокументов Цикл
			
			Подкаталог = "";
			Если Документ.Свойство("Подкаталог", Подкаталог) Тогда
				
				СоздатьПодкаталог(Каталог, Подкаталог);	
				КаталогВыгрузки = Каталог + Подкаталог + "\";

			КонецЕсли;
			
			СохраняемыйДокумент = Документ.Данные;
			СохраняемыйДокумент.ЗаписатьАсинх(КаталогВыгрузки + Документ.ИмяФайла, Документ.ТипФайлаДокумента);
			
		КонецЦикла;  	
		
	Исключение
		
		Результат.Отказ = Истина;
		Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сохранить файлы в каталог %1: %2'"), Каталог, ОписаниеОшибки()); 
		
	КонецПопытки;

КонецПроцедуры //СохранитьФайлыВКаталог  

#КонецОбласти

&НаСервере
Функция ПолучитьЗаявкиПоЗапросу(ЗапросТКПRFP)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Заявка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Заявка КАК Заявка
	|ГДЕ
	|	Заявка.ЗапросТКПRFP = &ЗапросТКПRFP";
	
	Запрос.УстановитьПараметр("ЗапросТКПRFP", ЗапросТКПRFP);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции 

#КонецОбласти 

////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ЗаявкаСтрокаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСписокЗаявок" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НастройкиОтбора = Новый НастройкиКомпоновкиДанных;
		
		Если СписокЗаявок.Количество() > 0 Тогда
			НовыйЭлемент = НастройкиОтбора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			НовыйЭлемент.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
			НовыйЭлемент.ПравоеЗначение   = СписокЗаявок;
		КонецЕсли;		
		
		ОткрытьФорму("Документ.Заявка.Форма.ФормаВыбора", Новый Структура("ФиксированныеНастройки", НастройкиОтбора), ЭтаФорма);
		
	КонецЕсли;  	
	
КонецПроцедуры //ЗаявкаСтрокаОбработкаНавигационнойСсылки

&НаКлиенте
Процедура СформироватьПочтовыеСообщения(Команда)
	
	Результат = СформироватьПочтовыеСообщенияНаСервере();
	
	Если Результат.Отказ Тогда
		
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		
	Иначе
		
		Элементы.ГруппаОбработки.Видимость = Ложь;
		Элементы.ГруппаЗавершение.Видимость = Истина;
		ИнформацияОВыполнении = НСтр("ru = 'Документы успешно сформированы!'");
		 
	КонецЕсли;
	
	
КонецПроцедуры  //СформироватьПочтовыеСообщения

&НаКлиенте
Асинх Процедура СформироватьНаборФайлов(Команда)
	
	Каталог = Ждать ПолучитьКаталогДляСохраненияНабораФайлов();
	
	Если Каталог = Неопределено Тогда
		Возврат; 		
	КонецЕсли;
	
		
	Состояние("Выгрузка файлов запросов на коммерческое предложение в " + Каталог, , , БиблиотекаКартинок.ДлительнаяОперация48);
	
	МассивФайловДляВыгрузки = Новый Массив;
	
	Результат = СформироватьНаборФайловНаСервере(МассивФайловДляВыгрузки);
	
	Если Результат.Отказ Тогда
		
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		
	Иначе
		
		СохранитьФайлыВКаталог(МассивФайловДляВыгрузки, Каталог, Результат);

		Если Результат.Отказ Тогда
		
			ПоказатьПредупреждение(, Результат.ОписаниеОшибки);

		Иначе
			
			Элементы.ГруппаОбработки.Видимость = Ложь;
			Элементы.ГруппаЗавершение.Видимость = Истина;
			ИнформацияОВыполнении = НСтр("ru = 'Документы успешно выгружены!'");
			
		КонецЕсли; 
	КонецЕсли;

					
КонецПроцедуры //СформироватьНаборФайлов

&НаКлиенте
Процедура ДобавитьПоставщика(Команда)
	
	НастройкиОтбора = Новый НастройкиКомпоновкиДанных;
	
	Если СЗПоставщики.Количество() > 0 Тогда
		НовыйЭлемент = НастройкиОтбора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
		НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
		НовыйЭлемент.ПравоеЗначение = СЗПоставщики;
	КонецЕсли;		
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаВыбора", Новый Структура("ФиксированныеНастройки", НастройкиОтбора), ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Заявка", Заявка) Тогда
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЗапросТКПRFP") Тогда
		
		СписокЗаявок.ЗагрузитьЗначения(ПолучитьЗаявкиПоЗапросу(Параметры.ЗапросТКПRFP));
		Если СписокЗаявок.Количество() = 0 Тогда
			
			Элементы.ГруппаОбработки.Видимость = Ложь;
			Элементы.ГруппаЗавершение.Видимость = Истина;
			ИнформацияОВыполнении = НСтр("ru = 'Нет заявок по запросу на ТКП-RFP!'");
			
		ИначеЕсли СписокЗаявок.Количество() = 1 Тогда
			
			Заявка = СписокЗаявок[0].Значение;			
			
		КонецЕсли;
					
	КонецЕсли;
	
	Валюта = Справочники.ОКВ.НайтиПоКоду("643");
	
	УстановитьСвойстваЭлементовФормы();	
	
КонецПроцедуры //ПриСозданииНаСервере

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.Заявка.Форма.ФормаВыбора" Тогда
		
		Заявка = ВыбранноеЗначение;
		УстановитьСвойстваЭлементовФормы();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.Организации.Форма.ФормаВыбора" Тогда
		
		Поставщик = ВыбранноеЗначение;
		ДобавитьПоставщикаВТабличныйДокумент(Поставщик); 
		Элементы.ТабличныйДокументПредметыСнабжения.ТекущаяОбласть = ТабличныйДокументПредметыСнабжения.Область(РабочаяОбластьСтрока, ТабличныйДокументПредметыСнабжения.ШиринаСтраницы-2, РабочаяОбластьСтрока, ТабличныйДокументПредметыСнабжения.ШиринаСтраницы);
		
	КонецЕсли;
	
КонецПроцедуры //ОбработкаВыбора

&НаКлиенте
Процедура ТабличныйДокументПредметыСнабженияОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ОбластьДействия = "";

		Если Расшифровка.Действие = "УстановитьСнятьОтметку" Тогда 
			
			УстановитьОтметкуОбласти(ТабличныйДокументПредметыСнабжения, НЕ Расшифровка.Отметка, Элемент.ТекущаяОбласть.Верх, Элемент.ТекущаяОбласть.Лево, Элемент.ТекущаяОбласть.Низ, Элемент.ТекущаяОбласть.Право, Истина); 
			
		ИначеЕсли Расшифровка.Свойство("ОбластьДействия", ОбластьДействия) Тогда
			
			Если ОбластьДействия = "ВКолонке" Тогда
				
				НомерКолонки = ?(Расшифровка.Действие = "УстановитьВсе", Элемент.ТекущаяОбласть.Лево, Элемент.ТекущаяОбласть.Лево - 1);
				
				Для НомерСтроки = РабочаяОбластьСтрока По ТабличныйДокументПредметыСнабжения.ВысотаТаблицы Цикл
					
					УстановитьОтметкуОбласти(ТабличныйДокументПредметыСнабжения, (Расшифровка.Действие = "УстановитьВсе"), НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки + 1); 
					
				КонецЦикла;
				
			ИначеЕсли ОбластьДействия = "ВСтроке" Тогда
				
				НомерСтроки = Элемент.ТекущаяОбласть.Низ;
				
				Для НомерКолонки = РабочаяОбластьКолонка По ТабличныйДокументПредметыСнабжения.ШиринаТаблицы Цикл
					
					УстановитьОтметкуОбласти(ТабличныйДокументПредметыСнабжения, (Расшифровка.Действие = "УстановитьВсе"), НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки + 1); 
					НомерКолонки = НомерКолонки + 1;
					
				КонецЦикла;  
				
			КонецЕсли 					
		КонецЕсли;
	КонецЕсли;   	
	
КонецПроцедуры //ТабличныйДокументПредметыСнабженияОбработкаРасшифровки












