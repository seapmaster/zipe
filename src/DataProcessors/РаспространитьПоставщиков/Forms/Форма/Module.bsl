&НаСервере
Процедура ЗаписатьВЛог(ГУИД, Ссылка, ИдентификаторСтроки=Неопределено, Описание, СтруктураДанных=Неопределено)
	
	// возврат;
	
	МЗ = РегистрыСведений.ЛогЗагрузки.СоздатьМенеджерЗаписи();
	МЗ.ГУИД = ГУИД;
	МЗ.Файл = "";
	МЗ.ПутьКФайлу = "Протягивание поставщиков";
	МЗ.Объект1С = Ссылка;
	МЗ.Период = ТекущаяДата();
	МЗ.ИдентификаторСтроки = ИдентификаторСтроки;
	МЗ.Описание = Описание;
	МЗ.СтруктураДанных = СтруктураДанных;
	Попытка
		МЗ.Записать(Истина);
	Исключение
	    аа = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НайтиПоставщикаВСтруктуре(Стру, Уровень)
	
	Пост  = "";
	Длина = СтрДлина(Уровень);
	
	Пока Длина >= 4 Цикл
		Если Уровень = "" Тогда
			Прервать;
		КонецЕсли; 
		Если Стру.Свойство(Уровень) Тогда
			Пост = Стру[Уровень];
			Прервать;
		Иначе
			ПозНП = СтрНайти(Уровень, "_", НаправлениеПоиска.СКонца);
			Уровень = Сред(Уровень, 0, ПозНП-1);
		КонецЕсли;
		Длина = СтрДлина(Уровень);
	КонецЦикла; 
	
	Возврат Пост;
	
КонецФункции

&НаСервере
Функция ПройтиИерархически(Дерево, Масс, Записывать) 
	
	Если Дерево.Строки.Количество() = 0 Тогда
		Возврат 0; // для конечных нет смысла
	КонецЕсли; 
	
	Если НЕ Дерево.Тип = ТипГруппа Тогда
		Если Поставщик.Пустая() Тогда
			ТаблПоставщиков = Дерево.ПредметСнабжения.ИзготовителиИПоставщики;
			//Если Масс.Количество() = 0 тогда
			Для каждого Стр Из ТаблПоставщиков Цикл
				Если Масс.Найти(Стр.Контрагент) = Неопределено Тогда
					//Если Стр.Поставщик Тогда
					Масс.Добавить(Стр);
					//КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
			//КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	Для каждого Выборка Из Дерево.Строки Цикл
		
		ПС = Выборка.ПредметСнабжения;
		//Если НЕ ЗначениеЗаполнено(ПС) Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		ТаблПоставщиков = ПС.ИзготовителиИПоставщики;
		
		Если РежимРаботы = 2 И НЕ ТаблПоставщиков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		НадоЗаписать = Ложь; Масс1 = Новый Массив;
		
		Для каждого Стр Из Масс Цикл
			Если НЕ ПС.Пустая() Тогда
				// Обновляем спр ПС
				Если Записывать Тогда
					Если ТаблПоставщиков.Найти(Стр.Контрагент) = Неопределено Тогда
						//СпрОБ = Выборка.ПредметСнабжения.ПолучитьОбъект();
						Масс1.Добавить(Стр);
						НадоЗаписать = Истина;
						//ЗаписатьВЛог(Выборка.ПредметСнабжения.УникальныйИдентификатор(), Выборка.ПредметСнабжения, "-", "вставили поставщика " + Строка(Стр.Контрагент), Неопределено)
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НадоЗаписать Тогда
			СпрОБ = ПС.ПолучитьОбъект();
			Для каждого Элем Из Масс1 Цикл
				НовСтр = СпрОБ.ИзготовителиИПоставщики.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Элем);
				НовСтр.Поставщик = Истина;
			КонецЦикла; 
			СпрОБ.Записать();
			ДобавленоПоставщиков = ДобавленоПоставщиков + 1;
		КонецЕсли; 
		
		ПройтиИерархически(Выборка, Масс, Записывать);
		
	КонецЦикла;

	Если Поставщик.Пустая() Тогда
		Масс.Очистить();
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция РаспространитьПоставщиков(Записывать = Ложь)
	
	ВыбранЭлементСтруктуры = ЭлементыСтруктурыСписок.Количество() > 0;
	
	ДобавленоПоставщиков = 0;
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип КАК Тип
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец"
	+ ?(ВыбранЭлементСтруктуры, "	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ (&Родитель)", "") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Владелец", Заказ);
	Если ВыбранЭлементСтруктуры Тогда
		Запрос.УстановитьПараметр("Родитель", ЭлементыСтруктурыСписок);
	КонецЕсли; 
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	//Дерево.Колонки.Добавить("Метка");
	
	Для каждого Выборка Из Дерево.Строки Цикл // Верхние уровни
		
		//ТаблПоставщиков = Выборка.ПредметСнабжения.ИзготовителиИПоставщики;
		Масс = Новый Массив;
		Если НЕ Поставщик.Пустая() Тогда
			//Если НЕ Дерево.Тип = ТипГруппа Тогда
			//	Если реж Тогда
			//		
			//	КонецЕсли; 
			//КонецЕсли;
			Стру = Новый Структура;
			Стру.Вставить("Контрагент", Поставщик);
			Стру.Вставить("Поставщик",  Истина);
			Масс.Добавить(Стру);
		КонецЕсли; 
		
		ПройтиИерархически(Выборка, Масс, Записывать);
		
	КонецЦикла;
	
	Сообщить("Проставлено поставщиков: " + Строка(ДобавленоПоставщиков));
	
	//Возврат Дерево;
	
КонецФункции
 
&НаКлиенте
Процедура Проставить(Команда)
	// Вставить содержимое обработчика.
	Дерево = РаспространитьПоставщиков();
	
	//Дерево.ВыбратьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	РаспространитьПоставщиков(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПоставщиков(Команда)
	
	Если Поставщик.Пустая() Тогда
		
		РаспространитьПоставщиков(Истина);
		
	Иначе
		
		Режим = РежимДиалогаВопрос.ДаНет;
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
		
		ПоказатьВопрос(Оповещение, "Добавить поставщика выбранным элементам ?", Режим, 0);
		
	КонецЕсли; 
	//ПроставитьПоставщиковНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКораблей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заказы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Заказы КАК Заказы
	|ГДЕ
	|	НЕ Заказы.ПометкаУдаления
	|	И Заказы.Владелец В(&Владелец)";
	ЗАпрос.УстановитьПараметр("Владелец", Проекты);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ПоВсемКораблям(Команда) // по проектам
	
	СписокКораблей = ПолучитьСписокКораблей();
	
	Всего = СписокКораблей.Количество();  сч=0;
	
	Для каждого Стр из СписокКораблей Цикл
		
		Заказ = Стр; сч=сч+1;
		
		Текст = "Обновляем " + Строка(Заказ);
		
		Состояние(Текст, сч , Строка(сч)+ " из "+Строка(Всего));
		
		РаспространитьПоставщиков(Истина);		
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТипГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	
	Проекты.Добавить(Справочники.ПроектыКораблей.НайтиПоНаименованию("11356"),, Истина);
	Проекты.Добавить(Справочники.ПроектыКораблей.НайтиПоНаименованию("877ЭКМ"),, Истина);
	
	РежимРаботы = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементыСтруктурыСписокЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Владелец, РежимВыбора", Заказ, Истина));
	
	ОткрытьФорму("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ФормаСписка", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	//Режим = РежимДиалогаВопрос.ДаНет;
	//Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса1", ЭтаФорма);
	//ПоказатьВопрос(Оповещение, "Список будет очищен! Продолжить?", Режим, 0);
	ЭлементыСтруктурыСписок.Очистить();
КонецПроцедуры
