//ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ ДАННЫХ
#Область ЗагрузкаДанных

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьДанныеЗавершение", ЭтаФорма), "Результат предыдущей загрузки или сопоставления будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗагрузкуДанных();
	Иначе
		Сообщить("Прервано пользователем!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанных()
	
	Поставщики.Очистить();
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	СтрокаПодключения = "Provider=MSDASQL.1;Persist Security Info=False;Extended Properties=""DSN=Excel Files;DBQ=&Filename;DefaultDir=&Foldername;DriverId=1046;MaxBufferSize=2048;PageTimeout=5;""";
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения,"&Filename",Файл.ПолноеИмя);
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения,"&Foldername",Файл.Путь);
	
	Соединение = Новый COMОбъект("ADODB.CONNECTION");
	
	Попытка
		Соединение.Open(СтрокаПодключения);
	Исключение
		ТекИнформацияОбОшибке = "Произошла ошибка: " + ОписаниеОшибки() + ", не подключиться к источнику. Обработка прервана!";
		Сообщить(ТекИнформацияОбОшибке,СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	БД = Новый COMОбъект("ADOX.Catalog");
	БД.ActiveConnection = Соединение;
			
	ТекстЗапроса =
	"select *
    |from [Лист1$]";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	
	Попытка
		НаборЗаписей.CursorType = 3;
		НаборЗаписей.Open(ТекстЗапроса,Соединение);
	Исключение
		ТекИнформацияОбОшибке = "Не получены данные таблицы файла по причине "+ОписаниеОшибки();
		Сообщить(ТекИнформацияОбОшибке,СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	Пока НаборЗаписей.EOF()=0 Цикл
		
		СтрокаПоставщик = Поставщики.Добавить();
		СтрокаПоставщик.Наименование = СокрЛП(НаборЗаписей.Fields(0).Value);
		СтрокаПоставщик.НаименованиеКраткое = СокрЛП(НаборЗаписей.Fields(1).Value);
		СтрокаПоставщик.Страна = СокрЛП(НаборЗаписей.Fields(2).Value);
		СтрокаПоставщик.Город = СокрЛП(НаборЗаписей.Fields(3).Value);
		СтрокаПоставщик.Индекс = СокрЛП(НаборЗаписей.Fields(4).Value);
		СтрокаПоставщик.Адрес = СокрЛП(НаборЗаписей.Fields(5).Value);
		СтрокаПоставщик.УсловноеНаименование = СокрЛП(НаборЗаписей.Fields(6).Value);
		
		НаборЗаписей.MoveNext();
		
	КонецЦикла
	
КонецПроцедуры
 
#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ СОПОСТАВЛЕНИЯ ДАННЫХ
#Область СопоставлениеДанных

&НаКлиенте
Процедура СопоставитьДанные(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СопоставитьДанныеЗавершение", ЭтаФорма), "Результат предыдущей загрузки или сопоставления будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьСопоставлениеДанных();
	Иначе
		Сообщить("Прервано пользователем!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСопоставлениеДанных()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поставщики.Наименование КАК Наименование,
	|	Поставщики.НаименованиеКраткое КАК НаименованиеКраткое,
	|	Поставщики.Страна КАК Страна,
	|	Поставщики.Город КАК Город,
	|	Поставщики.Индекс КАК Индекс,
	|	Поставщики.Адрес КАК Адрес,
	|	Поставщики.УсловноеНаименование КАК УсловноеНаименование
	|ПОМЕСТИТЬ втПоставщики
	|ИЗ
	|	&Поставщики КАК Поставщики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НаименованиеКраткое
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПоставщики.Наименование КАК Наименование,
	|	втПоставщики.НаименованиеКраткое КАК НаименованиеКраткое,
	|	втПоставщики.Страна КАК Страна,
	|	втПоставщики.Город КАК Город,
	|	втПоставщики.Индекс КАК Индекс,
	|	втПоставщики.Адрес КАК Адрес,
	|	втПоставщики.УсловноеНаименование КАК УсловноеНаименование,
	|	ЕСТЬNULL(Организации.Ссылка, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК РезультатПоискаПоНаименованию
	|ПОМЕСТИТЬ втПоставщикиПоНаименованию
	|ИЗ
	|	втПоставщики КАК втПоставщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО втПоставщики.НаименованиеКраткое = Организации.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УсловноеНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПоставщикиПоНаименованию.Наименование КАК Наименование,
	|	втПоставщикиПоНаименованию.НаименованиеКраткое КАК НаименованиеКраткое,
	|	втПоставщикиПоНаименованию.Страна КАК Страна,
	|	втПоставщикиПоНаименованию.Город КАК Город,
	|	втПоставщикиПоНаименованию.Индекс КАК Индекс,
	|	втПоставщикиПоНаименованию.Адрес КАК Адрес,
	|	втПоставщикиПоНаименованию.УсловноеНаименование КАК УсловноеНаименование,
	|	втПоставщикиПоНаименованию.РезультатПоискаПоНаименованию КАК РезультатПоискаПоНаименованию,
	|	ЕСТЬNULL(Организации.Ссылка, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК РезультатПоискаПоУсловномуНаименованию
	|ПОМЕСТИТЬ втПоставщикиПоУсловномуНаименованию
	|ИЗ
	|	втПоставщикиПоНаименованию КАК втПоставщикиПоНаименованию
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО втПоставщикиПоНаименованию.УсловноеНаименование = Организации.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Индекс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПоставщикиПоУсловномуНаименованию.Наименование КАК Наименование,
	|	втПоставщикиПоУсловномуНаименованию.НаименованиеКраткое КАК НаименованиеКраткое,
	|	втПоставщикиПоУсловномуНаименованию.Страна КАК Страна,
	|	втПоставщикиПоУсловномуНаименованию.Город КАК Город,
	|	втПоставщикиПоУсловномуНаименованию.Индекс КАК Индекс,
	|	втПоставщикиПоУсловномуНаименованию.Адрес КАК Адрес,
	|	втПоставщикиПоУсловномуНаименованию.УсловноеНаименование КАК УсловноеНаименование,
	|	МАКСИМУМ(втПоставщикиПоУсловномуНаименованию.РезультатПоискаПоНаименованию) КАК РезультатПоискаПоНаименованию,
	|	МАКСИМУМ(втПоставщикиПоУсловномуНаименованию.РезультатПоискаПоУсловномуНаименованию) КАК РезультатПоискаПоУсловномуНаименованию,
	|	МАКСИМУМ(ЕСТЬNULL(Организации.Ссылка, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК РезультатПоискаПоИндексу
	|ИЗ
	|	втПоставщикиПоУсловномуНаименованию КАК втПоставщикиПоУсловномуНаименованию
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО втПоставщикиПоУсловномуНаименованию.Индекс = Организации.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	втПоставщикиПоУсловномуНаименованию.Наименование,
	|	втПоставщикиПоУсловномуНаименованию.НаименованиеКраткое,
	|	втПоставщикиПоУсловномуНаименованию.Страна,
	|	втПоставщикиПоУсловномуНаименованию.Город,
	|	втПоставщикиПоУсловномуНаименованию.Индекс,
	|	втПоставщикиПоУсловномуНаименованию.Адрес,
	|	втПоставщикиПоУсловномуНаименованию.УсловноеНаименование";
	Запрос.УстановитьПараметр("Поставщики",РеквизитФормыВЗначение("Поставщики",Тип("ТаблицаЗначений")));
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Поставщики.Загрузить(ТаблицаЗапроса);
	
	ЗаполнитьТаблицуСопоставления();
	
	//ТЕСТ 2
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСопоставления()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Поставщики.Наименование КАК Наименование,
	|	Поставщики.РезультатПоискаПоНаименованию КАК РезультатПоискаПоНаименованию,
	|	Поставщики.РезультатПоискаПоУсловномуНаименованию КАК РезультатПоискаПоУсловномуНаименованию
	|ПОМЕСТИТЬ втПоставщики
	|ИЗ
	|	&Поставщики КАК Поставщики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втПоставщики.Наименование) КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ втПоставщики.РезультатПоискаПоНаименованию = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА втПоставщики.РезультатПоискаПоНаименованию
	|		ИНАЧЕ втПоставщики.РезультатПоискаПоУсловномуНаименованию
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ втОрганизации
	|ИЗ
	|	втПоставщики КАК втПоставщики
	|ГДЕ
	|	(НЕ втПоставщики.РезультатПоискаПоНаименованию = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ НЕ втПоставщики.РезультатПоискаПоУсловномуНаименованию = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ втПоставщики.РезультатПоискаПоНаименованию = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА втПоставщики.РезультатПоискаПоНаименованию
	|		ИНАЧЕ втПоставщики.РезультатПоискаПоУсловномуНаименованию
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(втОрганизации.Наименование, """") КАК Найдено
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОрганизации КАК втОрганизации
	|		ПО Организации.Ссылка = втОрганизации.Организация";
	Запрос.УстановитьПараметр("Поставщики",РеквизитФормыВЗначение("Поставщики",Тип("ТаблицаЗначений")));
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	РезультатСравнения.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры
 
#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПИСИ ДАННЫХ
#Область ЗаписьДанных

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	
	Если Поставщики.Количество() = 0 Тогда
		Сообщить("Нет данных для записи!");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьДанныеЗавершение", ЭтаФорма), "Данные в БД будут изменены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Сообщить("Запись данных начата в "+ТекущаяДата());
		Состояние("Запись данных в БД",,,БиблиотекаКартинок.ДлительнаяОперация48);
		ВыполнитьЗаписьДанных();
		Сообщить("Запись данных окончена в "+ТекущаяДата());
	Иначе
		Сообщить("Прервано пользователем!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаписьДанных()
	
	Сч = 1;
	
	Для каждого СтрокаПоставщики Из Поставщики Цикл
		
		Если ЗначениеЗаполнено(СтрокаПоставщики.РезультатПоискаПоУсловномуНаименованию) Тогда
			
			ОбъектПоставщик = СтрокаПоставщики.РезультатПоискаПоУсловномуНаименованию.ПолучитьОбъект();
			ОбъектПоставщик.Наименование = СтрокаПоставщики.НаименованиеКраткое;
			ОбъектПоставщик.Название = СтрокаПоставщики.Наименование;
			ОбъектПоставщик.ДополнительнаяИнформация = СтрокаПоставщики.УсловноеНаименование;
			
			ПредставлениеАдреса = СтрокаПоставщики.Индекс+", "+СтрокаПоставщики.Город+", "+СтрокаПоставщики.Адрес;
			
			КонтактнаяИнформация = ОбъектПоставщик.КонтактнаяИнформация.Найти(ПредставлениеАдреса,"Представление");
			
			Если КонтактнаяИнформация = Неопределено Тогда
				
				КонтактнаяИнформация = ОбъектПоставщик.КонтактнаяИнформация.Добавить();
				КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮридическийАдрес;
				КонтактнаяИнформация.Представление = ПредставлениеАдреса;
				КонтактнаяИнформация.Страна = СтрокаПоставщики.Страна;
				КонтактнаяИнформация.Город = СтрокаПоставщики.Город;
				
			КонецЕсли;
			
			Попытка	
				ОбъектПоставщик.Записать();
				Сообщить("Обновлен элемент "+Строка(ОбъектПоставщик.Ссылка));
				Сч = Сч + 1;
			Исключение
				Сообщить("Не удалось обновить элемент "+Строка(ОбъектПоставщик.Ссылка)+" по причине "+Символы.ПС+ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Сообщить("Всего обновлено "+Строка(Сч)+" элементов");
	
КонецПроцедуры

#КонецОбласти 

//ПРОЦЕДУРЫ И ФУНКЦИИ СОБЫТИЙ ФОРМЫ
#Область СобытияФормы

&НаКлиенте
Процедура ПутьКФайламНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ВыборФайла.Показать(Новый ОписаниеОповещения("ПутьКФайламНачалоВыбораЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайламНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПолноеИмяФайла = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
