//УЧЕСТЬ - ПОСТАВЩИКИ АЯ, Пустое обозначение доп при поиске элемента структуры заказа
//ДОДЕЛАТЬ - ЗАГРУЗКА ДЕРЖАТЕЛЯ ПОДЛИННИКА (Аналогично поставщику), КодВидаДокумента - посмотреть реализацию, уточнить по ценам

//ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ
Перем СоответствиеСозданныхПредметовСнабжения, СоответствиеХарактеристикПредметовСнабжения, СоответствиеСозданныхОрганизаций, СоответствиеЭлементовСтруктурыЗаказа; 
Перем КаталогПредметовСнабженияМенеджер, ОрганизацииМенеджер, СтруктураЗаказаМенеджер;
Перем КаталогПредметовСнабженияПустаяСсылка, ОрганизацииПустаяСсылка, СтруктураЗаказаПустаяСсылка;
Перем ТипУзлаГруппа, ТипУзлаИзделие;

//СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
#Область Служебное

//процедура осуществляет запись данных в лог
&НаСервере
Процедура ЗаписатьВЛог(Объект1С = Неопределено, пИмяФайла, пПутьКФайлу, Описание, пИдентификаторСтроки = "", ЭтоОшибка = Ложь)
			
	ЛогЗагрузкиМенеджер = РегистрыСведений.ЛогЗагрузки.СоздатьМенеджерЗаписи();
	ЛогЗагрузкиМенеджер.Период = ТекущаяДата();
	ЛогЗагрузкиМенеджер.ГУИД = Строка(Новый УникальныйИдентификатор);
	ЛогЗагрузкиМенеджер.Файл = пИмяФайла;
	ЛогЗагрузкиМенеджер.Объект1С = Объект1С;
	ЛогЗагрузкиМенеджер.ИдентификаторСтроки = пИдентификаторСтроки;
	ЛогЗагрузкиМенеджер.Описание = Описание;
	ЛогЗагрузкиМенеджер.ПутьКФайлу = пПутьКФайлу;		
	ЛогЗагрузкиМенеджер.Записать();
			
	Если ВыводитьЛогВСлужебныеСообщения Тогда
		
		Сообщить(Описание+" "+Строка(Объект1С));
		
	КонецЕсли;
	
	Если ЭтоОшибка Тогда
		
		СтрокаОшибок = ОшибкиОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОшибок, ЛогЗагрузкиМенеджер);
		
	КонецЕсли; 
	
КонецПроцедуры

//процедура осуществляет запись данных в таблицу ошибок
&НаКлиенте
Процедура ЗарегистрироватьОшибку(Объект1С = Неопределено, пИмяФайла, пПутьКФайлу, Описание, пИдентификаторСтроки = "")
			
	СтрокаОшибок = ОшибкиОбработки.Добавить();
	СтрокаОшибок.Файл = пИмяФайла;
	СтрокаОшибок.Объект1С = Объект1С;
	СтрокаОшибок.ИдентификаторСтроки = пИдентификаторСтроки;
	СтрокаОшибок.Описание = Описание;
	СтрокаОшибок.ПутьКФайлу = пПутьКФайлу;
			
	Если ВыводитьЛогВСлужебныеСообщения Тогда
		
		Сообщить(Описание+" "+Строка(Объект1С));
		
	КонецЕсли; 
	
КонецПроцедуры

//процедура производит начальное заполнение списка сообщений лога
//все сообщения лога должны содержать значения из данного списка (для удобства проверки лога)
&НаСервере
Процедура ЗаполнитьСписокСообщенийЛога()
	
	СписокСообщенийЛога.Добавить(", не подключиться к источнику.",, Истина); //0
	СписокСообщенийЛога.Добавить("Не получены данные таблицы файла по причине ",, Истина); //1
	СписокСообщенийЛога.Добавить("Не прочитаны данные файла!",, Истина); //2
	СписокСообщенийЛога.Добавить("Не прочитано значение колонки ",, Истина); //3
	СписокСообщенийЛога.Добавить("Создан предмет снабжения",, Истина); //4
	СписокСообщенийЛога.Добавить("Обновлен предмет снабжения",, Истина); //5
	СписокСообщенийЛога.Добавить("Не удалось создать предмет снабжения",, Истина); //6
	СписокСообщенийЛога.Добавить("Не удалось обновить предмет снабжения",, Истина); //7
	СписокСообщенийЛога.Добавить("Создана характеристика предметов снабжения",, Истина); //8
	СписокСообщенийЛога.Добавить("Создана организация",, Истина); //9
	СписокСообщенийЛога.Добавить("Создан элемент структуры заказа",, Истина); //10
	СписокСообщенийЛога.Добавить("Обновлен элемент структуры заказа",, Истина); //11
	СписокСообщенийЛога.Добавить("Не удалось создать элемент структуры заказа",, Истина); //12
	СписокСообщенийЛога.Добавить("Не удалось обновить элемент структуры заказа",, Истина); //13
	СписокСообщенийЛога.Добавить("Не обнаружен родитель элемента ",, Истина); //14
	СписокСообщенийЛога.Добавить("Некорректно указан уровень!",, Истина); //15
	
КонецПроцедуры

//функция возвращает соответствие обозначений типов узлов корабля в файле (приведенным в нижний регистр) типам узлов в БД
&НаСервере
Функция ПолучитьСоответствиеТиповУзловСтруктурыКорабля()
	
	ТипыУзловМенеджер = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля;
	
	ТипГруппа = ТипыУзловМенеджер.Группа;
	ТипИзделие = ТипыУзловМенеджер.Изделие;
	
	СоответствиеТиповУзловСтруктурыКорабля = Новый Соответствие;
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("г",ТипГруппа);
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("гр",ТипГруппа);
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("группа",ТипГруппа);
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("грппа",ТипГруппа);
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("и",ТипИзделие);
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("из",ТипИзделие);
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("изд",ТипИзделие);
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("з",ТипыУзловМенеджер.ПустаяСсылка());
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("зч",ТипыУзловМенеджер.ПустаяСсылка());
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("3ч",ТипыУзловМенеджер.ПустаяСсылка());
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("зип",ТипыУзловМенеджер.ПустаяСсылка());
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("сч",ТипыУзловМенеджер.ПустаяСсылка());
	СоответствиеТиповУзловСтруктурыКорабля.Вставить("с",ТипыУзловМенеджер.ПустаяСсылка());
	
	Возврат СоответствиеТиповУзловСтруктурыКорабля;
	
КонецФункции

//функция возвращает пустую ссылку справочника (при необходимости получить пустую ссылку на клиенте)
&НаСервере
Функция ПолучитьПустуюСсылку(ИмяСправочника)
	
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	
КонецФункции

//функция возвращает соответствие имени колонок таблицы загрузки и наличия/отсутствия данных в них
&НаСервере
Функция ПолучитьСоответствиеЗаполненностиКолонокДанныеФайлов()
	
	СоответствиеЗаполненностиКолонокДанныеФайлов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеФайлов.Наименование КАК Наименование,
	|	ДанныеФайлов.Обозначение КАК Обозначение,
	|	ДанныеФайлов.КодОКП КАК КодОКП,
	|	ДанныеФайлов.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ДанныеФайлов.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	ДанныеФайлов.Масса КАК Масса,
	|	ДанныеФайлов.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	ДанныеФайлов.МестоХранения КАК МестоХранения,
	|	ДанныеФайлов.ЦенаВнутренняя КАК ЦенаВнутренняя,
	|	ДанныеФайлов.Поставщик КАК Поставщик,
	|	ДанныеФайлов.Уровень КАК Уровень,
	|	ДанныеФайлов.ТипУзла КАК ТипУзла,
	|	ДанныеФайлов.Файл КАК Файл,
	|	ДанныеФайлов.ПутьКФайлу КАК ПутьКФайлу,
	|	ДанныеФайлов.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	ДанныеФайлов.ЕдиницаИзмеренияМассы КАК ЕдиницаИзмеренияМассы,
	|	ДанныеФайлов.КодОборудования КАК КодОборудования,
	|	ДанныеФайлов.КодВидаДокумента КАК КодВидаДокумента,
	|	ДанныеФайлов.ЦенаВнешняя КАК ЦенаВнешняя,
	|	ДанныеФайлов.НомерЯщика КАК НомерЯщика,
	|	ДанныеФайлов.ДержательПодлинника КАК ДержательПодлинника,
	|	ДанныеФайлов.СрокПоставки КАК СрокПоставки,
	|	ДанныеФайлов.ФНН КАК ФНН,
	|	ДанныеФайлов.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	ДанныеФайлов.КС КАК КС,
	|	ДанныеФайлов.КонтрольноеЧисло КАК КонтрольноеЧисло,
	|	ДанныеФайлов.ОриентировочнаяПотребность5 КАК ОриентировочнаяПотребность5,
	|	ДанныеФайлов.ОриентировочнаяПотребность10 КАК ОриентировочнаяПотребность10,
	|	ДанныеФайлов.Примечание КАК Примечание,
	|	ДанныеФайлов.Количество КАК Количество,
	|	ДанныеФайлов.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втДанныеФайлов
	|ИЗ
	|	&ДанныеФайлов КАК ДанныеФайлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втДанныеФайлов.Наименование) КАК Наименование,
	|	МАКСИМУМ(втДанныеФайлов.Обозначение) КАК Обозначение,
	|	МАКСИМУМ(втДанныеФайлов.КодОКП) КАК КодОКП,
	|	МАКСИМУМ(втДанныеФайлов.ДокументНаПоставку) КАК ДокументНаПоставку,
	|	МАКСИМУМ(втДанныеФайлов.ЕдиницаИзмеренияКоличества) КАК ЕдиницаИзмеренияКоличества,
	|	МАКСИМУМ(втДанныеФайлов.Масса) КАК Масса,
	|	МАКСИМУМ(втДанныеФайлов.КоличествоВЗИПБорт) КАК КоличествоВЗИПБорт,
	|	МАКСИМУМ(втДанныеФайлов.МестоХранения) КАК МестоХранения,
	|	МАКСИМУМ(втДанныеФайлов.ЦенаВнутренняя) КАК ЦенаВнутренняя,
	|	МАКСИМУМ(втДанныеФайлов.Поставщик) КАК Поставщик,
	|	МАКСИМУМ(втДанныеФайлов.Уровень) КАК Уровень,
	|	МАКСИМУМ(втДанныеФайлов.ТипУзла) КАК ТипУзла,
	|	МАКСИМУМ(втДанныеФайлов.Файл) КАК Файл,
	|	МАКСИМУМ(втДанныеФайлов.ПутьКФайлу) КАК ПутьКФайлу,
	|	МАКСИМУМ(втДанныеФайлов.КоличествоВЗИПБаза) КАК КоличествоВЗИПБаза,
	|	МАКСИМУМ(втДанныеФайлов.ЕдиницаИзмеренияМассы) КАК ЕдиницаИзмеренияМассы,
	|	МАКСИМУМ(втДанныеФайлов.КодОборудования) КАК КодОборудования,
	|	МАКСИМУМ(втДанныеФайлов.КодВидаДокумента) КАК КодВидаДокумента,
	|	МАКСИМУМ(втДанныеФайлов.ЦенаВнешняя) КАК ЦенаВнешняя,
	|	МАКСИМУМ(втДанныеФайлов.НомерЯщика) КАК НомерЯщика,
	|	МАКСИМУМ(втДанныеФайлов.ДержательПодлинника) КАК ДержательПодлинника,
	|	МАКСИМУМ(втДанныеФайлов.СрокПоставки) КАК СрокПоставки,
	|	МАКСИМУМ(втДанныеФайлов.ФНН) КАК ФНН,
	|	МАКСИМУМ(втДанныеФайлов.НаработкаНаОтказ) КАК НаработкаНаОтказ,
	|	МАКСИМУМ(втДанныеФайлов.КС) КАК КС,
	|	МАКСИМУМ(втДанныеФайлов.КонтрольноеЧисло) КАК КонтрольноеЧисло,
	|	МАКСИМУМ(втДанныеФайлов.ОриентировочнаяПотребность5) КАК ОриентировочнаяПотребность5,
	|	МАКСИМУМ(втДанныеФайлов.ОриентировочнаяПотребность10) КАК ОриентировочнаяПотребность10,
	|	МАКСИМУМ(втДанныеФайлов.Примечание) КАК Примечание,
	|	МАКСИМУМ(втДанныеФайлов.Количество) КАК Количество,
	|	СУММА(втДанныеФайлов.КоличествоВЗИПДЭ) КАК КоличествоВЗИПДЭ
	|ИЗ
	|	втДанныеФайлов КАК втДанныеФайлов";
	Запрос.УстановитьПараметр("ДанныеФайлов",ДанныеФайлов.Выгрузить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтрокаТаблицы = ТаблицаЗапроса[0];
	
	Для каждого КолонкаТаблицы Из ТаблицаЗапроса.Колонки Цикл
		
		 ИмяКолонки = КолонкаТаблицы.Имя; 
		
		 СоответствиеЗаполненностиКолонокДанныеФайлов.Вставить(ИмяКолонки, ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонки]));
		
	КонецЦикла;
	 
	Возврат СоответствиеЗаполненностиКолонокДанныеФайлов; 
	
КонецФункции

//процедура отключает видимость колонок данных файлов, в которых отсутствуют данные и включает видимость колонок, в которых данные присутствуют
&НаКлиенте
Процедура УстановитьВидимостьКолонокДанныхФайлов()
	
	СоответствиеЗаполненностиКолонокДанныеФайлов = ПолучитьСоответствиеЗаполненностиКолонокДанныеФайлов();
	
	Для каждого ЭлементСоответствия Из СоответствиеЗаполненностиКолонокДанныеФайлов Цикл
		
		Элементы["ДанныеФайлов"+ЭлементСоответствия.Ключ].Видимость = ЭлементСоответствия.Значение;
		
	КонецЦикла; 
	
КонецПроцедуры

//процедура удаляет множественные символы из середины строки (пример - лишние пробелы),
//преобразуя любое количество последовательных вхождений символа в единичное вхождение
&НаКлиенте
Процедура УдалитьПовторяющисяСимволыИзСерединыСтроки(ОбрабатываемаяСтрока, ПроверяемыйСимвол)
	
	 ПодстрокаПоиска = ПроверяемыйСимвол + ПроверяемыйСимвол;
	 
	 Если Найти(ОбрабатываемаяСтрока, ПодстрокаПоиска) > 0 Тогда
		 
		  ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ПодстрокаПоиска, ПроверяемыйСимвол);
		  УдалитьПовторяющисяСимволыИзСерединыСтроки(ОбрабатываемаяСтрока, ПроверяемыйСимвол);
	 	
	 КонецЕсли; 
	
 КонецПроцедуры
 
//функция возвращает идентификатор родителя элемента (полное имя файла + "|" + уровень в иерархии)
&НаСервере
Функция ПолучитьИдентификаторРодителя(ПолноеИмяФайла, УровеньЭлемента)
	
	ПозицияРазделителя = СтрНайти(УровеньЭлемента, ".", НаправлениеПоиска.СКонца);
	
	Если ПозицияРазделителя = 0 Тогда // элемент верхнего уровня. родитель = пустая ссылка
		
		Возврат "0";
		
	Иначе
		
		Возврат ПолноеИмяФайла + "|" + Лев(УровеньЭлемента, ПозицияРазделителя - 1);
		
	КонецЕсли; 
	
КонецФункции
 
//функция проверяет загруженные данные на предмет ошибок, возвращает результат проверки
//истина - ошибок не обнаружено, ложь - обнаружены ошибки
&НаКлиенте
Функция ВыполнитьПроверкуДанных()
	
	ОшибкиОбработки.Очистить();
	
	ПроверитьЗаполнениеКлючевыхКолонок();
	
	ПроверитьИерархию();
	
	Возврат (ОшибкиОбработки.Количество() = 0);
	
КонецФункции

//процедура выполняет проверку заполнения ключевых колонок
&НаКлиенте
Процедура ПроверитьЗаполнениеКлючевыхКолонок()
	
	Для каждого СтрокаДанныхФайлов Из ДанныеФайлов Цикл
		
		ОшибкиВСтроке = "";
		
		ПроверитьЗначениеКолонки(ОшибкиВСтроке, СтрокаДанныхФайлов, "Уровень");
		ПроверитьЗначениеКолонки(ОшибкиВСтроке, СтрокаДанныхФайлов, "ТипУзла");
		ПроверитьЗначениеКолонки(ОшибкиВСтроке, СтрокаДанныхФайлов, "Наименование");
		
		Если ЗначениеЗаполнено(ОшибкиВСтроке) Тогда
			
			 СтрокаОшибок = ОшибкиОбработки.Добавить();
			 СтрокаОшибок.Файл = СтрокаДанныхФайлов.Файл;
			 СтрокаОшибок.ИдентификаторСтроки = Строка(СтрокаДанныхФайлов.НомерСтроки);
			 СтрокаОшибок.Описание = "Не заполнены значения колонок "+Лев(ОшибкиВСтроке, СтрДлина(ОшибкиВСтроке) - 2);
			 СтрокаОшибок.ПутьКФайлу = СтрокаДанныхФайлов.ПутьКФайлу;
			 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//процедура выполняет проверку иерархии
&НаСервере
Процедура ПроверитьИерархию()
	
	МассивЭлементовИерархии = Новый Массив;
	
	МассивЭлементовИерархии.Добавить("0");
	
	тзДанныеФайлов = ДанныеФайлов.Выгрузить();
	
	тзДанныеФайлов.Сортировать("ПутьКФайлу,Файл,Уровень");
	
	Для каждого СтрокаДанныхФайлов Из тзДанныеФайлов Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанныхФайлов.Уровень) И ЗначениеЗаполнено(СтрокаДанныхФайлов.ТипУзла) И ЗначениеЗаполнено(СтрокаДанныхФайлов.Наименование) Тогда 
			
			ПолноеИмяФайла = СтрокаДанныхФайлов.ПутьКФайлу + СтрокаДанныхФайлов.Файл;
			
			ИдентификаторРодителя = ПолучитьИдентификаторРодителя(ПолноеИмяФайла, СтрокаДанныхФайлов.Уровень);
			
			Если МассивЭлементовИерархии.Найти(ИдентификаторРодителя) = Неопределено Тогда
				
				СтрокаОшибок = ОшибкиОбработки.Добавить();
				СтрокаОшибок.Файл = СтрокаДанныхФайлов.Файл;
				СтрокаОшибок.ИдентификаторСтроки = Строка(СтрокаДанныхФайлов.НомерСтроки);
				СтрокаОшибок.Описание = "Не найден родитель элемента или родитель элемента заполнен некорректно!";
				СтрокаОшибок.ПутьКФайлу = СтрокаДанныхФайлов.ПутьКФайлу;
				
			КонецЕсли;
			
			МассивЭлементовИерархии.Добавить(ПолноеИмяФайла + "|" + СтрокаДанныхФайлов.Уровень);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры
 
//функция загружает в таблицу лога загрузок записи из регистра лога по заданному отбору
//истина - в логе есть записи, ложь - в логе нет записей
&НаСервере
Функция ПолучитьЗаписиЛога()
	
	ЛогЗагрузок.Очистить();
	
	//заполнение таблицы отбора из списка сообщений
	ТаблицаОтбораСообщенийЛога = Новый ТаблицаЗначений;
	ТаблицаОтбораСообщенийЛога.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число"));
	ТаблицаОтбораСообщенийЛога.Колонки.Добавить("ТекстСообщения", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(500)));
	
	Сч = 1;
	
	Для каждого ЭлементСпискаСообщений Из СписокСообщенийЛога Цикл
		
		Если ЭлементСпискаСообщений.Пометка Тогда
			
			СтрокаТаблицыОтбораСообщенийЛога = ТаблицаОтбораСообщенийЛога.Добавить();
			СтрокаТаблицыОтбораСообщенийЛога.ПорядковыйНомер = Сч;
			СтрокаТаблицыОтбораСообщенийЛога.ТекстСообщения = ЭлементСпискаСообщений.Значение;
			
		КонецЕсли; 
		
	КонецЦикла;	
	
	//получение записей лога
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОтбораСообщенийЛога.ТекстСообщения КАК ТекстСообщения,
	|	ТаблицаОтбораСообщенийЛога.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втСообщенияЛога
	|ИЗ
	|	&ТаблицаОтбораСообщенийЛога КАК ТаблицаОтбораСообщенийЛога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛогЗагрузки.Период КАК Период,
	|	ЛогЗагрузки.ГУИД КАК ГУИД,
	|	ЛогЗагрузки.Файл КАК Файл,
	|	ЛогЗагрузки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЛогЗагрузки.Объект1С КАК Объект1С,
	|	ЛогЗагрузки.СтруктураДанных КАК СтруктураДанных,
	|	ВЫРАЗИТЬ(ЛогЗагрузки.Описание КАК СТРОКА(1000)) КАК Описание,
	|	ЛогЗагрузки.ПутьКФайлу КАК ПутьКФайлу
	|ПОМЕСТИТЬ втЛогЗагрузки
	|ИЗ
	|	РегистрСведений.ЛогЗагрузки КАК ЛогЗагрузки
	|ГДЕ
	|	ЛогЗагрузки.Период МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛогЗагрузки.Период КАК Период,
	|	втЛогЗагрузки.ГУИД КАК ГУИД,
	|	втЛогЗагрузки.Файл КАК Файл,
	|	втЛогЗагрузки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	втЛогЗагрузки.Объект1С КАК Объект1С,
	|	втЛогЗагрузки.СтруктураДанных КАК СтруктураДанных,
	|	втЛогЗагрузки.Описание КАК Описание,
	|	втЛогЗагрузки.ПутьКФайлу КАК ПутьКФайлу
	|ИЗ
	|	втЛогЗагрузки КАК втЛогЗагрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСообщенияЛога КАК втСообщенияЛога
	|		ПО (втЛогЗагрузки.Описание ПОДОБНО ""%"" + втСообщенияЛога.ТекстСообщения + ""%"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	втСообщенияЛога.ПорядковыйНомер,
	|	Период";
	Запрос.УстановитьПараметр("ТаблицаОтбораСообщенийЛога", ТаблицаОтбораСообщенийЛога);
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериодаЛога);
	Запрос.УстановитьПараметр("ДатаКон", ОкончаниеПериодаЛога);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ЛогЗагрузок.Загрузить(РезультатЗапроса.Выгрузить());
	
	Возврат Истина;
	
КонецФункции
 
//процедура проверяет корректность значения в указанной колонке, в случае некорректности - создает запись об ошибке
&НаКлиенте
Процедура ПроверитьЗначениеКолонки(ОшибкиВСтроке, СтрокаДанныхФайлов, ИмяКолонки)
	
	Если Не ЗначениеЗаполнено(СтрокаДанныхФайлов[ИмяКолонки]) Тогда
		
		ОшибкиВСтроке = ОшибкиВСтроке + ИмяКолонки + ", ";
		
	КонецЕсли;
	
КонецПроцедуры

//процеда заполняет соответствие характеристик предметов снабжения их именам в нижнем регистре
&НаСервере
Процедура ЗаполнитьСоответствиеХарактеристикПредметовСнабжения()
	
	СоответствиеХарактеристикПредметовСнабжения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиПредметовСнабжения.Наименование КАК Наименование,
	|	ХарактеристикиПредметовСнабжения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
	|ГДЕ
	|	НЕ ХарактеристикиПредметовСнабжения.Наименование = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеХарактеристикПредметовСнабжения.Вставить(НРег(Выборка.Наименование), Выборка.Ссылка);
			
	КонецЦикла; 
	
КонецПроцедуры 

//функция возвращает строку, содеражащую сериализованную в XML таблицу
&НаСервере
Функция СериализоватьТаблицуВXML(ИмяТаблицы)
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ТаблицаЗначений = РеквизитФормыВЗначение(ИмяТаблицы,Тип("ТаблицаЗначений")); 
	Сериализатор.ЗаписатьXML(ЗаписьXML,ТаблицаЗначений);
	       
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

//процедура загружает таблицу из строки, содержащей текст XML
&НаСервере
Процедура ПолучитьТаблицуИзXML(СтрокаXML,ИмяТаблицы)
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ТаблицаЗначений = Сериализатор.ПрочитатьXML(ЧтениеXML,Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ТаблицаЗначений,ИмяТаблицы);
	
КонецПроцедуры

#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ ЧТЕНИЯ ДАННЫХ ИЗ ФАЙЛОВ
#Область ЧтениеДанных

#Область ЧтениеСобытияФормы  
//процедуры вызова чтения данных из файлов
&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	Если Не ЗначениеЗаполнено(ФорматЗагрузки) Тогда
		
		ПоказатьПредупреждение(, "Формат загрузки не указан!");
		Возврат;
		
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПутьКФайлам) Тогда
		
		ПоказатьПредупреждение(, "Путь к файлам не заполнен!");
		Возврат;
		
	КонецЕсли;
	
	Файл = Новый Файл(ПутьКФайлам);
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПрочитатьДанныеПродолжение", ЭтаФорма));  
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеПродолжение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрочитатьДанныеЗавершение", ЭтаФорма), "Данные таблицы загрузки будут обновлены. Продолжить?",РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПоказатьПредупреждение(, "Некорректный путь к файлам!");
		
	КонецЕсли;

КонецПроцедуры

//процедура вычисляет количество строк во всех считываемых файлах
&НаКлиенте
Процедура ПолучитьКоличествоСтрокВФайлах(МассивФайлов)
	
	СчетчикСтрокФайлов = 0;
	ОбщееКоличествоСтрокФайлов = 0;
	
	Сч = 1; 
	ВсегоФайлов = МассивФайлов.Количество();
	
	ДатаНачала = ТекущаяДата();
	
	Для каждого Файл Из МассивФайлов Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Расчет количества записей...", ДатаНачала, Сч, ВсегоФайлов);
		
		ПервыйСимволИмени = Лев(Файл.Имя, 1);
		
		Если ПервыйСимволИмени = "~" Или ПервыйСимволИмени = "$" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ExcelApplication = Новый COMОбъект("Excel.Application");
		
		Попытка
			
			КнигаExcel = ExcelApplication.Workbooks.Open(Файл.ПолноеИмя, , Истина);
			
		Исключение
			
			КнигаExcel.Application.Quit();
		
			КнигаExcel = Неопределено;
			
			Продолжить;
			
		КонецПопытки;
		
		КоличествоЛистов = КнигаExcel.Sheets.Count();
		
		Лист = Неопределено;
		
		Для ТекЛист = 1 По КоличествоЛистов Цикл
			
			Лист = КнигаExcel.WorkSheets(ТекЛист);
			
			Если ЗначениеЗаполнено(СокрЛП(Строка(Лист.Cells(1,1).Value))) Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Лист = Неопределено Тогда
			
			КнигаExcel.Application.Quit();
		
			КнигаExcel = Неопределено;
			
			Продолжить;
			
		КонецЕсли;
		
		ОбщееКоличествоСтрокФайлов = ОбщееКоличествоСтрокФайлов + Лист.Cells.SpecialCells(11).Row;
		
		КнигаExcel.Application.Quit();
		
		КнигаExcel = Неопределено;
		
		Сч = Сч + 1;
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОшибкиОбработки.Очистить();
	
	ДанныеФайлов.Очистить();
	
	СоответствиеТиповУзловСтруктурыКорабля = ПолучитьСоответствиеТиповУзловСтруктурыКорабля();
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если Найти(ПутьКФайлам, ".xls") > 0 Тогда
			
			МассивФайлов = Новый Массив;
			МассивФайлов.Добавить(Новый Файл(ПутьКФайлам));
			
		Иначе
			
			МассивФайлов = НайтиФайлы(ПутьКФайлам, "*.xls", Истина);
			
		КонецЕсли;
		
		ДатаНачала = ТекущаяДата();
	
		Сообщить("Чтение данных начато в "+ДатаНачала);
		
		Сч = 1;
		
		КоличествоФайлов = МассивФайлов.Количество();
		
		Если ВыводитьОбщееКоличествоЗаписей Тогда
			
			ПолучитьКоличествоСтрокВФайлах(МассивФайлов);
			
			ОбщаяДатаНачала = ТекущаяДата();
			
		КонецЕсли;
		
		Для каждого Файл Из МассивФайлов Цикл
			
			ПервыйСимволИмени = Лев(Файл.Имя, 1);
			
			Если ПервыйСимволИмени = "~" Или ПервыйСимволИмени = "$" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ПрочитатьФайл(Файл, СоответствиеТиповУзловСтруктурыКорабля);
			
			Если Не ВыводитьОбщееКоличествоЗаписей Тогда
				
				УправлениеИнтерфейсом.ВывестиТекущееСостояние("Чтение файла "+Файл.Имя, ДатаНачала, Сч, КоличествоФайлов);
				
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
		Если СкрытьКолонкиБезДанных Тогда
			
			УстановитьВидимостьКолонокДанныхФайлов();
			
		КонецЕсли;
		
		Сообщить("Чтение данных окончено в "+ТекущаяДата());
		
		Если ОшибкиОбработки.Количество() > 0 Тогда
			
			ПоказатьПредупреждение(, "В ходе чтения данных происходили ошибки!");
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибкиОбработки;
			
		Иначе
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДанныеФайлов;
			
		КонецЕсли; 
		
	Иначе
		
		Сообщить("Прервано пользователем!");
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЧтениеОсновныеФункции
//процедура считывает данные из файла
&НаКлиенте
Процедура ПрочитатьФайл(Файл, СоответствиеТиповУзловСтруктурыКорабля)
	
	Если ИспользоватьExcelApplication Тогда //читаем через Excel.Application
		
		ExcelApplication = Новый COMОбъект("Excel.Application");
		
		Попытка
			
			КнигаExcel = ExcelApplication.Workbooks.Open(Файл.ПолноеИмя, , Истина);
			
		Исключение
			
			ТекИнформацияОбОшибке = "Произошла ошибка: " + ОписаниеОшибки() + СписокСообщенийЛога[0].Значение;
			ЗаписатьВЛог(, Файл.Имя, Файл.Путь, ТекИнформацияОбОшибке, , Истина);
			Возврат;
			
		КонецПопытки;
		
		КоличествоЛистов = КнигаExcel.Sheets.Count();
		
		Лист = Неопределено;
		
		Для ТекЛист = 1 По КоличествоЛистов Цикл
			
			Лист = КнигаExcel.WorkSheets(ТекЛист);
			
			Если ЗначениеЗаполнено(СокрЛП(Строка(Лист.Cells(1,1).Value))) Тогда
				
				ИмяФайла = Файл.Имя;
				
				ПутьКФайлу = Файл.Путь;
				
				ВызватьЧтениеДанных(Лист, СоответствиеТиповУзловСтруктурыКорабля);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Лист = Неопределено Тогда
			
			ЗаписатьВЛог(, Файл.Имя, Файл.Путь, СписокСообщенийЛога[2].Значение, , Истина);
			
		КонецЕсли;
		
		КнигаExcel.Application.Quit();
		
		КнигаExcel = Неопределено;
		
	Иначе //читаем через ODBC-драйвер 
		
		СтрокаПодключения = "Provider=MSDASQL.1;Persist Security Info=False;Extended Properties=""DSN=Excel Files;DBQ=&Filename;DefaultDir=&Foldername;DriverId=1046;MaxBufferSize=2048;PageTimeout=5;""";
		СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "&Filename", Файл.ПолноеИмя);
		СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "&Foldername", Файл.Путь);
		
		Соединение = Новый COMОбъект("ADODB.CONNECTION");
		
		Попытка
			Соединение.Open(СтрокаПодключения);
		Исключение
			
			ТекИнформацияОбОшибке = "Произошла ошибка: " + ОписаниеОшибки() + СписокСообщенийЛога[0].Значение;
			ЗаписатьВЛог(, Файл.Имя, Файл.Путь, ТекИнформацияОбОшибке, , Истина);
			Возврат;
			
		КонецПопытки;
		
		БД = Новый COMОбъект("ADOX.Catalog");
		БД.ActiveConnection = Соединение;
		
		ТекстЗапроса =
		"select *
		|from [&ИмяТаблицы]";
		
		ТаблицыБД = БД.Tables;
		
		Для каждого ТаблицаБД из ТаблицыБД Цикл 
			
			НаборЗаписей = ОткрытьТаблицу(ТаблицаБД.Name, ТекстЗапроса, Соединение, Файл.Имя, Файл.Путь);
			
			Если Не НаборЗаписей = Неопределено Тогда
				
				ИмяФайла = Файл.Имя;
				
				ПутьКФайлу = Файл.Путь;
				
				ВызватьЧтениеДанных(НаборЗаписей, СоответствиеТиповУзловСтруктурыКорабля);
				
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если НаборЗаписей = Неопределено Тогда
			
			ЗаписатьВЛог(, Файл.Имя, Файл.Путь, СписокСообщенийЛога[2].Значение, , Истина);
			
		КонецЕсли;
		
		НаборЗаписей = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

//функция возвращает таблицу файла
&НаКлиенте
Функция ОткрытьТаблицу(ИмяТаблицы, ТекстЗапроса, Соединение, ИмяФайла, ПутьКФайлу)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицы",ИмяТаблицы);
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	
	Попытка
		
		НаборЗаписей.CursorType = 3;
		НаборЗаписей.Open(ТекстЗапроса,Соединение);
		
	Исключение
		
		ТекИнформацияОбОшибке = СписокСообщенийЛога[1].Значение + ОписаниеОшибки();
		ЗаписатьВЛог(, ИмяФайла, ПутьКФайлу, ТекИнформацияОбОшибке, , Истина);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если НаборЗаписей.RecordCount = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат НаборЗаписей;
		
КонецФункции

//процедура вызывает ту или иную процедуру чтения данных в зависимости от формата загрузки
//все вызовы процедур загрузки новых форматов добавлять сюда (не забыв добавить в формат в список выбора форматов)
&НаКлиенте
Процедура ВызватьЧтениеДанных(Источник, СоответствиеТиповУзловСтруктурыКорабля)
	
	Если ФорматЗагрузки = "Проект877" Тогда
		
		ПрочитатьДанныеПроект877(Источник, СоответствиеТиповУзловСтруктурыКорабля);
		
	ИначеЕсли ФорматЗагрузки = "Алмаз" Тогда
		
		ПрочитатьДанныеАлмаз(Источник, СоответствиеТиповУзловСтруктурыКорабля);
		
	ИначеЕсли ФорматЗагрузки = "АлмазНачальный" Тогда
		
		ПрочитатьДанныеАлмазНачальный(Источник, СоответствиеТиповУзловСтруктурыКорабля);
		
	КонецЕсли; 
	
КонецПроцедуры
 
//процедура считывает данные в формате Проект877 (доделать по Excel.Application)
//ДОДЕЛАТЬ - ОПРЕДЕЛЕНИЕ НАИМЕНОВАНИЙ ПОСТАВЩИКОВ ПО ПОЧТОВЫМ ЯЩИКАМ ИЗ СООТВ. ФАЙЛА
&НаКлиенте
Процедура ПрочитатьДанныеПроект877(Источник, СоответствиеТиповУзловСтруктурыКорабля)
	
	Сч = 2;
	
	СчетчикПустыхСтрок = 0;
	
	ТипУзлаГруппа = СоответствиеТиповУзловСтруктурыКорабля["г"];
	ТипУзлаИзделие = СоответствиеТиповУзловСтруктурыКорабля["и"];
	
	Если ИспользоватьExcelApplication Тогда
		
		ВсегоСтрок = Источник.Cells.SpecialCells(11).Row;
		
		ДатаНачала = ТекущаяДата();
		
	КонецЕсли;
	
	СоответствиеРодительскихУровней = Новый Соответствие;
	СоответствиеПорядковыхНомеров = Новый Соответствие;
	
	НачальнаяПозицияСчетчикаСтрок = СчетчикСтрокФайлов;
	
	Пока ?(ИспользоватьExcelApplication, Сч <= ВсегоСтрок, Источник.EOF()=0) Цикл
		
		Если ИспользоватьExcelApplication Тогда //Excel.Application читает файлы медленно. отображаем процесс чтения
			
			ДатаНачала = ?(ВыводитьОбщееКоличествоЗаписей, ОбщаяДатаНачала, ТекущаяДата());
			КоличествоЗавершено = ?(ВыводитьОбщееКоличествоЗаписей, СчетчикСтрокФайлов, Сч);
			ОбщееКоличество = ?(ВыводитьОбщееКоличествоЗаписей, ОбщееКоличествоСтрокФайлов, ВсегоСтрок);
			
			УправлениеИнтерфейсом.ВывестиТекущееСостояние("Чтение файла " + ИмяФайла, ДатаНачала, КоличествоЗавершено, ОбщееКоличество); 
			
		КонецЕсли;
		
		НомерТекущейСтроки = Сч;
		
		ИдентификаторСтроки = Формат(Сч, "ЧГ=0");
		ЗИП = Ложь;
		
		Если Сч = 2 Тогда //первая запись в таблице - наименование корневой группы	
			
			Уровень = "0";
			ТипУзла = ТипУзлаГруппа;
			
		Иначе
			
			Уровень = ПолучитьСтроковоеЗначение(Источник, 10);
			ТипУзла = СоответствиеТиповУзловСтруктурыКорабля[НРег(ПолучитьСтроковоеЗначение(Источник, 11))];
			
			Если НЕ ТипУзла = Неопределено Тогда
				Если ТипУзла.Пустая() Тогда
					ТипУзла = ТипУзлаИзделие;
					ЗИП = Истина;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
		
		Наименование = ПолучитьСтроковоеЗначение(Источник, 0);
		
		Если Не ЗначениеЗаполнено(Уровень) И ТипУзла = Неопределено Тогда //это пустая строка. пропукаем
			
			Если Не ИспользоватьExcelApplication Тогда
				
				Источник.MoveNext();
				
			КонецЕсли;
			
			СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
			
			Если СчетчикПустыхСтрок > 3 Тогда //больше трех пустых строк подряд - данные явно закончились
				
				Если ВыводитьОбщееКоличествоЗаписей Тогда
					
					СчетчикСтрокФайлов = НачальнаяПозицияСчетчикаСтрок + ВсегоСтрок;
					
				КонецЕсли;
				
				Прервать;
				
			Иначе
				
				Сч = Сч + 1;
				
				Продолжить;
				
			КонецЕсли; 
						
		Иначе
			
			СчетчикПустыхСтрок = 0;
			
		КонецЕсли;
		
		//приведение обозначений иерархии к нужному формату
		Если Уровень = "0" Тогда
			
			Уровень = "1";
			УровеньЧисло = 0;
			СоответствиеРодительскихУровней.Вставить(1, "1");
			
		Иначе
			
			Попытка
				
				ТекУровеньЧисло = Число(Уровень);
				
				УровеньРодителя = СоответствиеРодительскихУровней.Получить(ТекУровеньЧисло);
				ПорядковыйНомер = СоответствиеПорядковыхНомеров.Получить(УровеньРодителя);
				ПорядковыйНомер = ?(ПорядковыйНомер = Неопределено, 1, ПорядковыйНомер + 1);
				
				Уровень = УровеньРодителя + "." + Строка(ПорядковыйНомер);
				
				СоответствиеРодительскихУровней.Вставить(ТекУровеньЧисло + 1, Уровень);
				СоответствиеПорядковыхНомеров.Вставить(УровеньРодителя, ПорядковыйНомер);
				
				УровеньЧисло = ТекУровеньЧисло;
				
			Исключение
				
				ЗарегистрироватьОшибку(, ИмяФайла, ПутьКФайлу, СписокСообщенийЛога[15].Значение, ИдентификаторСтроки);
				
			КонецПопытки;
			
		КонецЕсли;
		
		ТекРодитель = Уровень;
		
		//добавление строк в таблицу
		СтрокаДанных = ДанныеФайлов.Добавить();
		СтрокаДанных.Уровень = Уровень;
		СтрокаДанных.ТипУзла = ТипУзла;
		СтрокаДанных.ЗИП = ЗИП;
		СтрокаДанных.НомерСтроки = ИдентификаторСтроки;
		СтрокаДанных.Наименование = Наименование;
		СтрокаДанных.Файл = ИмяФайла;
		СтрокаДанных.ПутьКФайлу = ПутьКФайлу;
		
		Если Не СтрокаДанных.ТипУзла = ТипУзлаГруппа Тогда //нижеперечисленные характеристики для групп не заполняем
			
			СтрокаДанных.Обозначение = ПолучитьСтроковоеЗначение(Источник, 1);
			СтрокаДанных.КодОКП = ПолучитьСтроковоеЗначение(Источник, 2);
			СтрокаДанных.ДокументНаПоставку = ПолучитьСтроковоеЗначение(Источник, 3);
			СтрокаДанных.ЕдиницаИзмеренияКоличества = СтрЗаменить(ПолучитьСтроковоеЗначение(Источник, 4),".","");
			СтрокаДанных.Масса = ПолучитьЧисловоеЗначение(Источник, 5);
			СтрокаДанных.ЕдиницаИзмеренияМассы = "кг";
			СтрокаДанных.МестоХранения = ПолучитьСтроковоеЗначение(Источник, 7);
		//	СтрокаДанных.ЦенаВнешняя = ПолучитьЧисловоеЗначение(Источник, 8);
			СтрокаДанных.Поставщик = ПолучитьСтроковоеЗначение(Источник, 9);
			
			Количество = ПолучитьЧисловоеЗначение(Источник, 6);
			
			Если СтрНайти(ПутьКФайлу,"ЗИП борт") > 0 Тогда
				
				СтрокаДанных.КоличествоВЗИПБорт = Количество;
				
			ИначеЕсли СтрНайти(ПутьКФайлу,"ЗИП база") > 0 Тогда
				
				СтрокаДанных.КоличествоВЗИПБаза = Количество;
				
			ИначеЕсли СтрНайти(ПутьКФайлу,"ЗИП ДЭ") > 0 Тогда
				
				СтрокаДанных.КоличествоВЗИПДЭ = Количество;
				
			Иначе
				
				СтрокаДанных.Количество = Количество;
				
			КонецЕсли;
				
		КонецЕсли; 
		
		Сч = Сч + 1;
		
		СчетчикСтрокФайлов = НачальнаяПозицияСчетчикаСтрок + Сч;
		
		Если Не ИспользоватьExcelApplication Тогда
				
			Источник.MoveNext();
				
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

//процедура считывает данные в формате Алмаз
&НаКлиенте
Процедура ПрочитатьДанныеАлмаз(Источник, СоответствиеТиповУзловСтруктурыКорабля)
	
	Сч = 1;
	
	СчетчикПустыхСтрок = 0;
	
	ТипУзлаГруппа = СоответствиеТиповУзловСтруктурыКорабля["г"];
	ТипУзлаИзделие = СоответствиеТиповУзловСтруктурыКорабля["и"];
	
	Если ИспользоватьExcelApplication Тогда
		
		ВсегоСтрок = Источник.Cells.SpecialCells(11).Row;
		
		ДатаНачала = ТекущаяДата();
		
	КонецЕсли;
	
	ИндексПервойСтроки = 4 + ?(ИспользоватьExcelApplication, 1, 0);
	
	Пока ?(ИспользоватьExcelApplication, Сч <= ВсегоСтрок, Источник.EOF()=0) Цикл
		
		Если ИспользоватьExcelApplication Тогда //Excel.Application читает файлы медленно. отображаем процесс чтения
			
			УправлениеИнтерфейсом.ВывестиТекущееСостояние("Чтение файла " + ИмяФайла, ДатаНачала, Сч, ВсегоСтрок); 
			
		КонецЕсли; 
		
		Если Сч < (ИндексПервойСтроки) Тогда //данные начинаются с четвертой строки таблицы, выше - декорации
			
			Сч = Сч +1;
			
			Если Не ИспользоватьExcelApplication Тогда
				
				Источник.MoveNext();
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		НомерТекущейСтроки = Сч; //для чтения через Excel.Application
				
		//ключевые поля и проверка их заполненности
		Уровень = ПолучитьСтроковоеЗначение(Источник, 0);
		
		Если Прав(Уровень, 1) = "." Тогда
			
			Уровень = Лев(Уровень, СтрДлина(Уровень) - 1);
			
		КонецЕсли;
		
		ТипУзла = НРег(ПолучитьСтроковоеЗначение(Источник, 1));
		Наименование = ПолучитьСтроковоеЗначение(Источник, 3);
		Обозначение = ПолучитьСтроковоеЗначение(Источник, 6);
		ДокументНаПоставку = ПолучитьСтроковоеЗначение(Источник, 7);
		
		Если Не ЗначениеЗаполнено(Уровень) И Не ЗначениеЗаполнено(ТипУзла) И Не ЗначениеЗаполнено(Наименование) 
			И Не ЗначениеЗаполнено(Обозначение) И Не ЗначениеЗаполнено(ДокументНаПоставку) Тогда //это пустая строка. пропукаем
			
			Если Не ИспользоватьExcelApplication Тогда
				
				Источник.MoveNext();
				
			КонецЕсли;
			
			СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
			
			Если СчетчикПустыхСтрок > 3 Тогда //больше трех пустых строк подряд - данные явно закончились
				
				Прервать;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли; 
						
		Иначе
			
			СчетчикПустыхСтрок = 0;
			
		КонецЕсли;
		
		СтрокаДанных = ДанныеФайлов.Добавить();
		
		//общие данные
		ИдентификаторСтроки = Формат(Сч, "ЧГ=0");
		
		ДополнениеКНаименованию = ПолучитьСтроковоеЗначение(Источник, 4);
		
		СтрокаДанных.НомерСтроки = ИдентификаторСтроки;
		СтрокаДанных.Наименование = Наименование + ?(ЗначениеЗаполнено(ДополнениеКНаименованию), "("+ДополнениеКНаименованию+")", ДополнениеКНаименованию);
		СтрокаДанных.Файл = ИмяФайла;
		СтрокаДанных.ПутьКФайлу = ПутьКФайлу;
		СтрокаДанных.Уровень = Уровень;
		
		ТипУзлаСсылка = СоответствиеТиповУзловСтруктурыКорабля[ТипУзла];
		
		Если Не ТипУзлаСсылка = Неопределено Тогда
			
			//ТипУзлаИзделие = СоответствиеТиповУзловСтруктурыКорабля["и"];
			Если ТипУзлаСсылка.Пустая() Тогда
				СтрокаДанных.ТипУзла = ТипУзлаИзделие;
				СтрокаДанных.ЗИП = Истина;
			Иначе
				СтрокаДанных.ТипУзла = ТипУзлаСсылка;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если Сч = 4 И Не ЗначениеЗаполнено(СтрокаДанных.ТипУзла) Тогда //для первой строки не всегда указывают
			
			СтрокаДанных.ТипУзла = ТипУзлаГруппа;
			
		КонецЕсли; 
		
		Если Не СтрокаДанных.ТипУзла = ТипУзлаГруппа Тогда //прочие характеристики только для изделий и ЗИП
			
			СтрокаДанных.КодОборудования = ПолучитьСтроковоеЗначение(Источник, 5);
			СтрокаДанных.Обозначение = Обозначение;
			СтрокаДанных.ДокументНаПоставку = ДокументНаПоставку;
			СтрокаДанных.КодВидаДокумента = ПолучитьСтроковоеЗначение(Источник, 8);
			СтрокаДанных.КодОКП = ПолучитьСтроковоеЗначение(Источник, 9);
			СтрокаДанных.Количество = ПолучитьЧисловоеЗначение(Источник, 12);
			СтрокаДанных.ЕдиницаИзмеренияКоличества = ПолучитьСтроковоеЗначение(Источник, 10);
			СтрокаДанных.Масса = ПолучитьЧисловоеЗначение(Источник, 15);
			СтрокаДанных.ЕдиницаИзмеренияМассы = ПолучитьСтроковоеЗначение(Источник, 13);
			СтрокаДанных.КоличествоВЗИПБорт = ПолучитьЧисловоеЗначение(Источник, 16);
			СтрокаДанных.МестоХранения = ПолучитьСтроковоеЗначение(Источник, 18);
			СтрокаДанных.КоличествоВЗИПБаза = ПолучитьЧисловоеЗначение(Источник, 19);
			СтрокаДанных.НомерЯщика = ПолучитьСтроковоеЗначение(Источник, 20);
			СтрокаДанных.ЦенаВнутренняя = ПолучитьЧисловоеЗначение(Источник, 21);
			СтрокаДанных.ЦенаВнешняя = ПолучитьЧисловоеЗначение(Источник, 22);
			СтрокаДанных.Поставщик = ПолучитьСтроковоеЗначение(Источник, 23);
			СтрокаДанных.ДержательПодлинника = ПолучитьСтроковоеЗначение(Источник, 24);
			СтрокаДанных.СрокПоставки = ПолучитьСтроковоеЗначение(Источник, 25);
			СтрокаДанных.ФНН = ПолучитьСтроковоеЗначение(Источник, 26);
			СтрокаДанных.НаработкаНаОтказ = ПолучитьСтроковоеЗначение(Источник, 27);
			СтрокаДанных.КС = ПолучитьСтроковоеЗначение(Источник, 28);
			СтрокаДанных.КонтрольноеЧисло = ПолучитьСтроковоеЗначение(Источник, 29);
			СтрокаДанных.ОриентировочнаяПотребность5 = ПолучитьЧисловоеЗначение(Источник, 30);
			СтрокаДанных.ОриентировочнаяПотребность10 = ПолучитьЧисловоеЗначение(Источник, 31);
			СтрокаДанных.Примечание = ПолучитьСтроковоеЗначение(Источник, 32);
			
		КонецЕсли; 
		
		Сч = Сч + 1;
		
		Если Не ИспользоватьExcelApplication Тогда
			
			Источник.MoveNext();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//процедура считывает данные в первоначальном формате Алмаз (без дополнения к наименованию)
&НаКлиенте
Процедура ПрочитатьДанныеАлмазНачальный(Источник, СоответствиеТиповУзловСтруктурыКорабля)
	
	Сч = 1;
	
	СчетчикПустыхСтрок = 0;
	
	ТипУзлаГруппа = СоответствиеТиповУзловСтруктурыКорабля.Получить("г");
	ТипУзлаИзделие = СоответствиеТиповУзловСтруктурыКорабля["и"];
	
	Если ИспользоватьExcelApplication Тогда
		
		ВсегоСтрок = Источник.Cells.SpecialCells(11).Row;
		
		ДатаНачала = ТекущаяДата();
		
	КонецЕсли;
	
	ИндексПервойСтроки = 4 + ?(ИспользоватьExcelApplication, 1, 0);
	
	Пока ?(ИспользоватьExcelApplication, Сч <= ВсегоСтрок, Источник.EOF()=0) Цикл
		
		Если ИспользоватьExcelApplication Тогда //Excel.Application читает файлы медленно. отображаем процесс чтения
			
			УправлениеИнтерфейсом.ВывестиТекущееСостояние("Чтение файла " + ИмяФайла, ДатаНачала, Сч, ВсегоСтрок); 
			
		КонецЕсли; 
		
		Если Сч < (ИндексПервойСтроки) Тогда //данные начинаются с четвертой строки таблицы, выше - декорации
			
			Сч = Сч +1;
			
			Если Не ИспользоватьExcelApplication Тогда
				
				Источник.MoveNext();
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		НомерТекущейСтроки = Сч; //для чтения через Excel.Application
				
		//ключевые поля и проверка их заполненности
		Уровень = ПолучитьСтроковоеЗначение(Источник, 0);
		
		Если Прав(Уровень, 1) = "." Тогда
			
			Уровень = Лев(Уровень, СтрДлина(Уровень) - 1);
			
		КонецЕсли;
		
		ТипУзла = НРег(ПолучитьСтроковоеЗначение(Источник, 1));
		Наименование = ПолучитьСтроковоеЗначение(Источник, 3);
		Обозначение = ПолучитьСтроковоеЗначение(Источник, 5);
		ДокументНаПоставку = ПолучитьСтроковоеЗначение(Источник, 6);
		
		Если Не ЗначениеЗаполнено(Уровень) И Не ЗначениеЗаполнено(ТипУзла) И Не ЗначениеЗаполнено(Наименование) 
			И Не ЗначениеЗаполнено(Обозначение) И Не ЗначениеЗаполнено(ДокументНаПоставку) Тогда //это пустая строка. пропукаем
			
			Если Не ИспользоватьExcelApplication Тогда
				
				Источник.MoveNext();
				
			КонецЕсли;
			
			СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
			
			Если СчетчикПустыхСтрок > 3 Тогда //больше трех пустых строк подряд - данные явно закончились
				
				Прервать;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли; 
						
		Иначе
			
			СчетчикПустыхСтрок = 0;
			
		КонецЕсли;
		
		СтрокаДанных = ДанныеФайлов.Добавить();
		
		//общие данные
		ИдентификаторСтроки = Формат(Сч, "ЧГ=0");
		
		СтрокаДанных.НомерСтроки = ИдентификаторСтроки;
		СтрокаДанных.Наименование = Наименование;
		СтрокаДанных.Файл = ИмяФайла;
		СтрокаДанных.ПутьКФайлу = ПутьКФайлу;
		СтрокаДанных.Уровень = Уровень;
		
		ТипУзлаСсылка = СоответствиеТиповУзловСтруктурыКорабля.Получить(ТипУзла);
		
		Если Не ТипУзлаСсылка = Неопределено Тогда
			
			Если ТипУзлаСсылка.Пустая() Тогда
				СтрокаДанных.ТипУзла = ТипУзлаИзделие;
				СтрокаДанных.ЗИП = Истина;
			Иначе
				СтрокаДанных.ТипУзла = ТипУзлаСсылка;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если Сч = 4 И Не ЗначениеЗаполнено(СтрокаДанных.ТипУзла) Тогда //для первой строки не всегда указывают
			
			СтрокаДанных.ТипУзла = ТипУзлаГруппа;
			
		КонецЕсли; 
		
		Если Не СтрокаДанных.ТипУзла = ТипУзлаГруппа Тогда //прочие характеристики только для изделий и ЗИП
			
			СтрокаДанных.КодОборудования = ПолучитьСтроковоеЗначение(Источник, 4);
			СтрокаДанных.Обозначение = Обозначение;
			СтрокаДанных.ДокументНаПоставку = ДокументНаПоставку;
			СтрокаДанных.КодВидаДокумента = ПолучитьСтроковоеЗначение(Источник, 7);
			СтрокаДанных.КодОКП = ПолучитьСтроковоеЗначение(Источник, 8);
			СтрокаДанных.Количество = ПолучитьЧисловоеЗначение(Источник, 11);
			СтрокаДанных.ЕдиницаИзмеренияКоличества = ПолучитьСтроковоеЗначение(Источник, 9);
			СтрокаДанных.Масса = ПолучитьЧисловоеЗначение(Источник, 14);
			СтрокаДанных.ЕдиницаИзмеренияМассы = ПолучитьСтроковоеЗначение(Источник, 12);
			СтрокаДанных.КоличествоВЗИПБорт = ПолучитьЧисловоеЗначение(Источник, 15);
			СтрокаДанных.МестоХранения = ПолучитьСтроковоеЗначение(Источник, 17);
			СтрокаДанных.КоличествоВЗИПБаза = ПолучитьЧисловоеЗначение(Источник, 18);
			СтрокаДанных.НомерЯщика = ПолучитьСтроковоеЗначение(Источник, 19);
			СтрокаДанных.ЦенаВнутренняя = ПолучитьЧисловоеЗначение(Источник, 20);
			СтрокаДанных.ЦенаВнешняя = ПолучитьЧисловоеЗначение(Источник, 21);
			СтрокаДанных.Поставщик = ПолучитьСтроковоеЗначение(Источник, 22);
			СтрокаДанных.ДержательПодлинника = ПолучитьСтроковоеЗначение(Источник, 23);
			СтрокаДанных.СрокПоставки = ПолучитьСтроковоеЗначение(Источник, 24);
			СтрокаДанных.ФНН = ПолучитьСтроковоеЗначение(Источник, 25);
			СтрокаДанных.НаработкаНаОтказ = ПолучитьСтроковоеЗначение(Источник, 26);
			СтрокаДанных.КС = ПолучитьСтроковоеЗначение(Источник, 27);
			СтрокаДанных.КонтрольноеЧисло = ПолучитьСтроковоеЗначение(Источник, 28);
			СтрокаДанных.ОриентировочнаяПотребность5 = ПолучитьЧисловоеЗначение(Источник, 29);
			СтрокаДанных.ОриентировочнаяПотребность10 = ПолучитьЧисловоеЗначение(Источник, 30);
			СтрокаДанных.Примечание = ПолучитьСтроковоеЗначение(Источник, 31);
			
		КонецЕсли; 
		
		Сч = Сч + 1;
		
		Если Не ИспользоватьExcelApplication Тогда
			
			Источник.MoveNext();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//функция возвращает значение для полей числового типа
&НаКлиенте
Функция ПолучитьЧисловоеЗначение(Источник, ИндексКолонки)
	
	Попытка
		
		ЗначениеПоля = ?(ИспользоватьExcelApplication, Источник.Cells(НомерТекущейСтроки, ИндексКолонки + 1).Value, Источник.Fields(ИндексКолонки).Value);
		
		Если ЗначениеПоля = Неопределено Тогда
			
			ЗначениеПоля = "";
			
		КонецЕсли;
		
		Если ЗначениеПоля = Null И ИспользоватьExcelApplication Тогда
			
			ЗначениеПоля = Источник.Cells(НомерТекущейСтроки, ИндексКолонки + 1).Text;
			
		КонецЕсли;
		
		ЗначениеПоля = СокрЛП(ЗначениеПоля);
		
		Если ЗначениеПоля = "-" Тогда
			
			Возврат 0;
			
		Иначе 
			
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, " ", "");
			
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "-", ",");
			
			Возврат ?(ЗначениеЗаполнено(ЗначениеПоля), Число(ЗначениеПоля), 0);
			
		КонецЕсли;
		
	Исключение
		
		Описание = СписокСообщенийЛога[3].Значение + Строка(ИндексКолонки) + ОписаниеОшибки();
		
		ЗарегистрироватьОшибку(, ИмяФайла, ПутьКФайлу, Описание, ИдентификаторСтроки);
		
		Возврат 0;
		
	КонецПопытки;
	
КонецФункции

//функция возвращает обработанное значение строкового типа
&НаКлиенте
Функция ПолучитьСтроковоеЗначение(Источник, ИндексКолонки)
	
	Попытка
		
		ЗначениеПоля = ?(ИспользоватьExcelApplication, Источник.Cells(НомерТекущейСтроки, ИндексКолонки + 1).Value, Источник.Fields(ИндексКолонки).Value);
		
		Если ЗначениеПоля = Неопределено Тогда
			
			ЗначениеПоля = "";
			
		КонецЕсли; 
		
		ЗначениеПоля = СтрЗаменить(СокрЛП(Формат(ЗначениеПоля,"ЧГ=0")), Символы.ПС, " ");
		
		ЗначениеПоля = ОбщиеФункцииКлиентСервер.УдалитьПовторяющиесяСимволыИзСерединыСтроки(ЗначениеПоля, " ");
		
		//удаляем лишние пробелы в середине
		УдалитьПовторяющисяСимволыИзСерединыСтроки(ЗначениеПоля, " ");
		
		Возврат ЗначениеПоля;
		
	Исключение
		
		Описание = СписокСообщенийЛога[3].Значение + Строка(ИндексКолонки) + ОписаниеОшибки();
		
		ЗаписатьВЛог(, ИмяФайла, ПутьКФайлу, Описание, ИдентификаторСтроки, Истина);
		
		Возврат "";
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПИСИ ДАННЫХ В БД
#Область ЗаписьДанных

#Область ЗаписьСобытияФормы
//процедуры вызова записи данных в бд
&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		
		ПоказатьПредупреждение(, "Не указан заказ!");
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеФайлов.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Нет данных для записи!");
		Возврат;
		
	КонецЕсли; 
	
	Если ОшибкиОбработки.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗапроситьПродолжениеПриОшибках", ЭтаФорма), "При чтении данных и и/или предыдущей попытке записи происходили ошибки. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВызватьВыполнениеПроверкиДанных();
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьПродолжениеПриОшибках(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВызватьВыполнениеПроверкиДанных();
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибкиОбработки;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьВыполнениеПроверкиДанных()
	
	Если ВыполнитьПроверкуДанных() Тогда
		
		Сообщить("Запись данных начата в "+ТекущаяДата());
		Состояние("Запись данных в базу данных...",,,БиблиотекаКартинок.ДлительнаяОперация48);
		ЗаписатьДанныеВБД();
		Сообщить("Запись данных окончена в "+ТекущаяДата());
		
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВызватьВыполнениеПроверкиДанныхЗавершение", ЭтаФорма), "При проверке данных обнаружены ошибки. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьВыполнениеПроверкиДанныхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Сообщить("Запись данных начата в "+ТекущаяДата());
		Состояние("Запись данных в базу данных...",,,БиблиотекаКартинок.ДлительнаяОперация48);
		ЗаписатьДанныеВБД();
		Сообщить("Запись данных окончена в "+ТекущаяДата());
		
		Если ОшибкиОбработки.Количество() > 0 Тогда
			
			ПоказатьПредупреждение(, "В ходе загрузки происходили ошибки!");
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибкиОбработки;
			
		КонецЕсли; 
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибкиОбработки;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьОсновныеФункции

//процедура осуществяет запись данных в базу данных
&НаСервере
Процедура ЗаписатьДанныеВБД()
	
	ОшибкиОбработки.Очистить();
	
	ТаблицаСтруктурыЗаказа = ПолучитьТаблицуСтруктурыЗаказа();
	
	Если ТаблицаСтруктурыЗаказа = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//типы узлов
	ТипУзлаГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	ТипУзлаИзделие = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	
	//иниициализация соответствий для поиска элементов справочников
	СоответствиеСозданныхПредметовСнабжения = Новый Соответствие;
	СоответствиеСозданныхОрганизаций = Новый Соответствие;
	ЗаполнитьСоответствиеХарактеристикПредметовСнабжения();
	СоответствиеЭлементовСтруктурыЗаказа = Новый Соответствие;
	
	//заполнение глобальных переменных
	КаталогПредметовСнабженияМенеджер = Справочники.КаталогПредметовСнабжения; 
	КаталогПредметовСнабженияПустаяСсылка = КаталогПредметовСнабженияМенеджер.ПустаяСсылка();
	ОрганизацииМенеджер = Справочники.Организации;
	ОрганизацииПустаяСсылка = ОрганизацииМенеджер.ПустаяСсылка();
	СтруктураЗаказаМенеджер = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СтруктураЗаказаПустаяСсылка = СтруктураЗаказаМенеджер.ПустаяСсылка();
	
	//соответствие элементов уровням в дереве (для построения иерархии)
	СоответствиеЭлементовДерева = Новый Соответствие;
	СоответствиеЭлементовДерева.Вставить("0", СтруктураЗаказаПустаяСсылка);
	
	
	//получение запроса
	ЗапросКСтруктуреЗаказа = ПолучитьЗапросКСтруктуреЗаказа();
	
	//обход таблицы, запись данных
	Для каждого СтрокаТаблицыСтруктурыЗаказа Из ТаблицаСтруктурыЗаказа Цикл
		
		//глобальные переменные
		ИмяФайла = СтрокаТаблицыСтруктурыЗаказа.Файл;
		ПутьКФайлу = СтрокаТаблицыСтруктурыЗаказа.ПутьКФайлу;
		ПолноеИмяФайла = ПутьКФайлу + ИмяФайла;
		ИдентификаторСтроки = СтрокаТаблицыСтруктурыЗаказа.НомерСтроки;
		
		//получение ссылки на родителя
		ИдентификаторРодителя = ПолучитьИдентификаторРодителя(ПолноеИмяФайла, СтрокаТаблицыСтруктурыЗаказа.Уровень);
		Родитель = СоответствиеЭлементовДерева.Получить(ИдентификаторРодителя);
		
		//если родитель не найден - сделаем родителем пустую ссылку и отметим в логе как ошибку
		Если Родитель = Неопределено Тогда
			
			ТекстЛога = СписокСообщенийЛога[14].Значение + СтрокаТаблицыСтруктурыЗаказа.Уровень + "|" + СтрокаТаблицыСтруктурыЗаказа.Наименование;
			ЗаписатьВЛог(, ИмяФайла, ПутьКФайлу, ТекстЛога, ИдентификаторСтроки, Истина);
			
			Родитель = СтруктураЗаказаПустаяСсылка;
			
		КонецЕсли; 
		
		//получение элемента
		ЭлементСтруктурыЗаказа = ПолучитьЭлементСтруктурыЗаказа(ЗапросКСтруктуреЗаказа, СтрокаТаблицыСтруктурыЗаказа, Родитель);
		
		Если Не ЭлементСтруктурыЗаказа = СтруктураЗаказаПустаяСсылка Тогда
			
			//добавление элемента в соответствие элементов дерева
			ИдентификаторЭлемента = ПолноеИмяФайла + "|" + СтрокаТаблицыСтруктурыЗаказа.Уровень;
			СоответствиеЭлементовДерева.Вставить(ИдентификаторЭлемента, ЭлементСтруктурыЗаказа);
			
		КонецЕсли;	 
		
	КонецЦикла; 
	
КонецПроцедуры

//функция возвращает запрос, содержащий временную таблицу со структурой выбранного заказа 
//(чтобы не обращаться каждый раз ко всей таблице - таблица большая)
&НаСервере
Функция ПолучитьЗапросКСтруктуреЗаказа()
	
	ЗапросКСтруктуреЗаказа = Новый Запрос;
	ЗапросКСтруктуреЗаказа.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование КАК Наименование,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ОбозначениеДоп КАК ОбозначениеДоп,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЭтоЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктурыЗаказа
	|ПОМЕСТИТЬ втСтруктураЗаказа
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Заказ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель,
	|	Наименование,
	|	ОбозначениеДоп,
	|	ЗИП";
	ЗапросКСтруктуреЗаказа.УстановитьПараметр("Заказ", Заказ);
	
	ЗапросКСтруктуреЗаказа.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросКСтруктуреЗаказа.Выполнить();
	
	Возврат ЗапросКСтруктуреЗаказа;
	
КонецФункции
 
//функция возвращает ссылку на элемент структуры заказа, если элемент не обнаружен - создается новый элемент
&НаСервере
Функция ПолучитьЭлементСтруктурыЗаказа(ЗапросКСтруктуреЗаказа, СтрокаТаблицыСтруктурыЗаказа, Родитель)
		
	//вычисление значений параметров запроса
	ОбозначениеДоп = ?(ЗначениеЗаполнено(СтрокаТаблицыСтруктурыЗаказа.Обозначение), СтрокаТаблицыСтруктурыЗаказа.Обозначение, СтрокаТаблицыСтруктурыЗаказа.ДокументНаПоставку);
	ЭтоЗИП = СтрокаТаблицыСтруктурыЗаказа.ЗИП;
	
	ЗапросКСтруктуреЗаказа.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	втСтруктураЗаказа.ЭлементСтруктурыЗаказа КАК ЭлементСтруктурыЗаказа
	|ИЗ
	|	втСтруктураЗаказа КАК втСтруктураЗаказа
	|ГДЕ
	|	втСтруктураЗаказа.Родитель = &Родитель
	|	И втСтруктураЗаказа.Наименование = &Наименование
	|	И втСтруктураЗаказа.ОбозначениеДоп = &ОбозначениеДоп
	|	И втСтруктураЗаказа.ЭтоЗИП = &ЭтоЗИП";
	ЗапросКСтруктуреЗаказа.УстановитьПараметр("Родитель", Родитель);
	ЗапросКСтруктуреЗаказа.УстановитьПараметр("Наименование", СтрокаТаблицыСтруктурыЗаказа.Наименование);
	ЗапросКСтруктуреЗаказа.УстановитьПараметр("ОбозначениеДоп", ОбозначениеДоп);
	ЗапросКСтруктуреЗаказа.УстановитьПараметр("ЭтоЗИП", ЭтоЗИП);
	
	РезультатЗапроса = ЗапросКСтруктуреЗаказа.Выполнить();
	
	ИдентификаторРодителя = ?(Родитель = СтруктураЗаказаПустаяСсылка, "", Строка(Родитель.УникальныйИдентификатор()));
	ИдентификаторЭлемента = ИдентификаторРодителя + "|" + НРег(СтрокаТаблицыСтруктурыЗаказа.Наименование) + "|" + НРег(ОбозначениеДоп) + "|" + Строка(ЭтоЗИП);
	
	Если РезультатЗапроса.Пустой() Тогда //элемент структуры заказа не найден - ищем в соответствии
		
		ЭлементСтруктурыЗаказа = СоответствиеЭлементовСтруктурыЗаказа.Получить(ИдентификаторЭлемента);
		
		//для групп и элементов с указанным обозначением обновляем созданный элемент, для прочих - создаем новый
		Если Не ЭлементСтруктурыЗаказа = Неопределено И
			(СтрокаТаблицыСтруктурыЗаказа.ТипУзла = ТипУзлаГруппа Или ЗначениеЗаполнено(ОбозначениеДоп) Или ОбъединятьПредметыСнабженияБезОбозначения) Тогда 
			
			ЭлементСтруктурыЗаказаОбъект = ЭлементСтруктурыЗаказа.ПолучитьОбъект();
			ЭтоНовыйЭлемент = Ложь;
			
		Иначе
			
			ЭлементСтруктурыЗаказаОбъект = СтруктураЗаказаМенеджер.СоздатьЭлемент();
			ЭлементСтруктурыЗаказаОбъект.Владелец = Заказ;
			ЭлементСтруктурыЗаказаОбъект.Родитель = Родитель;
			ЭлементСтруктурыЗаказаОбъект.Наименование = СтрокаТаблицыСтруктурыЗаказа.Наименование;
			ЭлементСтруктурыЗаказаОбъект.ОбозначениеДоп = ОбозначениеДоп;
			ЭлементСтруктурыЗаказаОбъект.ЗИП = ЭтоЗИП;
			
			ЭтоНовыйЭлемент = Истина;
				
		КонецЕсли;
		
		Если ЗаполнитьДанныеЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказаОбъект, СтрокаТаблицыСтруктурыЗаказа, ЭтоНовыйЭлемент, ИдентификаторЭлемента) Тогда //создан новый элемент структуры заказа
			
			Возврат ЭлементСтруктурыЗаказаОбъект.Ссылка;
			
		Иначе //создать элемент не удалось - возвращаем пустую ссылку
			
			Возврат СтруктураЗаказаПустаяСсылка;
			
		КонецЕсли; 
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ОбновлятьДанныеСуществующихОбъектов Тогда //при необходимости обновляем данные элемента структуры заказа
			
			ЭлементСтруктурыЗаказаОбъект = Выборка.ЭлементСтруктурыЗаказа.ПолучитьОбъект();
			
			ЗаполнитьДанныеЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказаОбъект, СтрокаТаблицыСтруктурыЗаказа, Ложь);
			
		КонецЕсли;
			
		Возврат Выборка.ЭлементСтруктурыЗаказа; 
		
	КонецЕсли; 
	
КонецФункции

//функция заполняет значения реквизитов элементов структуры заказа и осуществляет запись элемента
//возвращает результат записи: истина - элемент записан, ложь - не удалось записать элемент
&НаСервере
Функция ЗаполнитьДанныеЭлементаСтруктурыЗаказа(ЭлементСтруктурыЗаказаОбъект, СтрокаТаблицыСтруктурыЗаказа, ЭтоНовыйЭлемент, ИдентификаторЭлемента = "")
	
	ЭлементСтруктурыЗаказаОбъект.Тип = СтрокаТаблицыСтруктурыЗаказа.ТипУзла;
	
	Если Не СтрокаТаблицыСтруктурыЗаказа.ТипУзла = ТипУзлаГруппа Тогда //для изделий и ЗИП заполняем значения соответствующих реквизитов
		
		ЭлементСтруктурыЗаказаОбъект.ПредметСнабжения = ПолучитьПредметСнабжения(СтрокаТаблицыСтруктурыЗаказа, ЭлементСтруктурыЗаказаОбъект.ПредметСнабжения);
		ЭлементСтруктурыЗаказаОбъект.Количество = ЭлементСтруктурыЗаказаОбъект.Количество + СтрокаТаблицыСтруктурыЗаказа.Количество;
		ЭлементСтруктурыЗаказаОбъект.КоличествоВЗИПБорт = ЭлементСтруктурыЗаказаОбъект.КоличествоВЗИПБорт + СтрокаТаблицыСтруктурыЗаказа.КоличествоВЗИПБорт;
		ЭлементСтруктурыЗаказаОбъект.КоличествоВЗИПБаза = ЭлементСтруктурыЗаказаОбъект.КоличествоВЗИПБаза + СтрокаТаблицыСтруктурыЗаказа.КоличествоВЗИПБаза;
		ЭлементСтруктурыЗаказаОбъект.КоличествоВЗИПДЭ = ЭлементСтруктурыЗаказаОбъект.КоличествоВЗИПДЭ + СтрокаТаблицыСтруктурыЗаказа.КоличествоВЗИПДЭ;
		ЭлементСтруктурыЗаказаОбъект.МестоХранения = СтрокаТаблицыСтруктурыЗаказа.МестоХранения;
		ЭлементСтруктурыЗаказаОбъект.Примечание = СтрокаТаблицыСтруктурыЗаказа.Примечание;
		
	КонецЕсли;
	
	Попытка
		
		ЭлементСтруктурыЗаказаОбъект.Записать();
		
		ТекстЛога = ?(ЭтоНовыйЭлемент, СписокСообщенийЛога[10].Значение, СписокСообщенийЛога[11].Значение);
		ЗаписатьВЛог(ЭлементСтруктурыЗаказаОбъект.Ссылка, ИмяФайла, ПутьКФайлу, ТекстЛога, ИдентификаторСтроки);
		
		Если ЭтоНовыйЭлемент Тогда
			
			СоответствиеЭлементовСтруктурыЗаказа.Вставить(ИдентификаторЭлемента, ЭлементСтруктурыЗаказаОбъект.Ссылка);
			
		КонецЕсли; 
		
		Возврат Истина;
		
	Исключение
		
		ТекстЛога = ?(ЭтоНовыйЭлемент, СписокСообщенийЛога[12].Значение, СписокСообщенийЛога[13].Значение) + ЭлементСтруктурыЗаказаОбъект.Родитель
		+ ЭлементСтруктурыЗаказаОбъект.Наименование + ЭлементСтруктурыЗаказаОбъект.ОбозначениеДоп + Символы.ПС + ОписаниеОшибки();
		ЗаписатьВЛог(ЭлементСтруктурыЗаказаОбъект.Ссылка, ИмяФайла, ПутьКФайлу, ТекстЛога, ИдентификаторСтроки);
		
		Возврат Ложь;
		
	КонецПопытки;
		 
	
КонецФункции
  
//функция возвращает ссылку на предмет снабжения, если предмет снабжения не обнаружен - создает его
//при установленном флаге обновления данных - вызывает обновление данных предмета снабжения
&НаСервере
Функция ПолучитьПредметСнабжения(СтрокаТаблицыСтруктурыЗаказа, пПредметСнабжения)
	
	Если Не пПредметСнабжения = КаталогПредметовСнабженияПустаяСсылка Тогда //если у элемента структуры заказа уже есть предмет снабжения - обновляем его
		
		Если ОбновлятьДанныеСуществующихОбъектов Тогда
			
			ПредметСнабженияОбъект = пПредметСнабжения.ПолучитьОбъект();
			
			ЗаполнитьДанныеПредметаСнабжения(ПредметСнабженияОбъект, СтрокаТаблицыСтруктурыЗаказа, Ложь);
			
		КонецЕсли;
		
		Возврат пПредметСнабжения;
		
	КонецЕсли; 
	
	Если СтрокаТаблицыСтруктурыЗаказа.ПредметСнабжения = КаталогПредметовСнабженияПустаяСсылка Тогда //предмет снабжения не найден запросом
		
		ОбозначениеДоп = ?(СтрокаТаблицыСтруктурыЗаказа.Обозначение = "", СтрокаТаблицыСтруктурыЗаказа.ДокументНаПоставку, СтрокаТаблицыСтруктурыЗаказа.Обозначение);
		
		ИдентификаторПредметаСнабжения = ?(ОбозначениеДоп = "" И Не ОбъединятьПредметыСнабженияБезОбозначения, "", НРег(СтрокаТаблицыСтруктурыЗаказа.Наименование) + "|" + НРег(ОбозначениеДоп));
		
		ПредметСнабжения = СоответствиеСозданныхПредметовСнабжения.Получить(ИдентификаторПредметаСнабжения);
		
		Если ПредметСнабжения = Неопределено Тогда //предмет снабжения не создавался ранее в цикле
			
			ПредметСнабженияОбъект = КаталогПредметовСнабженияМенеджер.СоздатьЭлемент();
			ПредметСнабженияОбъект.Наименование = СтрокаТаблицыСтруктурыЗаказа.Наименование;
			ПредметСнабженияОбъект.Обозначение = СтрокаТаблицыСтруктурыЗаказа.Обозначение;
			
			Если ЗаполнитьДанныеПредметаСнабжения(ПредметСнабженияОбъект, СтрокаТаблицыСтруктурыЗаказа, Истина) Тогда
				
				ПредметСнабжения = ПредметСнабженияОбъект.Ссылка;
				
				Если Не ИдентификаторПредметаСнабжения = "" Тогда //предметы снабжения без обозначений в соответствие не вставляем, если не установлен соответствующий флаг
					
					СоответствиеСозданныхПредметовСнабжения.Вставить(ИдентификаторПредметаСнабжения, ПредметСнабжения);
					
				КонецЕсли;
				
				Возврат ПредметСнабжения;
				
			Иначе //предмет снабжения создать не удалось - возвращаем пустую ссылку
				
				Возврат КаталогПредметовСнабженияПустаяСсылка;
				
			КонецЕсли; 	
			
		Иначе
			
			Если ОбновлятьДанныеСуществующихОбъектов Тогда
				
				ПредметСнабженияОбъект = ПредметСнабжения.ПолучитьОбъект();
				
				ЗаполнитьДанныеПредметаСнабжения(ПредметСнабженияОбъект, СтрокаТаблицыСтруктурыЗаказа, Ложь);
				
			КонецЕсли;
			
			Возврат ПредметСнабжения;
			
		КонецЕсли; 
		
	Иначе
		
		Если ОбновлятьДанныеСуществующихОбъектов Тогда
			
			ПредметСнабженияОбъект = СтрокаТаблицыСтруктурыЗаказа.ПредметСнабжения.ПолучитьОбъект();
			
			ЗаполнитьДанныеПредметаСнабжения(ПредметСнабженияОбъект, СтрокаТаблицыСтруктурыЗаказа, Ложь);
			
		КонецЕсли; 
		
		Возврат СтрокаТаблицыСтруктурыЗаказа.ПредметСнабжения;
		
	КонецЕсли; 
	
КонецФункции

//функция заполняет данные нового или обновляет данные уже существующего предмета снабжения
//возвращает результат заполнения: истина - данные успешно записаны, ложь - при записи данных произошла ошибка
&НаСервере
Функция ЗаполнитьДанныеПредметаСнабжения(ПредметСнабженияОбъект, СтрокаТаблицыСтруктурыЗаказа, ЭтоНовыйЭлемент)
	
	ПредметСнабженияОбъект.ДокументНаПоставку = СтрокаТаблицыСтруктурыЗаказа.ДокументНаПоставку;
	ПредметСнабженияОбъект.ЕдиницаИзмерения = СтрокаТаблицыСтруктурыЗаказа.ЕдиницаИзмеренияКоличестваСсылка;
	ПредметСнабженияОбъект.ФНН = СтрокаТаблицыСтруктурыЗаказа.ФНН;
	
	//характеристики
	ЗаполнитьХарактеристикуПредметаСнабжения(ПредметСнабженияОбъект, "Масса", СтрокаТаблицыСтруктурыЗаказа.Масса, СтрокаТаблицыСтруктурыЗаказа.ЕдиницаИзмеренияМассыСсылка, ЭтоНовыйЭлемент);
	
	//изготовители/поставщики
	ДобавитьИзготовителяПоставщикаПредметаСнабжения(ПредметСнабженияОбъект, СтрокаТаблицыСтруктурыЗаказа.Поставщик, СтрокаТаблицыСтруктурыЗаказа.Контрагент, Истина, Ложь, Ложь, ЭтоНовыйЭлемент);
	
	ДобавитьИзготовителяПоставщикаПредметаСнабжения(ПредметСнабженияОбъект, СтрокаТаблицыСтруктурыЗаказа.ДержательПодлинника, СтрокаТаблицыСтруктурыЗаказа.Разработчик, Ложь, Истина, Ложь, ЭтоНовыйЭлемент);
		
	Попытка
		
		 ПредметСнабженияОбъект.Записать();
		 
		 ТекстЛога = ?(ЭтоНовыйЭлемент, СписокСообщенийЛога[4].Значение, СписокСообщенийЛога[5].Значение);
		 ЗаписатьВЛог(ПредметСнабженияОбъект.Ссылка, ИмяФайла, ПутьКФайлу, ТекстЛога, СтрокаТаблицыСтруктурыЗаказа.НомерСтроки);
		 
		 Возврат Истина;
		
	Исключение
		
		 ТекстЛога = ?(ЭтоНовыйЭлемент, СписокСообщенийЛога[6].Значение, СписокСообщенийЛога[7].Значение) + СтрокаТаблицыСтруктурыЗаказа.Наименование + СтрокаТаблицыСтруктурыЗаказа.Обозначение + Символы.ПС+ ОписаниеОшибки();
		 ЗаписатьВЛог(ПредметСнабженияОбъект.Ссылка, ИмяФайла, ПутьКФайлу, ТекстЛога, СтрокаТаблицыСтруктурыЗаказа.НомерСтроки, Истина);
		
		 Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

//процедура создает характеристку предмета снабжения либо заполняет значение существующей характеристики
&НаСервере
Процедура ЗаполнитьХарактеристикуПредметаСнабжения(ПредметСнабженияОбъект, ИмяХарактеристики, ЗначениеХарактеристики, ЕдиницаИзмерения = Неопределено, ЭтоНовыйЭлемент)
	
	Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда //пустое значение добавлять не нужно
		
		Возврат;
		
	КонецЕсли; 
	
	ХарактеристикаПредметовСнабжения = ПолучитьХарактеристикуПредметовСнабжения(ИмяХарактеристики);
	
	ТабличнаяЧастьХарактеристики = ПредметСнабженияОбъект.Характеристики;
	
	Если ЭтоНовыйЭлемент Тогда //у новых элементов искать характеристики в табличной части незачем
		
		СтрокаТабличнойЧастиХарактеристики = ТабличнаяЧастьХарактеристики.Добавить();
		СтрокаТабличнойЧастиХарактеристики.Характеристика = ХарактеристикаПредметовСнабжения;
		
	Иначе
		
		СтрокаТабличнойЧастиХарактеристики = ТабличнаяЧастьХарактеристики.Найти(ХарактеристикаПредметовСнабжения, "Характеристика");
		
		Если СтрокаТабличнойЧастиХарактеристики = Неопределено Тогда
			
			СтрокаТабличнойЧастиХарактеристики = ТабличнаяЧастьХарактеристики.Добавить();
			СтрокаТабличнойЧастиХарактеристики.Характеристика = ХарактеристикаПредметовСнабжения;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	СтрокаТабличнойЧастиХарактеристики.Значение = ЗначениеХарактеристики;
	
	Если Не ЕдиницаИзмерения = Неопределено Тогда
		
		СтрокаТабличнойЧастиХарактеристики.ЕдиницаИзмерения = ЕдиницаИзмерения;
		
	КонецЕсли; 
	
КонецПроцедуры

//функция возвращает ссылку на характеристику предметов снабжения,
//при отсутствии характеристики с таким наименованием - создает новую
&НаСервере
Функция ПолучитьХарактеристикуПредметовСнабжения(ИмяХарактеристики)
	
	ИмяХарактеристикиДляПоиска = НРег(ИмяХарактеристики);
	
	ХарактеристикаПредметовСнабжения = СоответствиеХарактеристикПредметовСнабжения.Получить(ИмяХарактеристикиДляПоиска);
	
	Если ХарактеристикаПредметовСнабжения = Неопределено Тогда
		
		ХарактеристикаПредметовСнабженияОбъект = Справочники.ХарактеристикиПредметовСнабжения.СоздатьЭлемент();
		ХарактеристикаПредметовСнабженияОбъект.Наименование = ИмяХарактеристики;
		ХарактеристикаПредметовСнабженияОбъект.Записать();
		
		ХарактеристикаПредметовСнабжения = ХарактеристикаПредметовСнабженияОбъект.Ссылка;
		
		СоответствиеХарактеристикПредметовСнабжения.Вставить(ИмяХарактеристикиДляПоиска, ХарактеристикаПредметовСнабжения);
		
		ЗаписатьВЛог(ХарактеристикаПредметовСнабжения, ИмяФайла, ПутьКФайлу, СписокСообщенийЛога[8].Значение, ИдентификаторСтроки); 
		
	КонецЕсли;
	
	Возврат ХарактеристикаПредметовСнабжения;
	
КонецФункции

//процедура добавляет нового изготовителя/поставщика или обновляет данные уже существующего 
&НаСервере
Процедура ДобавитьИзготовителяПоставщикаПредметаСнабжения(ПредметСнабженияОбъект, ИмяОрганизации, Организация, Поставщик, Разработчик, Изготовитель, ЭтоНовыйЭлемент)
	
	Если ИмяОрганизации = "" Тогда //не указанные организации не обрабатываем
		
		Возврат;
		
	КонецЕсли; 
	
	Если Организация = ОрганизацииПустаяСсылка Тогда 
		
		Организация = ПолучитьОрганизацию(ИмяОрганизации);
		
	КонецЕсли;
	
	ТабличнаяЧастьИзготовителиПоставщики = ПредметСнабженияОбъект.ИзготовителиИПоставщики;
	
	Если ЭтоНовыйЭлемент Тогда
		
		СтрокаТабличнойЧастиИзготовителиПоставщики = ТабличнаяЧастьИзготовителиПоставщики.Добавить();
		СтрокаТабличнойЧастиИзготовителиПоставщики.Контрагент = Организация;
		
	Иначе
		
		СтрокаТабличнойЧастиИзготовителиПоставщики = ТабличнаяЧастьИзготовителиПоставщики.Найти(Организация, "Контрагент");
		
		Если СтрокаТабличнойЧастиИзготовителиПоставщики = Неопределено Тогда
			
			СтрокаТабличнойЧастиИзготовителиПоставщики = ТабличнаяЧастьИзготовителиПоставщики.Добавить();
			СтрокаТабличнойЧастиИзготовителиПоставщики.Контрагент = Организация;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	//устанавливаем только истинные значения флагов - из разных источников могли поступать разные не противоречащие сведения о статусе контрагента
	Если Поставщик Тогда
		
		СтрокаТабличнойЧастиИзготовителиПоставщики.Поставщик = Истина;
		
	КонецЕсли;
	
	Если Разработчик Тогда
		
		СтрокаТабличнойЧастиИзготовителиПоставщики.Разработчик = Истина;
		
	КонецЕсли;
	
	Если Изготовитель Тогда
		
		СтрокаТабличнойЧастиИзготовителиПоставщики.Изготовитель = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

//функция возвращает ссылку на организацию, в случае отсутствия организации - создает новую
&НаСервере
Функция ПолучитьОрганизацию(ИмяОрганизации)
	
	Организация = СоответствиеСозданныхОрганизаций.Получить(ИмяОрганизации);
	
	Если Организация = Неопределено Тогда //если не создавали ранее - создаем
		
		ОрганизацияОбъект = ОрганизацииМенеджер.СоздатьЭлемент();
		ОрганизацияОбъект.Наименование = ИмяОрганизации;
		ОрганизацияОбъект.Записать();
		
		Организация = ОрганизацияОбъект.Ссылка;
		
		ЗаписатьВЛог(Организация, ИмяФайла, ПутьКФайлу, СписокСообщенийЛога[9].Значение, ИдентификаторСтроки);
		
		СоответствиеСозданныхОрганизаций.Вставить(ИмяОрганизации, Организация);
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции
  
//функция возвращает обработанную таблицу загруженных данных
//в таблицу добавляются ссылки на предметы снабжения, единицы измерения, поставщиков
&НаСервере
Функция ПолучитьТаблицуСтруктурыЗаказа()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеФайлов.Наименование КАК Наименование,
	|	ДанныеФайлов.Обозначение КАК Обозначение,
	|	ДанныеФайлов.КодОКП КАК КодОКП,
	|	ДанныеФайлов.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ДанныеФайлов.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	ДанныеФайлов.Масса КАК Масса,
	|	ДанныеФайлов.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	ДанныеФайлов.МестоХранения КАК МестоХранения,
	|	ДанныеФайлов.ЦенаВнутренняя КАК ЦенаВнутренняя,
	|	ДанныеФайлов.Поставщик КАК Поставщик,
	|	ДанныеФайлов.Уровень КАК Уровень,
	|	ДанныеФайлов.Файл КАК Файл,
	|	ДанныеФайлов.ПутьКФайлу КАК ПутьКФайлу,
	|	ДанныеФайлов.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	ДанныеФайлов.ЕдиницаИзмеренияМассы КАК ЕдиницаИзмеренияМассы,
	|	ДанныеФайлов.КодОборудования КАК КодОборудования,
	|	ДанныеФайлов.КодВидаДокумента КАК КодВидаДокумента,
	|	ДанныеФайлов.ЦенаВнешняя КАК ЦенаВнешняя,
	|	ДанныеФайлов.НомерЯщика КАК НомерЯщика,
	|	ДанныеФайлов.ДержательПодлинника КАК ДержательПодлинника,
	|	ДанныеФайлов.СрокПоставки КАК СрокПоставки,
	|	ДанныеФайлов.ФНН КАК ФНН,
	|	ДанныеФайлов.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	ДанныеФайлов.КС КАК КС,
	|	ДанныеФайлов.КонтрольноеЧисло КАК КонтрольноеЧисло,
	|	ДанныеФайлов.ОриентировочнаяПотребность5 КАК ОриентировочнаяПотребность5,
	|	ДанныеФайлов.ОриентировочнаяПотребность10 КАК ОриентировочнаяПотребность10,
	|	ДанныеФайлов.Примечание КАК Примечание,
	|	ДанныеФайлов.Количество КАК Количество,
	|	ДанныеФайлов.НомерСтроки КАК НомерСтроки,
	|	ДанныеФайлов.ТипУзла КАК ТипУзла,
	|	ДанныеФайлов.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втДанныеФайлов
	|ИЗ
	|	&ДанныеФайлов КАК ДанныеФайлов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование,
	|	Уровень,
	|	ТипУзла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеФайлов.Наименование КАК Наименование,
	|	втДанныеФайлов.Обозначение КАК Обозначение,
	|	втДанныеФайлов.КодОКП КАК КодОКП,
	|	втДанныеФайлов.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втДанныеФайлов.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	втДанныеФайлов.Масса КАК Масса,
	|	втДанныеФайлов.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втДанныеФайлов.МестоХранения КАК МестоХранения,
	|	втДанныеФайлов.ЦенаВнутренняя КАК ЦенаВнутренняя,
	|	втДанныеФайлов.Поставщик КАК Поставщик,
	|	втДанныеФайлов.Уровень КАК Уровень,
	|	втДанныеФайлов.Файл КАК Файл,
	|	втДанныеФайлов.ПутьКФайлу КАК ПутьКФайлу,
	|	втДанныеФайлов.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втДанныеФайлов.ЕдиницаИзмеренияМассы КАК ЕдиницаИзмеренияМассы,
	|	втДанныеФайлов.КодОборудования КАК КодОборудования,
	|	втДанныеФайлов.КодВидаДокумента КАК КодВидаДокумента,
	|	втДанныеФайлов.ЦенаВнешняя КАК ЦенаВнешняя,
	|	втДанныеФайлов.НомерЯщика КАК НомерЯщика,
	|	втДанныеФайлов.ДержательПодлинника КАК ДержательПодлинника,
	|	втДанныеФайлов.СрокПоставки КАК СрокПоставки,
	|	втДанныеФайлов.ФНН КАК ФНН,
	|	втДанныеФайлов.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	втДанныеФайлов.КС КАК КС,
	|	втДанныеФайлов.КонтрольноеЧисло КАК КонтрольноеЧисло,
	|	втДанныеФайлов.ОриентировочнаяПотребность5 КАК ОриентировочнаяПотребность5,
	|	втДанныеФайлов.ОриентировочнаяПотребность10 КАК ОриентировочнаяПотребность10,
	|	втДанныеФайлов.Примечание КАК Примечание,
	|	втДанныеФайлов.Количество КАК Количество,
	|	втДанныеФайлов.НомерСтроки КАК НомерСтроки,
	|	втДанныеФайлов.ТипУзла КАК ТипУзла,
	|	втДанныеФайлов.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втДанныеФайловФильтрованные
	|ИЗ
	|	втДанныеФайлов КАК втДанныеФайлов
	|ГДЕ
	|	НЕ втДанныеФайлов.Наименование = """"
	|	И НЕ втДанныеФайлов.Уровень = """"
	|	И НЕ втДанныеФайлов.ТипУзла = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование,
	|	Обозначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеФайловФильтрованные.Наименование КАК Наименование,
	|	втДанныеФайловФильтрованные.Обозначение КАК Обозначение,
	|	втДанныеФайловФильтрованные.КодОКП КАК КодОКП,
	|	втДанныеФайловФильтрованные.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втДанныеФайловФильтрованные.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	втДанныеФайловФильтрованные.Масса КАК Масса,
	|	втДанныеФайловФильтрованные.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втДанныеФайловФильтрованные.МестоХранения КАК МестоХранения,
	|	втДанныеФайловФильтрованные.ЦенаВнутренняя КАК ЦенаВнутренняя,
	|	втДанныеФайловФильтрованные.Поставщик КАК Поставщик,
	|	втДанныеФайловФильтрованные.Уровень КАК Уровень,
	|	втДанныеФайловФильтрованные.Файл КАК Файл,
	|	втДанныеФайловФильтрованные.ПутьКФайлу КАК ПутьКФайлу,
	|	втДанныеФайловФильтрованные.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втДанныеФайловФильтрованные.ЕдиницаИзмеренияМассы КАК ЕдиницаИзмеренияМассы,
	|	втДанныеФайловФильтрованные.КодОборудования КАК КодОборудования,
	|	втДанныеФайловФильтрованные.КодВидаДокумента КАК КодВидаДокумента,
	|	втДанныеФайловФильтрованные.ЦенаВнешняя КАК ЦенаВнешняя,
	|	втДанныеФайловФильтрованные.НомерЯщика КАК НомерЯщика,
	|	втДанныеФайловФильтрованные.ДержательПодлинника КАК ДержательПодлинника,
	|	втДанныеФайловФильтрованные.СрокПоставки КАК СрокПоставки,
	|	втДанныеФайловФильтрованные.ФНН КАК ФНН,
	|	втДанныеФайловФильтрованные.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	втДанныеФайловФильтрованные.КС КАК КС,
	|	втДанныеФайловФильтрованные.КонтрольноеЧисло КАК КонтрольноеЧисло,
	|	втДанныеФайловФильтрованные.ОриентировочнаяПотребность5 КАК ОриентировочнаяПотребность5,
	|	втДанныеФайловФильтрованные.ОриентировочнаяПотребность10 КАК ОриентировочнаяПотребность10,
	|	втДанныеФайловФильтрованные.Примечание КАК Примечание,
	|	втДанныеФайловФильтрованные.Количество КАК Количество,
	|	втДанныеФайловФильтрованные.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(КаталогПредметовСнабжения.Ссылка, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))) КАК ПредметСнабжения,
	|	втДанныеФайловФильтрованные.ТипУзла КАК ТипУзла,
	|	втДанныеФайловФильтрованные.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втДанныеПредметыСнабжения
	|ИЗ
	|	втДанныеФайловФильтрованные КАК втДанныеФайловФильтрованные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО втДанныеФайловФильтрованные.Наименование = КаталогПредметовСнабжения.Наименование
	|			И втДанныеФайловФильтрованные.Обозначение = КаталогПредметовСнабжения.Обозначение
	|			И (НЕ втДанныеФайловФильтрованные.Обозначение = """"
	|				ИЛИ втДанныеФайловФильтрованные.ДокументНаПоставку = КаталогПредметовСнабжения.ДокументНаПоставку)
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеФайловФильтрованные.Наименование,
	|	втДанныеФайловФильтрованные.Обозначение,
	|	втДанныеФайловФильтрованные.КодОКП,
	|	втДанныеФайловФильтрованные.ДокументНаПоставку,
	|	втДанныеФайловФильтрованные.ЕдиницаИзмеренияКоличества,
	|	втДанныеФайловФильтрованные.Масса,
	|	втДанныеФайловФильтрованные.КоличествоВЗИПБорт,
	|	втДанныеФайловФильтрованные.МестоХранения,
	|	втДанныеФайловФильтрованные.ЦенаВнутренняя,
	|	втДанныеФайловФильтрованные.Поставщик,
	|	втДанныеФайловФильтрованные.Уровень,
	|	втДанныеФайловФильтрованные.Файл,
	|	втДанныеФайловФильтрованные.ПутьКФайлу,
	|	втДанныеФайловФильтрованные.КоличествоВЗИПБаза,
	|	втДанныеФайловФильтрованные.ЕдиницаИзмеренияМассы,
	|	втДанныеФайловФильтрованные.КодОборудования,
	|	втДанныеФайловФильтрованные.КодВидаДокумента,
	|	втДанныеФайловФильтрованные.ЦенаВнешняя,
	|	втДанныеФайловФильтрованные.НомерЯщика,
	|	втДанныеФайловФильтрованные.ДержательПодлинника,
	|	втДанныеФайловФильтрованные.СрокПоставки,
	|	втДанныеФайловФильтрованные.ФНН,
	|	втДанныеФайловФильтрованные.НаработкаНаОтказ,
	|	втДанныеФайловФильтрованные.КС,
	|	втДанныеФайловФильтрованные.КонтрольноеЧисло,
	|	втДанныеФайловФильтрованные.ОриентировочнаяПотребность5,
	|	втДанныеФайловФильтрованные.ОриентировочнаяПотребность10,
	|	втДанныеФайловФильтрованные.Примечание,
	|	втДанныеФайловФильтрованные.Количество,
	|	втДанныеФайловФильтрованные.НомерСтроки,
	|	втДанныеФайловФильтрованные.ТипУзла,
	|	втДанныеФайловФильтрованные.КоличествоВЗИПДЭ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиницаИзмеренияКоличества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Наименование КАК Наименование,
	|	МАКСИМУМ(ВложенныйЗапрос.Ссылка) КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ втЕдиницыИзмерения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОКЕИ.Код КАК Наименование,
	|		МАКСИМУМ(ОКЕИ.Ссылка) КАК Ссылка
	|	ИЗ
	|		Справочник.ОКЕИ КАК ОКЕИ
	|	ГДЕ
	|		НЕ ОКЕИ.Код = """"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОКЕИ.Код
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОКЕИ.Наименование,
	|		МАКСИМУМ(ОКЕИ.Ссылка)
	|	ИЗ
	|		Справочник.ОКЕИ КАК ОКЕИ
	|	ГДЕ
	|		НЕ ОКЕИ.Наименование = """"
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОКЕИ.Наименование) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанныеПредметыСнабжения.Наименование КАК Наименование,
	|	втДанныеПредметыСнабжения.Обозначение КАК Обозначение,
	|	втДанныеПредметыСнабжения.КодОКП КАК КодОКП,
	|	втДанныеПредметыСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втДанныеПредметыСнабжения.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	втДанныеПредметыСнабжения.Масса КАК Масса,
	|	втДанныеПредметыСнабжения.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втДанныеПредметыСнабжения.МестоХранения КАК МестоХранения,
	|	втДанныеПредметыСнабжения.ЦенаВнутренняя КАК ЦенаВнутренняя,
	|	втДанныеПредметыСнабжения.Поставщик КАК Поставщик,
	|	втДанныеПредметыСнабжения.Уровень КАК Уровень,
	|	втДанныеПредметыСнабжения.Файл КАК Файл,
	|	втДанныеПредметыСнабжения.ПутьКФайлу КАК ПутьКФайлу,
	|	втДанныеПредметыСнабжения.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втДанныеПредметыСнабжения.ЕдиницаИзмеренияМассы КАК ЕдиницаИзмеренияМассы,
	|	втДанныеПредметыСнабжения.КодОборудования КАК КодОборудования,
	|	втДанныеПредметыСнабжения.КодВидаДокумента КАК КодВидаДокумента,
	|	втДанныеПредметыСнабжения.ЦенаВнешняя КАК ЦенаВнешняя,
	|	втДанныеПредметыСнабжения.НомерЯщика КАК НомерЯщика,
	|	втДанныеПредметыСнабжения.ДержательПодлинника КАК ДержательПодлинника,
	|	втДанныеПредметыСнабжения.СрокПоставки КАК СрокПоставки,
	|	втДанныеПредметыСнабжения.ФНН КАК ФНН,
	|	втДанныеПредметыСнабжения.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	втДанныеПредметыСнабжения.КС КАК КС,
	|	втДанныеПредметыСнабжения.КонтрольноеЧисло КАК КонтрольноеЧисло,
	|	втДанныеПредметыСнабжения.ОриентировочнаяПотребность5 КАК ОриентировочнаяПотребность5,
	|	втДанныеПредметыСнабжения.ОриентировочнаяПотребность10 КАК ОриентировочнаяПотребность10,
	|	втДанныеПредметыСнабжения.Примечание КАК Примечание,
	|	втДанныеПредметыСнабжения.Количество КАК Количество,
	|	втДанныеПредметыСнабжения.НомерСтроки КАК НомерСтроки,
	|	втДанныеПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ЕСТЬNULL(втЕдиницыИзмерения.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ОКЕИ.ПустаяСсылка)) КАК ЕдиницаИзмеренияКоличестваСсылка,
	|	втДанныеПредметыСнабжения.ТипУзла КАК ТипУзла,
	|	втДанныеПредметыСнабжения.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втДанныеЕдиницыИзмеренияКоличества
	|ИЗ
	|	втДанныеПредметыСнабжения КАК втДанныеПредметыСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЕдиницыИзмерения КАК втЕдиницыИзмерения
	|		ПО втДанныеПредметыСнабжения.ЕдиницаИзмеренияКоличества = втЕдиницыИзмерения.Наименование
	|			И (НЕ втДанныеПредметыСнабжения.ЕдиницаИзмеренияКоличества = """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиницаИзмеренияМассы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанныеЕдиницыИзмеренияКоличества.Наименование КАК Наименование,
	|	втДанныеЕдиницыИзмеренияКоличества.Обозначение КАК Обозначение,
	|	втДанныеЕдиницыИзмеренияКоличества.КодОКП КАК КодОКП,
	|	втДанныеЕдиницыИзмеренияКоличества.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втДанныеЕдиницыИзмеренияКоличества.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	втДанныеЕдиницыИзмеренияКоличества.Масса КАК Масса,
	|	втДанныеЕдиницыИзмеренияКоличества.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втДанныеЕдиницыИзмеренияКоличества.МестоХранения КАК МестоХранения,
	|	втДанныеЕдиницыИзмеренияКоличества.ЦенаВнутренняя КАК ЦенаВнутренняя,
	|	втДанныеЕдиницыИзмеренияКоличества.Поставщик КАК Поставщик,
	|	втДанныеЕдиницыИзмеренияКоличества.Уровень КАК Уровень,
	|	втДанныеЕдиницыИзмеренияКоличества.Файл КАК Файл,
	|	втДанныеЕдиницыИзмеренияКоличества.ПутьКФайлу КАК ПутьКФайлу,
	|	втДанныеЕдиницыИзмеренияКоличества.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втДанныеЕдиницыИзмеренияКоличества.ЕдиницаИзмеренияМассы КАК ЕдиницаИзмеренияМассы,
	|	втДанныеЕдиницыИзмеренияКоличества.КодОборудования КАК КодОборудования,
	|	втДанныеЕдиницыИзмеренияКоличества.КодВидаДокумента КАК КодВидаДокумента,
	|	втДанныеЕдиницыИзмеренияКоличества.ЦенаВнешняя КАК ЦенаВнешняя,
	|	втДанныеЕдиницыИзмеренияКоличества.НомерЯщика КАК НомерЯщика,
	|	втДанныеЕдиницыИзмеренияКоличества.ДержательПодлинника КАК ДержательПодлинника,
	|	втДанныеЕдиницыИзмеренияКоличества.СрокПоставки КАК СрокПоставки,
	|	втДанныеЕдиницыИзмеренияКоличества.ФНН КАК ФНН,
	|	втДанныеЕдиницыИзмеренияКоличества.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	втДанныеЕдиницыИзмеренияКоличества.КС КАК КС,
	|	втДанныеЕдиницыИзмеренияКоличества.КонтрольноеЧисло КАК КонтрольноеЧисло,
	|	втДанныеЕдиницыИзмеренияКоличества.ОриентировочнаяПотребность5 КАК ОриентировочнаяПотребность5,
	|	втДанныеЕдиницыИзмеренияКоличества.ОриентировочнаяПотребность10 КАК ОриентировочнаяПотребность10,
	|	втДанныеЕдиницыИзмеренияКоличества.Примечание КАК Примечание,
	|	втДанныеЕдиницыИзмеренияКоличества.Количество КАК Количество,
	|	втДанныеЕдиницыИзмеренияКоличества.НомерСтроки КАК НомерСтроки,
	|	втДанныеЕдиницыИзмеренияКоличества.ПредметСнабжения КАК ПредметСнабжения,
	|	втДанныеЕдиницыИзмеренияКоличества.ЕдиницаИзмеренияКоличестваСсылка КАК ЕдиницаИзмеренияКоличестваСсылка,
	|	ЕСТЬNULL(втЕдиницыИзмерения.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.ОКЕИ.ПустаяСсылка)) КАК ЕдиницаИзмеренияМассыСсылка,
	|	втДанныеЕдиницыИзмеренияКоличества.ТипУзла КАК ТипУзла,
	|	втДанныеЕдиницыИзмеренияКоличества.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втДанныеЕдиницыИзмеренияМассы
	|ИЗ
	|	втДанныеЕдиницыИзмеренияКоличества КАК втДанныеЕдиницыИзмеренияКоличества
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЕдиницыИзмерения КАК втЕдиницыИзмерения
	|		ПО втДанныеЕдиницыИзмеренияКоличества.ЕдиницаИзмеренияМассы = втЕдиницыИзмерения.Наименование
	|			И (НЕ втДанныеЕдиницыИзмеренияКоличества.ЕдиницаИзмеренияМассы = """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование,
	|	МАКСИМУМ(ВЫРАЗИТЬ(Организации.ДополнительнаяИнформация КАК СТРОКА(5))) КАК АбонентскийЯщик,
	|	МАКСИМУМ(Организации.Ссылка) КАК Контрагент
	|ПОМЕСТИТЬ втКонтрагенты
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Наименование = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АбонентскийЯщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втКонтрагенты.Наименование КАК Наименование,
	|	МАКСИМУМ(втКонтрагенты.Контрагент) КАК Контрагент
	|ПОМЕСТИТЬ втКонтрагентыАЯ
	|ИЗ
	|	втКонтрагенты КАК втКонтрагенты
	|
	|СГРУППИРОВАТЬ ПО
	|	втКонтрагенты.Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втКонтрагенты.АбонентскийЯщик,
	|	МАКСИМУМ(втКонтрагенты.Контрагент)
	|ИЗ
	|	втКонтрагенты КАК втКонтрагенты
	|ГДЕ
	|	НЕ втКонтрагенты.АбонентскийЯщик = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	втКонтрагенты.АбонентскийЯщик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанныеЕдиницыИзмеренияМассы.Наименование КАК Наименование,
	|	втДанныеЕдиницыИзмеренияМассы.Обозначение КАК Обозначение,
	|	втДанныеЕдиницыИзмеренияМассы.КодОКП КАК КодОКП,
	|	втДанныеЕдиницыИзмеренияМассы.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втДанныеЕдиницыИзмеренияМассы.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	втДанныеЕдиницыИзмеренияМассы.Масса КАК Масса,
	|	втДанныеЕдиницыИзмеренияМассы.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втДанныеЕдиницыИзмеренияМассы.МестоХранения КАК МестоХранения,
	|	втДанныеЕдиницыИзмеренияМассы.ЦенаВнутренняя КАК ЦенаВнутренняя,
	|	втДанныеЕдиницыИзмеренияМассы.Поставщик КАК Поставщик,
	|	втДанныеЕдиницыИзмеренияМассы.Уровень КАК Уровень,
	|	втДанныеЕдиницыИзмеренияМассы.Файл КАК Файл,
	|	втДанныеЕдиницыИзмеренияМассы.ПутьКФайлу КАК ПутьКФайлу,
	|	втДанныеЕдиницыИзмеренияМассы.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втДанныеЕдиницыИзмеренияМассы.ЕдиницаИзмеренияМассы КАК ЕдиницаИзмеренияМассы,
	|	втДанныеЕдиницыИзмеренияМассы.КодОборудования КАК КодОборудования,
	|	втДанныеЕдиницыИзмеренияМассы.КодВидаДокумента КАК КодВидаДокумента,
	|	втДанныеЕдиницыИзмеренияМассы.ЦенаВнешняя КАК ЦенаВнешняя,
	|	втДанныеЕдиницыИзмеренияМассы.НомерЯщика КАК НомерЯщика,
	|	втДанныеЕдиницыИзмеренияМассы.ДержательПодлинника КАК ДержательПодлинника,
	|	втДанныеЕдиницыИзмеренияМассы.СрокПоставки КАК СрокПоставки,
	|	втДанныеЕдиницыИзмеренияМассы.ФНН КАК ФНН,
	|	втДанныеЕдиницыИзмеренияМассы.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	втДанныеЕдиницыИзмеренияМассы.КС КАК КС,
	|	втДанныеЕдиницыИзмеренияМассы.КонтрольноеЧисло КАК КонтрольноеЧисло,
	|	втДанныеЕдиницыИзмеренияМассы.ОриентировочнаяПотребность5 КАК ОриентировочнаяПотребность5,
	|	втДанныеЕдиницыИзмеренияМассы.ОриентировочнаяПотребность10 КАК ОриентировочнаяПотребность10,
	|	втДанныеЕдиницыИзмеренияМассы.Примечание КАК Примечание,
	|	втДанныеЕдиницыИзмеренияМассы.Количество КАК Количество,
	|	втДанныеЕдиницыИзмеренияМассы.НомерСтроки КАК НомерСтроки,
	|	втДанныеЕдиницыИзмеренияМассы.ПредметСнабжения КАК ПредметСнабжения,
	|	втДанныеЕдиницыИзмеренияМассы.ЕдиницаИзмеренияКоличестваСсылка КАК ЕдиницаИзмеренияКоличестваСсылка,
	|	втДанныеЕдиницыИзмеренияМассы.ЕдиницаИзмеренияМассыСсылка КАК ЕдиницаИзмеренияМассыСсылка,
	|	втДанныеЕдиницыИзмеренияМассы.ТипУзла КАК ТипУзла,
	|	ЕСТЬNULL(втКонтрагенты.Контрагент, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Контрагент,
	|	втДанныеЕдиницыИзмеренияМассы.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втДанныеПоставщики
	|ИЗ
	|	втДанныеЕдиницыИзмеренияМассы КАК втДанныеЕдиницыИзмеренияМассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтрагентыАЯ КАК втКонтрагенты
	|		ПО втДанныеЕдиницыИзмеренияМассы.Поставщик = втКонтрагенты.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДержательПодлинника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанныеПоставщики.Наименование КАК Наименование,
	|	втДанныеПоставщики.Обозначение КАК Обозначение,
	|	втДанныеПоставщики.КодОКП КАК КодОКП,
	|	втДанныеПоставщики.ДокументНаПоставку КАК ДокументНаПоставку,
	|	втДанныеПоставщики.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	втДанныеПоставщики.Масса КАК Масса,
	|	втДанныеПоставщики.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втДанныеПоставщики.МестоХранения КАК МестоХранения,
	|	втДанныеПоставщики.ЦенаВнутренняя КАК ЦенаВнутренняя,
	|	втДанныеПоставщики.Поставщик КАК Поставщик,
	|	втДанныеПоставщики.Уровень КАК Уровень,
	|	втДанныеПоставщики.Файл КАК Файл,
	|	втДанныеПоставщики.ПутьКФайлу КАК ПутьКФайлу,
	|	втДанныеПоставщики.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втДанныеПоставщики.ЕдиницаИзмеренияМассы КАК ЕдиницаИзмеренияМассы,
	|	втДанныеПоставщики.КодОборудования КАК КодОборудования,
	|	втДанныеПоставщики.КодВидаДокумента КАК КодВидаДокумента,
	|	втДанныеПоставщики.ЦенаВнешняя КАК ЦенаВнешняя,
	|	втДанныеПоставщики.НомерЯщика КАК НомерЯщика,
	|	втДанныеПоставщики.ДержательПодлинника КАК ДержательПодлинника,
	|	втДанныеПоставщики.СрокПоставки КАК СрокПоставки,
	|	втДанныеПоставщики.ФНН КАК ФНН,
	|	втДанныеПоставщики.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	втДанныеПоставщики.КС КАК КС,
	|	втДанныеПоставщики.КонтрольноеЧисло КАК КонтрольноеЧисло,
	|	втДанныеПоставщики.ОриентировочнаяПотребность5 КАК ОриентировочнаяПотребность5,
	|	втДанныеПоставщики.ОриентировочнаяПотребность10 КАК ОриентировочнаяПотребность10,
	|	втДанныеПоставщики.Примечание КАК Примечание,
	|	втДанныеПоставщики.Количество КАК Количество,
	|	втДанныеПоставщики.НомерСтроки КАК НомерСтроки,
	|	втДанныеПоставщики.ПредметСнабжения КАК ПредметСнабжения,
	|	втДанныеПоставщики.ЕдиницаИзмеренияКоличестваСсылка КАК ЕдиницаИзмеренияКоличестваСсылка,
	|	втДанныеПоставщики.ЕдиницаИзмеренияМассыСсылка КАК ЕдиницаИзмеренияМассыСсылка,
	|	втДанныеПоставщики.ТипУзла КАК ТипУзла,
	|	втДанныеПоставщики.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(втКонтрагенты.Контрагент, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Разработчик,
	|	втДанныеПоставщики.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ИЗ
	|	втДанныеПоставщики КАК втДанныеПоставщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтрагентыАЯ КАК втКонтрагенты
	|		ПО втДанныеПоставщики.ДержательПодлинника = втКонтрагенты.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПутьКФайлу,
	|	Файл,
	|	Уровень";
	Запрос.УстановитьПараметр("ДанныеФайлов",ДанныеФайлов.Выгрузить());
	Запрос.УстановитьПараметр("Штука", Справочники.ОКЕИ.НайтиПоКоду("796"));
	Запрос.УстановитьПараметр("Килограмм", Справочники.ОКЕИ.НайтиПоКоду("166")); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти
  
#КонецОбласти 

//ПРОЦЕДУРЫ И ФУНКЦИИ СОБЫТИЙ ФОРМЫ
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокСообщенийЛога();
	
	ТекущаяДата = ТекущаяДата();
	НачалоПериодаЛога = НачалоДня(ТекущаяДата);
	ОкончаниеПериодаЛога = КонецДня(ТекущаяДата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайламНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ВыборФайла.Показать(Новый ОписаниеОповещения("ПутьКФайламНачалоВыбораЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайламНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПутьКФайлам = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФорматЗагрузкиПриИзменении(Элемент)
	
	ПутьКФайлам = "";
	Заказ = ПолучитьПустуюСсылку("Заказы");
	
КонецПроцедуры

//процедура вызывает проверку прочитанных данных
&НаКлиенте
Процедура ПроверитьДанные(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьДанныеЗавершение", ЭтаФорма), "Результат предыдущей проверки будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если ВыполнитьПроверкуДанных() Тогда
			
			ПоказатьПредупреждение(, "Ошибок не обнаружено!");
			
		Иначе
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОшибкиОбработки;
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		
	КонецЕсли; 
	
КонецПроцедуры

//процедура вызывает заполнение таблицы лога по заданному отбору 
&НаКлиенте
Процедура ПросмотретьЛог(Команда)
	
	Если Не ЗначениеЗаполнено(НачалоПериодаЛога) Или Не ЗначениеЗаполнено(ОкончаниеПериодаЛога) Или ОкончаниеПериодаЛога < НачалоПериодаЛога Тогда
		
		ПоказатьПредупреждение(, "Некорректно указан период!");
		Возврат;
		
	КонецЕсли;
	
	СообщенияВыбраны = Ложь;
	
	Для каждого ЭлементСпискаСообщенийЛога Из СписокСообщенийЛога Цикл
		
		Если ЭлементСпискаСообщенийЛога.Пометка Тогда
			
			СообщенияВыбраны = Истина;
			
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Не СообщенияВыбраны Тогда
		
		ПоказатьПредупреждение(, "Не выбрано ни одно из возможных сообщений!");
		Возврат;
		
	КонецЕсли; 
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПросмотретьЛогЗавершение", ЭтаФорма), "Результат предыдущего просмотра будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьЛогЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если Не ПолучитьЗаписиЛога() Тогда
			
			ПоказатьПредупреждение(, "Записей не обнаружено!");
			
		Иначе
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЛогЗагрузок;
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТаблицу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицы","ДанныеФайлов");
	ДополнительныеПараметры.Вставить("ЭтоСохранение",Ложь);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьДействиеСохраненияЗагрузкиТаблицы", ЭтаФорма, ДополнительныеПараметры), "Загрузить таблицу?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТаблицу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицы","ДанныеФайлов");
	ДополнительныеПараметры.Вставить("ЭтоСохранение",Истина);
	
	Если ДанныеФайлов.Количество() = 0 Тогда
		
		Сообщить("Нет данных для сохранения!");
		Возврат;
		
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьДействиеСохраненияЗагрузкиТаблицы", ЭтаФорма, ДополнительныеПараметры), "Сохранить таблицу?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСохраненияЗагрузкиТаблицы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Сообщить("Прервано пользователем!");
		Возврат;
		
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	
	ПолноеИмяФайла = ПутьКФайлам + "\" + ДополнительныеПараметры.ИмяТаблицы + ".xml";
	
	Если ДополнительныеПараметры.ЭтоСохранение Тогда
		
		Сообщить("Сохранение таблицы начато в " + ТекущаяДата());
		
		СтрокаXML = СериализоватьТаблицуВXML(ДополнительныеПараметры.ИмяТаблицы);
		Текст.ДобавитьСтроку(СтрокаXML);
		Текст.Записать(ПолноеИмяФайла);
		
		Сообщить("Файл "+ПолноеИмяФайла+" сохранен в " + ТекущаяДата());
		
	Иначе //это загрузка
		
		ДанныеФайлов.Очистить();
		
		Сообщить("Загрузка таблицы начата в " + ТекущаяДата());
		
		Попытка
			
			Текст.Прочитать(ПолноеИмяФайла);
			СтрокаXML = Текст.ПолучитьТекст();
			ПолучитьТаблицуИзXML(СтрокаXML,ДополнительныеПараметры.ИмяТаблицы);
			
			Сообщить("Загрузка таблицы окончена в " + ТекущаяДата());
			
		Исключение
			
			Сообщить(ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ВыводитьОбщееКоличествоЗаписей.Видимость = ИспользоватьExcelApplication;
	
	Если Не ИспользоватьExcelApplication Тогда
		
		ВыводитьОбщееКоличествоЗаписей = Ложь;
		
	КонецЕсли;
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	Если Не Прав(КаталогВременныхФайлов,1) = "\" Тогда
		
		КаталогВременныхФайлов = КаталогВременныхФайлов + "\";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если СохранятьТаблицуПриЗакрытииОкна И ДанныеФайлов.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяТаблицы","ДанныеФайлов");
		ДополнительныеПараметры.Вставить("ЭтоСохранение",Истина);
		
		ВыполнитьДействиеСохраненияЗагрузкиТаблицы(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьExcelApplicationПриИзменении(Элемент)
	
	Элементы.ВыводитьОбщееКоличествоЗаписей.Видимость = ИспользоватьExcelApplication;
	
	Если Не ИспользоватьExcelApplication Тогда
		
		ВыводитьОбщееКоличествоЗаписей = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти