
////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура СформироватьНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Если ЗначениеЗаполнено(Корабль) Тогда
	
		ЭлементОтбора 					= Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение	= Корабль;
	
	КонецЕсли; 	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

	Результат = Элементы.Результат;
	Результат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);   
	
	АдресХранилищаСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	АдресРасшифровки  = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Новый УникальныйИдентификатор());
	
КонецПроцедуры // СформироватьНаСервере

&НаСервере
Процедура ОбработатьЭлементыСтруктурыНаСервере()
	
	МассивЭлементовДляОбработки = ПолучитьЭлементыСтруктурыДляОбработки();
	
	Для каждого ЭлементСтруктуры Из МассивЭлементовДляОбработки Цикл
		
		Попытка
		
			 СтруктураЗаказа.ОбработатьСтруктуруЗаказов(ЭлементСтруктуры.ПредметСнабжения);
		
		Исключение
			
			Сообщить(СтрШаблон(НСтр("ru = 'Не обработан элемент струкутры %1 по причине:  %2'"), ЭлементСтруктуры, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;			
	
	КонецЦикла; 
	
	СформироватьНаСервере();
	
КонецПроцедуры // ОбработатьЭлементыСтруктурыНаСервере

&НаСервере
Функция ПолучитьЭлементыСтруктурыДляОбработки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект"); 
	СхемаКомпоновкиДанных = ОбработкаОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Если ЗначениеЗаполнено(Корабль) Тогда  	
		ЭлементОтбора 					= Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение	= Корабль;	
	КонецЕсли; 	
	
	Для каждого ЭлементСтруктуры Из Настройки.Структура Цикл  		
		Для каждого ЭлементПоляГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если ЭлементПоляГруппировки.Поле = Новый ПолеКомпоновкиДанных("РодительСсылка") Тогда
			    ЭлементПоляГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;	
			КонецЕсли;		
		КонецЦикла;		
	КонецЦикла; 
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ДеревоЗначений = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);   
	
	Возврат ДеревоЗначений.Строки.ВыгрузитьКолонку("РодительСсылка");
	
КонецФункции  // ПолучитьЭлементыСтруктурыДляОбработки

//////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьНаСервере();
	
КонецПроцедуры // Сформировать

&НаКлиенте
Процедура ОбработатьЭлементыСтруктуры(Команда)
	
	ОбработатьЭлементыСтруктурыНаСервере();

КонецПроцедуры // ОбработатьЭлементыСтруктуры

//////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресХранилищаСКД);
 
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(АдресРасшифровки, ИсточникДоступныхНастроек);
 
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	Оповещение = Новый ОписаниеОповещения("РезультатОбработкаРасшифровки_Продолжение", ЭтаФорма, Расшифровка);
	ОбработкаРасшифровки.ПоказатьВыборДействия(Оповещение, Расшифровка, ДоступныеДействия, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки_Продолжение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
    Если ПараметрВыполненногоДействия <> Неопределено Тогда
        
        Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
            ПоказатьЗначение(,ПараметрВыполненногоДействия);
        КонецЕсли;
        
    КонецЕсли;        
КонецПроцедуры