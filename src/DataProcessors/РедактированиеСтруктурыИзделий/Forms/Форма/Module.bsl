#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПеремТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	СформироватьСтруктуруПервогоКорабля();
	
	СформироватьСтруктуруВторогоКорабля();
	
	ТипГруппа 	= Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	ТипИзделие 	= Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	
	ВариантДобавленияЭлементовВСтруктуруКорабля = "ОтдельныйПроцессДляКаждогоЭлемента";
	
	#Если НЕ ВнешнееСоединение Тогда
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВторойКаталогПредметовСнабжения,"ОтборПоПолнотекстовомуПоискуУстановлен",Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВторойКаталогПредметовСнабжения,"ОтборПоПолнотекстовомуПоиску",Неопределено);
	#КонецЕсли
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПервыйКаталогПредметовСнабжения, "ТекущийПользователь", ПеремТекущийПользователь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВторойКаталогПредметовСнабжения, "ТекущийПользователь", ПеремТекущийПользователь);
	
	ПустаяПС = Справочники.КаталогПредметовСнабжения.ПустаяСсылка();
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПервыйКорабльИспользование, "СоставляющаяЧасть", ПустаяПС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВторойКорабльИспользование, "СоставляющаяЧасть", ПустаяПС);

	Элементы.СтруктураПервогоКорабля.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	Элементы.СтруктураВторогоКорабля.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруПервогоКорабля()
	
	ГруппаАрхивПервогоКорабля = НайтиПапкуАрхивНаКорабле(ПервыйКорабль,Ложь);

	СтруктураПервогоКорабля.Параметры.УстановитьЗначениеПараметра("ЯзыкПервогоКорабля", ?(ЗначениеЗаполнено(ПервыйКорабль), ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ПервыйКорабль, "Владелец"), "Заказчик"), "ЯзыкПредставленияДанных"), Справочники.Языки.ПустаяСсылка()));
	СтруктураПервогоКорабля.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ПеремТекущийПользователь);
	
	Если СтруктураПервогоКорабля.Отбор.Элементы.Количество() = 0 Тогда
		
		ЭлементОтбора = СтруктураПервогоКорабля.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПервыйКорабль;
		ЭлементОтбора.Использование = Истина;	
		
	Иначе
		
		СтруктураПервогоКорабля.Отбор.Элементы.Получить(0).ПравоеЗначение = ПервыйКорабль;	
	
	КонецЕсли;                                                                            		

КонецПроцедуры // СформироватьСтруктуруПервогоКорабля()

&НаСервере
Процедура СформироватьСтруктуруВторогоКорабля()

	ГруппаАрхивВторогоКорабля = НайтиПапкуАрхивНаКорабле(ВторойКорабль,Ложь);
	
	СтруктураВторогоКорабля.Параметры.УстановитьЗначениеПараметра("ЯзыкВторогоКорабля", ?(ЗначениеЗаполнено(ВторойКорабль), ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(ВторойКорабль, "Владелец"), "Заказчик"), "ЯзыкПредставленияДанных"), Справочники.Языки.ПустаяСсылка()));
	СтруктураВторогоКорабля.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ПеремТекущийПользователь);
	
	Если СтруктураВторогоКорабля.Отбор.Элементы.Количество() = 0 Тогда
		
		ЭлементОтбора = СтруктураВторогоКорабля.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВторойКорабль;
		ЭлементОтбора.Использование = Истина;	
		
	Иначе
		
		СтруктураВторогоКорабля.Отбор.Элементы.Получить(0).ПравоеЗначение = ВторойКорабль;	
	
	КонецЕсли;		

КонецПроцедуры // СформироватьСтруктуруВторогоКорабля()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьНастройкиГрупповогоДобавленияПС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПервыйКорабльПриИзменении(Элемент)
	
	СформироватьСтруктуруПервогоКорабля();	
	
	УстановитьВидимостьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВторойКорабльПриИзменении(Элемент)
	
	СформироватьСтруктуруВторогоКорабля();
	
	УстановитьВидимостьКнопок();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПервыйНаборДанныхПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	 УстановитьВидимостьКнопок();
	
 КонецПроцедуры
 
 &НаКлиенте
Процедура ГруппаВторойНаборДанныхПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьКнопок();
	УстановитьФонНовыеОшибки(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопок()
	
	Элементы.Перенести.Видимость = ПервыйКорабль = ВторойКорабль;
	Элементы.УдалитьДубликатыЧерезМастер.Видимость = ПервыйКорабль = ВторойКорабль;
	
КонецПроцедуры // УстановитьВидимостьКнопок()

&НаКлиенте
Процедура Скопировать(Команда)
	
	МассивСсылокИсточников = Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки;
	
	Если МассивСсылокИсточников.Количество() = 0 Тогда
	
		ПоказатьПредупреждение(, "Необходимо выделить элемент(ы) структуры в правом окне.",, "Действие запрещено");
		Возврат;	
	
	КонецЕсли;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("МассивСсылокИсточников", МассивСсылокИсточников);
	
	ТекДанныеПриемник = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	Если ТекДанныеПриемник = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьПродолжение", ЭтотОбъект, ДопПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, "В левом окне не выделен элемент. Произвести копирование в корень?", РежимДиалогаВопрос.ДаНет,,, "Подтверждение копирования");
		
	ИначеЕсли ТекДанныеПриемник.ЗИП Тогда
		
		ПоказатьПредупреждение(, "Нельзя копировать элементы в ЗИП!");
		Возврат;
		
	ИначеЕсли ЕстьЗацикливание(ТекДанныеПриемник.Ссылка, МассивСсылокИсточников) Тогда
		
		ПоказатьПредупреждение(, "Предмет снабжения приемника входит в спецификацию одного из предметов снабжения источника! Действие запрещено");
		Возврат;
		
	ИначеЕсли ЕстьОдинаковыйРодитель(ТекДанныеПриемник.Ссылка, МассивСсылокИсточников) Тогда
		
		ПоказатьПредупреждение(, "У копируемых элементов родитель совпадает с приемником! Действие запрещено");
		Возврат;
		
	ИначеЕсли ЕстьОдинаковыеПредметыСнабженияРодителей(ТекДанныеПриемник.Ссылка, МассивСсылокИсточников) Тогда
		
		ПоказатьПредупреждение(, "У копируемых элементов предмет снабжения родителя совпадает с предметом снабжения приемника! Действие запрещено");
		Возврат;
		
	ИначеЕсли Не ТекДанныеПриемник.Тип = ТипГруппа И ЕстьГруппы(МассивСсылокИсточников, ТипГруппа) Тогда
		
		ПоказатьПредупреждение(, "Нельзя копировать группы в изделие!");
		Возврат;
		
	Иначе
		
		ДопПараметры.Вставить("СсылкаПриемник", ТекДанныеПриемник.Ссылка);
		
		СкопироватьПродолжение(КодВозвратаДиалога.Да, ДопПараметры); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьГруппы(МассивСсылокИсточников, ТипГруппа)
	
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
		
		Если СсылкаИсточник.Тип = ТипГруппа Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьПродолжение(Ответ, ДопПараметры) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
	
		Возврат;	
	
	КонецЕсли;	
	
	ДопПараметры.Вставить("ВыбраннаяКоманда", "Скопировать");
	ДопПараметры.Вставить("СсылкаВладелец", ПервыйКорабль);
	ДопПараметры.Вставить("ВладелецИсточников", ВторойКорабль);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыполнения", ЭтотОбъект); 
	
	ОткрытьФорму("Обработка.РедактированиеСтруктурыИзделий.Форма.ФормаВыполнение", ДопПараметры, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	// Позиционируемся на родителе
	Элементы.СтруктураВторогоКорабля.ТекущаяСтрока = ПолучитьСсылкуНаРодителя();
	
КонецПроцедуры // СкопироватьПродолжение()

//++ 30.10.2017 Веденеев П. //проверка зацикливания
&НаСервереБезКонтекста
Функция ЕстьЗацикливание(СсылкаПриемник, МассивСсылокИсточников)
	
	ПредметСнабженияПриемника = СсылкаПриемник.ПредметСнабжения;
	
	Если Не ЗначениеЗаполнено(ПредметСнабженияПриемника) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	МассивПредметовСнабженияИсточников = Новый Массив;
	
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
		
		ПредметСнабженияИсточника = СсылкаИсточник.ПредметСнабжения;
		
		Если ЗначениеЗаполнено(ПредметСнабженияИсточника) Тогда
			
			Если ПредметСнабженияИсточника = ПредметСнабженияПриемника И Не СсылкаИсточник.ЗИП Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			МассивПредметовСнабженияИсточников.Добавить(ПредметСнабженияИсточника);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураЗаказаСервер.ВходитВСпецификацииПредметовСнабжения(ПредметСнабженияПриемника, МассивПредметовСнабженияИсточников);

КонецФункции
//-- 30.10.2017 Веденеев П. //проверка зацикливания

//++ 08.11.2017 Тычина Р.В. //Проверка перемещения внутри одного родителя 
&НаСервереБезКонтекста
Функция ЕстьОдинаковыйРодитель(СсылкаПриемник, МассивСсылокИсточников)
	
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
		
		Если СсылкаИсточник.Родитель =  СсылкаПриемник Тогда
			
			Возврат Истина; // Перемещение осуществляется внутри одного родителя
			
		КонецЕсли;
			
		
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаСервереБезКонтекста
Функция ЕстьОдинаковыеПредметыСнабженияРодителей(СсылкаПриемник, МассивСсылокИсточников)
	
	ТипГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	
	Для каждого СсылкаИсточник Из МассивСсылокИсточников Цикл
		
		Если СсылкаИсточник.Родитель.ПредметСнабжения =  СсылкаПриемник.ПредметСнабжения 
			И НЕ СсылкаИсточник.Родитель.Тип = ТипГруппа
			И НЕ СсылкаПриемник.Тип = ТипГруппа Тогда
			
			Возврат Истина; // Перемещение осуществляется внутри одного изделия
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции
//-- 08.11.2017 Тычина Р.В. //Проверка перемещения внутри одного родителя 


&НаКлиенте
Процедура ЗавершениеВыполнения(Выполнено, ДопПараметры) Экспорт
	
	Если Не Выполнено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.СтруктураПервогоКорабля.Обновить();
	Элементы.СтруктураВторогоКорабля.Обновить();
	
	//++2017082301 24.08.2017 Веденеев П. //позиционировать курсор на предыдущего родителя
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("СсылкаНаРодителя") Тогда
		
		Элементы.СтруктураВторогоКорабля.ТекущаяСтрока = ДопПараметры.СсылкаНаРодителя;
		
	КонецЕсли;
	//--2017082301 24.08.2017 Веденеев П. //позиционировать курсор на предыдущего родителя 

КонецПроцедуры // ЗавершениеВыполнения()

//++2017082301 24.08.2017 Веденеев П. //позиционировать курсор на предыдущий элемент при переносе и объединении
&НаСервере
Функция ПолучитьСсылкуНаРодителя()
	
	Возврат Элементы.СтруктураВторогоКорабля.ТекущаяСтрока.Родитель;
	
КонецФункции
//--2017082301 24.08.2017 Веденеев П. //позиционировать курсор на предыдущий элемент при переносе и объединении

&НаКлиенте
Процедура Перенести(Команда)
	
	МассивСсылокИсточников = Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки;
	
	Если МассивСсылокИсточников.Количество() = 0 Тогда
	
		ПоказатьПредупреждение(, "Необходимо выделить элемент(ы) структуры в правом окне.",, "Действие запрещено");
		Возврат;	
	
	КонецЕсли;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("МассивСсылокИсточников", МассивСсылокИсточников);
	
	ТекДанныеПриемник = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	Если ТекДанныеПриемник = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиПродолжение", ЭтотОбъект, ДопПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, "В левом окне не выделен элемент. Произвести перенос в корень?", РежимДиалогаВопрос.ДаНет,,, "Подтверждение переноса");
		
	ИначеЕсли Не МассивСсылокИсточников.Найти(ТекДанныеПриемник.Ссылка) = Неопределено Тогда //2017082301 23.08.2017 Веденеев П. //заблокировать возможность переноса и объединения элемента с самими собой
		
		ПоказатьПредупреждение(, "Среди выделенных элементов в правом окне присутствует элемент, выделенный в левом окне!",, "Действие запрещено");
		
		Возврат;
		
	ИначеЕсли ТекДанныеПриемник.ЗИП Тогда
		
		ПоказатьПредупреждение(, "Нельзя копировать элементы в ЗИП!");
		Возврат;
		
	ИначеЕсли ЕстьЗацикливание(ТекДанныеПриемник.Ссылка, МассивСсылокИсточников) Тогда
		
		ПоказатьПредупреждение(, "Предмет снабжения приемника входит в спецификацию одного из предметов снабжения источника! Действие запрещено");
		Возврат;
		
	ИначеЕсли ЕстьОдинаковыйРодитель(ТекДанныеПриемник.Ссылка, МассивСсылокИсточников) Тогда
		
		ПоказатьПредупреждение(, "У перемещаемых элементов родитель совпадает с приемником! Действие запрещено");
		Возврат;
		
	ИначеЕсли ЕстьОдинаковыеПредметыСнабженияРодителей(ТекДанныеПриемник.Ссылка, МассивСсылокИсточников) Тогда
		
		ПоказатьПредупреждение(, "У перемещаемых элементов предмет снабжения родителя совпадает с предметом снабжения приемника! Действие запрещено");
		Возврат;
		
	ИначеЕсли Не ТекДанныеПриемник.Тип = ТипГруппа И ЕстьГруппы(МассивСсылокИсточников, ТипГруппа) Тогда
		
		ПоказатьПредупреждение(, "Нельзя переносить группы в изделие!");
		Возврат;
		
	Иначе
		
		ДопПараметры.Вставить("СсылкаПриемник", ТекДанныеПриемник.Ссылка);
		
		ПеренестиПродолжение(КодВозвратаДиалога.Да, ДопПараметры); 
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПродолжение(Ответ, ДопПараметры) Экспорт

	Если Не Ответ = КодВозвратаДиалога.Да Тогда
	
		Возврат;	
	
	КонецЕсли;	
	
	ДопПараметры.Вставить("ВыбраннаяКоманда", "Перенести");
	
	ТекРодитель = ПолучитьСсылкуНаРодителя();
	//++ 28.09.2017 Веденеев П. - дополнительные параметры завершения процедуры
	ДопПараметры.Вставить("СсылкаНаРодителя", ТекРодитель);
	//++ 28.09.2017 Веденеев П. - дополнительные параметры завершения процедуры
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыполнения", ЭтотОбъект); 
	
	ОткрытьФорму("Обработка.РедактированиеСтруктурыИзделий.Форма.ФормаВыполнение", ДопПараметры, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	// Позиционируемся на родителе
	Элементы.СтруктураВторогоКорабля.ТекущаяСтрока = ТекРодитель;
	
КонецПроцедуры // ПеренестиПродолжение()

&НаКлиенте
Процедура Объединить(Команда)
	
	МассивСсылокИсточников = Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки;
	
	Если МассивСсылокИсточников.Количество() = 0 Тогда
	
		ПоказатьПредупреждение(, "Необходимо выделить элемент(ы) структуры в правом окне.",, "Действие запрещено");
		Возврат;	
	
	КонецЕсли;
	
	ТекДанныеПриемник = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	Если ТекДанныеПриемник = Неопределено Тогда
	
		ПоказатьПредупреждение(, "Необходимо выделить элемент структуры в левом окне.",, "Действие запрещено");
		Возврат;
		
	ИначеЕсли Не МассивСсылокИсточников.Найти(ТекДанныеПриемник.Ссылка) = Неопределено Тогда //2017082301 23.08.2017 Веденеев П. //заблокировать возможность переноса и объединения элемента с самими собой
		
		ПоказатьПредупреждение(, "Среди выделенных элементов в правом окне присутствует элемент, выделенный в левом окне!",, "Действие запрещено");
		
		Возврат;
	
	КонецЕсли;	
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("МассивСсылокИсточников", МассивСсылокИсточников);
	ДопПараметры.Вставить("СсылкаПриемник", ТекДанныеПриемник.Ссылка);
	ДопПараметры.Вставить("ВыбраннаяКоманда", "Объединить");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыполнения", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РедактированиеСтруктурыИзделий.Форма.ФормаВыполнение", ДопПараметры, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПервогоКорабляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	СтруктураКорабляВыбор(ТекущиеДанные, ПервыйКорабль);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВторогоКорабляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СтруктураВторогоКорабля.ТекущиеДанные;
	
	СтруктураКорабляВыбор(ТекущиеДанные, ВторойКорабль);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураКорабляВыбор(ТекущиеДанные, Корабль)
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ссылка", ТекущиеДанные.Ссылка); //Веденеев П. 25.07.17 - исправление ошибки открытия формы элемента	
	
	ТипВыбранногоЭлемента = ТекущиеДанные.Тип;
	
	Если ТипВыбранногоЭлемента = ТипГруппа Тогда
	
		ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаГруппы";
	
	Иначе
	
		ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия";
	
	КонецЕсли;
	
	ОткрытьФормуЭлемента(ИмяФормыЭлемента, ПараметрыОткрытия, Корабль);
	
КонецПроцедуры

//++ 02.10.2017 Веденеев П. - проверяем, является ли родитель элемента группой
&НаСервереБезКонтекста
Функция РодительЯвляетсяГруппой(Ссылка)
	
	Возврат Ссылка.Родитель.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	
КонецФункции
//-- 02.10.2017 Веденеев П. - проверяем, является ли родитель элемента группой

&НаКлиенте
Процедура ОткрытьФормуЭлемента(ИмяФормыЭлемента, ПараметрыОткрытия, Владелец)
	
	ПараметрыОткрытия.Вставить("Владелец", Владелец);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуЭлементаЗавершение", ЭтаФорма);
	
	ОткрытьФорму(ИмяФормыЭлемента, ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры // ОткрытьФормуЭлемента()

&НаКлиенте
Процедура ОткрытьФормуЭлементаЗавершение(СтруктураЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтруктураЗакрытия) = Тип("Структура") Тогда
		
		Если СтруктураЗакрытия.Свойство("ЗаписьБылаПроизведена") И СтруктураЗакрытия.Свойство("ПредметСнабженияИмеетСпецификацию") Тогда
			
			СтруктураЗаказаВызовСервера.ОбработатьСтруктуруЗаказов(СтруктураЗакрытия.ПредметСнабжения);	
			
		КонецЕсли; 
		
		Элементы.СтруктураПервогоКорабля.Обновить();	
	    Элементы.СтруктураВторогоКорабля.Обновить();

	КонецЕсли;  
	
КонецПроцедуры

//++2017082301 25.08.2017 Веденеев П. //добавить кнопки добавления элементов справочника Структура заказов
&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	Если ПервыйКорабль.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаГруппы";
	
	ПараметрыОткрытия = Новый Структура();
	
	// Определим, есть ли текущие данные для добавления с родителем
	
	ТекущиеДанные = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
	
		ПараметрыОткрытия.Вставить("Родитель", ТекущиеДанные.Ссылка);
		ПараметрыОткрытия.Вставить("Заведование", ТекущиеДанные.Заведование);
	
	КонецЕсли;
		
	ОткрытьФормуЭлемента(ИмяФормыЭлемента, ПараметрыОткрытия, ПервыйКорабль);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзделие(Команда)
	
	Если ПервыйКорабль.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ЗИП", Ложь);
	
	// Определим, есть ли текущие данные для добавления с родителем
	
	ТекущиеДанные = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
	
		ПараметрыОткрытия.Вставить("Родитель", ТекущиеДанные.Ссылка);	
		ПараметрыОткрытия.Вставить("Заведование", ТекущиеДанные.Заведование);
	
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФормыЭлемента", "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия");
	ДопПараметры.Вставить("ПараметрыОткрытия", ПараметрыОткрытия);
	ДопПараметры.Вставить("ДобавлениеИзделия");
	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаСписка",Новый Структура("РежимВыбора", Истина) , , , , , 
		Новый ОписаниеОповещения("ОбработчикВыбораПредметаСнабжения", ЭтотОбъект, ДопПараметры), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗИП(Команда)
	
	Если ПервыйКорабль.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ЗИП", Истина);
	
	// Определим, есть ли текущие данные для добавления с родителем
	
	ТекущиеДанные = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
	
		ПараметрыОткрытия.Вставить("Родитель", ТекущиеДанные.Ссылка);
		ПараметрыОткрытия.Вставить("Заведование", ТекущиеДанные.Заведование);
		ПараметрыОткрытия.Вставить("ЭтоДобавление"); //++ 27.09.2017 Веденеев П. - дополнительный параметр открытия формы
	
	КонецЕсли;
	
	//++ 26.09.2017 Веденеев П. - если тек элемент. - изделие, то вызываем форму ввода спецификации, иначе - стандартную форму элемента	
	ТекущиеДанныеСсылка = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия";
	//-- 26.09.2017 Веденеев П. - если тек элемент. - изделие, то вызываем форму ввода спецификации, иначе - стандартную форму элемента
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИмяФормыЭлемента", ИмяФормыЭлемента); 
	ДопПараметры.Вставить("ПараметрыОткрытия", ПараметрыОткрытия); 
	
	ОткрытьФорму("Справочник.КаталогПредметовСнабжения.Форма.ФормаСписка", Новый Структура("РежимВыбора", Истина) , , , , , 
		Новый ОписаниеОповещения("ОбработчикВыбораПредметаСнабжения", ЭтотОбъект, ДопПараметры), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораПредметаСнабжения(ПредметСнабжения, ДопПараметры) Экспорт

	Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	ЭталонОбработан = ПроверитьОбработкуЭталона(ПредметСнабжения);
	
	Если Не ЭталонОбработан Тогда
		
		Сообщить("Эталон данного предмета снабжения не обработан!");
		Возврат;
		
	КонецЕсли;
	
	ДопПараметры.ПараметрыОткрытия.Вставить("ПредметСнабжения", ПредметСнабжения);
	
	ОткрытьФормуЭлемента(ДопПараметры.ИмяФормыЭлемента, ДопПараметры.ПараметрыОткрытия, ПервыйКорабль);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьОбработкуЭталона(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(СпецификацииПредметовСнабженияИзменения.ЭталонОбработан) КАК ЭталонОбработан,
	|	СпецификацииПредметовСнабженияИзменения.ПредметСнабжения КАК ПредметСнабжения
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений КАК СпецификацииПредметовСнабженияИзменения
	|ГДЕ
	|	СпецификацииПредметовСнабженияИзменения.ПредметСнабжения = &ПредметСнабжения
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПредметовСнабженияИзменения.ПредметСнабжения";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ЭталонОбработан;
	
КонецФункции

&НаКлиенте
Процедура СтруктураПервогоКорабляПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Элементы.КнопкаДобавитьГруппу.Доступность 	= Истина;
		Элементы.КнопкаДобавитьИзделие.Доступность 	= Истина;
		Элементы.КнопкаДобавитьЗИП.Доступность 		= Истина; //++ 17.10.2017 Веденеев П. //запрещение добавления ЗИП в изделие
		
	Иначе
		
		ЭтоТипГруппа = ТекущиеДанные.Тип = ТипГруппа;
		
		Элементы.КнопкаДобавитьГруппу.Доступность 	= ЭтоТипГруппа;
		Элементы.КнопкаДобавитьИзделие.Доступность 	= ЭтоТипГруппа;
		Элементы.КнопкаДобавитьЗИП.Доступность 		= ЭтоТипГруппа; //++ 17.10.2017 Веденеев П. //запрещение добавления ЗИП в изделие
		
		
		Если ГруппаАрхивПервогоКорабля.Пустая() Тогда
			Элементы.СтруктураПервогоКорабляУдалитьКонтекстноеМеню.Доступность = Ложь;
		Иначе
			Элементы.СтруктураПервогоКорабляУдалитьКонтекстноеМеню.Доступность = ТекущиеДанные.Ссылка = ГруппаАрхивПервогоКорабля ИЛИ ТекущиеДанные.Родитель = ГруппаАрхивПервогоКорабля;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураВторогоКорабляПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		Если ГруппаАрхивВторогоКорабля.Пустая() Тогда
			Элементы.СтруктураВторогоКорабляУдалитьКонтекстноеМеню.Доступность = Ложь;
		Иначе
			Элементы.СтруктураВторогоКорабляУдалитьКонтекстноеМеню.Доступность = ТекущиеДанные.Ссылка = ГруппаАрхивВторогоКорабля ИЛИ ТекущиеДанные.Родитель = ГруппаАрхивВторогоКорабля;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

//--2017082301 25.08.2017 Веденеев П. //добавить кнопки добавления элементов справочника Структура заказов

&НаКлиенте
Процедура ПрименяемостьИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если СтрНайти(Поле.Имя, "Количество") = 0 Тогда
		
		СтандартнаяОбработка = Ложь;	
		
		ТекущиеДанные = Элемент.ТекущиеДанные;	
		
		Если ТекущиеДанные = Неопределено Тогда
			
			Возврат;	
			
		КонецЕсли;	
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ссылка", ТекущиеДанные.Ссылка);
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);	
		
		ТипВыбранногоЭлемента = ТекущиеДанные.Тип;
		
		Если ТипВыбранногоЭлемента = ТипГруппа Тогда
			
			ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаГруппы";
			
		Иначе
			
			ИмяФормыЭлемента = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Форма.ФормаИзделия";
			
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормыЭлемента, ПараметрыОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.Независимый);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемостьИзделияКоличествоПриИзменении(Элемент)
	
	ИмяПоля = Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - 27);
	
	ИмяТаблицы = Лев(Элемент.Имя, 27);
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	РезультатИзменения =  ПриИзмененииКоличества(ТекущиеДанные.Ссылка, ИмяПоля, ТекущиеДанные[ИмяПоля]);
	
	Если Не РезультатИзменения.Выполнено Тогда
		
		ЗаполнитьПрименяемость(РезультатИзменения.ПредметСнабжения, ИмяТаблицы);
		
	КонецЕсли;	
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПриИзмененииКоличества(ЭлементСтруктуры, ИмяПоля, ЗначениеПоля)
	
	ЭлементСтруктурыОбъект = ЭлементСтруктуры.ПолучитьОбъект();
	
	ЭлементСтруктурыОбъект[ИмяПоля] = ЗначениеПоля;
	
	Попытка
		
		ЭлементСтруктурыОбъект.Записать();
		
		Возврат Новый Структура("Выполнено", Истина);
		
	Исключение
		
		Сообщить("Не удалось записать элемент" + Символы.ПС + ОписаниеОшибки());
		
		Возврат Новый Структура("Выполнено, ПредметСнабжения", Ложь, ЭлементСтруктуры.ПредметСнабжения);
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ИмяФормыНастроек = "Обработка.РедактированиеСтруктурыИзделий.Форма.ФормаНастроек";
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗаполнятьДеревоСпецификацииИзСоставаИзделий", ЗаполнятьДеревоСпецификацииИзСоставаИзделий);
	ПараметрыОткрытия.Вставить("ВариантДобавленияЭлементовВСтруктуруКорабля", ВариантДобавленияЭлементовВСтруктуруКорабля);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикИзмененияНастроек", ЭтаФорма);
	
	ОткрытьФорму(ИмяФормыНастроек, ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикИзмененияНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = Неопределено Тогда
		
		РезультатЗакрытия.Свойство("ЗаполнятьДеревоСпецификацииИзСоставаИзделий", ЗаполнятьДеревоСпецификацииИзСоставаИзделий);
		РезультатЗакрытия.Свойство("ВариантДобавленияЭлементовВСтруктуруКорабля", ВариантДобавленияЭлементовВСтруктуруКорабля);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//++ 28.09.2017 Веденеев П. //процедуры удаления и добавления элементов структуры заказов и спецификаций

#Область ИзменениеЭлементовСтруктурыИСпецификаций

&НаКлиенте
Процедура УдалитьЭлементСтруктурыПервогоКорабля(Команда)
	
	УдалитьЭлементыСтруктурыКорабля(Элементы.СтруктураПервогоКорабля.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементСтруктурыВторогоКорабля(Команда)
	
	УдалитьЭлементыСтруктурыКорабля(Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементыСтруктурыКорабля(ВыделенныеСтроки)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Элементы не выбраны!");
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьЭлементыСтруктурыКорабляЗавершение", ЭтаФорма, Новый Структура("ЭлементыСтруктуры", ВыделенныеСтроки));
	
	ПоказатьВопрос(ОписаниеОповещения, "Внимание!!! Выполнение действия приведет к необратимому удалению выделенных элементов и всех их подчиненных. Продолжить?", РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементыСтруктурыКорабляЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ДатаНачала = ТекущаяДата();
		
		Сч = 1;
		
		ВсегоЭлементов = ДополнительныеПараметры.ЭлементыСтруктуры.Количество();
		
		Для каждого ЭлементСтруктуры Из ДополнительныеПараметры.ЭлементыСтруктуры Цикл
			
			Попытка
			
				ВыполнитьУдалениеЭлементаСтруктуры(ЭлементСтруктуры);
				
			Исключение
				
			КонецПопытки;
			
			УправлениеИнтерфейсом.ВывестиТекущееСостояние("Удаление элементов...", ДатаНачала, Сч, ВсегоЭлементов); 
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		
	КонецЕсли;
	
	Элементы.СтруктураПервогоКорабля.Обновить();
	Элементы.СтруктураВторогоКорабля.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьУдалениеЭлементаСтруктуры(ЭлементСтруктуры)
	
	Родитель = ЭлементСтруктуры.Родитель;
	
	ПредметСнабжения = ЭлементСтруктуры.ПредметСнабжения;
	
	НачатьТранзакцию();
	
	//если элемент имеет предмет снабжения и его родитель имеет предмет снабжения, тогда удаляем составляющую часть из спецификации родителя
	Если ЗначениеЗаполнено(ПредметСнабжения) И ЗначениеЗаполнено(Родитель) И ЗначениеЗаполнено(Родитель.ПредметСнабжения) Тогда
		
		РезультатУдаленияСпецификации = СтруктураЗаказаСервер.ОбработатьИзменениеСпецификации(Родитель.ПредметСнабжения, ПредметСнабжения, ЭлементСтруктуры.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление);
		
		Если Не РезультатУдаленияСпецификации.Выполнено Тогда
			
			ОтменитьТранзакцию();
			Сообщить(РезультатУдаленияСпецификации.Описание, СтатусСообщения.Важное);
			Возврат;
			
		КонецЕсли;
				
	КонецЕсли;
	
	//РезультатУдаленияЭлемента = СтруктураЗаказаСервер.УдалитьЭлементСтруктурыЗаказа(ЭлементСтруктуры);
	//
	//Если Не РезультатУдаленияЭлемента.Выполнено Тогда
	//	
	//	ОтменитьТранзакцию();
	//	Сообщить(РезультатУдаленияЭлемента.Описание, СтатусСообщения.Важное);
	//	Возврат;
	//	
	//КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

//-- 28.09.2017 Веденеев П. //процедуры удаления и добавления элементов структуры заказов и спецификаций

//++ 04.10.2017 Веденеев П. //процедуры работы с каталогом предметов снабжения 

#Область РаботаСКаталогомПредметовСнабжения

//ПРОЦЕДУРЫ И ФУНКЦИИ ДОБАВЛЕНИЯ ПРЕДМЕТОВ СНАБЖЕНИЯ В СТРУКТУРЫ ЗАКАЗОВ И СПЕЦИФИКАЦИИ

#Область РаботаСКаталогомПредметовСнабженияОсновное

&НаКлиенте
Процедура ДобавитьПредметСнабженияКакИзделие(Команда)
	
	ВыделенныеСтроки = Элементы.ВторойКаталогПредметовСнабжения.ВыделенныеСтроки;
	
	ДобавитьПредметыСнабженияПродолжение(ВыделенныеСтроки,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПредметСнабженияКакЗИП(Команда)
	
	ВыделенныеСтроки = Элементы.ВторойКаталогПредметовСнабжения.ВыделенныеСтроки;
	
	ДобавитьПредметыСнабженияПродолжение(ВыделенныеСтроки,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоставляющуюЧастьКАКИзделие(Команда)
	
	ВыделенныеСтроки = ПолучитьВыделенныеСтрокиДереваСпецификации();
	
	ДобавитьПредметыСнабженияПродолжение(ВыделенныеСтроки,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСоставляющуюЧастьКАКЗИП(Команда)
	
	ВыделенныеСтроки = ПолучитьВыделенныеСтрокиДереваСпецификации();
	
	ДобавитьПредметыСнабженияПродолжение(ВыделенныеСтроки,Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыделенныеСтрокиДереваСпецификации()
	
	ВыделенныеСтроки = Новый Массив;
	
	ИдентификаторыВыделенныхСтрок = Элементы.ДеревоСпецификацииВторогоКаталога.ВыделенныеСтроки;
	
	Если ИдентификаторыВыделенныхСтрок.Количество() = 0 Тогда
		
		Возврат ВыделенныеСтроки;
		
	КонецЕсли;
	
	Для каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		
		ВыделенныеСтроки.Добавить(ДеревоСпецификацииВторогоКаталога.НайтиПоИдентификатору(ИдентификаторСтроки).Ссылка);
		
	КонецЦикла;
	
	Возврат ВыделенныеСтроки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПредметыСнабженияПродолжение(ВыделенныеСтроки,ЗИП, ПроверятьЗип = Истина, ЗагрузкаXLS = ложь)
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Не выбраны предметы снабжения в правой таблице!");
		Возврат;
		
	КонецЕсли;
	
	ДобавлениеВСтруктуруЗаказа = (Элементы.ГруппаПервыйНаборДанных.ТекущаяСтраница = Элементы.ГруппаПервыйНаборДанныхСтруктураКорабля);
	
	ТекущиеДанные = ?(ДобавлениеВСтруктуруЗаказа, Элементы.СтруктураПервогоКорабля.ТекущиеДанные, Элементы.ПервыйКаталогПредметовСнабжения.ТекущиеДанные);
	
	Родитель = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка);
	
	// ++ Базунов
	Если ДобавлениеВСтруктуруЗаказа И НЕ ТекущиеДанные = Неопределено И ТекущиеДанные.ЗИП И ПроверятьЗип Тогда
	//Если ДобавлениеВСтруктуруЗаказа И НЕ ТекущиеДанные = Неопределено И ТекущиеДанные.ЗИП  Тогда		
		//Сообщить("Запрещено добавление в элемент струкутуры с признаком ЗИП");
		ПоказатьПредупреждение(,"Нельзя добавлять элементы в ЗИП!", 4, "Предупреждение");
		Возврат;
	КонецЕсли; 
	// -- Базунов
	
	Если ЗагрузкаXLS Тогда
		АдресДопПараметровЗагрузкиXLS = ЗаписатьДопПараметрыПСЗагрузкиXLS();
		ПараметрыОповещения = Новый Структура("ВыделенныеСтроки, Родитель, ДобавлениеВСтруктуруЗаказа, ЗИП, АдресДопПараметровЗагрузкиXLS", ВыделенныеСтроки, Родитель, ДобавлениеВСтруктуруЗаказа, ЗИП, АдресДопПараметровЗагрузкиXLS);
	Иначе
		ПараметрыОповещения = Новый Структура("ВыделенныеСтроки, Родитель, ДобавлениеВСтруктуруЗаказа, ЗИП", ВыделенныеСтроки, Родитель, ДобавлениеВСтруктуруЗаказа, ЗИП);
	КонецЕсли;
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПредметыСнабженияЗавершение", ЭтаФорма, ПараметрыОповещения);
		
	Если ДобавлениеВСтруктуруЗаказа Тогда //добавление в структуру заказа
		
		Если Не ВыделенныеСтроки.Найти(ТекущиеДанные.ПредметСнабжения) = Неопределено Тогда
			
			 ПоказатьПредупреждение(, "Нельзя добавить предмет снабжения в собственную спецификацию!");
			 Возврат;
			
		КонецЕсли;
		
		ТекстВопроса = ?(ТекущиеДанные = Неопределено, "Не выбран элемент для добавления. Добавить предметы снабжения в корень?", "Добавить предметы снабжения в структуру корабля?");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе //добавление в каталог предметов снабжения
		
		Если ТекущиеДанные = Неопределено Тогда
			
			ПоказатьПредупреждение(, "Не выбран предмет снабжения в левой таблице!");
			Возврат;
			
		КонецЕсли;
		
		Если Не ВыделенныеСтроки.Найти(ТекущиеДанные.Ссылка) = Неопределено Тогда
			
			 ПоказатьПредупреждение(, "Нельзя добавить предмет снабжения в собственную спецификацию!");
			 Возврат;
			
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещения, "Добавить предметы снабжения в спецификацию?", РежимДиалогаВопрос.ДаНет);
			
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ДобавитьПредметыСнабженияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Сообщить("Добавление предметов снабжения начато в "+ТекущаяДата());
		
		Если ВыполнитьДобавлениеПредметовСнабжения(ДополнительныеПараметры) Тогда
			
			Если ДополнительныеПараметры.ДобавлениеВСтруктуруЗаказа Тогда
				
				Элементы.СтруктураПервогоКорабля.Обновить();
				
			Иначе
				
				ПодключитьОбработчикОжидания("ОбновитьДанныеПервогоКаталога", 0.3, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Сообщить("Добавление предметов снабжения окончено в "+ТекущаяДата());
		
		Если ДополнительныеПараметры.Свойство("АдресДопПараметровЗагрузкиXLS") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПереносаПСВСтруктуруИзXLS", ЭтаФорма);
			ТекстВопроса = "Данные перенесены, очистить исходные таблицы?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	Иначе
		
		Сообщить("Действие отменено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭлементЭтоГруппа(Элемент)
	Возврат Элемент.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа; 
КонецФункции
 

//функция добавляет предметы снабжения из правой таблицы массива в структуру заказа и/или спецификацию предмета снабжения левой таблицы в зависимости от параметров
//возвращает результат добавления
&НаКлиенте
Функция ВыполнитьДобавлениеПредметовСнабжения(ПараметрыДобавления)
	
	Если ПараметрыДобавления.Свойство("АдресДопПараметровЗагрузкиXLS") Тогда	
		ЗагрузкаXLS			= Истина;
	Иначе
		ЗагрузкаXLS			= Ложь;
	КонецЕсли;
	
	// поменял местами с обновлением спецификаций, так как спецификацию добавляются все, а предметы снабжения
	// обрабатываются поштучно и пока дело доходит до 2/3 срабатывает регламентное, которое правит структуру 
	// заказа согласно спецификациям
	
	Если ПараметрыДобавления.ДобавлениеВСтруктуруЗаказа Тогда //добавляем предметы снабжения в структуру заказа
		
		Если ЗагрузкаXLS Или ВариантДобавленияЭлементовВСтруктуруКорабля = "ОтдельныйПроцессДляКаждогоЭлемента" Тогда //для каждого выделенного элемента вызываем процедуру добавления отдельно
			
			ПредметыСнабжения = ПараметрыДобавления.ВыделенныеСтроки;
			
			ДатаНачала = ТекущаяДата();
			ТекЭлемент = 1;
			ВсегоЭлементов = ПредметыСнабжения.Количество();
			
			Для Каждого ПредметСнабжения Из ПредметыСнабжения Цикл
				
				УправлениеИнтерфейсом.ВывестиТекущееСостояние(Строка(ПредметСнабжения), ДатаНачала, ТекЭлемент, ВсегоЭлементов);
				Если ЗагрузкаXLS Тогда
					
					МассивДляПроверки = Новый Массив;
					МассивДляПроверки.Добавить(ПредметСнабжения);
					СтрокиУжеЕсть =  ПредметыСнабженияУжеПрисутствуютВСтруктуре(ПараметрыДобавления.Родитель, МассивДляПроверки);
					Если СтрокиУжеЕсть.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтруктураПараметров = ПрочитатьДопПараметрыПСЗагрузкиXLS(ПредметСнабжения, ПараметрыДобавления.АдресДопПараметровЗагрузкиXLS);
					ТипНовЭлСтруктуры 	= СтруктураПараметров.Тип; 
					ПараметрыКоличества = СтруктураПараметров.ПараметрыКоличества;
					ЗипНовЭлемент 		= СтруктураПараметров.Зип; 
				Иначе
					ТипНовЭлСтруктуры 	= Неопределено;
					ПараметрыКоличества = Неопределено;
					ЗипНовЭлемент		= ПараметрыДобавления.ЗИП;
				КонецЕсли;
				
				//ДобавитьПредметСнабженияВСтруктуруЗаказа(ПараметрыДобавления.Родитель, ПредметСнабжения, ПараметрыДобавления.ЗИП,,ТипНовЭлСтруктуры, ПараметрыКоличества, ЗагрузкаXLS);
				ДобавитьПредметСнабженияВСтруктуруЗаказа(ПараметрыДобавления.Родитель, ПредметСнабжения, ЗипНовЭлемент,,ТипНовЭлСтруктуры, ПараметрыКоличества, ЗагрузкаXLS);
				
			КонецЦикла;
			
		ИначеЕсли ВариантДобавленияЭлементовВСтруктуруКорабля = "ОдинПроцессДляВсехЭлементов" Тогда //добавляем все элементы одним действием на сервере
			
			Состояние("Создание элементов структуры заказа", , ,БиблиотекаКартинок.ДлительнаяОперация48);
			
			Если ЗагрузкаXLS Тогда
				АдресДопПараметровЗагрузкиXLS = ПараметрыДобавления.АдресДопПараметровЗагрузкиXLS;
			Иначе
				АдресДопПараметровЗагрузкиXLS = Неопределено;				
			КонецЕсли;
			//дальше делать не стал, т.к. в алгоритме уже есть ошибка, им не пользуются с марта 18 года - СоздатьЭлементСтруктурыЗаказа - не обнаружено (ТипСоставляющейЧасти)
			Если Не ДобавитьПредметыСнабженияВСтруктуруЗаказа(ПараметрыДобавления.Родитель, ПараметрыДобавления.ВыделенныеСтроки, ПараметрыДобавления.ЗИП, АдресДопПараметровЗагрузкиXLS) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
			
		ИначеЕсли ВариантДобавленияЭлементовВСтруктуруКорабля = "ОтдельныйПроцессДляКаждогоУровняИерархии" Тогда //строим дерево и вызываем добавление для каждого уровня дерева
			
			Состояние("Формируется дерево спецификаций...", , , БиблиотекаКартинок.ДлительнаяОперация48);
			
			Родитель = ПолучитьРодителя(ПараметрыДобавления.Родитель);
			
			ЗаполнитьДеревоДобавления(Родитель, ПараметрыДобавления.ВыделенныеСтроки, ПараметрыДобавления.ЗИП);
			
			Сообщить("Добавление элементов структуры начато в "+ТекущаяДата());
			
			СоздатьЭлементыСтруктурыЗаказаКлиент(ДеревоДобавления.ПолучитьЭлементы(), ПараметрыДобавления.Родитель);
			
			Сообщить("Добавление элементов структуры окончено в "+ТекущаяДата());
			
		КонецЕсли;
		
	КонецЕсли;

	
	Если Не ПараметрыДобавления.Родитель = Неопределено Тогда
		
		Состояние("Добавление составляющих частей в спецификацию...", , ,БиблиотекаКартинок.ДлительнаяОперация48);
		
		Родитель = ПараметрыДобавления.Родитель;
		
		ПредметСнабжения = ?(ПараметрыДобавления.ДобавлениеВСтруктуруЗаказа, ПолучитьПредметСнабжения(Родитель), Родитель);
		
		Группа = (ПараметрыДобавления.ДобавлениеВСтруктуруЗаказа И ЭлементЭтоГруппа(Родитель));
		
		Если ЗначениеЗаполнено(ПредметСнабжения) И НЕ Группа Тогда //добавляем предметы снабжения в спецификацию
			
			//РезультатДобавления =  ДобавитьПредметыСнабженияВСпецификацию(ПредметСнабжения, ПараметрыДобавления.ВыделенныеСтроки, ПараметрыДобавления.ЗИП);
			Если ЗагрузкаXLS Тогда
				РезультатДобавления =  ДобавитьПредметыСнабженияВСпецификацию(ПредметСнабжения, ПараметрыДобавления.ВыделенныеСтроки, ПараметрыДобавления.ЗИП, ПараметрыДобавления.АдресДопПараметровЗагрузкиXLS);
			Иначе
				РезультатДобавления =  ДобавитьПредметыСнабженияВСпецификацию(ПредметСнабжения, ПараметрыДобавления.ВыделенныеСтроки, ПараметрыДобавления.ЗИП);
			КонецЕсли;
			
			Если Не РезультатДобавления.Выполнено Тогда
				
				Сообщить(РезультатДобавления.Описание, СтатусСообщения.Важное);
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
		
	Если ЗагрузкаXLS Тогда
		УдалитьИзВременногоХранилища(ПараметрыДобавления.АдресДопПараметровЗагрузкиXLS);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаботаСКаталогомПредметовСнабженияОбщиеФункции 

&НаСервереБезКонтекста
Функция ПолучитьПредметСнабжения(ЭлементСтруктурыЗаказа) 
	
	Возврат ЭлементСтруктурыЗаказа.ПредметСнабжения;
	
КонецФункции

//процедура создает элемент структуры заказа на основании элемента спецификации. если элемент спецификации имеет свою спецификацию - вызывает создание подчиненных элементов
&НаСервере
Процедура СоздатьЭлементСтруктурыЗаказа(СтрокаДерева, ЭлементРодитель, СтруктураЗаказаМенеджер, ПараметрыКоличества = Неопределено);
	
	Если Не СтрокаДерева.ЭталонОбработан Тогда
		
		Сообщить("Не обработан эталон элемента "+Строка(СтрокаДерева.ПредметСнабжения), СтатусСообщения.Важное);
		Возврат;
		
	КонецЕсли;
		
	ЭлементСтруктурыЗаказа =  ЗаписатьЭлементСтруктурыЗаказа(ПервыйКорабль, ЭлементРодитель, СтрокаДерева.ПредметСнабжения, СтрокаДерева.ЗИП, 
		СтрокаДерева.ТипСоставляющейЧасти, СтруктураЗаказаМенеджер, ПараметрыКоличества); //++ 06.03.2018 Веденеев П. //добавлено заполнение типа составляющей части
	
	Если ЭлементСтруктурыЗаказа = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СтрокиДерева = СтрокаДерева.Строки;
	
	Если СтрокиДерева.Количество() > 0 Тогда
		
		Для каждого ПодчиненнаяСтрока Из СтрокиДерева Цикл
			
			СоздатьЭлементСтруктурыЗаказа(ПодчиненнаяСтрока, ЭлементСтруктурыЗаказа, СтруктураЗаказаМенеджер);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//функция записывает элемент структуры заказа в БД. возвращает ссылку на созданный элемент (неопределено, если создать не удалось)
&НаСервереБезКонтекста
Функция ЗаписатьЭлементСтруктурыЗаказа(Владелец, ЭлементРодитель, ПредметСнабжения, ЗИП, ТипСоставляющейЧасти, СтруктураЗаказаМенеджер = Неопределено, ПараметрыКоличества = Неопределено)
	
	СправочникМенеджерСтруктураЗаказа = ?(СтруктураЗаказаМенеджер = Неопределено, Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП, СтруктураЗаказаМенеджер);
	
	ЭлементСтруктурыЗаказа = СправочникМенеджерСтруктураЗаказа.СоздатьЭлемент();
	ЭлементСтруктурыЗаказа.Владелец = Владелец;
	ЭлементСтруктурыЗаказа.Родитель = ЭлементРодитель;
	ЭлементСтруктурыЗаказа.ПредметСнабжения = ПредметСнабжения;
	ЭлементСтруктурыЗаказа.Наименование = Строка(ПредметСнабжения);
	ЭлементСтруктурыЗаказа.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	ЭлементСтруктурыЗаказа.ТипСоставляющейЧасти = ТипСоставляющейЧасти; //++ 06.03.2018 Веденеев П. //добавлено заполнение типа составляющей части	
	ЭлементСтруктурыЗаказа.ЗИП = ЗИП;
	
	Если Не ПараметрыКоличества = Неопределено Тогда
		ЭлементСтруктурыЗаказа.Количество 			= ПараметрыКоличества.Количество; 
		ЭлементСтруктурыЗаказа.КоличествоВЗИПБорт 	= ПараметрыКоличества.КоличествоВЗИПБорт; 
		ЭлементСтруктурыЗаказа.КоличествоВЗИПБаза 	= ПараметрыКоличества.КоличествоВЗИПБаза; 
		ЭлементСтруктурыЗаказа.КоличествоВЗИПДЭ 	= ПараметрыКоличества.КоличествоВЗИПДЭ; 
		ЭлементСтруктурыЗаказа.КоличествоВЗИПР 		= ПараметрыКоличества.КоличествоВЗИПР; 
	КонецЕсли;
	
	Попытка
		
		ЭлементСтруктурыЗаказа.Записать();
		Возврат ЭлементСтруктурыЗаказа.Ссылка;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

//функция возвращает дерево спецификаций массива предметов снабжения
&НаСервере
Функция ПолучитьДеревоСпецификаций(ПредметыСнабжения,ЗИП)
	
	Запрос = Новый Запрос;
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ТаблицаПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	&ТаблицаПредметовСнабжения КАК ТаблицаПредметовСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ЕСТЬNULL(ЭталонныеИзделияВСтруктуреЗаказов.ЭлементСтруктурыЗаказа, НЕОПРЕДЕЛЕНО) КАК Эталон
	|ПОМЕСТИТЬ втЭталоны
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭталонныеИзделияВСтруктуреЗаказов КАК ЭталонныеИзделияВСтруктуреЗаказов
	|		ПО втПредметыСнабжения.ПредметСнабжения = ЭталонныеИзделияВСтруктуреЗаказов.ПредметСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Эталон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП
	|ПОМЕСТИТЬ втСпецификации
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				втЭталоны.Эталон КАК Ссылка
	|			ИЗ
	|				втЭталоны КАК втЭталоны
	|			ГДЕ
	|				НЕ втЭталоны.Эталон = Неопределено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЭталоны.ПредметСнабжения,
	|	НЕОПРЕДЕЛЕНО,
	|	Ложь
	|ИЗ
	|	втЭталоны КАК втЭталоны
	|ГДЕ
	|	втЭталоны.Эталон = НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСпецификации.ПредметСнабжения КАК ПредметСнабжения,
	|	втСпецификации.Ссылка КАК Ссылка,
	|	МИНИМУМ(ЕСТЬNULL(СпецификацииПредметовСнабженияИзменения.ЭталонОбработан, ИСТИНА)) КАК ЭталонОбработан,
	|	втСпецификации.ЗИП КАК ЗИП
	|ИЗ
	|	втСпецификации КАК втСпецификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабженияИзменения КАК СпецификацииПредметовСнабженияИзменения
	|		ПО втСпецификации.ПредметСнабжения = СпецификацииПредметовСнабженияИзменения.ПредметСнабжения
	|
	|СГРУППИРОВАТЬ ПО
	|	втСпецификации.ПредметСнабжения,
	|	втСпецификации.Ссылка,
	|	втСпецификации.ЗИП
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("ТаблицаПредметовСнабжения", ПолучитьТаблицуПредметовСнабжения(ПредметыСнабжения));
	
	ДеревоСпецификации = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ДеревоСпецификации;
	
КонецФункции

#КонецОбласти

#Область РаботаСКаталогомПредметовСнабженияДобавлениеВСпецификацию

//функция добавляет предметы снабжения в спецификацию выбранного предмета снабжения. возвращает результат добавления
&НаСервере
Функция ДобавитьПредметыСнабженияВСпецификацию(ПредметСнабжения, СоставляющиеЧасти, ЗИП, АдресДопПараметровЗагрузкиXLS = "")
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	НачатьТранзакцию();
	
	Если Не ЗначениеЗаполнено(АдресДопПараметровЗагрузкиXLS) Тогда
		Для Каждого СоставляющаяЧасть Из СоставляющиеЧасти Цикл
			СтруктураЗаписи 		= Новый Структура("ПредметСнабжения, СоставляющаяЧасть, ЗИП", 
			ПредметСнабжения, СоставляющаяЧасть, ЗИП);
			Если Не РегистрыСведений.СпецификацииПС.ДобвавитьЗапись(СтруктураЗаписи) Тогда
				Результат.Выполнено = Ложь;
				Результат.Описание 	= "Не удалось изменить спецификацию.";
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТабПараметров = ПрочитатьДопПараметрыПСЗагрузкиXLS(Неопределено, АдресДопПараметровЗагрузкиXLS);
		Для Каждого СоставляющаяЧасть Из СоставляющиеЧасти Цикл
			НайденныеСтроки = ТабПараметров.НайтиСтроки(Новый Структура("ПредметСнабжения", СоставляющаяЧасть)); 
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СтруктураЗаписи 		= Новый Структура("ПредметСнабжения, СоставляющаяЧасть, ЗИП, Тип, Количество", 
				ПредметСнабжения, СоставляющаяЧасть, НайденныеСтроки[0].ЗИП, НайденныеСтроки[0].Тип, НайденныеСтроки[0].ПараметрыКоличества.Количество);
			Иначе
				СтруктураЗаписи 		= Новый Структура("ПредметСнабжения, СоставляющаяЧасть, ЗИП", 
				ПредметСнабжения, СоставляющаяЧасть, ЗИП);
				
			КонецЕсли;
			Если Не РегистрыСведений.СпецификацииПС.ДобвавитьЗапись(СтруктураЗаписи) Тогда
				Результат.Выполнено = Ложь;
				Результат.Описание 	= "Не удалось изменить спецификацию.";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РегистрыСведений.АктуализацияСтруктурыПС.ДобвавитьЗапись(ПредметСнабжения);
	
	Если Результат.Выполнено Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДобавитьПредметыСнабженияВСпецификацию

&НаСервере
Функция _ДобавитьПредметыСнабженияВСпецификацию(ПредметСнабжения, СоставляющиеЧасти, ЗИП)
	
	Если СтруктураЗаказаСервер.ВходитВСпецификацииПредметовСнабжения(ПредметСнабжения, СоставляющиеЧасти) Тогда
		
		Описание = "Предмет снабжения в левой таблице входит в спецификацию одного из предметов снабжения в правой таблице! Операция отменена.";
		Возврат Новый Структура("Выполнено, Описание", Ложь, Описание);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПредметовСнабжения.ПредметСнабжения КАК СоставляющаяЧасть
	|ПОМЕСТИТЬ втНовыеСоставляющиеЧасти
	|ИЗ
	|	&ТаблицаПредметовСнабжения КАК ТаблицаПредметовСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|	ВложенныйЗапрос.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	ВложенныйЗапрос.ЗИП КАК ЗИП,
	|	МАКСИМУМ(ВложенныйЗапрос.Количество) КАК Количество,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерПозиции) КАК НомерПозиции,
	|	МАКСИМУМ(ВложенныйЗапрос.Тип) КАК Тип,
	|	МАКСИМУМ(ВложенныйЗапрос.ОбозначениеСНК) КАК ОбозначениеСНК,
	|	МАКСИМУМ(ВложенныйЗапрос.ПричинаВыбораДляЗИП) КАК ПричинаВыбораДляЗИП,
	|	МАКСИМУМ(ВложенныйЗапрос.УказательНаЭлементСхемы) КАК УказательНаЭлементСхемы,
	|	МАКСИМУМ(ВложенныйЗапрос.Взаимозаменяемость) КАК Взаимозаменяемость,
	|	МАКСИМУМ(ВложенныйЗапрос.ПризнакПодбора) КАК ПризнакПодбора,
	|	МАКСИМУМ(ВложенныйЗапрос.ОбозначениеЗаготовки) КАК ОбозначениеЗаготовки,
	|	"""" КАК СведенияОбИзменениях
	|ИЗ
	|	(ВЫБРАТЬ
	|		СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|		СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|		СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|		СпецификацииПредметовСнабжения.Количество КАК Количество,
	|		СпецификацииПредметовСнабжения.НомерПозиции КАК НомерПозиции,
	|		СпецификацииПредметовСнабжения.Тип КАК Тип,
	|		СпецификацииПредметовСнабжения.ОбозначениеСНК КАК ОбозначениеСНК,
	|		СпецификацииПредметовСнабжения.ПричинаВыбораДляЗИП КАК ПричинаВыбораДляЗИП,
	|		СпецификацииПредметовСнабжения.УказательНаЭлементСхемы КАК УказательНаЭлементСхемы,
	|		СпецификацииПредметовСнабжения.Взаимозаменяемость КАК Взаимозаменяемость,
	|		СпецификацииПредметовСнабжения.ПризнакПодбора КАК ПризнакПодбора,
	|		СпецификацииПредметовСнабжения.ОбозначениеЗаготовки КАК ОбозначениеЗаготовки
	|	ИЗ
	|		РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|	ГДЕ
	|		СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ПредметСнабжения,
	|		втНовыеСоставляющиеЧасти.СоставляющаяЧасть,
	|		&ЗИП,
	|		0,
	|		0,
	|		ЗНАЧЕНИЕ(Справочник.РазделыСпецификацииЗИП.ПустаяСсылка),
	|		"""",
	|		ЗНАЧЕНИЕ(Справочник.ПричиныВыбораПредметаСнабженияДляЗИП.ПустаяСсылка),
	|		"""",
	|		"""",
	|		ЗНАЧЕНИЕ(Справочник.ПризнакиПодбораИлиИзготовленияПредметовСнабжения.ПустаяСсылка),
	|		""""
	|	ИЗ
	|		втНовыеСоставляющиеЧасти КАК втНовыеСоставляющиеЧасти) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ПредметСнабжения,
	|	ВложенныйЗапрос.СоставляющаяЧасть,
	|	ВложенныйЗапрос.ЗИП";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("ЗИП", ЗИП);
	Запрос.УстановитьПараметр("ТаблицаПредметовСнабжения", ПолучитьТаблицуПредметовСнабжения(СоставляющиеЧасти));
	
	ТаблицаСпецификации = Запрос.Выполнить().Выгрузить();
	
	РезультатЗаписиСпецификации = СтруктураЗаказаСервер.ЗаписатьСпецификациюПредметаСнабжения(ПредметСнабжения, ТаблицаСпецификации);
	
	Возврат РезультатЗаписиСпецификации;
	
КонецФункции

//фукция возвращает таблицу предметов снабжения, созданную на основании массива предметов снабжения
&НаСервере
Функция ПолучитьТаблицуПредметовСнабжения(МассивПредметовСнабжения)
	
	ТаблицаПредметовСнабжения = Новый ТаблицаЗначений;
	ТаблицаПредметовСнабжения.Колонки.Добавить("ПредметСнабжения", Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения"));
	
	Для каждого ПредметСнабжения Из МассивПредметовСнабжения Цикл
		
		СтрокаТаблицы = ТаблицаПредметовСнабжения.Добавить();
		СтрокаТаблицы.ПредметСнабжения = ПредметСнабжения;
		
	КонецЦикла;
	
	Возврат ТаблицаПредметовСнабжения;
	
КонецФункции

#КонецОбласти

#Область РаботаСКаталогомПредметовСнабженияПоэлементноеДобавление

//процедура добавляет одиночный предмет снабжения в структуру заказа (в иерархию выбранного элемента). возвращает результат добавления
&НаСервере
//Процедура ДобавитьПредметСнабженияВСтруктуруЗаказа(Родитель, ПредметСнабжения, ЗИП, ЭлементСтруктуры = Неопределено)
Процедура ДобавитьПредметСнабженияВСтруктуруЗаказа(Родитель, ПредметСнабжения, ЗИП, ЭлементСтруктуры = Неопределено, 
												   ТипНовЭлСтруктуры = Неопределено, ПараметрыКоличества = Неопределено, ЗагрузкаXLS = Ложь)
	
	СтруктураЗаказаМенеджер = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	
	Если Родитель = Неопределено Тогда
		
		Родитель = СтруктураЗаказаМенеджер.ПустаяСсылка();
		
	КонецЕсли;
	
	//если элемент имеет эталон - добавляем спецификацию	
	ЭталонныеИзделияМенеджерЗаписи = РегистрыСведений.ЭталонныеИзделияВСтруктуреЗаказов.СоздатьМенеджерЗаписи();
	ЭталонныеИзделияМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
	ЭталонныеИзделияМенеджерЗаписи.Прочитать();
	
	Если ЭталонныеИзделияМенеджерЗаписи.Выбран() И Не ЭталонныеИзделияМенеджерЗаписи.ЭлементСтруктурыЗаказа = ЭлементСтруктуры И НЕ ЗагрузкаXLS Тогда 
		
		ДеревоСпецификации = СтруктураЗаказаСервер.ПолучитьДеревоСпецификацииЭталонногоЭлемента(ЭталонныеИзделияМенеджерЗаписи.ЭлементСтруктурыЗаказа,ЗИП);
		
		//++ 06.03.2018 Веденеев П. //добавлена проверка на обработку эталона корневого элемента
		КорневаяСтрока = ДеревоСпецификации.Строки[0];
		
		Если Не КорневаяСтрока.ЭталонОбработан Тогда
			
			Сообщить("Не обработан эталон элемента "+Строка(КорневаяСтрока.ПредметСнабжения)+ ". Подчиненные элементы будут записаны после обработки эталона", 
				СтатусСообщения.Важное);
			Возврат;
			
		КонецЕсли;
		//-- 06.03.2018 Веденеев П. //добавлена проверка на обработку эталона корневого элемента
		
		СтрокиДерева = ?(ЭлементСтруктуры = Неопределено, ДеревоСпецификации.Строки, КорневаяСтрока.Строки);
		
		Если ЭлементСтруктуры = Неопределено Тогда
			
			ЭлементСтруктуры = Родитель;
			
		КонецЕсли;
		
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
			
			Если ЗагрузкаXLS Тогда		
				СтрокаДерева.ТипСоставляющейЧасти = ТипНовЭлСтруктуры; 
				СтрокаДерева.Зип = Зип;
				СоздатьЭлементСтруктурыЗаказа(СтрокаДерева, ЭлементСтруктуры, СтруктураЗаказаМенеджер, ПараметрыКоличества);	
			Иначе
				СоздатьЭлементСтруктурыЗаказа(СтрокаДерева, ЭлементСтруктуры, СтруктураЗаказаМенеджер);	
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ЭлементСтруктуры = Неопределено Тогда
			
			Если Не ЗагрузкаXLS Тогда
				ЭлементСтруктуры = ЗаписатьЭлементСтруктурыЗаказа(ПервыйКорабль, Родитель, ПредметСнабжения, Ложь, СтруктураЗаказаМенеджер,, ПараметрыКоличества);
			Иначе
				ЭлементСтруктуры = ЗаписатьЭлементСтруктурыЗаказа(ПервыйКорабль, Родитель, ПредметСнабжения, ЗИП, ТипНовЭлСтруктуры,,ПараметрыКоличества);
			КонецЕсли;
			//--
			Если ЭлементСтруктуры = Неопределено Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДеревоСпецификации = Новый ДеревоЗначений;
		ДеревоСпецификации.Колонки.Добавить("ПредметСнабжения", 	Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения"));
		ДеревоСпецификации.Колонки.Добавить("ЗИП", 					Новый ОписаниеТипов("Булево"));
		ДеревоСпецификации.Колонки.Добавить("ЭталонОбработан", 		Новый ОписаниеТипов("Булево"));
		ДеревоСпецификации.Колонки.Добавить("ТипСоставляющейЧасти", Новый ОписаниеТипов("СправочникСсылка.РазделыСпецификацииЗИП"));
		
		ЗаполнитьДеревоСпецификации(ПредметСнабжения, ДеревоСпецификации.Строки);
		
		Для каждого СтрокаДерева Из ДеревоСпецификации.Строки Цикл
		
			СоздатьЭлементСтруктурыЗаказа(СтрокаДерева, ЭлементСтруктуры, СтруктураЗаказаМенеджер);	
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//процедура заполняет дерево составляющих частей предмета снабжения
Процедура ЗаполнитьДеревоСпецификации(ПредметСнабжения, СтрокиДерева, СчитанныеЭлементы = Неопределено) Экспорт
	
	Если СчитанныеЭлементы = Неопределено Тогда //проверка на зацикливание
		
		СчитанныеЭлементы = Новый Массив;
			
	КонецЕсли;
	
	СчитанныеЭлементы.Добавить(ПредметСнабжения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	ИСТИНА КАК ЭталонОбработан
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|	И НЕ СпецификацииПредметовСнабжения.СоставляющаяЧасть В (&СчитанныеЭлементы)";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("СчитанныеЭлементы", СчитанныеЭлементы); //проверка на зацикливание
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
		
		МаксимальныйИндекс = СчитанныеЭлементы.ВГраница();
		
		Если Выборка.ЗИП Тогда
			
			//ЗаполнитьДеревоСпецификации(Выборка.Ссылка, СтрокаДерева.Строки, СчитанныеЭлементы);
			//судя по всему сюда никогда не заходит, так как ошибка должна сыпаться регулярно
			ЗаполнитьДеревоСпецификации(Выборка.ПредметСнабжения, СтрокаДерева.Строки, СчитанныеЭлементы);	//хот фикс, не уверен в правильности
			
			Если Не СчитанныеЭлементы[МаксимальныйИндекс] = ПредметСнабжения Тогда
				
				СчитанныеЭлементы.Удалить(МаксимальныйИндекс);
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКаталогомПредметовСнабженияМассовоеДобавление

//функция добавляет предметы снабжения в структуру заказа (в иерархию выбранного элемента). возвращает результат добавления
&НаСервере
Функция ДобавитьПредметыСнабженияВСтруктуруЗаказа(Родитель, ПредметыСнабжения, ЗИП, АдресДопПараметровЗагрузкиXLS = Неопределено)
	
	СтруктураЗаказаМенеджер = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	
	Если Родитель = Неопределено Тогда
		
		Родитель = СтруктураЗаказаМенеджер.ПустаяСсылка();
		
	КонецЕсли;
		
	
	ДеревоСпецификаций = ПолучитьДеревоСпецификаций(ПредметыСнабжения,ЗИП);
	
	Для каждого СтрокаДерева Из ДеревоСпецификаций.Строки Цикл
		
		СоздатьЭлементСтруктурыЗаказа(СтрокаДерева, Родитель, СтруктураЗаказаМенеджер);	
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//функция добавляет в структуру заказа элементы из спецификации заданного предмета снабжения. возвращает результат добавления
&НаСервере
Функция ДобавитьСоставляющиеЧастиВСтруктуруЗаказа(ПредметСнабжения, Родитель, СтруктураЗаказаМенеджер)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	СпецификацииПредметовСнабжения.Количество КАК Количество,
	|	СпецификацииПредметовСнабжения.Тип КАК Тип
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементСтруктурыЗаказа = СтруктураЗаказаМенеджер.СоздатьЭлемент();
		
		ЭлементСтруктурыЗаказа = СтруктураЗаказаМенеджер.СоздатьЭлемент();
		ЭлементСтруктурыЗаказа.Владелец = ПервыйКорабль;
		ЭлементСтруктурыЗаказа.Родитель = Родитель;
		ЭлементСтруктурыЗаказа.Тип = ТипИзделие;
		ЭлементСтруктурыЗаказа.ПредметСнабжения = Выборка.СоставляющаяЧасть;
		ЭлементСтруктурыЗаказа.Наименование = Строка(Выборка.СоставляющаяЧасть);
		ЭлементСтруктурыЗаказа.ЗИП = Выборка.ЗИП;
		ЭлементСтруктурыЗаказа.Количество = Выборка.Количество;
		ЭлементСтруктурыЗаказа.ТипСоставляющейЧасти = Выборка.Тип;
		
		Попытка
			
			 ЭлементСтруктурыЗаказа.Записать();
			 
		Исключение
			
			 Сообщить("Не удалось элемент " + ЭлементСтруктурыЗаказа.Наименование + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
			 
			 Возврат Ложь;
			 
		КонецПопытки;
		 
		Если Не ДобавитьСоставляющиеЧастиВСтруктуруЗаказа(ЭлементСтруктурыЗаказа.ПредметСнабжения, ЭлементСтруктурыЗаказа.Ссылка, СтруктураЗаказаМенеджер) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РаботаСКаталогомПредметовСнабженияПоуровневоеДобавление

//функция возвращает ссылку на родитель (элемент, в который производится добавление)
&НаСервере
Функция ПолучитьРодителя(Родитель)
	
	Если Родитель = Неопределено Тогда
		
		Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Родитель;
	
КонецФункции

//процедура заполняет реквизит формы ДеревоДобавления данными спецификаций заданных предметов снабжения
&НаСервере
Процедура ЗаполнитьДеревоДобавления(Родитель, ПредметыСнабжения, ЗИП)
	
	СтруктураЗаказаМенеджер = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
		
	ДеревоСпецификаций = ПолучитьДеревоСпецификаций(ПредметыСнабжения, ЗИП);
	
	ЗначениеВРеквизитФормы(ДеревоСпецификаций, "ДеревоДобавления");
	
КонецПроцедуры

//процедура вызывает создание элементов структуры заказа. в случае наличия у элемента подчиненных - вызывает их создание
&НаКлиенте
Процедура СоздатьЭлементыСтруктурыЗаказаКлиент(ЭлементыДерева, Родитель, ОписаниеИерархии = "")
	
	ДатаНачала = ТекущаяДата();
	ТекЭлемент = 1;
	ВсегоЭлементов = ЭлементыДерева.Количество();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ТекущееОписаниеИерархии = ОписаниеИерархии + Строка(ЭлементДерева.ПредметСнабжения);
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние(ТекущееОписаниеИерархии, ДатаНачала, ТекЭлемент, ВсегоЭлементов);
		
		Если Не ЭлементДерева.ЭталонОбработан Тогда
			
			Сообщить("Не обработан эталон элемента "+Строка(ЭлементДерева.ПредметСнабжения), СтатусСообщения.Важное);
			ТекЭлемент = ТекЭлемент + 1;
			Продолжить;
			
		КонецЕсли;
		
		ЭлементСтруктурыЗаказа = ЗаписатьЭлементСтруктурыЗаказа(ПервыйКорабль, Родитель, ЭлементДерева.ПредметСнабжения, ЭлементДерева.ЗИП, Неопределено);
		
		Если ЭлементСтруктурыЗаказа = Неопределено Тогда
			
			ТекЭлемент = ТекЭлемент + 1;
			Продолжить;
			
		КонецЕсли;
		
		ПодчиненныеЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеЭлементыДерева.Количество() > 0 Тогда
						
			СоздатьЭлементыСтруктурыЗаказаКлиент(ПодчиненныеЭлементыДерева, ЭлементСтруктурыЗаказа, ТекущееОписаниеИерархии + "\");
			
		КонецЕсли;
		
		ТекЭлемент = ТекЭлемент + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ ОТОБРАЖЕНИЯ ДЕРЕВЬЕВ СПЕЦИФИКАЦИИ
#Область ОтборажениеСпецификации 

&НаКлиенте
Процедура ПервыйКаталогПредметовСнабженияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПервогоКаталога", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПервогоКаталога() Экспорт
	
	ТекущиеДанные = Элементы.ПервыйКаталогПредметовСнабжения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПредметСнабжения = ?(ТекущиеДанные.Свойство("Ссылка"), ТекущиеДанные.Ссылка, Неопределено);
	
	Если Элементы.ГруппаПервыйНаборДанныхКаталогПредметовСнабженияСпецификацияИПрименяемость.ТекущаяСтраница = Элементы.ГруппаПервыйНаборДанныхКаталогПредметовСнабженияСпецификация Тогда
	
		ЗаполнитьДанныеСпецификации(ПредметСнабжения, "ДеревоСпецификацииПервогоКаталога");
		
	ИначеЕсли Элементы.ГруппаПервыйНаборДанныхКаталогПредметовСнабженияСпецификацияИПрименяемость.ТекущаяСтраница = Элементы.ГруппаПервыйНаборДанныхКаталогПредметовСнабженияИспользование Тогда
		
		ПервыйКорабльИспользование.Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", ПредметСнабжения);
		
	Иначе
		
		ЗаполнитьПрименяемость(ПредметСнабжения, "ПрименяемостьПервогоИзделия");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВторойКаталогПредметовСнабженияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеВторогоКаталога", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВторогоКаталога() Экспорт
	
	ТекущиеДанные = Элементы.ВторойКаталогПредметовСнабжения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПредметСнабжения = ?(ТекущиеДанные.Свойство("Ссылка"), ТекущиеДанные.Ссылка, Неопределено);
	
	Если Элементы.ГруппаВторойНаборДанныхКаталогПредметовСнабженияСпецификацияИПрименяемость.ТекущаяСтраница = Элементы.ГруппаВторойНаборДанныхКаталогПредметовСнабженияСпецификация Тогда
	
		ЗаполнитьДанныеСпецификации(ПредметСнабжения, "ДеревоСпецификацииВторогоКаталога");
		
	ИначеЕсли Элементы.ГруппаВторойНаборДанныхКаталогПредметовСнабженияСпецификацияИПрименяемость.ТекущаяСтраница = Элементы.ГруппаВторойНаборДанныхКаталогПредметовСнабженияИспользование Тогда
		
		ВторойКорабльИспользование.Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", ПредметСнабжения);
		
	Иначе
		
		ЗаполнитьПрименяемость(ПредметСнабжения, "ПрименяемостьВторогоИзделия");
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВторойНаборДанныхКаталогПредметовСнабженияСпецификацияИПрименяемостьПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДанныеВторогоКаталога();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПервыйНаборДанныхКаталогПредметовСнабженияСпецификацияИПрименяемостьПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДанныеПервогоКаталога();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСпецификации(ПредметСнабжения, ИмяДерева)
	
	Если ПредметСнабжения = Неопределено Тогда
		
		ЭтаФорма[ИмяДерева].ПолучитьЭлементы().Очистить();
		Возврат;
		
	КонецЕсли;
	
	Если ЗаполнятьДеревоСпецификацииИзСоставаИзделий Тогда
		
		ДеревоСпецификации = РеквизитФормыВЗначение(ИмяДерева, Тип("ДеревоЗначений"));
		
		СтрокиДереваСпецификации = ДеревоСпецификации.Строки;
		
		СтрокиДереваСпецификации.Очистить();
		
		СтруктураЗаказаСервер.ЗаполнитьДеревоСпецификации(ПредметСнабжения, СтрокиДереваСпецификации, 3);
		
		ЗначениеВРеквизитФормы(ДеревоСпецификации, ИмяДерева);
		
	Иначе
		
		//в качестве родительского элемента выбираем эталонный
		ЭталонныеИзделияВСтруктуреЗаказовМенеджерЗаписи = РегистрыСведений.ЭталонныеИзделияВСтруктуреЗаказов.СоздатьМенеджерЗаписи();
		ЭталонныеИзделияВСтруктуреЗаказовМенеджерЗаписи.ПредметСнабжения = ПредметСнабжения;
		ЭталонныеИзделияВСтруктуреЗаказовМенеджерЗаписи.Прочитать();
		
		Родитель = ЭталонныеИзделияВСтруктуреЗаказовМенеджерЗаписи.ЭлементСтруктурыЗаказа;
		
		Если Родитель.Пустая() Тогда
			
			ЭтаФорма[ИмяДерева].ПолучитьЭлементы().Очистить();
			Возврат;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество
		|ПОМЕСТИТЬ втПредметыСнабжения
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&Родитель)
		|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Родитель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПредметСнабжения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КаталогПредметовСнабжения.Наименование КАК Наименование,
		|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
		|	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
		|	втПредметыСнабжения.ЗИП КАК ЗИП,
		|	втПредметыСнабжения.Количество КАК Количество,
		|	КаталогПредметовСнабжения.Ссылка КАК Ссылка
		|ИЗ
		|	втПредметыСнабжения КАК втПредметыСнабжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		|		ПО втПредметыСнабжения.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	втПредметыСнабжения.Ссылка ИЕРАРХИЯ";
		Запрос.УстановитьПараметр("Родитель", Родитель);
		
		ДеревоСпецификации = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ЗначениеВРеквизитФормы(ДеревоСпецификации, ИмяДерева);
		
	КонецЕсли;
	
КонецПроцедуры

//процедура заполняет таблицу применяемости предмета снабжения
&НаСервере
Процедура ЗаполнитьПрименяемость(ПредметСнабжения, ИмяТаблицы)
	
	Если ПредметСнабжения = Неопределено Тогда
		
		ЭтаФорма[ИмяТаблицы].Очистить();
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.Владелец КАК Проект,
	|	Заказы.Заказчик КАК Флот,
	|	Заказы.Ссылка КАК Корабль,
	|	ВЫРАЗИТЬ(ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии КАК СТРОКА(1000)) КАК ОписаниеИерархии,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип КАК Тип,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Заказы КАК Заказы
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = Заказы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|		ПО (ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка)
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ЭтаФорма[ИмяТаблицы].Очистить();
		
	Иначе
		
		ЭтаФорма[ИмяТаблицы].Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ ОБЪЕДИНЕНИЯ ЭЛЕМЕНТОВ (УДАЛЕНИЯ ДУБЛИКАТОВ)
#Область РаботаСДубликатами

&НаКлиенте
Процедура ОбъединитьСПредметамиСнабжения(Команда)
	
	 ТаблицаФормы = Элементы.ВторойКаталогПредметовСнабжения;
	 
	 ВыделенныеСтроки = ТаблицаФормы.ВыделенныеСтроки;
	 
	 ОбъединитьПредметыСнабжения(ТаблицаФормы, ВыделенныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьССоставляющимиЧастями(Команда)
	
	ТаблицаФормы = Элементы.ДеревоСпецификацииВторогоКаталога;
	
	ВыделенныеСтроки = ПолучитьВыделенныеСтрокиДереваСпецификации();
	
	ОбъединитьПредметыСнабжения(ТаблицаФормы, ВыделенныеСтроки);
	
КонецПроцедуры

//функция возвращает список предметов снабжения выделенных элементов структуры заказа
//если в массив элементов структуры встречаются группы  или не указан предмет снабжения - возвращает Неопределено
&НаСервереБезКонтекста
Функция ПолучитьМассивДубликатов(МассивЭлементовСтруктуры, ТипГруппа)
	
	МассивДубликатов = Новый Массив;
	КоличествоЭлементов = МассивЭлементовСтруктуры.Количество();
	
	Для каждого ЭлементМассива Из МассивЭлементовСтруктуры Цикл
		
		Если ЭлементМассива.Тип = ТипГруппа Или Не ЗначениеЗаполнено(ЭлементМассива.ПредметСнабжения) Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если Не МассивДубликатов.Найти(ЭлементМассива.ПредметСнабжения) = Неопределено И КоличествоЭлементов > 2 Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		МассивДубликатов.Добавить(ЭлементМассива.ПредметСнабжения);
		
	КонецЦикла;
	
	Возврат МассивДубликатов;
	
КонецФункции

&НаКлиенте
Процедура ОбъединитьПредметыСнабженияЭлементовСтруктурыСтарая(Команда)
	
	ТекущиеДанные = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, "Не выбран элемент в левом окне!");
		Возврат;
		
	ИначеЕсли ТекущиеДанные.Тип = ТипГруппа Или Не ЗначениеЗаполнено(ТекущиеДанные.ПредметСнабжения) Тогда
		
		ПоказатьПредупреждение(, "В левом окне выбрана группа или элемент без предмета снабжения или родитель выбранного элемента является группой!");
		Возврат;
		
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Не выбраны элементы в правом окне!");
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьПредметыСнабженияВОбработке(ТекущиеДанные.Ссылка, ВыделенныеСтроки) Тогда
		
		ПоказатьПредупреждение(, "Среди выделенных элементов или их потомков есть находящиеся в обработке! Действие запрещено");
		Возврат;
		
	КонецЕсли;
	
	Дубликаты = ПолучитьМассивДубликатов(ВыделенныеСтроки, ТипГруппа);
	
	Если Дубликаты = Неопределено Тогда
		
		ПоказатьПредупреждение(, "Среди выделенных элементов или их родителей есть группы и/или элементы без предмета снабжения или выделены элементы с одинаковыми предметами снабжения!");
		Возврат;
		
	КонецЕсли;
	
	Оригинал = ТекущиеДанные.ПредметСнабжения;
	
	Если СхлопнутьЭлементыСтруктуры(ТекущиеДанные.Ссылка, ВыделенныеСтроки, Дубликаты, Оригинал) Тогда
		
		Элементы.СтруктураПервогоКорабля.Обновить();
		Элементы.СтруктураВторогоКорабля.Обновить();
		Возврат;
		
	КонецЕсли;
	
	//АВ+
	Дубликаты.Добавить(Оригинал);
	
	СписокСохраняемыхРеквизитов = ПолучитьСписокСохраняемыхРеквизитов();
	
	ПараметрыОткрытия = Новый Структура("Дубликаты, ОригинальныйЭлемент, СписокСохраняемыхРеквизитов", Дубликаты, Оригинал, СписокСохраняемыхРеквизитов);
	
	ЗаполнитьТаблицуРодителейУдаляемыхСпецификаций(ВыделенныеСтроки, ТекущиеДанные.Ссылка);
	
	ПараметрыОткрытия.Вставить("ТаблицаРодителейУдаляемыхСпецификаций", ТаблицаРодителейУдаляемыхСпецификаций);
	ПараметрыОткрытия.Вставить("ПризнакЗИПОригинала", ТекущиеДанные.ЗИП);
	ПараметрыОткрытия.Вставить("СписокОбъединяемыхЭлементовСтруктуры", ПолучитьСписокОбъединяемыхЭлементовСтруктуры(ВыделенныеСтроки, ТекущиеДанные.Ссылка, ТипГруппа));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбъединитьПредметыСнабженияЭлементовСтруктурыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма", ПараметрыОткрытия, ЭтотОбъект, , , ,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

//Обработчик команды Удалить дубликаты
&НаКлиенте
Процедура ОбъединитьПредметыСнабженияЭлементовСтруктуры(Команда)
	
	ВыделенныеСтроки = Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки;
	ТекущиеДанные = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	
	ОригинальныйЭлемент = ТекущиеДанные.Ссылка;

	//Функция добавит ТекущиеДанные.Ссылка в массив ВыделенныеСтроки
	Если ЕстьПредметыСнабженияВОбработке(ТекущиеДанные.Ссылка, ВыделенныеСтроки) Тогда
		
		ПоказатьПредупреждение(, "Среди выделенных элементов или их потомков есть находящиеся в обработке! Действие запрещено");
		Возврат;
		
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		
		ПоказатьПредупреждение(, "Выделено менее двух элементов!");
		Возврат;
		
	КонецЕсли;	
		
	//1. Блок проверки
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Оригинал", ОригинальныйЭлемент);
	ПараметрыПроверки.Вставить("МассивОбъединяемыхЭлементовСтруктуры", ВыделенныеСтроки);
	
	РезультатПроверки = СтруктураЗаказаСервер.ПроверитьВозможностьОбъединенияЭлементовСтруктуры(ПараметрыПроверки);
	
	//2. Обработка
	
	Если РезультатПроверки.Действие = "СхлопываниеЭлементовСтруктуры" Тогда
		
		ВыделенныеСтроки.Удалить(ВыделенныеСтроки.Найти(ОригинальныйЭлемент));
		
		ПараметрыОбъединения = Новый Структура;
		ПараметрыОбъединения.Вставить("СсылкаПриемник", ОригинальныйЭлемент);
		ПараметрыОбъединения.Вставить("МассивСсылокИсточников", ВыделенныеСтроки);
		ПараметрыОбъединения.Вставить("ВыбраннаяКоманда", "Объединить");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбъединитьПредметыСнабженияЭлементовСтруктурыЗавершение", ЭтотОбъект);

		ОткрытьФорму("Обработка.РедактированиеСтруктурыИзделий.Форма.ФормаВыполнение", ПараметрыОбъединения, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли РезультатПроверки.Действие = "УдалениеДубликатовПредметовСнабжения" Тогда
		
		СписокСохраняемыхРеквизитов = ПолучитьСписокСохраняемыхРеквизитов();
		
		ПараметрыОткрытия = Новый Структура("Дубликаты, ОригинальныйЭлемент, СписокСохраняемыхРеквизитов", РезультатПроверки.Дубликаты, ТекущиеДанные.ПредметСнабжения, СписокСохраняемыхРеквизитов);
		
		ЗаполнитьТаблицуРодителейУдаляемыхСпецификаций(ВыделенныеСтроки, ТекущиеДанные.Ссылка);
		
		ПараметрыОткрытия.Вставить("ТаблицаРодителейУдаляемыхСпецификаций", ТаблицаРодителейУдаляемыхСпецификаций);
		ПараметрыОткрытия.Вставить("ПризнакЗИПОригинала", ТекущиеДанные.ЗИП);
		ПараметрыОткрытия.Вставить("СписокОбъединяемыхЭлементовСтруктуры", ПолучитьСписокОбъединяемыхЭлементовСтруктуры(ВыделенныеСтроки, ТекущиеДанные.Ссылка, ТипГруппа));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбъединитьПредметыСнабженияЭлементовСтруктурыЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма", ПараметрыОткрытия, ЭтотОбъект, , , ,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе
		
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Удаление невозможно: %1'"), РезультатПроверки.ОписаниеОтказа));
	
	КонецЕсли;
			
КонецПроцедуры


&НаКлиенте
Процедура ОбъединитьПредметыСнабженияЭлементовСтруктурыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы.СтруктураПервогоКорабля.Обновить();
	Элементы.СтруктураВторогоКорабля.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПредметыСнабженияВОбработке(Оригинал, Дубликаты)
	
	Дубликаты.Добавить(Оригинал);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения
	|	ИЗ
	|		Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|	ГДЕ
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В(&Дубликаты)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения
	|	ИЗ
	|		Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|	ГДЕ
	|		СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель В(&Дубликаты)) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений КАК СпецификацииПредметовСнабженияОчередьИзменений
	|		ПО втПредметыСнабжения.ПредметСнабжения = СпецификацииПредметовСнабженияОчередьИзменений.ПредметСнабжения";
	Запрос.УстановитьПараметр("Дубликаты", Дубликаты);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъединяемыхЭлементовСтруктуры(Дубликаты, Оригинал, ТипГруппа)
	
	СписокОбъединяемыхЭлементовСтруктуры = Новый СписокЗначений;
	
	СписокОбъединяемыхЭлементовСтруктуры.Добавить(Оригинал);
	
	ИндексКрайнегоДубликата = Дубликаты.Количество() - 1;
	
	Для каждого Дубликат Из Дубликаты Цикл
		
		РодительДубликата = Дубликат.Родитель;
		
		//	 Если (РодительДубликата.Тип = ТипГруппа Или Не ЗначениеЗаполнено(РодительДубликата.ПредметСнабжения)) 
		Если Не Дубликат = Оригинал Тогда
			
			СписокОбъединяемыхЭлементовСтруктуры.Добавить(Дубликат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокОбъединяемыхЭлементовСтруктуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуРодителейУдаляемыхСпецификаций(МассивЭлементовСтруктуры, Оригинал)
	
	ТаблицаРодителейУдаляемыхСпецификаций.Очистить(); 
	
	Для каждого ЭлементМассива Из МассивЭлементовСтруктуры Цикл
		
		РодительЭлемента = ЭлементМассива.Родитель;
		ПредметСнабжения = РодительЭлемента.ПредметСнабжения;
		
		Если РодительЭлемента.Тип = ТипГруппа Или Не ЗначениеЗаполнено(ПредметСнабжения) 
			Или ЭлементМассива.Тип = ТипГруппа Или Не ЗначениеЗаполнено(ЭлементМассива.ПредметСнабжения) 
			Или (ЭлементМассива.ПредметСнабжения = Оригинал.ПредметСнабжения И ПредметСнабжения = Оригинал.Родитель.ПредметСнабжения) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаРодителейУдаляемыхСпецификаций.Добавить();
		СтрокаТаблицы.ПредметСнабжения = ПредметСнабжения;
		СтрокаТаблицы.СоставляющаяЧасть = ЭлементМассива.ПредметСнабжения;
		СтрокаТаблицы.ЗИП = ЭлементМассива.ЗИП;
		
	КонецЦикла;
	
КонецПроцедуры

//функция схлопывает элементы структуры, если все выделенные элементы ссылаются один предмет снабжения
//возвращает истина - произошло схлопывание, удаление дубликатов не требуется; ложь - требуется удаление дубликатов
&НаКлиенте
Функция СхлопнутьЭлементыСтруктуры(ОригинальныйЭлемент, ВыделенныеСтроки, ПредметыСнабжения, ПредметСнабжения)
	
	Для каждого ТекПредметСнабжения Из ПредметыСнабжения Цикл
		
		Если Не ТекПредметСнабжения = ПредметСнабжения Тогда //выбраны разные предметы снабжения, нужно вызывать удаление дубликатов
			
			Возврат Ложь;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	//АВ+
	ВыделенныеСтроки.Удалить(ВыделенныеСтроки.Найти(ОригинальныйЭлемент));
	
	ПараметрыОбъединения = Новый Структура;
	ПараметрыОбъединения.Вставить("СсылкаПриемник", ОригинальныйЭлемент);
	ПараметрыОбъединения.Вставить("МассивСсылокИсточников", ВыделенныеСтроки);
	ПараметрыОбъединения.Вставить("ВыбраннаяКоманда", "Объединить");
	
	ОткрытьФорму("Обработка.РедактированиеСтруктурыИзделий.Форма.ФормаВыполнение", ПараметрыОбъединения, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСохраняемыхРеквизитов()
	
	СписокСохраняемыхРеквизитов = Новый СписокЗначений;
	СписокСохраняемыхРеквизитов.Добавить("Обозначение", "Обозначение");
	СписокСохраняемыхРеквизитов.Добавить("ОбозначениеТранслитированное", "Обозначение транслитерированное");
	СписокСохраняемыхРеквизитов.Добавить("ДокументНаПоставку", "Документ на поставку");
	СписокСохраняемыхРеквизитов.Добавить("НомерОСК", "Номер ОСК");
	СписокСохраняемыхРеквизитов.Добавить("ФНН", "ФНН");
	СписокСохраняемыхРеквизитов.Добавить("NSN", "NSN");
	СписокСохраняемыхРеквизитов.Добавить("INCAT", "INCAT");
	СписокСохраняемыхРеквизитов.Добавить("ИзготовителиИПоставщики", "Табличная часть: Изготовители и поставщики");
	СписокСохраняемыхРеквизитов.Добавить("Характеристики", "Табличная часть: Характеристики");
	
	Возврат СписокСохраняемыхРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ОбъединитьПредметыСнабжения(ТаблицаФормы, ВыделенныеСтроки, Ссылка = Неопределено)
	
	ТекущиеДанные = Элементы.ПервыйКаталогПредметовСнабжения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, "Не выбран элемент в левом окне!");
		Возврат;
		
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Не выбраны элементы в правом окне!");
		Возврат;
		
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		
		Ссылка = ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
	Если Не ВыделенныеСтроки.Найти(Ссылка) = Неопределено Тогда
		
		ПоказатьПредупреждение(, "Нельзя объединить элемент с самим собой!");
		Возврат;
		
	КонецЕсли;
	
	//АВ+
	ВыделенныеСтроки.Добавить(Ссылка);
	
	ДополнительныеПараметры = Новый Структура("ТаблицаФормы, ВыделенныеСтроки, ОригинальныйЭлемент", ТаблицаФормы, ВыделенныеСтроки, Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбъединитьПредметыСнабженияЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, "Объединить выделенные предметы снабжения?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьПредметыСнабженияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СписокСохраняемыхРеквизитов = ПолучитьСписокСохраняемыхРеквизитов();
		
		ПараметрыОткрытия = Новый Структура("Дубликаты, ОригинальныйЭлемент, СписокСохраняемыхРеквизитов", ДополнительныеПараметры.ВыделенныеСтроки, ДополнительныеПараметры.ОригинальныйЭлемент, СписокСохраняемыхРеквизитов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОбъединенияПредметовСнабжения", ЭтаФорма, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Сообщить("Действие отменено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОбъединенияПредметовСнабжения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = Неопределено И РезультатЗакрытия Тогда
		
		Элементы.ПервыйКаталогПредметовСнабжения.Обновить();
		ДополнительныеПараметры.ТаблицаФормы.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДубликаты(Команда)
	
	ВызватьУдалениеДубликатов(Элементы.ВторойКаталогПредметовСнабжения, Элементы.ВторойКаталогПредметовСнабжения.ВыделенныеСтроки, Элементы.ВторойКаталогПредметовСнабжения.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДубликатыВДереве(Команда)
	
	ВыделенныеСтроки = ПолучитьВыделенныеСтрокиДереваСпецификации();
	
	ВызватьУдалениеДубликатов(Элементы.ДеревоСпецификацииВторогоКаталога, ВыделенныеСтроки, Элементы.ДеревоСпецификацииВторогоКаталога.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьУдалениеДубликатов(ТаблицаФормы, ВыделенныеСтроки, ТекущиеДанные)
	
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		
		ПоказатьПредупреждение(, "Выбрано менее двух элементов!");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Дубликаты", ВыделенныеСтроки);
	ПараметрыОткрытия.Вставить("ОригинальныйЭлемент", ТекущиеДанные.Ссылка);
	
	СписокСохраняемыхРеквизитов = Новый СписокЗначений;
	СписокСохраняемыхРеквизитов.Добавить("Обозначение", "Обозначение");
	СписокСохраняемыхРеквизитов.Добавить("ОбозначениеТранслитированное", "Обозначение транслитерированное");
	СписокСохраняемыхРеквизитов.Добавить("ДокументНаПоставку", "Документ на поставку");
	СписокСохраняемыхРеквизитов.Добавить("НомерОСК", "Номер ОСК");
	СписокСохраняемыхРеквизитов.Добавить("ФНН", "ФНН");
	СписокСохраняемыхРеквизитов.Добавить("NSN", "NSN");
	СписокСохраняемыхРеквизитов.Добавить("INCAT", "INCAT");
	СписокСохраняемыхРеквизитов.Добавить("ИзготовителиИПоставщики", "Табличная часть: Изготовители и поставщики");
	СписокСохраняемыхРеквизитов.Добавить("Характеристики", "Табличная часть: Характеристики");
	
	ПараметрыОткрытия.Вставить("СписокСохраняемыхРеквизитов", СписокСохраняемыхРеквизитов);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОбъединенияПредметовСнабжения", ЭтаФорма, Новый Структура("ТаблицаФормы", ТаблицаФормы));
	
	ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПоказатьВСписке

&НаСервере
Функция НайтиЭлементСтруктурыПоПС(Корабль, ПредметСнабжения)
	
	Если ТекущийВыбранныйЭлемент.ПредметСнабжения = ПредметСнабжения И СписокДалее.Количество() > 1 Тогда
		Найдено = СписокДалее.НайтиПоЗначению(ТекущийВыбранныйЭлемент);
		Если Найдено = Неопределено Тогда
			Индекс = -1;
		Иначе
			Индекс = СписокДалее.Индекс(Найдено);
		КонецЕсли; 
		Индекс = Индекс + 1;
		Если Индекс > СписокДалее.Количество()-1 Тогда
			Индекс = 0;
		КонецЕсли;
		Возврат СписокДалее[Индекс].Значение;
	Иначе
		СписокДалее.Очистить();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения";
	
	Запрос.УстановитьПараметр("Владелец", Корабль);
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Пока Выборка.Следующий() Цикл
			СписокДалее.Добавить(Выборка.Ссылка,);
		КонецЦикла; 
		Возврат СписокДалее[0].Значение;
	Иначе
		Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
	КонецЕсли; 
	
КонецФункции
 
&НаСервере
Процедура ПоказатьВСпискеНаСервере(ЭтоПервыйКорабль, ТекДанные)
	
	СлеваСтруктура  = (Элементы.ГруппаПервыйНаборДанных.ТекущаяСтраница = Элементы.ГруппаПервыйНаборДанныхСтруктураКорабля);
	СлеваКаталогПС  = (Элементы.ГруппаПервыйНаборДанных.ТекущаяСтраница = Элементы.ГруппаПервыйНаборДанныхКаталогПредметовСнабжения);
	СправаСтруктура = (Элементы.ГруппаВторойНаборДанных.ТекущаяСтраница = Элементы.ГруппаВторойНаборДанныхСтруктураКорабля);
	СправаКаталогПС = (Элементы.ГруппаВторойНаборДанных.ТекущаяСтраница = Элементы.ГруппаВторойНаборДанныхКаталогПредметовСнабжения);
		
	Если СлеваСтруктура И СправаСтруктура Тогда
		
		СписокДалее.Очистить();
		ТекущийВыбранныйЭлемент = ТекДанные;
		Если ПервыйКорабль = ВторойКорабль Тогда
			Если ЭтоПервыйКорабль Тогда
				Элементы.СтруктураВторогоКорабля.ТекущаяСтрока = ТекДанные;
			Иначе
				Элементы.СтруктураПервогоКорабля.ТекущаяСтрока = ТекДанные;
			КонецЕсли; 
		Иначе
			Если ЭтоПервыйКорабль Тогда
				Элементы.СтруктураВторогоКорабля.ТекущаяСтрока = НайтиЭлементСтруктурыПоПС(ВторойКорабль, ТекДанные.ПредметСнабжения);
			Иначе
				Элементы.СтруктураПервогоКорабля.ТекущаяСтрока = НайтиЭлементСтруктурыПоПС(ПервыйКорабль, ТекДанные.ПредметСнабжения);
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли СлеваКаталогПС И СправаКаталогПС Тогда
		
		Если ЭтоПервыйКорабль Тогда
			Элементы.ВторойКаталогПредметовСнабжения.ТекущаяСтрока = ТекДанные;
		Иначе
			Элементы.ПервыйКаталогПредметовСнабжения.ТекущаяСтрока = ТекДанные;
		КонецЕсли; 
		
	ИначеЕсли СлеваКаталогПС И СправаСтруктура Тогда
		
		Если ЭтоПервыйКорабль Тогда
			ТекущийВыбранныйЭлемент = НайтиЭлементСтруктурыПоПС(ВторойКорабль, ТекДанные);
			Элементы.СтруктураВторогоКорабля.ТекущаяСтрока = ТекущийВыбранныйЭлемент;
		Иначе
			Элементы.ПервыйКаталогПредметовСнабжения.ТекущаяСтрока = ТекДанные.ПредметСнабжения;
		КонецЕсли; 
		
	ИначеЕсли СлеваСтруктура И СправаКаталогПС Тогда
		
		Если ЭтоПервыйКорабль Тогда
			Элементы.ВторойКаталогПредметовСнабжения.ТекущаяСтрока = ТекДанные.ПредметСнабжения;
		Иначе
			ТекущийВыбранныйЭлемент = НайтиЭлементСтруктурыПоПС(ПервыйКорабль, ТекДанные);
			Элементы.СтруктураПервогоКорабля.ТекущаяСтрока = ТекущийВыбранныйЭлемент;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент.Имя;
	
	ЭтоПервыйКорабль = Ложь;
	Если ТекЭлементФормы = "СтруктураПервогоКорабля" Тогда
		ТекДанные = Элементы.СтруктураПервогоКорабля.ТекущаяСтрока;
		ЭтоПервыйКорабль = Истина;
	ИначеЕсли ТекЭлементФормы = "СтруктураВторогоКорабля" Тогда 
		ТекДанные = Элементы.СтруктураВторогоКорабля.ТекущаяСтрока;
	ИначеЕсли ТекЭлементФормы = "ПервыйКаталогПредметовСнабжения" Тогда 
		ТекДанные = Элементы.ПервыйКаталогПредметовСнабжения.ТекущаяСтрока;
		ЭтоПервыйКорабль = Истина;
	ИначеЕсли ТекЭлементФормы = "ВторойКаталогПредметовСнабжения" Тогда 
		ТекДанные = Элементы.ВторойКаталогПредметовСнабжения.ТекущаяСтрока;
	КонецЕсли; 
	
	//Если Элементы.ГруппаПервыйНаборДанных.ТекущаяСтраница = Элементы.ГруппаПервыйНаборДанныхСтруктураКорабля Тогда
	//	ТекДанныеПервого = Элементы.СтруктураПервогоКорабля.ТекущаяСтрока;
	//ИначеЕсли ТекЭлементФормы = "СтруктураВторогоКорабля" Тогда 
	//Иначе
	//	ТекДанныеПервого = Элементы.ПервыйКаталогПредметовСнабжения.ТекущаяСтрока;
	//КонецЕсли; 
	
	ПоказатьВСпискеНаСервере(ЭтоПервыйКорабль, ТекДанные);
	
КонецПроцедуры
#КонецОбласти 

#Область ПолотекстовыйПоискПоКаталогуПС

&НаСервере
Функция ПоискПоКаталогу(СписокЭлементовКаталогаПС)
	
	//настроить параметры поиска
	мОбластьПоиска = Новый Массив;
	РазмерПорции = 100;
	//СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(?(Найти(СтрокаПоиска,"#"),СтрокаПоиска,"#"+СтрокаПоиска), РазмерПорции);
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	мОбластьПоиска.Добавить(Метаданные.Справочники.КаталогПредметовСнабжения);
	СписокПоиска.ОбластьПоиска = мОбластьПоиска;
		
	Попытка
		
		СписокПоиска.ПерваяЧасть();
		
	Исключение
		Возврат НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
	КонецПопытки;
	
	Если СписокПоиска.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено.'");
	КонецЕсли;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
	КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	//сформировать список найденных элементов
	СписокЭлементовКаталогаПС.Очистить();
	НачальнаяПозиция = 0;
	ЕстьСледующаяПорция = Истина;
	мКаталогПС = Новый Массив;

	//обработать по порциям результаты ППД
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По Мин(СписокПоиска.ПолноеКоличество()-НачальнаяПозиция,РазмерПорции)-1 Цикл
			
			//сформировать элемент результата
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			ЭлементСсылка = Элемент.Значение.Ссылка;
			//Основание = Элемент.Метаданные.ПредставлениеОбъекта + " """
			//            + Элемент.Представление + """ - " + Элемент.Описание;
			//Если Элемент.Метаданные = Метаданные.Справочники.КаталогПредметовСнабжения Тогда
				мКаталогПС.Добавить(ЭлементСсылка);
			//	Продолжить;
			//Иначе
			//	Продолжить;
			//КонецЕсли;
			
		КонецЦикла;
		
		КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокЭлементовКаталогаПС.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено.'");
	КонецЕсли;

	ПоследнееЧисло = Прав(СписокЭлементовКаталогаПС.Количество(),1);
	Возврат НСтр("ru = 'Найдено " + Формат(СписокЭлементовКаталогаПС.Количество(),"ЧГ=0") + ?(ПоследнееЧисло="1"," элемент",?(Найти("234",ПоследнееЧисло)," элемента"," элементов")) + ".'");
	
КонецФункции

&НаСервере
Функция СтрокаПоискаПриИзмененииНаСервере()
	
	Если СтрДлина(СокрЛП(СтрокаПоиска)) < 3 Тогда
	
		Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
		Возврат "Слишком короткий запрос!";
	
	КонецЕсли; 
	
	СписокЭлементовКаталогаПС =  РеквизитФормыВЗначение("Основания");
	
	
	//получить результаты поиска
	ТекстОшибки = ПоискПоКаталогу(СписокЭлементовКаталогаПС);
	
	
	Если Лев(ТекстОшибки,7) = "Найдено" Тогда
		
		//вернуть таблицу оснований
		ЗначениеВРеквизитФормы(СписокЭлементовКаталогаПС, "Основания");
		
		Если НЕ РасширенныйПоиск Тогда
			РежимОтображенияДоПримененияПолнотекстовогоПоиска = Строка(Элементы.ВторойКаталогПредметовСнабжения.Отображение);
		КонецЕсли;
		Элементы.ВторойКаталогПредметовСнабжения.Отображение = ОтображениеТаблицы.ВторойКаталогПредметовСнабжения;
		
		//установить отбор по списку найденных элементов
#Если НЕ ВнешнееСоединение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВторойКаталогПредметовСнабжения,"ОтборПоПолнотекстовомуПоискуУстановлен",Истина);
#КонецЕсли
		Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
#Если НЕ ВнешнееСоединение Тогда
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВторойКаталогПредметовСнабжения,"ОтборПоПолнотекстовомуПоискуУстановлен",Ложь);
#КонецЕсли
	
	Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ОшибкаПолнотекстовыйПоискФон;
	
	Возврат ТекстОшибки;
	   	
КонецФункции


&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Состояние("Выполняется поиск...");
	
	Если СтрокаПоиска <> "" Тогда
		
		ТекстОшибки = СтрокаПоискаПриИзмененииНаСервере();
		Если Лев(ТекстОшибки,7) = "Найдено" Тогда
			ПоказатьОповещениеПользователя(ТекстОшибки);
			РасширенныйПоиск = Истина;
			Основание = Основания.НайтиСтроки(Новый Структура("ЭлементВедомостиЗИП", Элементы.ВторойКаталогПредметовСнабжения.ТекущаяСтрока));
			Если Основание.Количество() = 0 Тогда
				ОснованиеВыбора = "";
			Иначе
				ОснованиеВыбора = Основание[0].Основание;
			КонецЕсли;
		Иначе
			Если НЕ ТекстОшибки = НСтр("ru = 'Ничего не найдено'") Тогда
				ПоказатьОповещениеПользователя(ТекстОшибки);
			Иначе
				Если РасширенныйПоиск И Строка(Элементы.ВторойКаталогПредметовСнабжения.Отображение) <> РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
					Если РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Иерархический список'") Тогда
						Элементы.ВторойКаталогПредметовСнабжения.Отображение = ОтображениеТаблицы.ИерархическийСписок;
					ИначеЕсли РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Дерево'") Тогда
						Элементы.ВторойКаталогПредметовСнабжения.Отображение = ОтображениеТаблицы.Дерево;
					КонецЕсли;
				КонецЕсли;
				РасширенныйПоиск = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если РасширенныйПоиск И Строка(Элементы.ВторойКаталогПредметовСнабжения.Отображение) <> РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
			Если РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Иерархический список'") Тогда
				Элементы.ВторойКаталогПредметовСнабжения.Отображение = ОтображениеТаблицы.ИерархическийСписок;
			ИначеЕсли РежимОтображенияДоПримененияПолнотекстовогоПоиска = НСтр("ru = 'Дерево'") Тогда
				Элементы.ВторойКаталогПредметовСнабжения.Отображение = ОтображениеТаблицы.Дерево;
			КонецЕсли;
		КонецЕсли;
		РасширенныйПоиск = Ложь;
#Если НЕ ВнешнееСоединение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ВторойКаталогПредметовСнабжения,"ОтборПоПолнотекстовомуПоискуУстановлен",Ложь);
#КонецЕсли
		ОснованиеВыбора = "";
	КонецЕсли;
	   	
КонецПроцедуры

#КонецОбласти 

#Область ПоказатьВСтруктуре

&НаКлиенте
Процедура ПоказатьВСтруктуреСлева(Команда)
	
	Если НЕ ПервыйКорабль = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Корабль Тогда
		
		ПервыйКорабль = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Корабль;
		
		СформироватьСтруктуруПервогоКорабля();	
		
		УстановитьВидимостьКнопок();
		
	КонецЕсли; 
	
	Элементы.СтруктураПервогоКорабля.ТекущаяСтрока = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Ссылка;
	Элементы.ГруппаПервыйНаборДанных.ТекущаяСтраница = Элементы.ГруппаПервыйНаборДанныхСтруктураКорабля;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВСтруктуреСлева(Команда)
	
	Если НЕ ПервыйКорабль = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Корабль Тогда
		
		ПервыйКорабль = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Корабль;
		
		СформироватьСтруктуруПервогоКорабля();	
		
		УстановитьВидимостьКнопок();
		
	КонецЕсли; 
	
	ЭлементОтбора = СтруктураПервогоКорабля.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредметСнабжения");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.ПредметСнабжения;
	ЭлементОтбора.Использование = Истина;	
	
	Элементы.СтруктураПервогоКорабля.Отображение = ОтображениеТаблицы.Список;
	Элементы.ГруппаПервыйНаборДанных.ТекущаяСтраница = Элементы.ГруппаПервыйНаборДанныхСтруктураКорабля;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтборВСтруктуреСлева(Команда)
	
	Для каждого ЭлементОтбора Из СтруктураПервогоКорабля.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредметСнабжения") Тогда
			
			ЭлементОтбора.Использование = Ложь;	
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Элементы.СтруктураПервогоКорабля.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВСтруктуреСправа(Команда)
	Если НЕ ВторойКорабль = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Корабль Тогда
		
		ВторойКорабль = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Корабль;
		
		СформироватьСтруктуруВторогоКорабля();	
		
		УстановитьВидимостьКнопок();
		
	КонецЕсли; 
	
	ЭлементОтбора = СтруктураВторогоКорабля.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредметСнабжения");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.ПредметСнабжения;
	ЭлементОтбора.Использование = Истина;	
	
	Элементы.СтруктураВторогоКорабля.Отображение = ОтображениеТаблицы.Список;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтборВСтруктуреСправа(Команда)
	Для каждого ЭлементОтбора Из СтруктураВторогоКорабля.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредметСнабжения") Тогда
			
			ЭлементОтбора.Использование = Ложь;	
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Элементы.СтруктураВторогоКорабля.Отображение = ОтображениеТаблицы.ИерархическийСписок;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСтруктуреСправа(Команда)
	
	Если НЕ ВторойКорабль = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Корабль Тогда
		
		ВторойКорабль = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Корабль;
		
		СформироватьСтруктуруВторогоКорабля();	
		
		УстановитьВидимостьКнопок();
		
	КонецЕсли; 
	
	Элементы.СтруктураВторогоКорабля.ТекущаяСтрока = Элементы.ПрименяемостьВторогоИзделия.ТекущиеДанные.Ссылка;
	
	Элементы.ГруппаВторойНаборДанных.ТекущаяСтраница = Элементы.ГруппаВторойНаборДанныхСтруктураКорабля;
	
КонецПроцедуры

// Работа с пометками ++
&НаСервере
Процедура УстановитьСнятьФлагНаСервере(Ссылка, Флаг)
	
	НовыйФлаг = НЕ Флаг;
	
	Если НовыйФлаг Тогда // Поставили флаг, пишем соот. запись
		МенеджерЗаписи = РегистрыСведений.ПометкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭлементСтруктуры = Ссылка;
		МенеджерЗаписи.Пользователь     = ПеремТекущийПользователь;
		МенеджерЗаписи.Дата = ТекущаяДата();
		МенеджерЗаписи.Флаг = Истина;
		МенеджерЗаписи.Записать();
	Иначе // сняли флаг, удаляем запись
		МенеджерЗаписи = РегистрыСведений.ПометкиПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭлементСтруктуры = Ссылка;
		МенеджерЗаписи.Пользователь     = ПеремТекущийПользователь;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлаг(Команда)
	
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент.Имя;
	
	Если ТекЭлементФормы = "СтруктураПервогоКорабля" Тогда
		ТекДанные = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	ИначеЕсли ТекЭлементФормы = "СтруктураВторогоКорабля" Тогда 
		ТекДанные = Элементы.СтруктураВторогоКорабля.ТекущиеДанные;
	ИначеЕсли ТекЭлементФормы = "ПервыйКаталогПредметовСнабжения" Тогда 
		ТекДанные = Элементы.ПервыйКаталогПредметовСнабжения.ТекущиеДанные;
	ИначеЕсли ТекЭлементФормы = "ВторойКаталогПредметовСнабжения" Тогда 
		ТекДанные = Элементы.ВторойКаталогПредметовСнабжения.ТекущиеДанные;
	КонецЕсли;
	
	УстановитьСнятьФлагНаСервере(ТекДанные.Ссылка, ТекДанные.Флаг);
	
	Элементы[ТекЭлементФормы].Обновить();
	
КонецПроцедуры

// Работа с пометками --


// Переместить в архив ++

&НаСервере
Функция НайтиПапкуАрхивНаКорабле(Корабль,Создавать=Истина)
	
	Если НЕ ЗначениеЗаполнено(Корабль) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Корабль
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПометкаУдаления
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка)
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = ""Архив""";
	
	Запрос.УстановитьПараметр("Корабль", Корабль);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда // Нашли, возвращаем
		
		Возврат Выборка.Ссылка;
		
	ИначеЕсли Создавать Тогда 
		
		НовЭлемент = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		НовЭлемент.Владелец = Корабль;
		НовЭлемент.Наименование = "Архив";
		НовЭлемент.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
		НовЭлемент.Записать();
		Возврат НовЭлемент.Ссылка;
		
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции
 
&НаСервере
Процедура ПереместитьВАрхивНаСервере(ВыделенныеСтроки, Корабль)
	
	ПапкаАрхив = НайтиПапкуАрхивНаКорабле(Корабль);
	
	Для каждого Строка Из ВыделенныеСтроки Цикл
		
		Родитель 		 = Строка.Родитель;
		ПредметСнабжения = Строка.ПредметСнабжения;
		//если элемент имеет предмет снабжения и его родитель имеет предмет снабжения, тогда удаляем составляющую часть из спецификации родителя
		Если ЗначениеЗаполнено(ПредметСнабжения) И ЗначениеЗаполнено(Родитель) И ЗначениеЗаполнено(Родитель.ПредметСнабжения) Тогда
			
			РезультатУдаленияСпецификации = СтруктураЗаказаСервер.ОбработатьИзменениеСпецификации(Родитель.ПредметСнабжения, ПредметСнабжения, Строка.ЗИП, Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление);
			
			Если Не РезультатУдаленияСпецификации.Выполнено Тогда
				
				Сообщить(РезультатУдаленияСпецификации.Описание, СтатусСообщения.Важное);
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СпрОбъект = Строка.ПолучитьОбъект();
		СпрОбъект.Родитель = ПапкаАрхив;
		
		Попытка
			СпрОбъект.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
			Сообщить("Не удалось переместить в архив! "+Ошибка);
			Прервать;
		КонецПопытки; 
	КонецЦикла; 
		
КонецПроцедуры

&НаСервере
Функция ПолучитьРодителяСтроки(ТекДанные)
	
	Возврат ТекДанные.Родитель;
	
КонецФункции

&НаКлиенте
Процедура ПереместитьВАрхив(Команда)
	
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент.Имя;
	
	Если ТекЭлементФормы = "СтруктураПервогоКорабля" Тогда
		ВыделенныеСтроки = Элементы.СтруктураПервогоКорабля.ВыделенныеСтроки;
		Корабль   = ПервыйКорабль;
	ИначеЕсли ТекЭлементФормы = "СтруктураВторогоКорабля" Тогда 
		ВыделенныеСтроки = Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки;
		Корабль   = ВторойКорабль;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереместитьВАрхивЗавершение", ЭтаФорма, Новый Структура("ВыделенныеСтроки, Корабль, ТекЭлементФормы", ВыделенныеСтроки, Корабль, ТекЭлементФормы));
	
	ПоказатьВопрос(ОписаниеОповещения, "Переместить выделенные элементы в Архив?", РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВАрхивЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
		Корабль = ДополнительныеПараметры.Корабль;
		ТекЭлементФормы = ДополнительныеПараметры.ТекЭлементФормы;
		
		Родитель = ПолучитьРодителяСтроки(ВыделенныеСтроки[0]);
		
		ПереместитьВАрхивНаСервере(ВыделенныеСтроки, Корабль);
		
		Элементы[ТекЭлементФормы].Обновить();
		
		Элементы[ТекЭлементФормы].ТекущаяСтрока = Родитель;
		
	КонецЕсли;

КонецПроцедуры
 

// Переместить в архив --

// Удалить папку архив ++
&НаКлиенте
Процедура УдалитьАрхив(Команда)
	
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент.Имя;
	
	Если ТекЭлементФормы = "СтруктураПервогоКорабля" Тогда
		ЭлементСтруктуры = Элементы.СтруктураПервогоКорабля.ТекущаяСтрока;
	ИначеЕсли ТекЭлементФормы = "СтруктураВторогоКорабля" Тогда 
		ЭлементСтруктуры = Элементы.СтруктураВторогоКорабля.ТекущаяСтрока;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьАрхивЗавершение", ЭтаФорма, Новый Структура("ЭлементСтруктуры, ТекЭлемент", ЭлементСтруктуры, ТекЭлементФормы));
	
	ПоказатьВопрос(ОписаниеОповещения, "Внимание!!! Выполнение действия приведет к необратимому удалению выделенных элементов и всех их подчиненных. Продолжить?", РежимДиалогаВопрос.ДаНет); 

КонецПроцедуры

&НаКлиенте
Процедура УдалитьАрхивЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		РезультатУдаленияЭлемента = СтруктураЗаказаСервер.УдалитьЭлементСтруктурыЗаказа(ДополнительныеПараметры.ЭлементСтруктуры);
		
		Если РезультатУдаленияЭлемента.Выполнено Тогда
			
			Элементы[ДополнительныеПараметры.ТекЭлемент].Обновить();
			
		Иначе
			
			Сообщить(РезультатУдаленияЭлемента.Описание, СтатусСообщения.Важное);
			
		КонецЕсли;
		
	Иначе
		
		ПоказатьПредупреждение(, "Прервано пользователем!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьКоличествоНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКоличество(Команда)
	СкопироватьКоличествоНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкопироватьКоличествоДляПодчиненныхНаСервере(ТекДанныеПриемник,ТекДанныеИсточник)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКоличествоДляПодчиненных(Команда)
	МассивСсылокИсточников = Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки;
	
	Если НЕ МассивСсылокИсточников.Количество()= 1 Тогда
	
		ПоказатьПредупреждение(, "Необходимо выделить только один элемент структуры в правом окне.",, "Действие запрещено");
		Возврат;	
	
	КонецЕсли;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("МассивСсылокИсточников", МассивСсылокИсточников);
	
	ТекДанныеПриемник = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	ТекДанныеИсточник = Элементы.СтруктураВторогоКорабля.ТекущиеДанные;
	
	СкопироватьКоличествоДляПодчиненныхНаСервере(ТекДанныеПриемник,ТекДанныеИсточник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВторойКорабльИспользованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ПоказатьЗначение(,ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПервыйКорабльИспользованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ПоказатьЗначение(,ТекущиеДанные.Ссылка);

КонецПроцедуры

// Удалить папку архив --


// ++ 26.09.2018 11:49:59 Базунов Д.А. Задача: 
// Фильтры

&НаСервереБезКонтекста
Функция УдалитьКомментарии(Знач Текст)
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(СокрЛП(Текст));
	Сч = 1;
	Пока Сч <= ТД.КоличествоСтрок() Цикл
		ТекСтрока = СокрЛП(ТД.ПолучитьСтроку(Сч));
		Если ТекСтрока = "" ИЛИ Лев(ТекСтрока,2) = "//" Тогда
			ТД.УдалитьСтроку(Сч);
		Иначе
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ТД.ПолучитьТекст();
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаПервый()
	
	Возврат 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Наименование КАК Наименование,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	КаталогПредметовСнабжения.НомерОСК КАК НомерОСК,
	|	КаталогПредметовСнабжения.ФНН КАК ФНН,
	|	КаталогПредметовСнабжения.NSN КАК NSN,
	|	ЕСТЬNULL(КодыINCATПредставление.Представление, """") КАК INCAT,
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(КаталогПредметовСнабжения.Комментарий КАК СТРОКА(300)) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА КаталогПредметовСнабжения.Ссылка В
	|				(ВЫБРАТЬ
	|					СпецификацииПредметовСнабженияИзменения.ПредметСнабжения
	|				ИЗ
	|					РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений КАК СпецификацииПредметовСнабженияИзменения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбновляютсяСтруктурыЗаказов,
	|	ЕСТЬNULL(ПометкиПользователей.Флаг, ЛОЖЬ) КАК Флаг,
	|	"""" КАК ГруппировочноеПолеФильтра
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПометкиПользователей КАК ПометкиПользователей
	|		ПО (ПометкиПользователей.ЭлементСтруктуры = КаталогПредметовСнабжения.Ссылка)
	|			И (ПометкиПользователей.Пользователь = &ТекущийПользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыINCATПредставление КАК КодыINCATПредставление
	|		ПО КаталогПредметовСнабжения.Ссылка = КодыINCATПредставление.ПредметСнабжения	
	|ГДЕ
	|	ИСТИНА";
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаВторой()
	
	Возврат 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Наименование КАК Наименование,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|	КаталогПредметовСнабжения.НомерОСК КАК НомерОСК,
	|	КаталогПредметовСнабжения.ФНН КАК ФНН,
	|	КаталогПредметовСнабжения.NSN КАК NSN,
	|	ЕСТЬNULL(КодыINCATПредставление.Представление, """") КАК INCAT,
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(КаталогПредметовСнабжения.Комментарий КАК СТРОКА(300)) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА КаталогПредметовСнабжения.Ссылка В
	|				(ВЫБРАТЬ
	|					СпецификацииПредметовСнабженияИзменения.ПредметСнабжения
	|				ИЗ
	|					РегистрСведений.СпецификацииПредметовСнабженияОчередьИзменений КАК СпецификацииПредметовСнабженияИзменения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбновляютсяСтруктурыЗаказов,
	|	ЕСТЬNULL(ПометкиПользователей.Флаг, ЛОЖЬ) КАК Флаг,
	|	"""" КАК ГруппировочноеПолеФильтра	
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПометкиПользователей КАК ПометкиПользователей
	|		ПО (ПометкиПользователей.ЭлементСтруктуры = КаталогПредметовСнабжения.Ссылка)
	|			И (ПометкиПользователей.Пользователь = &ТекущийПользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыINCATПредставление КАК КодыINCATПредставление
	|		ПО КаталогПредметовСнабжения.Ссылка = КодыINCATПредставление.ПредметСнабжения	
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ОтборПоПолнотекстовомуПоискуУстановлен
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КаталогПредметовСнабжения.Ссылка В (&ОтборПоПолнотекстовомуПоиску)
	|		КОНЕЦ";
	
КонецФункции
 

&НаСервере
Процедура УстановитьОтборКаталогаПредметовСнабжения(ИсточникФильтра = "")
	
	Если ИсточникФильтра = "" Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапросаВиртуальныхТаблиц = "";
	ТекстУсловияЗапроса = "";
	
	Если ИсточникФильтра = "Первый" Тогда
		
		ВыбранныйАлгоритм = ВыбранныйАлгоритмПервый;
		ТекстЗапроса 	  = ТекстЗапросаПервый();
		СписокПС 	 	  = ПервыйКаталогПредметовСнабжения;
		
	ИначеЕсли ИсточникФильтра = "Второй" Тогда
		
		ВыбранныйАлгоритм = ВыбранныйАлгоритмВторой;
		ТекстЗапроса 	  = ТекстЗапросаВторой();
		СписокПС 	 	  = ВторойКаталогПредметовСнабжения;
		
	КонецЕсли;	
	
	СписокПС.ДинамическоеСчитываниеДанных = Истина;
	
	ЕстьАлгоритм = ЗначениеЗаполнено(ВыбранныйАлгоритм);
	
	Если ЕстьАлгоритм Тогда
		
		Если ЗначениеЗаполнено(ВыбранныйАлгоритм.ТекстЗапросаВиртуальныхТаблиц) Тогда
			
			СписокПС.ДинамическоеСчитываниеДанных = ВыбранныйАлгоритм.ДинамическоеСчитываниеДанныхВДинамическомСписке;
			ТекстЗапросаВиртуальныхТаблиц = ВыбранныйАлгоритм.ТекстЗапросаВиртуальныхТаблиц + "
			|;
			|";
			
		КонецЕсли; 
		
		ТекстЗапросаГруппировочногоПоля = УдалитьКомментарии(ВыбранныйАлгоритм.ТекстЗапросаГруппировочногоПоля);
		
		Если ЗначениеЗаполнено(ТекстЗапросаГруппировочногоПоля) Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """"" КАК ГруппировочноеПолеФильтра", ТекстЗапросаГруппировочногоПоля + " КАК ГруппировочноеПолеФильтра");
			
		КонецЕсли; 
		
		ТекстУсловияЗапроса = ТекстУсловияЗапроса + Символы.ПС + " И" + "
		|КаталогПредметовСнабжения.Ссылка В (" +ВыбранныйАлгоритм.ТекстЗапросаФильтра + ")";
		
		СписокПС.ТекстЗапроса = ТекстЗапросаВиртуальныхТаблиц + ТекстЗапроса + ТекстУсловияЗапроса;
		
		Для каждого Пар Из ВыбранныйАлгоритм.ПараметрыЗапроса Цикл
			СписокПС.Параметры.УстановитьЗначениеПараметра(Пар.ИмяПараметра, ?(Пар.ЗначениеПараметра=Неопределено,Пар.Хранилище.Получить().ВыгрузитьЗначения(),Пар.ЗначениеПараметра));
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(ТекстЗапросаГруппировочногоПоля) Тогда
			
			ГруппировкаСуществует = Ложь;
			Для каждого ЭлементНастроек Из СписокПС.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
				Если ЭлементНастроек.Имя = "ГруппировочноеПолеФильтра" Тогда
					ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен;
					ГруппировкаСуществует = Истина;
				Иначе
					ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
				КонецЕсли; 
			КонецЦикла; 
			
			Если НЕ ГруппировкаСуществует Тогда
				НовГруппировка = СписокПС.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				НовГруппировка.Имя = "ГруппировочноеПолеФильтра";
				
				ПолеПоле = НовГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
				ПолеПоле.Поле               = Новый ПолеКомпоновкиДанных("ГруппировочноеПолеФильтра");
				ПолеПоле.ТипГруппировки     = ТипГруппировкиКомпоновкиДанных.Элементы;
				ПолеПоле.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		
		Для каждого ЭлементНастроек Из СписокПС.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
			Если ЭлементНастроек.Имя = "ГруппировочноеПолеФильтра" Тогда
				ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрПервый(Команда)
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ИсточникФильтра", "Первый");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьФильтрЗавершение", ЭтаФорма, ДопПараметры);
	
	ПараметрыОткрытия = Новый Структура();
	
	ОткрытьФорму("Справочник.АлгоритмыФильтрации.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрВторой(Команда)
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ИсточникФильтра", "Второй");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьФильтрЗавершение", ЭтаФорма, ДопПараметры);
	
	ПараметрыОткрытия = Новый Структура();
	
	ОткрытьФорму("Справочник.АлгоритмыФильтрации.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДополнительныеПараметры.ИсточникФильтра = "Первый" Тогда
		ВыбранныйАлгоритмПервый = РезультатЗакрытия;
	Иначе
		ВыбранныйАлгоритмВторой = РезультатЗакрытия;
	КонецЕсли; 
	
	ПрименитьФильтрНаСервере(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьФильтрНаСервере(ДополнительныеПараметры)
	
	Если НЕ ДополнительныеПараметры.Свойство("ИсточникФильтра") Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДополнительныеПараметры.ИсточникФильтра = "Первый" Тогда
		
		ТекущийФильтрПервый = ВыбранныйАлгоритмПервый.Наименование;
		Элементы.ВыбранныйФильтрПервый.Видимость = Истина;
		
		ТекстЗапросаГруппировочногоПоля = УдалитьКомментарии(ВыбранныйАлгоритмПервый.ТекстЗапросаГруппировочногоПоля);
		
		Если НЕ ЗначениеЗаполнено(ТекстЗапросаГруппировочногоПоля) Тогда
			Элементы.ГруппаГруппировкаПервая.Видимость = Ложь;
		Иначе
			ТекущаяГруппировкаПервая = ТекстЗапросаГруппировочногоПоля;
			Элементы.ГруппаГруппировкаПервая.Видимость = Истина;
		КонецЕсли; 
		
	Иначе
		
		ТекущийФильтрВторой = ВыбранныйАлгоритмВторой.Наименование;
		Элементы.ВыбранныйФильтрВторой.Видимость = Истина;
		
		ТекстЗапросаГруппировочногоПоля = УдалитьКомментарии(ВыбранныйАлгоритмВторой.ТекстЗапросаГруппировочногоПоля);
		
		Если НЕ ЗначениеЗаполнено(ТекстЗапросаГруппировочногоПоля) Тогда
			Элементы.ГруппаГруппировкаВторая.Видимость = Ложь;
		Иначе
			ТекущаяГруппировкаВторая = ТекстЗапросаГруппировочногоПоля;
			Элементы.ГруппаГруппировкаВторая.Видимость = Истина;
		КонецЕсли; 
		
	КонецЕсли; 
	
	УстановитьОтборКаталогаПредметовСнабжения(ДополнительныеПараметры.ИсточникФильтра);
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьФильтрПервыйНажатие(Элемент)
	
	ВыбранныйАлгоритмПервый = Неопределено;
	
	УстановитьОтборКаталогаПредметовСнабжения("Первый");
	
	Элементы.ВыбранныйФильтрПервый.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьГруппировкуПервыйНажатие(Элемент)
	
	Элементы.ГруппаГруппировкаПервая.Видимость = Ложь;
	
	Для каждого ЭлементНастроек Из ПервыйКаталогПредметовСнабжения.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
		Если ЭлементНастроек.Имя = "ГруппировочноеПолеФильтра" Тогда
			ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура УбратьФильтрВторойНажатие(Элемент)
	
	ВыбранныйАлгоритмВторой = Неопределено;
	
	УстановитьОтборКаталогаПредметовСнабжения("Второй");
	
	Элементы.ВыбранныйФильтрВторой.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьГруппировкуВторуюНажатие(Элемент)
	
	Элементы.ГруппаГруппировкаВторая.Видимость = Ложь;
	
	Для каждого ЭлементНастроек Из ВторойКаталогПредметовСнабжения.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти("911b6018-f537-43e8-a417-da56b22f9aec").Структура Цикл
		Если ЭлементНастроек.Имя = "ГруппировочноеПолеФильтра" Тогда
			ЭлементНастроек.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Отключен;
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

// -- 26.09.2018 11:49:59 Базунов Д.А. Задача:

#КонецОбласти 

#Область УдалениеДубликатов

&НаКлиенте
Процедура УдалитьДубликатыЧерезМастер(Команда)
	
	ВыделенныеСтроки 	= Элементы.СтруктураВторогоКорабля.ВыделенныеСтроки;
	ТекущиеДанные 		= Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	ОригинальныйЭлемент = ТекущиеДанные.Ссылка;

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Оригинал", 	ОригинальныйЭлемент);
	ПараметрыОткрытия.Вставить("Дубликаты", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьДубликатыЧерезМастерЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.МастерУдаленияДублейСтруктурыЗаказа.Форма", ПараметрыОткрытия, Неопределено,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДубликатыЧерезМастерЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Если РезультатВыполнения.Отказ Тогда
			
			ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = 'Удаление невозможно: %1'"), РезультатВыполнения.ОписаниеОтказа));
			
		Иначе
			
			Элементы.СтруктураПервогоКорабля.Обновить();
			Элементы.СтруктураВторогоКорабля.Обновить();
			
		КонецЕсли; 	
	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 


#Область ДобавлениеИзТабличногоДокумента

////////////////////////////////////////
//ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область Сервис

#Область ПроверкиЗаполнения
&НаКлиенте
Функция ПроверкаНастроекЗаполнения()
	
	Ответ = Новый Структура("Результат", Истина);

	НомерОшибки 	= 0;
	ШиринаТаблицы_ 	= ДанныеExcel.ШиринаТаблицы;	
	ВысотаТаблицы_ 	= ДанныеExcel.ВысотаТаблицы;	
	ИмяПараметра_   = "";
	
	Если НомерКолонкиНаименование = 0 Или НомерКолонкиНаименование > ШиринаТаблицы_ Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Колонка ""Наименование"">" );
	КонецЕсли;
	Если НомерКолонкиОбозначение = 0 Или НомерКолонкиОбозначение > ШиринаТаблицы_ Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Колонка ""Обозначение"">" );
	КонецЕсли;
	Если НомерКоличество = 0 Или НомерКоличество > ШиринаТаблицы_ Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Колонка ""Количество"">" );
	КонецЕсли;	
	Если НомерДокументНаПоставку = 0 Или НомерДокументНаПоставку > ШиринаТаблицы_ Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Колонка ""Документ"">" );
	КонецЕсли;	
	Если НомерПервойСтроки = 0 Или НомерПервойСтроки > ВысотаТаблицы_  Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Первая строка>" );
	КонецЕсли;
	Если НомерПоследнейСтроки = 0 Или НомерПоследнейСтроки > ВысотаТаблицы_ Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Последняя строка>" );
	КонецЕсли;
	Если НомерПоследнейСтроки < НомерПервойСтроки Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, "[ИмяПараметра]", НомерОшибки, "<Последняя строка не может быть меньше первой!>" );
	КонецЕсли;
	Если (НомерКоличествоБорт = 0 Или НомерКоличествоБорт > ШиринаТаблицы_) И ФлажекКоличествоБорт Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Колонка ""Количество Борт"">" );
	КонецЕсли;
	Если (НомерКоличествоБаза = 0 Или НомерКоличествоБаза > ШиринаТаблицы_) И ФлажекКоличествоБаза Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Колонка ""Количество База"">" );
	КонецЕсли;
	Если (НомерКоличествоДЭ = 0 Или НомерКоличествоДЭ > ШиринаТаблицы_) И ФлажекКоличествоДЭ Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Колонка ""Количество ДЭ"">" );
	КонецЕсли;
	Если (НомерКоличествоР = 0 Или НомерКоличествоР > ШиринаТаблицы_) И ФлажекКоличествоР Тогда
		НомерОшибки = ДобавитьОшибкуВОтвет(Ответ, , НомерОшибки, "<Колонка ""Количество Р"">" );
	КонецЕсли;
		
	Возврат Ответ;
	
КонецФункции	//ПроверкаНастроекЗаполнения
&НаКлиенте 
Функция ПредварительнаяПроверка(ВыделенныеСтрокиИсточник)
	
	Ответ = Ложь;
	
	ИспользоватьАльтернативнуюПроверкуЗацикливания = Истина;
	
	Если РезультатДобавленияИзТабличногоДокумента.Количество() = 0 Тогда
		//ВывестиТекстОшибки("В правой таблице нет строк!");
		ПоказатьПредупреждение(, "В правой таблице нет строк!");
		Ответ = Истина;
	КонецЕсли;
	
	Если ВыделенныеСтрокиИсточник.Количество() = 0 Тогда
		//ВывестиТекстОшибки("Не выбраны предметы снабжения в правой таблице!");
		ПоказатьПредупреждение(, "Не выбраны предметы снабжения в правой таблице!");
		Ответ = Истина;
	КонецЕсли;
	
	Для Каждого Строка Из РезультатДобавленияИзТабличногоДокумента Цикл
		Если Не ЗначениеЗаполнено(Строка.ПредметСнабжения) И Строка.Выбран Тогда
			//ВывестиТекстОшибки("В правой таблице заполнены не все предметы снабжения!");
			ПоказатьПредупреждение(, "В правой таблице заполнены не все предметы снабжения!");
			Ответ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные = Элементы.СтруктураПервогоКорабля.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		//ВывестиТекстОшибки("Не выбран элемент структуры в левой таблице!");
		ПоказатьПредупреждение(, "Не выбран элемент структуры в левой таблице!");
		Ответ = Истина;
	Иначе
		
		Родитель 			= ТекущиеДанные.Ссылка;
		левПредметСнабжения = ТекущиеДанные.ПредметСнабжения;
		
		МассивДляПроверки = Новый Массив;
		
		Если ИспользоватьАльтернативнуюПроверкуЗацикливания Тогда
			ТекстЗапросаЗацикливание = СобратьЗацикливанияДвусторонний();
		КонецЕсли;
		
		Для Каждого Строка Из ВыделенныеСтрокиИсточник Цикл
			
			правПредметСнабжения 	= РезультатДобавленияИзТабличногоДокумента.НайтиПоИдентификатору(Строка).ПредметСнабжения; 
			
			Если правПредметСнабжения = левПредметСнабжения Тогда
				//ВывестиТекстОшибки("Нельзя добавить предмет снабжения в собственную спецификацию! " +  левПредметСнабжения);
				ПоказатьПредупреждение(, "Нельзя добавить предмет снабжения в собственную спецификацию! " +  левПредметСнабжения);
				Ответ = Истина;
			КонецЕсли;
			
			РезультатПроверки = СпецификацииПредметовСнабжения.ПроверитьВозможностьДобавленияСоставнойЧастиВСпецификациюПредметаСнабжения(левПредметСнабжения, правПредметСнабжения);
			Если РезультатПроверки.Отказ Тогда
				ПоказатьПредупреждение(, РезультатПроверки.Описание); 
				Ответ = Истина;
			КонецЕсли;
			
			//эта же проверка используется при обработке регистра АктуализацияСтруктурыПС
			РезПроверкиСпецификаций = ПроверитьСпецификацииНаЗацикливание(правПредметСнабжения);
			Если ЗначениеЗаполнено(РезПроверкиСпецификаций) Тогда 
				Сообщить(РезПроверкиСпецификаций);
				Ответ = Истина;
			КонецЕсли; 
			
			//моя проверка на зацикливание
			Если ИспользоватьАльтернативнуюПроверкуЗацикливания Тогда
				СтрокаЗацикливания = АльтернативнаяПроверкаНаЗацикливание(правПредметСнабжения, ТекстЗапросаЗацикливание);
				Если ЗначениеЗаполнено(СтрокаЗацикливания) Тогда
					//ВывестиТекстОшибки("Обнаружено зацикливание: " + СтрокаЗацикливания);
					Сообщить("Обнаружено зацикливание: " + СтрокаЗацикливания);
					Ответ = Истина;
				КонецЕсли;
			КонецЕсли;
						
			МассивДляПроверки.Добавить(правПредметСнабжения);
			
		КонецЦикла;
		
		СтрокиУжеЕсть =  ПредметыСнабженияУжеПрисутствуютВСтруктуре(Родитель, МассивДляПроверки);
		Если СтрокиУжеЕсть.Количество() > 0 Тогда
			//ВывестиТекстОшибки("Некоторые позиции уже есть в структуре корабля, с них убрана пометка");
			ПоказатьПредупреждение(, "Некоторые позиции уже есть в структуре корабля, с них убрана пометка");
			//ВывестиТекстОшибки("Перечень позиций:");
			Сообщить("Перечень позиций:");
			Для Каждого Строка Из СтрокиУжеЕсть Цикл
				ВывестиТекстОшибки("    " + Строка);
				Сообщить(Строка);
			КонецЦикла;
			//ВывестиТекстОшибки("_____________________________________________________");
			Сообщить("_____________________________________________________");
			Ответ = Истина;
			
		КонецЕсли;
	КонецЕсли;
	Возврат Ответ;
	
КонецФункции	//ПредварительнаяПроверка
#КонецОбласти

#Область ВыводОшибок

&НаСервере
Процедура ВывестиТекстОшибки(СтрокаОшибка)
	
	ТекстОшибок.ДобавитьСтроку("" + Формат(ТекущаяДата(), "ДФ=hh:mm.ss") + " - " + СтрокаОшибка);
	ЕстьНовыеОшибки = Истина;
	
КонецПроцедуры //ВывестиТекстОшибки

&НаКлиенте
Процедура СигнализироватьОбОшибке()
	
	Если ЕстьНовыеОшибки Тогда
		
		Элементы.ГруппаОшибки.ЦветФона = WebЦвета.Лосось;
		
	Иначе
		
		Элементы.ГруппаОшибки.ЦветФона = WebЦвета.Белый;
		
	КонецЕсли;
	
КонецПроцедуры	//СигнализироватьОбОшибке

&НаКлиенте
Процедура ОбработчикЕстьНовыеОшибки()

	СигнализироватьОбОшибке();	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФонНовыеОшибки(ТекущаяСтраница)

	Если ТекущаяСтраница = Элементы.ГруппаОшибки Тогда
		ЕстьНовыеОшибки = Ложь;
		СигнализироватьОбОшибке();
	КонецЕсли;

КонецПроцедуры	//ОбработчикЕстьНовыеОшибки

#КонецОбласти

&НаКлиенте
Функция ДобавитьОшибкуВОтвет(Ответ, ТекстОшибки = "Неверно заполнена настройка [ИмяПараметра]!", НомерОшибки, ИмяпараметраОшибки)
	
	Ответ.Вставить("Ошибка" + НомерОшибки, СтрЗаменить(ТекстОшибки, "[ИмяПараметра]", ИмяпараметраОшибки));
	Ответ.Результат = Ложь;
	НомерОшибки = НомерОшибки + 1;
	Возврат НомерОшибки;
	
КонецФункции	//ДобавитьОшибкуВОтвет
&НаСервере
Функция СформироватьСтрокуАвтоподбора(Строка, ПоискПоНаименованию = Ложь)

	Ответ = "";
	
	Если ПоискПоНаименованию Тогда
		Если ЗначениеЗаполнено(Строка.ПредметСнабжения) Тогда
			Ответ = "" + Строка.ПредметСнабжения; 	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Строка.ОбозначениеПС) Тогда
			Ответ = Ответ + " - " + Строка.ОбозначениеПС; 	
		ИначеЕсли ЗначениеЗаполнено(Строка.ОбозначениеПС) Тогда
			Ответ = "" + Строка.ОбозначениеПС; 	
		КонецЕсли;

	Иначе
		Если ЗначениеЗаполнено(Строка.ОбозначениеПС) Тогда
			Ответ = "" + Строка.ОбозначениеПС; 	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Строка.ПредметСнабжения) Тогда
			Ответ = Ответ + " - " + Строка.ПредметСнабжения; 	
		ИначеЕсли ЗначениеЗаполнено(Строка.ПредметСнабжения) Тогда
			Ответ = "" + Строка.ПредметСнабжения; 	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Строка.ДокументНаПоставку) Тогда
		Ответ = Ответ + " - " + Строка.ДокументНаПоставку; 	
	ИначеЕсли ЗначениеЗаполнено(Строка.ДокументНаПоставку) Тогда
		Ответ = "" + Строка.ДокументНаПоставку; 	
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции // СформироватьСтрокуАвтоподбора()

#Область ВариантыПоискаПредметовСнабжения
&НаСервере
Функция НайтиПСПростымЗапросом(Обозначение, ПоНаименованию = Ложь, МаксРезультатов = 10)
	
	Ответ = Новый СписокЗначений;
	Запрос = Новый Запрос;
#Область ТекстЗапроса
	ТекстЗапроса = "
	|ВЫБРАТЬ Первые 10
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	//|	И КаталогПредметовСнабжения.Обозначение ПОДОБНО &Обозначение
	|	И &парКаталогПредметовСнабженияИмя ПОДОБНО &Обозначение
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ Первые 10
	|	КаталогПредметовСнабжения.Ссылка,
	|	КаталогПредметовСнабжения.ОбозначениеТранслитированное
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	|	И КаталогПредметовСнабжения.ОбозначениеТранслитированное ПОДОБНО &Обозначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ Первые 10
	|	КодыINCAT.ПредметСнабжения,
	|	КодыINCAT.КодINCAT
	|ИЗ
	|	РегистрСведений.КодыINCAT КАК КодыINCAT
	|ГДЕ
	|	КодыINCAT.КодINCAT ПОДОБНО &Обозначение";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&парКаталогПредметовСнабженияИмя", ?(ПоНаименованию, "КаталогПредметовСнабжения.Наименование", "КаталогПредметовСнабжения.Обозначение"));
#КонецОбласти
	Запрос.Текст = ТекстЗапроса;
	Если ПоНаименованию Тогда 
		Запрос.УстановитьПараметр("Обозначение", Обозначение);
	Иначе
		Запрос.УстановитьПараметр("Обозначение", "%" + ПодготовитьОбозначениеКПоиску(Обозначение) + "%");
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Счет = 1;
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Счет <= МаксРезультатов Тогда
				Ответ.Добавить(Выборка.Ссылка, "" + Выборка.Обозначение + " - " + Выборка.Ссылка);
			КонецЕсли;
			Счет = Счет + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ответ;
 
КонецФункции // НайтиПСПростымЗапросом()
&НаСервере
Функция НайтиПСПолнотекстовымПоиском(ПорогНечеткости, РазмерПорции, СтрокаПП)
	
	Ответ = Новый СписокЗначений;
	
	//настроить параметры поиска
	мОбластьПоиска = Новый Массив;
	мОбластьПоиска.Добавить(Метаданные.Справочники.КаталогПредметовСнабжения);
	//мОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ДополнительныеНаименования);
	//мОбластьПоиска.Добавить(Метаданные.РегистрыСведений.ПоисковыйИндекс);
	
	СписокПоиска 					= ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПП, РазмерПорции);
	СписокПоиска.ПорогНечеткости  	= ПорогНечеткости;
	СписокПоиска.ОбластьПоиска 		= мОбластьПоиска;
		
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		//Возврат НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
		Возврат Ответ;
	КонецПопытки;
	
	Если СписокПоиска.Количество() = 0 Тогда
		//Возврат НСтр("ru = 'Ничего не найдено.'");
		Возврат Ответ;
	КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	//сформировать список найденных элементов
	НачальнаяПозиция = 0;

	//обработать по порциям результаты ППД
	
	Для СчетчикЭлементов = 0 По Мин(СписокПоиска.ПолноеКоличество()-НачальнаяПозиция,РазмерПорции)-1 Цикл
		
		//сформировать элемент результата
		Элемент = СписокПоиска.Получить(СчетчикЭлементов);
		Если Элемент.Метаданные = Метаданные.Справочники.КаталогПредметовСнабжения Тогда
			ТекЭлементПС = Элемент.Значение;
		//ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ДополнительныеНаименования Тогда
		//	ТекЭлементПС = Элемент.Значение.Владелец;
		//ИначеЕсли Элемент.Метаданные = Метаданные.РегистрыСведений.ПоисковыйИндекс Тогда
		//	ТекЭлементПС = Элемент.Значение.Объект;
		Иначе
			Продолжить;
		КонецЕсли;
		Если Ответ.НайтиПоЗначению(ТекЭлементПС) = Неопределено Тогда
			Ответ.Добавить(ТекЭлементПС, "" + ТекЭлементПС.Обозначение + " - " + ТекЭлементПС);			
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;

КонецФункции
&НаСервере
Функция ПодготовитьОбозначениеКПоиску(Обозначение)
	
	Обозначение = СтрЗаменить(Обозначение, "  ", " ");
	Обозначение = СокрЛП(Обозначение);
	Результат 	= "";
	
	ДопустимыеСимволы = ПолучитьМассивДопустимыхСимволов();
	Для Сч = 1 По СтрДлина(Обозначение) Цикл
		Символ = Сред(Обозначение, Сч, 1);
		Если ДопустимыеСимволы.Найти(КодСимвола(Символ, 1)) = Неопределено Тогда
			Результат = Результат + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	//ПодготовитьОбозначениеКПоиску
&НаСервере
Функция ПолучитьМассивДопустимыхСимволов()
	Результат = Новый Массив;
	
	//Результат.Добавить(32); // Пробел
	// Цифры
	Для Сч = 48 По 57 Цикл
		Результат.Добавить(Сч);
	КонецЦикла; // Для Сч = 48 По 57 Цикл
	
	// Латиница заглавные
	Для Сч = 65 По 90 Цикл
		Результат.Добавить(Сч);
	КонецЦикла; // Для Сч = 65 По 90 Цикл
	
	// Латиница прописные
	Для Сч = 97 По 122 Цикл
		Результат.Добавить(Сч);
	КонецЦикла; // Для Сч = 97 По 122 Цикл

	// Кирилица
	Для Сч = 1040 По 1103 Цикл
		Результат.Добавить(Сч);
	КонецЦикла; // Для Сч = 97 По 122 Цикл
	
	Результат.Добавить(1025); // Ё
	Результат.Добавить(1105); // ё
	
	Возврат Результат;
КонецФункции	//ПолучитьМассивДопустимыхСимволов

#КонецОбласти

&НаСервере
Функция ПолучитьСтруктуруТабИст()
	
	Ответ = Новый ТаблицаЗначений;
	Ответ.Колонки.Добавить("ИД", 						Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	Ответ.Колонки.Добавить("Обозначение", 				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	Ответ.Колонки.Добавить("ОбозначениеУкороченное",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	Возврат Ответ;

КонецФункции // ПолучитьСтруктуруТабИст

#Область ВариантыПоискаЗацикленностиВСпецификации
&НаСервере
Функция ПроверитьСпецификацииНаЗацикливание(правПредметСнабжения)
	Ответ = "";
	ТаблицаСпецификаций = ПолучитьТаблицуСпецификацийПоПредметуСнабжения(правПредметСнабжения);
	Если ЕстьЗацикливаниеНовое(правПредметСнабжения, ТаблицаСпецификаций) Тогда
		Ответ = "Обнаружено зацикливание! " + правПредметСнабжения;
	КонецЕсли; 
	Возврат Ответ;
КонецФункции // ПроверитьСпецификацииНаЗацикливание()
&НаСервере
Функция ПолучитьТаблицуСпецификацийПоПредметуСнабжения(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.Текст = СпецификацииПредметовСнабженияПовтИсп.ПолучитьТекстЗапросаДляСпецификации();
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСпецификацийПоПредметуСнабжения
&НаСервере
Процедура ПоискЗацикливания(МенеджерВременныхТаблиц, ПредметСнабжения, Спецификации, Ошибка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК ПредметСнабжения
	|ИЗ
	|	ВТ_Спецификации КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения";
	
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Спецификации.Найти(Выборка.ПредметСнабжения) = Неопределено Тогда
			
			Спецификации.Вставить(0, Выборка.ПредметСнабжения);
			
			НайденаОшибка = Ложь;
			ПоискЗацикливания(МенеджерВременныхТаблиц, Выборка.ПредметСнабжения, Спецификации, НайденаОшибка);
			Если НЕ Ошибка И НайденаОшибка Тогда
			      Ошибка = Истина;			
			КонецЕсли; 
						
			Спецификации.Удалить(0);
			
		Иначе
			
			Ошибка = Истина;
			Прервать;
			
		КонецЕсли; 	
					
	КонецЦикла;
	
КонецПроцедуры  //ПоискЗацикливания 
&НаСервере
Функция ЕстьЗацикливаниеНовое(ПредметСнабжения, ТаблицаСпецификаций)

	Спецификации = Новый Массив();
	Спецификации.Добавить(ПредметСнабжения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСпецификаций", ТаблицаСпецификаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть
	|ПОМЕСТИТЬ ВТ_Спецификации
	|ИЗ
	|	&ТаблицаСпецификаций КАК СпецификацииПредметовСнабжения";
	
	Запрос.Выполнить();
	
	Ошибка = Ложь;
	ПоискЗацикливания(Запрос.МенеджерВременныхТаблиц, ПредметСнабжения, Спецификации, Ошибка);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	Возврат Ошибка;

КонецФункции // ЕстьЗацикливание()
&НаСервере
Функция СобратьЗацикливанияДвусторонний()

	
	//присутствует всегда
	НулеваяЧасть = "
	|ВЫБРАТЬ
	|	&ПредметыСнабжения КАК ПредметСнабжения,
	|	&ПредметыСнабжения КАК СоставляющаяЧасть,
	|	0 КАК НомерУровня,
	|	ЛОЖЬ КАК Зацикливание
	|ПОМЕСТИТЬ ВТ_Уровень0
	|;
	|";
	
		
	НулевоеОбъединение = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Уровень0.ПредметСнабжения КАК ПредметСнабжения,
	|	ВТ_Уровень0.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	ВТ_Уровень0.НомерУровня КАК НомерУровня,
	|	ВТ_Уровень0.Зацикливание КАК Зацикливание
	|Поместить ВТ_Итог
	|ИЗ
	|	ВТ_Уровень0 КАК ВТ_Уровень0
	|";
	
	Итоговаятаблица = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Итог.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	МИНИМУМ(ВТ_Итог.НомерУровня) КАК МинимальныйУровень
	|ПОМЕСТИТЬ ВТ_УровеньЗацикливания
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	|	ВТ_Итог.Зацикливание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Итог.СоставляющаяЧасть
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Итог.ПредметСнабжения КАК ПредметСнабжения,
	|   ЕСТЬNULL(ВТ_УровеньЗацикливания.МинимальныйУровень, 0) КАК МинимальныйУровень,
	|	ВТ_Итог.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	ВТ_Итог.НомерУровня КАК НомерУровня,
	|	ВТ_Итог.Зацикливание КАК Зацикливание
	|ИЗ
	|	ВТ_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УровеньЗацикливания КАК ВТ_УровеньЗацикливания
	|  		ПО ВТ_Итог.ПредметСнабжения = ВТ_УровеньЗацикливания.СоставляющаяЧасть
	| 			И (ВТ_Итог.НомерУровня = 0)
	|УПОРЯДОЧИТЬ ПО НомерУровня";
		
	УровнейПлюс = 20;
	УровнейМинус = -10;
	
	ТекстЗапроса = НулеваяЧасть 
		+ СобратьУровниПлюс(УровнейПлюс) 
		+ СобратьУровниМинус(УровнейМинус) 
		+ НулевоеОбъединение 
		+ СобратьОбъединениеУровней(УровнейПлюс, УровнейМинус) + СобратьУничтожениеТаблиц(УровнейПлюс,УровнейМинус) 
		+ Итоговаятаблица;
		
	Возврат ТекстЗапроса;
КонецФункции
&НаСервере
Функция СобратьУровниПлюс(МаксУровень)
	
	УровеньЧисло = 1;
	УровниВПлюс = "";
	
	Пока УровеньЧисло <= МаксУровень Цикл
		УровниВПлюс = УровниВПлюс + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	[ВТИсточник].СоставляющаяЧасть КАК ПредметСнабжения,
		|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть,
		|	[ТекУровень] КАК НомерУровня,
		|	ВЫБОР
		|		КОГДА СпецификацииПС.СоставляющаяЧасть = &ПредметыСнабжения
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Зацикливание
		|ПОМЕСТИТЬ [ВТРезультат]
		|ИЗ
		|	[ВТИсточник] КАК [ВТИсточник]
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПС КАК СпецификацииПС
		|		ПО [ВТИсточник].СоставляющаяЧасть = СпецификацииПС.ПредметСнабжения
		|;
		|";
		УровниВПлюс = СтрЗаменить(УровниВПлюс,"[ВТИсточник]","ВТ_Уровень" + (УровеньЧисло - 1));
		УровниВПлюс = СтрЗаменить(УровниВПлюс,"[ТекУровень]", УровеньЧисло);
		УровниВПлюс = СтрЗаменить(УровниВПлюс,"[ВТРезультат]","ВТ_Уровень" + УровеньЧисло);
		УровеньЧисло = УровеньЧисло + 1;
	КонецЦикла;
	
	Возврат УровниВПлюс;
	
КонецФункции
&НаСервере
Функция СобратьУровниМинус(МаксУровень)
	
	УровеньЧисло = -1;
	УровниМинус = "";
	Пока УровеньЧисло >= МаксУровень Цикл
		УровниМинус = УровниМинус + "
		|
		|ВЫБРАТЬ
		|	[ВТИсточник].ПредметСнабжения КАК СоставляющаяЧасть,
		|	СпецификацииПС.ПредметСнабжения КАК ПредметСнабжения,
		|	[ТекУровень] КАК НомерУровня,
		|	ВЫБОР
		|		КОГДА СпецификацииПС.ПредметСнабжения = &ПредметыСнабжения
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Зацикливание
		|ПОМЕСТИТЬ [ВТРезультат]
		|ИЗ
		|	[ВТИсточник] КАК [ВТИсточник]
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПС КАК СпецификацииПС
		|		ПО [ВТИсточник].ПредметСнабжения = СпецификацииПС.СоставляющаяЧасть
		|;
		|";
		Если УровеньЧисло =-1 Тогда
			УровниМинус = СтрЗаменить(УровниМинус,"[ВТИсточник]","ВТ_Уровень" + ((УровеньЧисло+1) * -1));
		Иначе
			УровниМинус = СтрЗаменить(УровниМинус,"[ВТИсточник]","ВТ_Уровень_" + ((УровеньЧисло+1) * -1));
		КонецЕсли;
		УровниМинус = СтрЗаменить(УровниМинус,"[ТекУровень]", УровеньЧисло);
		УровниМинус = СтрЗаменить(УровниМинус,"[ВТРезультат]","ВТ_Уровень_" + (УровеньЧисло*-1));
		УровеньЧисло = УровеньЧисло - 1;
	КонецЦикла;
	
	Возврат УровниМинус;
	
КонецФункции
&НаСервере
Функция СобратьОбъединениеУровней(МаксУровень, МинУровень)
	
	МаксЧисло = 1;
	ОбъединениеУровнейПлюс = "";
	Пока МаксЧисло < МаксУровень Цикл
		ОбъединениеУровнейПлюс = ОбъединениеУровнейПлюс +"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	[ВТИсточникПлюс].ПредметСнабжения,
		|	[ВТИсточникПлюс].СоставляющаяЧасть,
		|	[ВТИсточникПлюс].НомерУровня,
		|	[ВТИсточникПлюс].Зацикливание
		|ИЗ
		|	[ВТИсточникПлюс] КАК [ВТИсточникПлюс]
		|";
		ОбъединениеУровнейПлюс = СтрЗаменить(ОбъединениеУровнейПлюс,"[ВТИсточникПлюс]","ВТ_Уровень" + МаксЧисло);
		МаксЧисло = МаксЧисло + 1;
	КонецЦикла;
	
	МинЧисло = -1;
	ОбъединениеУровнейМинус = "";
	Пока МинЧисло > МинУровень Цикл
		ОбъединениеУровнейМинус = ОбъединениеУровнейМинус +"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	[ВТИсточникМинус].ПредметСнабжения,
		|	[ВТИсточникМинус].СоставляющаяЧасть,
		|	[ВТИсточникМинус].НомерУровня,
		|	[ВТИсточникМинус].Зацикливание
		|ИЗ
		|	[ВТИсточникМинус] КАК [ВТИсточникМинус]
		|";
		ОбъединениеУровнейМинус = СтрЗаменить(ОбъединениеУровнейМинус,"[ВТИсточникМинус]","ВТ_Уровень_" + (МинЧисло*-1));
		МинЧисло = МинЧисло - 1;
	КонецЦикла;
	
	ОбъединениеУровней = ОбъединениеУровнейПлюс + ОбъединениеУровнейМинус; 
	Возврат ОбъединениеУровней;
	
КонецФункции
&НаСервере
Функция СобратьУничтожениеТаблиц(МаксУровень, МинУровень)
	
	МаксЧисло = 1;
	УничтожениеПлюс = "";
	Пока МаксЧисло < МаксУровень Цикл
		УничтожениеПлюс = УничтожениеПлюс +"
		|;
		|УНИЧТОЖИТЬ	[ВТИсточникПлюс]
		|";
		УничтожениеПлюс = СтрЗаменить(УничтожениеПлюс,"[ВТИсточникПлюс]","ВТ_Уровень" + МаксЧисло);
		МаксЧисло = МаксЧисло + 1;
	КонецЦикла;
	
	//МинЧисло = -1;
	УничтожениеМинус = "";
	//Пока МинЧисло > МинУровень Цикл
	//	УничтожениеМинус = УничтожениеМинус +"
	//	|;
	//	|УНИЧТОЖИТЬ	[ВТИсточникМинус]
	//	|";

	//	УничтожениеМинус = СтрЗаменить(УничтожениеМинус,"[ВТИсточникМинус]","ВТ_Уровень_" + (МинЧисло*-1));
	//	МинЧисло = МинЧисло - 1;
	//КонецЦикла;
	
	Возврат УничтожениеПлюс+УничтожениеМинус;  	
	
КонецФункции
&НаСервере
Функция ПодготовитьСтрокуЗацикливания(ТабИсточник)

	Ответ = "";
	ЕстьЗацикливание = Ложь;
	НайденныеСтроки = ТабИсточник.НайтиСтроки(Новый Структура("НомерУровня", 0)); 
	Если НайденныеСтроки.Количество() = 1 Тогда
		Если Не НайденныеСтроки[0].МинимальныйУровень =  0 Тогда	
			
			МинимальныйУровень 	= НайденныеСтроки[0].МинимальныйУровень;
			ТекУровень			= МинимальныйУровень;
			УровеньДерева		= 1;
			СоставляющаяЧасть	= Справочники.КаталогПредметовСнабжения.ПустаяСсылка();
			
			Пока ТекУровень >= 0 Цикл
				НайденныеСтроки = ТабИсточник.НайтиСтроки(Новый Структура("НомерУровня", ТекУровень));
				Для Каждого Строка Из НайденныеСтроки Цикл 
					Если ТекУровень = МинимальныйУровень Тогда
						Если Строка.Зацикливание Тогда
							Ответ = Ответ + Строка.СоставляющаяЧасть; 
							СоставляющаяЧасть = Строка.ПредметСнабжения;
							Прервать;
						КонецЕсли;
					ИначеЕсли ТекУровень <> 0 Тогда
						Если Строка.СоставляющаяЧасть = СоставляющаяЧасть Тогда
							Ответ = Ответ + " - " + Строка.СоставляющаяЧасть;
							СоставляющаяЧасть = Строка.ПредметСнабжения;
							Прервать;
						КонецЕсли;
					Иначе
						Ответ = Ответ + " - " + Строка.СоставляющаяЧасть;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ТекУровень = ТекУровень - 1;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
	КонецЕсли;
	Возврат Ответ;

КонецФункции // ПодготовитьСтрокуЗацикливания()
&НаСервере
Функция АльтернативнаяПроверкаНаЗацикливание(правПредметСнабжения, ТекстЗапроса)
	Ответ = "";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ПредметыСнабжения", правПредметСнабжения);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		СтрокаЗацикливания = ПодготовитьСтрокуЗацикливания(Результат.Выгрузить());
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗацикливания) Тогда
		Ответ = СтрокаЗацикливания;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции // АльтернативнаяПроверкаНаЗацикливание()
#КонецОбласти

&НаСервере
Функция ПредметыСнабженияУжеПрисутствуютВСтруктуре(Родитель = Неопределено, МассивДляПроверки)	
	Ответ = Новый Массив;
	
	Если Не Родитель = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&Родитель)
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения В(&МассивПредметовСнабжения)";
		
		Запрос.УстановитьПараметр("Родитель", 					Родитель);
		Запрос.УстановитьПараметр("МассивПредметовСнабжения", 	МассивДляПроверки);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Ответ.Найти(Выборка.Ссылка) = Неопределено Тогда
					Ответ.Добавить(Выборка.Ссылка);
				КонецЕсли;
				НайденныеСтроки = РезультатДобавленияИзТабличногоДокумента.НайтиСтроки(Новый Структура("ПредметСнабжения", Выборка.ПредметСнабжения));
				Для Каждого СтрВыб Из НайденныеСтроки Цикл
					СтрВыб.Выбран = Ложь;	
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;				
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции	//ПредметыСнабженияУжеПрисутствуютВСтруктуре
&НаСервере
Функция ПолучитьЗначение(НомерСтроки, НомерКолонки, ЧисловоеЗначение = Ложь)

	Попытка
		ИмяОбласти 		= "R" + Формат(НомерСтроки, "ЧГ=") +"C" + Формат(НомерКолонки);
		СтрокаДанных 	= ДанныеExcel.Область(ИмяОбласти).Текст;
		СтрокаДанных 	= СокрЛП(СтрокаДанных);
		Если ЧисловоеЗначение Тогда
			Результат 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДанных);
		Иначе
			Результат 	= СтрокаДанных;
		КонецЕсли;
	Исключение
		Результат 		= ?(ЧисловоеЗначение, 0, "");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ИмяОбласти + ": не удалось получить значение. " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	//ПолучитьЗначение
&НаСервере
Функция ПолучитьОбозначение(ОбСнабжения)
	
	Возврат ОбСнабжения.Обозначение; 

КонецФункции	//ПолучитьОбозначение
&НаСервере
Функция ПолучитьДокументНаПоставку(ОбСнабжения)

	Возврат ОбСнабжения.ДокументНаПоставку; 	

КонецФункции // ПолучитьДокументНаПоставку()
&НаКлиенте
Процедура ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(ИмяФлажка = Неопределено, ЗначениеДоступности = Ложь)
	
	Если ИмяФлажка = Неопределено Тогда
		Элементы.НомерКоличествоБаза.Доступность	= Ложь;
		Элементы.НомерКоличествоБорт.Доступность 	= Ложь;
		Элементы.НомерКоличествоДЭ.Доступность 		= Ложь;
		Элементы.НомерКоличествоР.Доступность		= Ложь;
		Элементы.РезультатДобавленияИзТабличногоДокументаКоличествоБаза.Видимость 	= Ложь;
		Элементы.РезультатДобавленияИзТабличногоДокументаКоличествоБорт.Видимость 	= Ложь;
		Элементы.РезультатДобавленияИзТабличногоДокументаКоличествоДЭ.Видимость 	= Ложь;
		Элементы.РезультатДобавленияИзТабличногоДокументаКоличествоР.Видимость 		= Ложь;
	Иначе
		Элементы[СтрЗаменить(ИмяФлажка.Имя, "Флажек", "Номер")].Доступность 									= ЗначениеДоступности;
		Элементы[СтрЗаменить(ИмяФлажка.Имя, "Флажек", "РезультатДобавленияИзТабличногоДокумента")].Видимость	= ЗначениеДоступности;
	КонецЕсли;		
	
КонецПроцедуры	//ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента
&НаКлиенте
Функция ПодготовитьСтрокиДляОбработки(ЗИП = Неопределено, ВернутьИдентификаторы = Истина)
	
	Элементы.РезультатДобавленияИзТабличногоДокумента.ВыделенныеСтроки.Очистить();
	Для Каждого Строка Из РезультатДобавленияИзТабличногоДокумента Цикл
		Если Строка.Выбран И (Не Строка.Зип Или Строка.Зип Или Зип = Неопределено) И ЗначениеЗаполнено(Строка.ПредметСнабжения) Тогда 
			Элементы.РезультатДобавленияИзТабличногоДокумента.ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	Ответ = Элементы.РезультатДобавленияИзТабличногоДокумента.ВыделенныеСтроки;
	
	Если Не ВернутьИдентификаторы Тогда
		Ответ = Новый Массив;		
		Для Каждого Строка Из Элементы.РезультатДобавленияИзТабличногоДокумента.ВыделенныеСтроки Цикл
			Ответ.Добавить(РезультатДобавленияИзТабличногоДокумента.НайтиПоИдентификатору(Строка).ПредметСнабжения);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции	//ПодготовитьСтрокиДляОбработки
&НаСервере
Функция ПрочитатьДопПараметрыПСЗагрузкиXLS(ПредметСнабжения = Неопределено, Адрес)
	
	ПараметрыКоличества = ШаблонСтруктурыКоличества();
	Ответ = Новый Структура("Тип,Зип,ПараметрыКоличества", Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.ПустаяСсылка(), Ложь, ПараметрыКоличества);
	ТаблицаПараметров = ПолучитьИзВременногоХранилища(Адрес);
	Если Не ТаблицаПараметров = Неопределено Тогда
		Если ПредметСнабжения = Неопределено Тогда 
			Возврат ТаблицаПараметров; 
		Иначе
			НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("ПредметСнабжения", ПредметСнабжения));	
			Если НайденныеСтроки.Количество() > 0 Тогда
				Ответ.Вставить("Тип",					НайденныеСтроки[0].Тип); 
				Ответ.Вставить("Зип",					НайденныеСтроки[0].Зип); 
				Ответ.Вставить("ПараметрыКоличества",	НайденныеСтроки[0].ПараметрыКоличества); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Ответ;

КонецФункции	//ПрочитатьДопПараметрыПСЗагрузкиXLS
&НаСервере
Функция ЗаписатьДопПараметрыПСЗагрузкиXLS()

	Ответ = "";
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ПредметСнабжения");	
	ТЗ.Колонки.Добавить("Зип");	
	ТЗ.Колонки.Добавить("Тип");	
	ТЗ.Колонки.Добавить("ПараметрыКоличества");	

	//ФлажекКоличествоБаза, ФлажекКоличествоБорт, ФлажекКоличествоДЭ, ФлажекКоличествоР
	Для Каждого Строка Из РезультатДобавленияИзТабличногоДокумента Цикл
		Если Не Строка.Выбран Тогда 
			Продолжить;
		Иначе
			//ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), Строка);
			ПараметрыКоличества = ШаблонСтруктурыКоличества();
			ПараметрыКоличества.Вставить("Количество", Строка.Количество);	
			Если ФлажекКоличествоБаза Тогда
				ПараметрыКоличества.Вставить("КоличествоВЗИПБаза", Строка.КоличествоБаза);	
			КонецЕсли;
			Если ФлажекКоличествоБорт Тогда
				ПараметрыКоличества.Вставить("КоличествоВЗИПБорт", Строка.КоличествоБорт);	
			КонецЕсли;
			Если ФлажекКоличествоДЭ Тогда
				ПараметрыКоличества.Вставить("КоличествоВЗИПДЭ", Строка.КоличествоДЭ);	
			КонецЕсли;
			Если ФлажекКоличествоР Тогда
				ПараметрыКоличества.Вставить("КоличествоВЗИПР", Строка.КоличествоР);	
			КонецЕсли;

			нСтрока = ТЗ.Добавить();
			нСтрока.ПредметСнабжения 	= Строка.ПредметСнабжения;
			нСтрока.Тип 				= Строка.Тип;
			нСтрока.Зип 				= Строка.Зип;
			нСтрока.ПараметрыКоличества = ПараметрыКоличества;

		КонецЕсли;
	КонецЦикла;
	
	Если ТЗ.Количество() >  0 Тогда
		Ответ = ПоместитьВоВременноеХранилище(ТЗ, Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции	//ЗаписатьДопПараметрыПСЗагрузкиXLS	
&НаСервере
Функция ШаблонСтруктурыКоличества()

	Возврат Новый Структура("Количество,КоличествоВЗИПБорт,КоличествоВЗИПБаза,КоличествоВЗИПДЭ,КоличествоВЗИПР",0,0,0,0,0);

КонецФункции // ШаблонСтруктурыКоличества()
&НаКлиенте
Процедура ПослеПереносаПСВСтруктуруИзXLS(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПослеПереносаПСВСтруктуруИзXLSНаСервере();
	КонецЕсли;

КонецПроцедуры //ПослеПереносаПСВСтруктуруИзXLS
&НаСервере
Процедура ПослеПереносаПСВСтруктуруИзXLSНаСервере()
	
	ОчиститьТаблицыПослеЗагрузкиДанныхИзТД();

КонецПроцедуры //ПослеПереносаПСВСтруктуруИзXLSНаСервере
&НаСервере
Процедура ОчиститьТаблицыПослеЗагрузкиДанныхИзТД()
	
	ДанныеExcel.Очистить();
	РезультатДобавленияИзТабличногоДокумента.Очистить();
	НомерПоследнейСтроки = 1;
	
КонецПроцедуры	//ОчиститьТаблицыПослеЗагрузкиДанныхИзТД
&НаСервере
Функция ПустойПредметСнабжения()

	Возврат Справочники.КаталогПредметовСнабжения.ПустаяСсылка();		

КонецФункции // ПустойПредметСнабжения()

#КонецОбласти

#Область ЗаполнениеТаблиц

&НаСервере
Процедура ЗаполнитьРезультатДобавленияИзТабличногоДокументаНаСервере()

	ИспользоватьПолнотекстПоиск = Истина;
	
	стрДопСимволов = Новый Структура;
	стрДопСимволов.Вставить("Цифры", 				Истина);
	стрДопСимволов.Вставить("ЛатиницаЗаглавные", 	Истина);
	стрДопСимволов.Вставить("ЛатиницаПрописные", 	Истина);
	стрДопСимволов.Вставить("Кириллица", 			Истина);
	
	Для ТекИндексСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
		ПоискПоНаименованию = Ложь;

		Обозначение = ПолучитьЗначение(ТекИндексСтроки, НомерКолонкиОбозначение);
		Наименован_ = ПолучитьЗначение(ТекИндексСтроки, НомерКолонкиНаименование);
		
		Если ЗначениеЗаполнено(Обозначение) И СтрДлина(Обозначение) > 3 Тогда //хотя бы 3 символа ограничу
		ИначеЕсли ЗначениеЗаполнено(Наименован_) Тогда 
			ПоискПоНаименованию = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Обозначение) И Не ЗначениеЗаполнено(Наименован_) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока_		= РезультатДобавленияИзТабличногоДокумента.Добавить();
		ИдНоваяСтрока_		= НоваяСтрока_.ПолучитьИдентификатор(); 
		рлСтрока 			= РезультатДобавленияИзТабличногоДокумента.НайтиПоИдентификатору(ИдНоваяСтрока_);
		
		рлСтрока.Выбран 		= Истина;
		рлСтрока.Обозначение 	= Обозначение;
		рлСтрока.Наименование 	= Наименован_;
		рлСтрока.Количество 	= ПолучитьЗначение(ТекИндексСтроки, НомерКоличество, Истина);
		рлСтрока.ИДСтроки		= Строка(Новый УникальныйИдентификатор);
		
		рлСтрока.ДокументНаПоставкуИсточник	= ПолучитьЗначение(ТекИндексСтроки, НомерДокументНаПоставку);
		
		НайденныеПС = Новый СписокЗначений();
		
		Если Не ПоискПоНаименованию Тогда
			//НайденныеПС = НайтиПСПростымЗапросом(Обозначение, ПоискПоНаименованию);
			НайденныеПС = Справочники.КаталогПредметовСнабжения.НайтиПСПростымЗапросом(Обозначение, ПоискПоНаименованию, 10, стрДопСимволов);
		Иначе
			//НайденныеПС = НайтиПСПростымЗапросом(Наименован_, ПоискПоНаименованию);
			НайденныеПС = Справочники.КаталогПредметовСнабжения.НайтиПСПростымЗапросом(Наименован_, ПоискПоНаименованию, 10, стрДопСимволов);
		КонецЕсли;
		
		Если НайденныеПС.Количество() = 0 Тогда
			Если ИспользоватьПолнотекстПоиск И Не ПоискПоНаименованию Тогда
				НайденныеПС = НайтиПСПолнотекстовымПоиском(0, 10, Обозначение);
			ИначеЕсли ИспользоватьПолнотекстПоиск И ПоискПоНаименованию Тогда
				НайденныеПС = НайтиПСПолнотекстовымПоиском(0, 10, Наименован_);
			КонецЕсли;
		КонецЕсли;
		
		Если НайденныеПС.Количество() = 0 Тогда
			рлСтрока.НайденоПС = 0;	
			
		ИначеЕсли НайденныеПС.Количество() = 1 Тогда
			рлСтрока.ПредметСнабжения = НайденныеПС[0].Значение;	
			рлСтрока.НайденоПС = 1;	
			
		Иначе
			рлСтрока.НайденоПС = 2;	
			ПоместитьСтрокиВТаблицуБыстрогоПоиска(НайденныеПС, рлСтрока.ИДСтроки, ПоискПоНаименованию);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(рлСтрока.ПредметСнабжения) Тогда
			ПриИзмененииПСПроставитьОбозначениеПС(рлСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если ФлажекКоличествоБорт Тогда
			рлСтрока.КоличествоБорт 	= ПолучитьЗначение(ТекИндексСтроки, НомерКоличествоБорт, Истина);
		КонецЕсли;
		Если ФлажекКоличествоБаза Тогда
			рлСтрока.КоличествоБаза 	= ПолучитьЗначение(ТекИндексСтроки, НомерКоличествоБаза, Истина);
		КонецЕсли;
		Если ФлажекКоличествоДЭ Тогда
			рлСтрока.КоличествоДЭ 		= ПолучитьЗначение(ТекИндексСтроки, НомерКоличествоДЭ, Истина);
		КонецЕсли;
		Если ФлажекКоличествоР Тогда
			рлСтрока.КоличествоР 		= ПолучитьЗначение(ТекИндексСтроки, НомерКоличествоР, Истина);
		КонецЕсли;
		
		Если рлСтрока.КоличествоБорт + рлСтрока.КоличествоБаза + рлСтрока.КоличествоДЭ + рлСтрока.КоличествоР > 0 Тогда
			рлСтрока.Зип = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьРезультатДобавленияИзТабличногоДокументаНаСервере
&НаКлиенте
Процедура ЗаполнитьТипВыбранныхСтрок()

	Если ЗначениеЗаполнено(ТипЗИППоУмолчанию) Тогда
		НайденныеСтроки = РезультатДобавленияИзТабличногоДокумента.НайтиСтроки(Новый Структура("Выбран", Истина));		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Тип = ТипЗИППоУмолчанию; 
		КонецЦикла;
	Иначе
		ТекстСообщения = "Не заполнен <Тип ЗИП>";
		Сообщить(ТекстСообщения, СтатусСообщения.Информация);
	КонецЕсли;

КонецПроцедуры	//ЗаполнитьТипВыбранныхСтрок
&НаСервере
Процедура ПоместитьСтрокиВТаблицуБыстрогоПоиска(МассивСтрок, ИдСтрока, ПоискПоНаименованию)
	
	Если МассивСтрок.Количество() > 0 Тогда
		Для Каждого элМассива из МассивСтрок Цикл
			нСтрока = ТаблицаБыстрогоПоиска.Добавить();
			рСтрока = ТаблицаБыстрогоПоиска.НайтиПоИдентификатору(нСтрока.ПолучитьИдентификатор());
			рСтрока.ПредметСнабжения 	= элМассива.Значение;
			рСтрока.ОбозначениеПС 		= рСтрока.ПредметСнабжения.Обозначение; 
			рСтрока.ДокументНаПоставку 	= рСтрока.ПредметСнабжения.ДокументНаПоставку; 
			рСтрока.ИДСтроки 			= ИдСтрока;
			рСтрока.ПоискПоНаименованию = ПоискПоНаименованию;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры	//ПоместитьСтрокиВТаблицуБыстрогоПоиска
&НаСервере
Функция ПолучитьСписокАвтоподбора(ИдСтроки)
	
	Ответ = Новый СписокЗначений;
	
	НайденныеСтроки = ТаблицаБыстрогоПоиска.НайтиСтроки(Новый Структура("ИдСтроки", ИдСтроки));
	Для Каждого Строка Из НайденныеСтроки Цикл
		//Если Строка.ПоискПоНаименованию Тогда
			//Ответ.Добавить(Строка.ПредметСнабжения, "" + Строка.ПредметСнабжения + " - " + Строка.ОбозначениеПС + " - " + Строка.ДокументНаПоставку);
			Ответ.Добавить(Строка.ПредметСнабжения, СформироватьСтрокуАвтоподбора(Строка, Строка.ПоискПоНаименованию));
		//Иначе
		//	Ответ.Добавить(Строка.ПредметСнабжения, "" + Строка.ОбозначениеПС + " - " + Строка.ПредметСнабжения + " - " + Строка.ДокументНаПоставку);
		//КонецЕсли;
		
	КонецЦикла;
	Ответ.СортироватьПоПредставлению();
	Ответ.Добавить("Создание", "Создать новое");
	
	Возврат Ответ;
	
КонецФункции // ПолучитьСписокАвтоподбора()

#КонецОбласти


#Область Действия

&НаКлиенте
Процедура ОбработатьЗипПлюсМинус(ЗначениеФлага = Ложь)
	
	НайденныеСтроки = РезультатДобавленияИзТабличногоДокумента.НайтиСтроки(Новый Структура("Выбран", Истина));
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.ЗИП = ЗначениеФлага;	
	КонецЦикла;
	
КонецПроцедуры	//ОбработатьЗипПлюсМинус
&НаКлиенте
Процедура ДобавлениеПСВСтруктуруКорабля()
	
	ДобавитьПредметыСнабженияПродолжение(ПодготовитьСтрокиДляОбработки(Неопределено, Ложь),Истина, Ложь, Истина);

КонецПроцедуры	//ДобавлениеПСВСтруктуруКорабля
&НаСервере
Процедура СоздатьВыбранныеПредметыСнабжения(ТекСтрока = Неопределено)
	
	СоздаватьПринудительно = Ложь;
	
	Если ТекСтрока = Неопределено Тогда 
		НайденныеСтроки = РезультатДобавленияИзТабличногоДокумента.НайтиСтроки(Новый Структура("Выбран", Истина));
	Иначе
		НайденныеСтроки = Новый Массив;
		НайденныеСтроки.Добавить(РезультатДобавленияИзТабличногоДокумента.НайтиПоИдентификатору(ТекСтрока));
		СоздаватьПринудительно = Истина;
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда 
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если (ЗначениеЗаполнено(Строка.ПредметСнабжения) Или Строка.НайденоПС <> 0) И Не СоздаватьПринудительно Тогда
			//Если ЗначениеЗаполнено(Строка.ПредметСнабжения) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				НовыйПС = ВыполнитьСозданиеОбъектаПредметСнабжения(Строка);
				Строка.ПредметСнабжения = НовыйПС;
				ПриИзмененииПСПроставитьОбозначениеПС(Строка.ПолучитьИдентификатор());
				
			Исключение 		
				
				ТекстСообщения = "При попытке создания: " + Строка.Наименование + " произошла ошибка!";
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	//СоздатьВыбранныеПредметыСнабжения
&НаСервере
Функция ВыполнитьСозданиеОбъектаПредметСнабжения(Стр)
	
	НовЭл = Справочники.КаталогПредметовСнабжения.СоздатьЭлемент();
	
	НовЭл.Обозначение		= Стр.Обозначение;
	НовЭл.Наименование 		= Стр.Наименование;
	НовЭл.ДокументНаПоставку= Стр.ДокументНаПоставкуИсточник;
	НовЭл.ЕдиницаИзмерения 	= Справочники.ОКЕИ.НайтиПоКоду("796");	//штука
	
	НовЭл.Записать();
	
	Возврат НовЭл.Ссылка;
	
КонецФункции	//ВыполнитьСозданиеОбъектаПредметСнабжения
&НаКлиенте
// Варианты параметра "Режим":
// 0 - снять выделение со всех строк
// 1 - установить выделение всем строкам
// 2 - инвертировать выделение
// 3 - выделяет строки без ПС
Процедура РаботаСВыделениеСтрок(Режим = 0)

	Для Каждого Строка Из РезультатДобавленияИзТабличногоДокумента Цикл
		
		ТекСтрока = РезультатДобавленияИзТабличногоДокумента.НайтиПоИдентификатору(Строка.ПолучитьИдентификатор());
		
		Если Режим = 0 Тогда
			ТекСтрока.Выбран = Ложь;
		ИначеЕсли Режим = 1 Тогда
			ТекСтрока.Выбран = Истина;
		ИначеЕсли Режим = 2 Тогда
			ТекСтрока.Выбран = Не ТекСтрока.Выбран;	
			
		// если найдено 2 и более ПС, то значение тоже пустое, варианты будут показаны в списке автоподбора
		// такие предметы создавать не нужно, пользователь сам выберет
		ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ПредметСнабжения) И ТекСтрока.НайденоПС = 0 Тогда 
			ТекСтрока.Выбран = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры	//РаботаСВыделениеСтрок
&НаКлиенте
Процедура ПодготовкаКПереносуПСВСтрукутуруКорабля()
	
	ВыделенныеСтрокиИсточник = ПодготовитьСтрокиДляОбработки();
	
	//предварительные проверки)
	Состояние("Выполнение проверки перед добавлением",,, БиблиотекаКартинок.БизнесПроцесс);
	ЕстьОшибка =  ПредварительнаяПроверка(ВыделенныеСтрокиИсточник);
	
	Если Не ЕстьОшибка Тогда
		//добавление предметов снабжения в структуру
		ДобавлениеПСВСтруктуруКорабля();
	КонецЕсли;
		
КонецПроцедуры	//ПодготовкаКПереносуПСВСтрукутуруКорабля
&НаКлиенте
Процедура РезДобавленияИзТДОтменитьВыборНаСервере()
	
	ТекущаяСтрока = Элементы.РезультатДобавленияИзТабличногоДокумента.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока.ПредметСнабжения = ПустойПредметСнабжения();
		ТекущаяСтрока.НайденоПС = 0;
		ПриИзмененииПСПроставитьОбозначениеПС(ТекущаяСтрока.ПолучитьИдентификатор());		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////
//СОБЫТИЯ ФОРМЫ

&НаКлиенте
Процедура ДанныеExcelПриИзменении(Элемент)
	
	НомерПоследнейСтроки = ДанныеExcel.ВысотаТаблицы;
	
КонецПроцедуры	//ДанныеExcelПриИзменении
&НаКлиенте
Процедура ФлажекКоличествоБортПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(Элемент, ФлажекКоличествоБорт);
	
КонецПроцедуры	//ФлажекКоличествоБортПриИзменении
&НаКлиенте
Процедура ФлажекКоличествоБазаПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(Элемент, ФлажекКоличествоБаза);

КонецПроцедуры	//ФлажекКоличествоБазаПриИзменении
&НаКлиенте
Процедура ФлажекКоличествоДЭПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(Элемент, ФлажекКоличествоДЭ);
	
КонецПроцедуры	//ФлажекКоличествоДЭПриИзменении
&НаКлиенте
Процедура ФлажекКоличествоРПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(Элемент, ФлажекКоличествоР);
	
КонецПроцедуры	//ФлажекКоличествоРПриИзменении
&НаКлиенте
Процедура РезультатДобавленияИзТабличногоДокументаПредметСнабженияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РезультатДобавленияИзТабличногоДокумента.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ПредметСнабжения) И ТекущаяСтрока.НайденоПС = 2 Тогда
		ПредложитьСоздание(ТекущаяСтрока);
	Иначе
		ПриИзмененииПСПроставитьОбозначениеПС(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры	//РезультатДобавленияИзТабличногоДокументаПредметСнабженияПриИзменении
&НаКлиенте
Процедура ПредложитьСоздание(ТекущаяСтрока)
	
	Описание = Новый ОписаниеОповещения("СозданиеПСНаКлиенте", ЭтаФорма, Новый Структура("ТекущаяСтрока", ТекущаяСтрока));
	ПоказатьВопрос(Описание, "Создать новый предмет снабжения?", РежимДиалогаВопрос.ДаНет);

КонецПроцедуры // ПредложитьСоздание()
&НаКлиенте
Процедура СозданиеПСНаКлиенте(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьВыбранныеПредметыСнабжения(ДопПараметры.ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры
&НаСервере
Процедура ПриИзмененииПСПроставитьОбозначениеПС(ИдентификаторСтроки = Неопределено) 
	
	Если Не ИдентификаторСтроки = Неопределено Тогда
		ТекущаяСтрока = РезультатДобавленияИзТабличногоДокумента.НайтиПоИдентификатору(ИдентификаторСтроки);	
		Если Не ТекущаяСтрока = Неопределено Тогда
			Если Не ЗначениеЗаполнено(ТекущаяСтрока.ПредметСнабжения) И ТекущаяСтрока.НайденоПС = 2 Тогда
			Иначе
				ТекущаяСтрока.ОбозначениеПС = ПолучитьОбозначение(ТекущаяСтрока.ПредметСнабжения);
				ТекущаяСтрока.ДокументНаПоставку = ПолучитьДокументНаПоставку(ТекущаяСтрока.ПредметСнабжения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры	//ПриИзмененииПСПроставитьОбозначениеПС
&НаКлиенте
Процедура РезультатДобавленияИзТабличногоДокументаПредметСнабженияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		ТекущаяСтрока 				= Элементы.РезультатДобавленияИзТабличногоДокумента.ТекущиеДанные;
		//Если ЗначениеЗаполнено(ТекущаяСтрока.Обозначение) Тогда
		//	СписокВыбора 				= НайтиПСЗапросом(ТекущаяСтрока.Обозначение);
		//Иначе
		//	СписокВыбора 				= НайтиПСЗапросом(ТекущаяСтрока.Обозначение, Истина, ТекущаяСтрока.Наименование);
		//КонецЕсли;
		Если ТекущаяСтрока.НайденоПС = 2 Тогда
			СписокВыбора = ПолучитьСписокАвтоподбора(ТекущаяСтрока.ИдСтроки); 
			Если СписокВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка 	= Ложь;
				ДанныеВыбора 			= СписокВыбора;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры	//РезультатДобавленияИзТабличногоДокументаПредметСнабженияАвтоПодбор
&НаКлиенте
Процедура ВидимостьКолонокКоличествоПоЗИП()
	НайденныеСтроки = РезультатДобавленияИзТабличногоДокумента.НайтиСтроки(Новый Структура("ЗИП", Истина));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ФлажекКоличествоБаза= Истина;
		ФлажекКоличествоБорт= Истина;
		ФлажекКоличествоДЭ 	= Истина;
		ФлажекКоличествоР 	= Истина;
		
		ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(Элементы.ФлажекКоличествоБаза, 	Истина);
		ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(Элементы.ФлажекКоличествоБорт, 	Истина);
		ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(Элементы.ФлажекКоличествоДЭ, 	Истина);
		ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента(Элементы.ФлажекКоличествоР, 	Истина);
		
	КонецЕсли;
КонецПроцедуры //ВидимостьКолонокКоличествоПоЗИП
&НаКлиенте
Функция ПолеКоличестваНеДоступноКРедактированию(ИмяКолонки, ВыбраннаяСтрока)
	
	Ответ = Истина;
	
	МассивЗапрещенныхКолонок = Новый Массив;
	МассивЗапрещенныхКолонок.Добавить("РезультатДобавленияИзТабличногоДокументаКоличествоБорт");
	МассивЗапрещенныхКолонок.Добавить("РезультатДобавленияИзТабличногоДокументаКоличествоБаза");
	МассивЗапрещенныхКолонок.Добавить("РезультатДобавленияИзТабличногоДокументаКоличествоДЭ");
	МассивЗапрещенныхКолонок.Добавить("РезультатДобавленияИзТабличногоДокументаКоличествоР");
	
	ЗИП = РезультатДобавленияИзТабличногоДокумента.НайтиПоИдентификатору(ВыбраннаяСтрока).ЗИП;
	
	Если МассивЗапрещенныхКолонок.Найти(ИмяКолонки) = Неопределено Тогда
		Ответ = Ложь;
	ИначеЕсли Не МассивЗапрещенныхКолонок.Найти(ИмяКолонки) = Неопределено И ЗИП Тогда
		Ответ = Ложь;
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции // ПолеКоличестваНеДоступноКРедактированию	()
&НаКлиенте
Процедура УстановитьВидимостьСтраницыДобавлениеXLS()
	
	Элементы.ГруппаВторойНаборДобавлениеИзТабличногоДокумента.Видимость = ФлажекДобавлениеИзТабДокВидимость;
	
КонецПроцедуры
&НаКлиенте
Процедура УстановитьВидимостьОшибки()

	Элементы.ГруппаОшибки.Видимость = ФлажекВыводитьОшибкиНаОТдельнуюСтраницу;

КонецПроцедуры

////////////////////////////////////////
//КОМАНДЫ

&НаКлиенте
Процедура ЗаполнитьТаблицу(Команда)
	
	РезультатПроверки = ПроверкаНастроекЗаполнения();
	
	Если РезультатПроверки.Результат Тогда
		РезультатДобавленияИзТабличногоДокумента.Очистить();
		ТаблицаБыстрогоПоиска.Очистить();
		ЗаполнитьРезультатДобавленияИзТабличногоДокументаНаСервере();
	Иначе
		Для Каждого ЭлементРезультата  Из РезультатПроверки Цикл
			Если ЭлементРезультата.Ключ = "Результат" Тогда 
				Продолжить;
			Иначе
				//ВывестиТекстОшибки(ЭлементРезультата.Значение);
				Сообщить(ЭлементРезультата.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВидимостьКолонокКоличествоПоЗИП();
	
КонецПроцедуры	//ЗаполнитьТаблицу
&НаКлиенте
Процедура ВыбратьВсеРезДобавленияИзТД(Команда)
	
	РаботаСВыделениеСтрок(1);
		
КонецПроцедуры	//ВыбратьВсеРезДобавленияИзТД
&НаКлиенте
Процедура СнятьВсеРезДобавленияИзТД(Команда)
	
	РаботаСВыделениеСтрок(0);
	
КонецПроцедуры	//СнятьВсеРезДобавленияИзТД
&НаКлиенте
Процедура ИнвертироватьРезДобавленияИзТД(Команда)

	РаботаСВыделениеСтрок(2);
	
КонецПроцедуры	//ИнвертироватьРезДобавленияИзТД
&НаКлиенте
Процедура БезПСРезДобавленияИзТД(Команда)
	
	РаботаСВыделениеСтрок(3);
	
КонецПроцедуры	//БезПСРезДобавленияИзТД
&НаКлиенте
Процедура ЗИППлюсРезДобавленияИзТД(Команда)
	
	ОбработатьЗипПлюсМинус(Истина);
	ВидимостьКолонокКоличествоПоЗИП();
	
КонецПроцедуры	//ЗИППлюсРезДобавленияИзТД
&НаКлиенте
Процедура ЗИПМинусРезДобавленияИзТД(Команда)
	
	ОбработатьЗипПлюсМинус(Ложь);
	ВидимостьКолонокКоличествоПоЗИП();
	
КонецПроцедуры	//ЗИПМинусРезДобавленияИзТД
&НаКлиенте
Процедура ЗаполнитьТипРезДобавленияИзТД(Команда)
	
	ЗаполнитьТипВыбранныхСтрок();	
	
КонецПроцедуры	//ЗаполнитьТипРезДобавленияИзТД
&НаКлиенте
Процедура СоздатьЭлементыРезДобавленияИзТД(Команда)
	
	СоздатьВыбранныеПредметыСнабжения();
	
КонецПроцедуры	//СоздатьЭлементыРезДобавленияИзТД
&НаКлиенте
Процедура ПеренестиВСтруктуруРезДобавленияИзТД(Команда)
	
	ПодготовкаКПереносуПСВСтрукутуруКорабля();
		
КонецПроцедуры	//ПеренестиВСтруктуруРезДобавленияИзТД
&НаКлиенте
Процедура РезДобавленияИзТДОчиститьТаблицы(Команда)
	
	ОчиститьТаблицыПослеЗагрузкиДанныхИзТД();
	
КонецПроцедуры
&НаКлиенте
Процедура РезультатДобавленияИзТабличногоДокументаЗИППриИзменении(Элемент)
	ВидимостьКолонокКоличествоПоЗИП();
КонецПроцедуры
&НаКлиенте
Процедура РезультатДобавленияИзТабличногоДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ПолеКоличестваНеДоступноКРедактированию(Поле.Имя, ВыбраннаяСтрока) Тогда
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РезДобавленияИзТДОтменитьВыбор(Команда)
	
	РезДобавленияИзТДОтменитьВыборНаСервере();
	
КонецПроцедуры	//РезДобавленияИзТДОтменитьВыбор
&НаКлиенте
Процедура ФлажекДобавлениеИзТабДокВидимостьПриИзменении(Элемент)
	УстановитьВидимостьСтраницыДобавлениеXLS();
КонецПроцедуры
&НаКлиенте
Процедура ФлажекВыводитьОшибкиНаОТдельнуюСтраницуПриИзменении(Элемент)
	УстановитьВидимостьОшибки();
КонецПроцедуры

////////////////////////////////////////
//ИНИЦИАЛИЗАЦИЯ ПАРАМЕТРОВ

&НаКлиенте
Процедура ИнициализироватьНастройкиГрупповогоДобавленияПС()
	
	НомерКолонкиНаименование 	= 2;
	НомерКолонкиОбозначение 	= 3;
	НомерДокументНаПоставку		= 4;
	НомерКоличество 			= 10;
	НомерКоличествоБорт 		= 11;
	НомерКоличествоБаза 		= 12;
	НомерКоличествоДЭ 			= 13;
	НомерКоличествоР 			= 14;
	НомерПервойСтроки			= 1;
	НомерПоследнейСтроки		= 10;
	ТипЗИППоУмолчанию			= ПолучитьЗИППоУмолчанию();
	
	ФлажекДобавлениеИзТабДокВидимость = Истина;
	
	ПодключитьОбработчикОжидания("ОбработчикЕстьНовыеОшибки", 5);
	ОбновитьДоступностьЭлементовДобавленияИзТабличногоДокумента();
	
КонецПроцедуры	//ИнициализироватьНастройкиГрупповогоДобавленияПС
&НаСервере
Функция ПолучитьЗИППоУмолчанию()

	Возврат Справочники.РазделыСпецификацииЗИП.НайтиПоКоду("20") //Изделие

КонецФункции // ПолучитьЗИППоУмолчанию()





#КонецОбласти
