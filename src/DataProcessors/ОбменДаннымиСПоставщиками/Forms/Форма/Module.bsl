#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ВариантЗаполнения = 0;
	
	КорректировкаДанныхСправочников.УстановитьУсловноеОформление(ЭтаФорма, Истина);
	
	ОтображатьХарактеристикиПредметаСнабжения = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьХарактеристикиПредметаСнабжения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьХарактеристикиПредметаСнабженияПриИзменении(Элемент)
	
	Элементы.ХарактеристикиПредметаСнабжения.Видимость = ОтображатьХарактеристикиПредметаСнабжения;
	
	ЗаполнитьХарактеристикиПредметаСнабжения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	УстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	УстановитьСнятьФлажки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьФлажки(ЗначениеФлажка)
	
	Для каждого СтрокаПредметСнабжения Из Объект.ПредметыСнабжения Цикл
		
		СтрокаПредметСнабжения.Согласовано = ЗначениеФлажка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоИзмененныеПриИзменении(Элемент)
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрок()
	
	ОтборСтрок = ?(ТолькоИзмененные, Новый ФиксированнаяСтруктура("ЕстьИзменения", Истина), Неопределено);
	
	Элементы.ПредметыСнабжения.ОтборСтрок = ОтборСтрок;
	Элементы.Характеристики.ОтборСтрок = ОтборСтрок;
	Элементы.ХарактеристикиПредметаСнабжения.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

#Область СобытияПредметыСнабжения

&НаКлиенте
Процедура ПредметыСнабженияПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ПредметыСнабжения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПредыдущийИдентификатор = Элементы.ПредметыСнабжения.ТекущиеДанные.Идентификатор;
	ПредыдущийПредметСнабжения = Элементы.ПредметыСнабжения.ТекущиеДанные.ПредметСнабжения; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияПриИзменении(Элемент)
	
	Если Элементы.ПредметыСнабжения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//Если Не Элементы.ПредметыСнабжения.ТекущийЭлемент = Элементы.ПредметыСнабженияСогласовано 
	//	И Не Элементы.ПредметыСнабжения.ТекущийЭлемент = Элементы.ПредметыСнабженияПримечание И Элементы.ПредметыСнабженияСогласовано.Видимость Тогда
	//
	//	Элементы.ПредметыСнабжения.ТекущиеДанные.Согласовано = Истина;
	//	
	//КонецЕсли;
	
	ИмяТекущегоЭлемента = Элементы.ПредметыСнабжения.ТекущийЭлемент.Имя;
	ИмяТекущегоЭлемента = Прав(ИмяТекущегоЭлемента, СтрДлина(ИмяТекущегоЭлемента) - 17);
	
	ТекущиеДанные = Элементы.ПредметыСнабжения.ТекущиеДанные;
	
	Попытка
	
		Если ИмяТекущегоЭлемента = "ДатаЦены" Или ИмяТекущегоЭлемента = "Цена" И Не ЗначениеЗаполнено(ТекущиеДанные[ИмяТекущегоЭлемента]) Тогда
			
			ТекущиеДанные[ИмяТекущегоЭлемента + "Изменено"] = Ложь;
			
		Иначе
			
			ТекущиеДанные[ИмяТекущегоЭлемента + "Изменено"] = (ТекущиеДанные[ИмяТекущегоЭлемента] <> ТекущиеДанные[ИмяТекущегоЭлемента + "БД"]);
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	ТекущиеДанные.ЕстьИзменения = ТекущиеДанные.НаименованиеИзменено Или ТекущиеДанные.ОбозначениеИзменено Или ТекущиеДанные.ДокументНаПоставкуИзменено
		Или ТекущиеДанные.ВозможностьИзготовленияИзменено Или ТекущиеДанные.СрокИзготовленияИзменено Или ТекущиеДанные.ЦенаИзменено Или ТекущиеДанные.ДатаЦеныИзменено
		Или ТекущиеДанные.ПравилаУпаковкиТранспортировкиХраненияИзменено;
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиПриИзменении(Элемент)
	
	ИмяТекущегоЭлемента = Элементы.Характеристики.ТекущийЭлемент.Имя;
	ИмяТекущегоЭлемента = Прав(ИмяТекущегоЭлемента, СтрДлина(ИмяТекущегоЭлемента) - 14);
	
	ТекущиеДанные = Элементы.Характеристики.ТекущиеДанные;
	
	Попытка
	
		ТекущиеДанные[ИмяТекущегоЭлемента + "Изменено"] = (ТекущиеДанные[ИмяТекущегоЭлемента] <> ТекущиеДанные[ИмяТекущегоЭлемента + "БД"]);
		
	Исключение
		
	КонецПопытки;
	
	ТекущиеДанные.ЕстьИзменения = ТекущиеДанные.ЕдиницаИзмеренияИзменено Или ТекущиеДанные.ЗначениеИзменено Или ТекущиеДанные.ОсновнаяИзменено;
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияПредметСнабженияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПредметыСнабжения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПредметСнабжения) И 
		Объект.ПредметыСнабжения.НайтиСтроки(Новый Структура("ПредметСнабжения", ТекущиеДанные.ПредметСнабжения)).Количество() > 1 Тогда
		
		Сообщить("В таблице уже есть такой предмет снабжения!");
		ТекущиеДанные.ПредметСнабжения = ПредыдущийПредметСнабжения;
		Возврат;
		
	КонецЕсли;	
	
	УдалитьХарактеристикиАналогиПредметаСнабжения();		
	
	ДанныеПредметаСнабжения = ЗаполнитьДанныеПредметаСнабжения(ТекущиеДанные.ПредметСнабжения);
	
	ТекущиеДанные.Идентификатор = ?(ЗначениеЗаполнено(ТекущиеДанные.ПредметСнабжения), ТекущиеДанные.ПредметСнабжения.УникальныйИдентификатор(), "");
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПредметаСнабжения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеПредметаСнабжения(ПредметСнабжения)
	
	//основные данные
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|	ВложенныйЗапрос.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Обозначение КАК Обозначение,
	|	ВложенныйЗапрос.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ВложенныйЗапрос.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|	ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|	ВложенныйЗапрос.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|	ВложенныйЗапрос.СрокИзготовления КАК СрокИзготовления,
	|	ВложенныйЗапрос.Входимость КАК Входимость,
	|	ЕСТЬNULL(ЦеныПредметовСнабженияСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныПредметовСнабженияСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЦены
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|		ВложенныйЗапрос.Наименование КАК Наименование,
	|		ВложенныйЗапрос.Обозначение КАК Обозначение,
	|		ВложенныйЗапрос.ДокументНаПоставку КАК ДокументНаПоставку,
	|		ВложенныйЗапрос.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|		ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|		ВложенныйЗапрос.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|		ВложенныйЗапрос.СрокИзготовления КАК СрокИзготовления,
	|		МАКСИМУМ(ЕСТЬNULL(СпецификацииПредметовСнабжения.ПредметСнабжения, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))) КАК Входимость
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|			ВложенныйЗапрос.Наименование КАК Наименование,
	|			ВложенныйЗапрос.Обозначение КАК Обозначение,
	|			ВложенныйЗапрос.ДокументНаПоставку КАК ДокументНаПоставку,
	|			ВложенныйЗапрос.ВозможностьИзготовления КАК ВозможностьИзготовления,
	|			ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	|			ВложенныйЗапрос.ИмяФайлаКартинки КАК ИмяФайлаКартинки,
	|			МАКСИМУМ(ВЫБОР
	|					КОГДА ЕСТЬNULL(КаталогПредметовСнабженияИзготовителиИПоставщики.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) = &День
	|						ТОГДА КаталогПредметовСнабженияИзготовителиИПоставщики.СрокиИзготовления
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК СрокИзготовления
	|		ИЗ
	|			(ВЫБРАТЬ
	|				КаталогПредметовСнабжения.Ссылка КАК ПредметСнабжения,
	|				КаталогПредметовСнабжения.Наименование КАК Наименование,
	|				КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|				КаталогПредметовСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	|				ЛОЖЬ КАК ВозможностьИзготовления,
	|				ВЫРАЗИТЬ(КаталогПредметовСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК СТРОКА(200)) КАК ПравилаУпаковкиТранспортировкиХранения,
	|				"""" КАК ИмяФайлаКартинки
	|			ИЗ
	|				Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|			ГДЕ
	|				КаталогПредметовСнабжения.Ссылка = &ПредметСнабжения) КАК ВложенныйЗапрос
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|				ПО ВложенныйЗапрос.ПредметСнабжения = КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка
	|					И (КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент = &Поставщик)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.ИмяФайлаКартинки,
	|			ВложенныйЗапрос.ДокументНаПоставку,
	|			ВложенныйЗапрос.ВозможностьИзготовления,
	|			ВложенныйЗапрос.Обозначение,
	|			ВложенныйЗапрос.Наименование,
	|			ВложенныйЗапрос.ПредметСнабжения,
	|			ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|			ПО ВложенныйЗапрос.ПредметСнабжения = СпецификацииПредметовСнабжения.СоставляющаяЧасть
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ПредметСнабжения,
	|		ВложенныйЗапрос.Наименование,
	|		ВложенныйЗапрос.Обозначение,
	|		ВложенныйЗапрос.ДокументНаПоставку,
	|		ВложенныйЗапрос.ВозможностьИзготовления,
	|		ВложенныйЗапрос.ПравилаУпаковкиТранспортировкиХранения,
	|		ВложенныйЗапрос.ИмяФайлаКартинки,
	|		ВложенныйЗапрос.СрокИзготовления) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних КАК ЦеныПредметовСнабженияСрезПоследних
	|		ПО ВложенныйЗапрос.ПредметСнабжения = ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения
	|			И (ЦеныПредметовСнабженияСрезПоследних.ТипЦены = ЗНАЧЕНИЕ(Перечисление.ТипыЦен.Внутренняя))
	|			И (ЦеныПредметовСнабженияСрезПоследних.Контрагент = &Поставщик)";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("Поставщик", Объект.Поставщик);
	Запрос.УстановитьПараметр("День", Константы.ЕдиницаИзмеренияДень.Получить());
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ЕстьДанные = (ТаблицаЗапроса.Количество() > 0);
	
	Результат = Новый Структура;
	
	Для каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		
		Значение = ?(ЕстьДанные, ТаблицаЗапроса[0][Колонка.Имя], Неопределено);
		
		Результат.Вставить(Колонка.Имя, Значение);
		Результат.Вставить(Колонка.Имя + "БД", Значение);
		
	КонецЦикла;
	
	//характеристики
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Значение КАК Значение,
	|	ВложенныйЗапрос.Основная КАК Основная,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВложенныйЗапрос.Характеристика) КАК Наименование,
	|	ЕСТЬNULL(ОКЕИ.Код, """") КАК ЕдиницаИзмеренияКод,
	|	&ПредметСнабжения КАК ПредметСнабжения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмеренияБД,
	|	ВложенныйЗапрос.Значение КАК ЗначениеБД,
	|	ВложенныйЗапрос.Основная КАК ОсновнаяБД
	|ИЗ
	|	(ВЫБРАТЬ
	|		КаталогПредметовСнабженияХарактеристики.Характеристика КАК Характеристика,
	|		КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		КаталогПредметовСнабженияХарактеристики.Значение КАК Значение,
	|		КаталогПредметовСнабженияХарактеристики.Основная КАК Основная
	|	ИЗ
	|		Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|	ГДЕ
	|		КаталогПредметовСнабженияХарактеристики.Ссылка = &ПредметСнабжения) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОКЕИ КАК ОКЕИ
	|		ПО ВложенныйЗапрос.ЕдиницаИзмерения = ОКЕИ.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаХарактеристика = Объект.Характеристики.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаХарактеристика, Выборка);
		СтрокаХарактеристика.Идентификатор = ПредметСнабжения.УникальныйИдентификатор();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПредметыСнабженияПередУдалением(Элемент, Отказ)
	
	Если Элементы.ПредметыСнабжения.ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПредыдущийИдентификатор = Элементы.ПредметыСнабжения.ТекущиеДанные.Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияПослеУдаления(Элемент)
	
	 УдалитьХарактеристикиАналогиПредметаСнабжения();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьХарактеристикиАналогиПредметаСнабжения()
	
	Если Не ЗначениеЗаполнено(ПредыдущийИдентификатор) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ХарактеристикиПС = Объект.Характеристики.НайтиСтроки(Новый Структура("Идентификатор", ПредыдущийИдентификатор));
	
	Для каждого СтрокаХарактеристика Из ХарактеристикиПС Цикл
		
		Объект.Характеристики.Удалить(СтрокаХарактеристика);
		
	КонецЦикла;
	
	АналогиПС = Объект.Аналоги.НайтиСтроки(Новый Структура("Идентификатор", ПредыдущийИдентификатор));
	
	Для каждого СтрокаАналог Из АналогиПС Цикл
		
		Объект.Аналоги.Удалить(СтрокаАналог);
		
	КонецЦикла;
	
	АналогиПС = Объект.Аналоги.НайтиСтроки(Новый Структура("ИдентификаторАналога", ПредыдущийИдентификатор));
	
	Для каждого СтрокаАналог Из АналогиПС Цикл
		
		Объект.Аналоги.Удалить(СтрокаАналог);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СравнитьСДаннымиБД()
	
	КорректировкаДанныхСправочников.ВыполнитьСравнениеСДаннымиБД(Объект.ПредметыСнабжения, Объект.Характеристики, Объект.Поставщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыСнабженияПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьХарактеристикиПредметаСнабжения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристикиПредметаСнабжения()
	
	Если Элементы.ХарактеристикиПредметаСнабжения.Видимость И Не Элементы.ПредметыСнабжения.ТекущиеДанные = Неопределено Тогда
		
		ХарактеристикиПредметаСнабжения.Очистить();
		
		МассивХарактеристик = Объект.Характеристики.НайтиСтроки(Новый Структура("Идентификатор", Элементы.ПредметыСнабжения.ТекущиеДанные.Идентификатор));
		
		Если МассивХарактеристик.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для каждого ЭлементМассиваХарактеристик Из МассивХарактеристик Цикл
			
			СтрокаХарактеристик = ХарактеристикиПредметаСнабжения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаХарактеристик, ЭлементМассиваХарактеристик);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		
		ПоказатьПредупреждение(, "Не указан поставщик!");
		Возврат;
		
	КонецЕсли;
		
	ДополнительныеПараметры = Новый Структура("ПредметыСнабжения, Характеристики, Аналоги, Поставщик, ВариантЗаполнения, Форма", 
		Объект.ПредметыСнабжения, Объект.Характеристики, Объект.Аналоги, Объект.Поставщик, Объект.ВариантЗаполнения, ЭтаФорма);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПродолжение", КорректировкаДанныхСправочниковКлиент, ДополнительныеПараметры), 
		"Табличная часть будет перезаполнена. Продолжить?", РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

#КонецОбласти

#Область Выгрузка

&НаСервере
Функция ПолучитьИмяФайлаВыгрузки()
	
	Возврат "ОБР " +Объект.Поставщик.Код + ".xlsx";
	
КонецФункции

&НаКлиенте
Асинх Процедура Выгрузить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		
		ПоказатьПредупреждение(, "Не указан поставщик!");
		Возврат;
		
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПолучитьИмяФайлаВыгрузки();
	
	ПутьКФайлу = Ждать КорректировкаДанныхСправочниковКлиент.ВыгрузитьФайлПоставщику(Объект.ПредметыСнабжения, Объект.Характеристики, ИмяФайлаВыгрузки); 
	
	Сообщить(?(ПутьКФайлу = Неопределено, "Выгрузка не произведена!", "Файл успешно создан по адресу " + ПутьКФайлу));
	
КонецПроцедуры

#КонецОбласти

#Область Загрузка

&НаКлиенте
Асинх Процедура Загрузить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		
		ПоказатьПредупреждение(, "Не указан поставщик!");
		Возврат;
		
	КонецЕсли;
	
	ПутьКФайлу = Ждать КорректировкаДанныхСправочниковКлиент.ЗагрузитьФайлОтПоставщика(ЭтаФорма, Истина);
	
	ИмяФайла = ?(ЗначениеЗаполнено(ПутьКФайлу), Прав(ПутьКФайлу, СтрДлина(ПутьКФайлу) - СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца)), Неопределено);
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		
		СравнитьСДаннымиБД();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Запись

&НаКлиенте
Процедура Записать(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Поставщик) Тогда
		
		ПоказатьПредупреждение(, "Не указан поставщик!");
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ПредметыСнабжения.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Нет данных для записи!");
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьЗавершение", ЭтаФорма), "В базу данных будут внесены изменения. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Сообщить("Запись данных начата в " + ТекущаяДата());
		Состояние("Запись данных...", , , БиблиотекаКартинок.ДлительнаяОперация48);
		ВыполнитьЗапись();
		Сообщить("Запись данных окончена в " + ТекущаяДата());
		
	Иначе
		
		Сообщить("Действие отменено!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапись()
	
	 ДанныеФайлаИмпорта = Новый Структура("ИмяФайла, ПутьКФайлу", ИмяФайла, ПутьКФайлу);
	 
	 Запрос = Новый Запрос;
	 Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	ПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	 |	ПредметыСнабжения.Наименование КАК Наименование,
	 |	ПредметыСнабжения.Обозначение КАК Обозначение,
	 |	ПредметыСнабжения.ДокументНаПоставку КАК ДокументНаПоставку,
	 |	ПредметыСнабжения.СрокИзготовления КАК СрокИзготовления,
	 |	ПредметыСнабжения.Цена КАК Цена,
	 |	ПредметыСнабжения.ДатаЦены КАК ДатаЦены,
	 |	ПредметыСнабжения.ПравилаУпаковкиТранспортировкиХранения КАК ПравилаУпаковкиТранспортировкиХранения,
	 |	ПредметыСнабжения.Идентификатор КАК Идентификатор,
	 |	ПредметыСнабжения.Согласовано КАК Согласовано
	 |ПОМЕСТИТЬ втПредметыСнабжения
	 |ИЗ
	 |	&ПредметыСнабжения КАК ПредметыСнабжения
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	ПредметСнабжения,
	 |	Согласовано
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Характеристики.ПредметСнабжения КАК ПредметСнабжения,
	 |	Характеристики.Характеристика КАК Характеристика,
	 |	Характеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	 |	Характеристики.Значение КАК Значение,
	 |	Характеристики.Основная КАК Основная,
	 |	Характеристики.Идентификатор КАК Идентификатор,
	 |	Характеристики.Наименование КАК НаименованиеХарактеристики
	 |ПОМЕСТИТЬ втХарактеристики
	 |ИЗ
	 |	&Характеристики КАК Характеристики
	 |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	ПредметСнабжения,
	 |	Характеристика
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	Аналоги.ПредметСнабжения КАК ПредметСнабжения,
	 |	Аналоги.Аналог КАК Аналог,
	 |	Аналоги.Идентификатор КАК Идентификатор,
	 |	Аналоги.ИдентификаторАналога КАК ИдентификаторАналога
	 |ПОМЕСТИТЬ втАналоги
	 |ИЗ
	 |	&Аналоги КАК Аналоги";
	 Запрос.УстановитьПараметр("ПредметыСнабжения", Объект.ПредметыСнабжения.Выгрузить());
	 Запрос.УстановитьПараметр("Характеристики", Объект.Характеристики.Выгрузить());
	 Запрос.УстановитьПараметр("Аналоги", Объект.Аналоги.Выгрузить());
	 
	 Запрос.Выполнить();
	 
	 КорректировкаДанныхСправочников.ВыполнитьОбновлениеДанныхКаталогаПредметовСнабжения(Запрос, ДанныеФайлаИмпорта, Объект.Поставщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеБД(Команда)
	
	СравнитьСДаннымиБД();
	
КонецПроцедуры

#КонецОбласти
