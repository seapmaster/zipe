
&НаКлиенте
Процедура ВывестиТекущееСостояние(ТекстСообщения,ДатаНачала=Неопределено,КоличествоЗавершено=0,ОбщееКоличество=0,СтрПрошло="",СтрОсталось="",СтрокаПояснение="") Экспорт
	
	ОбработкаПрерыванияПользователя();
	
	Если ДатаНачала = Неопределено Тогда
		ДатаНачала = ТекущаяДата();
	КонецЕсли; 
	
	ТекДата = ТекущаяДата();
	ВремяОсталось = Дата(1,1,1) + ?(КоличествоЗавершено=0,0,(ТекДата - ДатаНачала)/КоличествоЗавершено*(ОбщееКоличество-КоличествоЗавершено));
	ВремяПрошло   = Дата(1,1,1) + (ТекДата-ДатаНачала);
	СтрОсталось = ?(ВремяОсталось = Дата(1,1,1),"00:00:00",?(Год(ВремяОсталось)>1,Строка(Год(ВремяОсталось)-1) + " г. ","") + ?(Месяц(ВремяОсталось)>1,Строка(Месяц(ВремяОсталось)-1) + " мес. ","") + ?(День(ВремяОсталось)>1,Строка(День(ВремяОсталось)-1) + " дн. ","") + Формат(ВремяОсталось,"ДФ=""ЧЧ:мм:сс"""));
	СтрПрошло 	= ?(ВремяПрошло   = Дата(1,1,1),"00:00:00",?(Год(ВремяПрошло)>1,Строка(Год(ВремяПрошло)-1) + " г. ","") + ?(Месяц(ВремяПрошло)>1,Строка(Месяц(ВремяПрошло)-1) + " мес. ","") + ?(День(ВремяПрошло)>1,Строка(День(ВремяПрошло)-1) + " дн. ","") + Формат(ВремяПрошло,"ДФ=""ЧЧ:мм:сс"""));
	СтрокаПояснение = "Прошло: " + СтрПрошло + "  Осталось: " + СтрОсталось;
	
	Состояние("" + ДатаНачала  + " (" + КоличествоЗавершено + "/" + ОбщееКоличество + "): " + ТекстСообщения 
	,?(ОбщееКоличество=0,100,Цел(100/ОбщееКоличество*КоличествоЗавершено))
	,СтрокаПояснение);
		
КонецПроцедуры

&НаКлиенте
Функция ПодключитсяКЭксель()
	
	XLSОбъект = Новый COMОбъект("Excel.Application"); 
	
    Попытка
        Эксель = XLSОбъект.Workbooks.Open(ФайлЗагрузки, , Истина);
    Исключение
		Инф = ИнформацияОбОшибке();
		Сообщить ("Проблемы с подключением к Excel: " + Инф.Причина.Описание);
		Возврат Неопределено;
    КонецПопытки;
	
	Возврат Эксель; 
	
КонецФункции

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		КаталогВыгрузки = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru = 'Текст'; en = 'Text'")
	+ "(*.xlsx)|*.xlsx|(*.xls)|*.xls";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ФайлЗагрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ВернутьЗначениеРеквизитаПоставщика(ИмяРеквизита="")
	
	Возврат ТекПоставщик[ИмяРеквизита];
	
КонецФункции

&НаСервере
Функция ВернутьКонтакнуюИнформацию(Вид = "")
	
	Если Вид = "ПочтовыйАдрес" Тогда
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекПоставщик, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдрес);
	ИначеЕсли Вид = "ЭлектроннаяПочта" Тогда
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекПоставщик, Справочники.ВидыКонтактнойИнформации.ЭлектроннаяПочта);
	ИначеЕсли Вид = "Факс" Тогда
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ТекПоставщик, Справочники.ВидыКонтактнойИнформации.Факс);
	Иначе 
		Возврат ""
	КонецЕсли; 
	
КонецФункции
 
&НаКлиенте
Процедура ЗаполнитьПараметрыЗамены()
	
	//ТекПоставщик;
	ТаблЗамены.Очистить();
	
	НовСтр = ТаблЗамены.Добавить();
	НовСтр.ЧтоЗаменить = "< название организации>";
	НовСтр.НаЧтоЗаменить = ВернутьЗначениеРеквизитаПоставщика("Наименование");
	
	НовСтр = ТаблЗамены.Добавить();
	НовСтр.ЧтоЗаменить = "<должность руководителя организации>";
	ДолжностьРуководителя = ВернутьЗначениеРеквизитаПоставщика("ДолжностьРуководителяДательный");
	НовСтр.НаЧтоЗаменить = ?(ДолжностьРуководителя = "", "Генеральному директору ", ДолжностьРуководителя);
	
	//НовСтр = ТаблЗамены.Добавить();
	//НовСтр.ЧтоЗаменить = "<Должность руководителя и название организации>";
	//НовСтр.НаЧтоЗаменить = ВернутьЗначениеРеквизитаПоставщика("ДолжностьРуководителяДательный") + Символы.ПС + ВернутьЗначениеРеквизитаПоставщика("Название"); // "БазуновДА";
	
	НовСтр = ТаблЗамены.Добавить();
	НовСтр.ЧтоЗаменить = "<Фамилия и инициалы руководителя>";
	НовСтр.НаЧтоЗаменить = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ВернутьЗначениеРеквизитаПоставщика("ФИОРуководителяДательный"));
	
	НовСтр = ТаблЗамены.Добавить();
	НовСтр.ЧтоЗаменить = "<Почтовый адрес организации>";
	НовСтр.НаЧтоЗаменить = ВернутьКонтакнуюИнформацию("ПочтовыйАдрес");
	
	НовСтр = ТаблЗамены.Добавить();
	НовСтр.ЧтоЗаменить = "<Номер факса>";
	НовСтр.НаЧтоЗаменить = ВернутьКонтакнуюИнформацию("Факс");
	
	НовСтр = ТаблЗамены.Добавить();
	НовСтр.ЧтоЗаменить = "<Имя и отчество руководителя>";
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ВернутьЗначениеРеквизитаПоставщика("ФИОРуководителя"));
	НовСтр.НаЧтоЗаменить = ?(НЕ СтруктураФИО.Имя = Неопределено, СтруктураФИО.Имя, "") + " " + ?(НЕ СтруктураФИО.Отчество = Неопределено, СтруктураФИО.Отчество, "");
	
	НовСтр = ТаблЗамены.Добавить();
	НовСтр.ЧтоЗаменить = "<электронный адрес>.";
	НовСтр.НаЧтоЗаменить = ВернутьКонтакнуюИнформацию("ЭлектроннаяПочта");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьИЗаписатьШаблонWord(ИмяФайла)
	
	Попытка
		//Получаем макет из двоичных данных
		Шаблон = ПолучитьМакетНаСервере("МакетWord");
		
		ИмяТемпФайла = ПолучитьИмяВременногоФайла(".doc");
		
		Шаблон.Записать(ИмяТемпФайла);
		
		//Создаем COM-объект для работы с Word
		ОбъектВорд = Новый COMОбъект("Word.Application");
		ОбъектВорд.Documents.add(ИмяТемпФайла);
		
		ДокументВорд = ОбъектВорд.Application.Documents(1);
		ДокументВорд.Activate();
		
	Исключение 
		Сообщить("Ошибка при запуске приложения "+ОписаниеОшибки());
	КонецПопытки;	
	
	ЗаполнитьПараметрыЗамены();
	
	Для каждого Замена Из ТаблЗамены Цикл
		ДокументВорд.Content.Find.Execute(Замена.ЧтоЗаменить,,,,,,,,, Замена.НаЧтоЗаменить, 2)
	КонецЦикла; 
	
	Попытка
		ДокументВорд.SaveAs(ИмяФайла);
		//ДокументВорд.Close();
		ДокументВорд.Application.Quit();
	Исключение
	    ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("Документ Word не записан: " + ОписаниеОшибки);
	КонецПопытки;
	
	ДокументВорд = "";
	
	УдалитьФайлы(ИмяТемпФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИЗаписатьШаблонExcel(ИмяФайла, ДанныеСтрок)
	
	Попытка
		//Получаем макет из двоичных данных
		Шаблон = ПолучитьМакетНаСервере("МакетExcel");
		
		ИмяТемпФайла = ПолучитьИмяВременногоФайла(".xlsx");
		
		Шаблон.Записать(ИмяТемпФайла);
		
		//Создаем COM-объект для работы с Word
		ОбъектExcel = Новый COMОбъект("Excel.Application");
		
		Книга = ОбъектExcel.WorkBooks.Open(ИмяТемпФайла);
		
	Исключение 
		
		Сообщить("Ошибка при запуске приложения "+ОписаниеОшибки());
		
	КонецПопытки;	
	
	Лист = Книга.WorkSheets(1);
	СчетчикСтрок = 3;
	Для каждого Элем Из ДанныеСтрок Цикл
		
		Лист.Cells(СчетчикСтрок, 1).Value = Элем.Идентификатор;
		Лист.Cells(СчетчикСтрок, 2).Value = Элем.ПредметСнабжения;
		Лист.Cells(СчетчикСтрок, 3).Value = Элем.Входимость;
		СчетчикСтрок = СчетчикСтрок + 1;
		
	КонецЦикла;
	
	Попытка
		ОбъектExcel.Application.DisplayAlerts = False;
		Книга.SaveAs(ИмяФайла);
		ОбъектExcel.Application.Quit();
	Исключение
	    ОписаниеОшибки = ОписаниеОшибки();
		Сообщить("Документ Эксель не записан: " + ОписаниеОшибки);
	КонецПопытки;
	
	ОбъектExcel = "";
	
	УдалитьФайлы(ИмяТемпФайла);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВыгруженныеЭлементыВРегистр()
	
	Дерево = ДанныеФормыВЗначение(ДеревоПС, Тип("ДеревоЗначений"));
	
	ДатаВыгрузки = ТекущаяДата();
	Статус		 = Перечисления.СтатусыВыгрузкиПредметовСнабжения.Отправлено;
	
	Для каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Поставщик = СтрокаДерева.СсылкаПоставщик;
		
		Набор = РегистрыСведений.ВыгруженныеПредметыСнабжения.СоздатьНаборЗаписей();
		Набор.Отбор.Поставщик.Установить(Поставщик);
		Набор.Прочитать();
		Набор.Очистить();
		
		Для каждого Строка Из СтрокаДерева.Строки Цикл
			
			НовСтр = Набор.Добавить();
			НовСтр.Поставщик = Поставщик;
			НовСтр.ПредметСнабжения = Строка.СсылкаПС;
			НовСтр.ДатаВыгрузки = ДатаВыгрузки;
			НовСтр.Статус = Статус;
			
		КонецЦикла; 
		
		Набор.Записать(Истина);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере(Имя="")
	
	Если Имя = "" Тогда
		Имя = "Макет";
	КонецЕсли; 
	
	ОтчетОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОтчетОбъект.ПолучитьМакет(Имя);
	
	Возврат Макет;
	
КонецФункции

&НаСервере
Функция СформироватьДеревоДляВыгрузки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблПоставщиков
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Контрагент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КаталогПСИзготовителиИПоставщики.Контрагент КАК Поставщик,
	|	КаталогПС.Ссылка КАК Ссылка,
	|	КаталогПС.Наименование КАК НаименованиеПС,
	|	КаталогПС.Обозначение КАК ОбозначениеПС,
	|	КаталогПС.ДокументНаПоставку КАК ДокументНаПоставкуПС,
	|	МАКСИМУМ(СтруктураЗаказа.Родитель.ПредметСнабжения) КАК Входимость
	|ПОМЕСТИТЬ ТаблицаПС
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПСИзготовителиИПоставщики
	|		ПО (КаталогПСИзготовителиИПоставщики.Ссылка = КаталогПС.Ссылка)
	|			И (КаталогПСИзготовителиИПоставщики.Поставщик)
	|			И (КаталогПСИзготовителиИПоставщики.Контрагент В (&Контрагент))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказа
	|		ПО (СтруктураЗаказа.ПредметСнабжения = КаталогПС.Ссылка)
	|			И (НЕ СтруктураЗаказа.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа))
	|ГДЕ
	|	СтруктураЗаказа.Владелец.Владелец В(&Проекты)
	|	И НЕ КаталогПС.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	КаталогПСИзготовителиИПоставщики.Контрагент,
	|	КаталогПС.Ссылка,
	|	КаталогПС.Наименование + "", "" + КаталогПС.Обозначение + "", "" + КаталогПС.ДокументНаПоставку,
	|	КаталогПС.Наименование,
	|	КаталогПС.Обозначение,
	|	КаталогПС.ДокументНаПоставку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблПоставщиков.Ссылка.Наименование КАК Поставщик,
	|	ТаблПоставщиков.Ссылка КАК СсылкаПоставщик,
	|	ЕСТЬNULL(ТаблицаПС.Ссылка, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)) КАК СсылкаПС,
	|	ЕСТЬNULL(ТаблицаПС.НаименованиеПС, """") КАК НаименованиеПС,
	|	ЕСТЬNULL(ТаблицаПС.ОбозначениеПС, """") КАК ОбозначениеПС,
	|	ЕСТЬNULL(ТаблицаПС.ДокументНаПоставкуПС, """") КАК ДокументНаПоставкуПС,
	|	ЕСТЬNULL(ТаблицаПС.Входимость.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(ТаблицаПС.Входимость.Обозначение, """") КАК Обозначение,
	|	ЕСТЬNULL(ТаблицаПС.Входимость.ДокументНаПоставку, """") КАК ДокументНаПоставку
	|ИЗ
	|	ТаблПоставщиков КАК ТаблПоставщиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПС КАК ТаблицаПС
	|		ПО ТаблПоставщиков.Ссылка = ТаблицаПС.Поставщик
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	НаименованиеПС
	|ИТОГИ
	|	МИНИМУМ(СсылкаПоставщик)
	|ПО
	|	Поставщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаПС";
	
	Проекты = Новый Массив;
	Проекты.Добавить(Справочники.ПроектыКораблей.НайтиПоНаименованию("877ЭКМ"));
	Проекты.Добавить(Справочники.ПроектыКораблей.НайтиПоНаименованию("11356"));
	Запрос.УстановитьПараметр("Проекты", Проекты);
	МассПоставщиков = Новый Массив;
	Для каждого Пост Из Поставщики Цикл
		Если Пост.Пометка Тогда
			МассПоставщиков.Добавить(Пост.Значение);
		КонецЕсли; 
	КонецЦикла; 
	Запрос.УстановитьПараметр("Контрагент", МассПоставщиков);
	
	Дерево = ДанныеФормыВЗначение(ДеревоПС, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаПоставщик = Дерево.Строки.Добавить();
		СтрокаПоставщик.Поставщик = Выборка.Поставщик;
		СтрокаПоставщик.СсылкаПоставщик = Выборка.СсылкаПоставщик;
		
		ВыборкаПС = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПС.Следующий() Цикл
			Если ВыборкаПС.СсылкаПС.Пустая() Тогда
				Продолжить;
			КонецЕсли; 
			НовСтр = СтрокаПоставщик.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПС);
			НовСтр.ПредметСнабжения = ВыборкаПС.НаименованиеПС + ?(ВыборкаПС.ОбозначениеПС = "", "", ", " +ВыборкаПС.ОбозначениеПС) + ?(ВыборкаПС.ДокументНаПоставкуПС = "", "", ", " +ВыборкаПС.ДокументНаПоставкуПС);
			НовСтр.Входимость = ВыборкаПС.Наименование + ?(ВыборкаПС.Обозначение = "", "", ", " +ВыборкаПС.Обозначение) + ?(ВыборкаПС.ДокументНаПоставку = "", "", ", " +ВыборкаПС.ДокументНаПоставку);
			НовСтр.Идентификатор = ВыборкаПС.СсылкаПС.УникальныйИдентификатор();
		КонецЦикла; 
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоПС);

КонецФункции

&НаКлиенте
Процедура ЗаписатьФайлPDF(ИмяФайла)
	
	//Получаем макет из двоичных данных
	МакетPDF = ПолучитьМакетНаСервере("МакетPDF");
	
	МакетPDF.Записать(ИмяФайла);
	
КонецПроцедуры
 
&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если КаталогВыгрузки = "" Тогда
		Сообщить("Не указан каталог выгрузки");
		Возврат;
	КонецЕсли; 
	
	СформироватьДеревоДляВыгрузки();
	
	Выборка = ДеревоПС.ПолучитьЭлементы(); 	ВремяНачалаОбработки = ТекущаяДата(); 
	
	ОбщееКоличество = Выборка.Количество();
	Порция = МАКС(Цел(ОбщееКоличество/100), 1); ТекСчетчик = 0;
	
	Если ОбщееКоличество = 0 Тогда
		Сообщить("Нет данных для выгрузки")
	КонецЕсли; 
	
	Для каждого СтрокаДерева Из Выборка Цикл
		
		Поставщик = СокрЛП(СтрокаДерева.Поставщик); ТекСчетчик = ТекСчетчик + Порция;
		ТекПоставщик = СтрокаДерева.СсылкаПоставщик;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			Сообщить("По "+Строка(Поставщик)+" нет данных для выгрузки");
			Продолжить;
		КонецЕсли; 
		
		// Состояние
		ВывестиТекущееСостояние("Выгрузка: "+Поставщик, ВремяНачалаОбработки, ТекСчетчик, ОбщееКоличество);
		
		// Путь для выгрузки
		Путь = КаталогВыгрузки+"\"+СтрЗаменить(Поставщик, """", "");
		
		// СОздаем каталог с именем поставщика
		СоздатьКаталог(Путь);
		
		// Имя файла эксель		
		ИмяФайла = Путь + "\"+ВернутьЗначениеРеквизитаПоставщика("Код")+".xlsx";
		// Записываем файл в эксель
		ЗаполнитьИЗаписатьШаблонExcel(ИмяФайла, СтрокаДерева.ПолучитьЭлементы());
		
		// Имя файла word
		ИмяФайла = Путь + "\"+ВернутьЗначениеРеквизитаПоставщика("Код")+".doc";
		// Записываем файл в word
		ЗаполнитьИЗаписатьШаблонWord(ИмяФайла);
		
		// Имя файла pdf
		ИмяФайлаPDF = Путь + "\23-12776.pdf";
		// Записываем файл pdf
		ЗаписатьФайлPDF(ИмяФайлаPDF);
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	ЗаписатьВыгруженныеЭлементыВРегистр();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьВыгруженныеНаСервере()
	
	Набор = РегистрыСведений.ВыгруженныеПредметыСнабжения.СоздатьНаборЗаписей();
	Набор.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыгруженные(Команда)
	ОчиститьВыгруженныеНаСервере();
КонецПроцедуры

// ++ Загрузка
&НаСервере
Функция ВернутьТаблицуДляЦен()
	
	ТЗ_Цен = Новый ТаблицаЗначений;
	ТЗ_Цен.Колонки.Добавить("ПредметСнабжения");
	ТЗ_Цен.Колонки.Добавить("ТипЦены");
	ТЗ_Цен.Колонки.Добавить("Контрагент");
	ТЗ_Цен.Колонки.Добавить("Цена");
	ТЗ_Цен.Колонки.Добавить("Количество");
	ТЗ_Цен.Колонки.Добавить("Валюта");
	ТЗ_Цен.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ_Цен.Колонки.Добавить("Статус");
	ТЗ_Цен.Колонки.Добавить("ДатаЦены");
	ТЗ_Цен.Колонки.Добавить("Примечание");
	
	Возврат ТЗ_Цен;
	
КонецФункции

&НаСервере
Функция СоздатьВводЦен(ТЗ, НаДату="", Комментарий="")
	
	НовДок = Документы.ВводНачальныхОстатковЦен.СоздатьДокумент();
	НовДок.Дата = ?(НаДату = "", ТекущаяДата(), НаДату);
	НовДок.Комментарий = Комментарий;
	
	НовДок.Цены.Загрузить(ТЗ);
	
	НовДок.Записать(РежимЗаписиДокумента.Проведение);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНаСервере()
	
	СпрПС = Справочники.КаталогПредметовСнабжения;
	СтатусЗагружено = Перечисления.СтатусыВыгрузкиПредметовСнабжения.Загружено;
	
	ТЗ_Цен = ВернутьТаблицуДляЦен();
	
	Рубль = Справочники.ОКВ.НайтиПоКоду("643");
	
	Набор = РегистрыСведений.ВыгруженныеПредметыСнабжения.СоздатьНаборЗаписей();
	Набор.Отбор.Поставщик.Установить(ТекПоставщик);
	Набор.Прочитать();
	
	ТаблицаНабора = Набор.Выгрузить();
	
	Для каждого Строка Из ТаблицаЗагрузки Цикл
		
		СсылкаНайденныйПС = СпрПС.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.Идентификатор));
		
		Попытка
			Пустая = СсылкаНайденныйПС.ПолучитьОбъект();
		Исключение
		    Пустая = Неопределено;
		КонецПопытки;
		
		НадоЗаписать = Ложь;
		Если НЕ Пустая = Неопределено Тогда
			
			Стру = Новый Структура;
			Если НЕ Строка.Наименование = "" И НЕ СсылкаНайденныйПС.Наименование = Строка.Наименование Тогда
				Стру.Вставить("Наименование", Строка.Наименование);
				НадоЗаписать = Истина;
			КонецЕсли; 
			Если НЕ Строка.Обозначение = "" И НЕ СсылкаНайденныйПС.Обозначение = Строка.Обозначение Тогда
				Стру.Вставить("Обозначение", Строка.Обозначение);
				НадоЗаписать = Истина;
			КонецЕсли; 
			Если НЕ Строка.ДокументНаПоставку = "" И НЕ СсылкаНайденныйПС.ДокументНаПоставку = Строка.ДокументНаПоставку Тогда
				Стру.Вставить("ДокументНаПоставку", Строка.ДокументНаПоставку);
				НадоЗаписать = Истина;
			КонецЕсли;
			Если НЕ Строка.ИнформацияОПравилах = "" И НЕ СсылкаНайденныйПС.ПравилаУпаковкиТранспортировкиХранения = Строка.ИнформацияОПравилах Тогда
				Стру.Вставить("ПравилаУпаковкиТранспортировкиХранения", Строка.ИнформацияОПравилах);
				НадоЗаписать = Истина;
			КонецЕсли;
			
		Иначе
			
			Сообщить("Не нашли ПС!!!");
			Продолжить;
			
		КонецЕсли;
		
		Если НадоЗаписать Тогда
			СпрОб = СсылкаНайденныйПС.ПолучитьОбъект();
			Для каждого Элем Из Стру Цикл
				СпрОб[Элем.Ключ] = Элем.Значение;
			КонецЦикла;
			Попытка
				//ЗаписатьВЛог(Строка.Идентификатор, СпрОб.Ссылка, "", "Обновили ПС: " + Строка(СпрОб.Ссылка));
				СпрОб.Записать();
			Исключение
			    аа = ОписаниеОшибки();
				Сообщить(аа);
				Прервать;
			КонецПопытки;
			
			Найд = ТаблицаНабора.Найти(СпрОб.Ссылка, "ПредметСнабжения");
			
			Если НЕ Найд = Неопределено Тогда
				Найд.Статус = СтатусЗагружено;
			КонецЕсли; 
		КонецЕсли; 
		
		ЭлемПС = СпрОб.Ссылка;
		Если ТЗ_Цен.Найти(ЭлемПС, "ПредметСнабжения") = Неопределено Тогда
			НовСтр = ТЗ_Цен.Добавить();
			НовСтр.ПредметСнабжения = ЭлемПС;
			НовСтр.ТипЦены = Перечисления.ТипыЦен.Внутренняя; 
			НовСтр.Контрагент = ТекПоставщик;
			НовСтр.Цена = Строка.Цена;
			НовСтр.Количество = 0;
			НовСтр.Валюта = Рубль;
			НовСтр.ЕдиницаИзмерения = "";
			НовСтр.ДатаЦены = Строка.ДатаЦены;
		КонецЕсли;
		
	КонецЦикла; 
	
	Набор.Загрузить(ТаблицаНабора);
	Набор.Записать(Истина);
	
	ТЗ_Годов = ТЗ_Цен.Скопировать();
	ТЗ_Годов.Свернуть("ДатаЦены");
	
	Для каждого Стр Из ТЗ_Годов Цикл
		НовТЗ = ТЗ_Цен.Скопировать(ТЗ_Цен.НайтиСтроки(Новый Структура("ДатаЦены", Стр.ДатаЦены)));
		СоздатьВводЦен(НовТЗ, Стр.ДатаЦены, "Цены от "+Строка(ТекПоставщик));
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Эксель = ПодключитсяКЭксель();
	
	Если Эксель = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НачалоСтроки = 3;
	
	// Лист оборудование
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	
	Для сч = НачалоСтроки По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 1).value);
		Стр2 = СокрЛП(ЛистЭксель.Cells(сч, 2).value);
		Стр3 = СокрЛП(ЛистЭксель.Cells(сч, 3).value);
		Стр4 = СокрЛП(ЛистЭксель.Cells(сч, 4).value);
		Стр5 = СокрЛП(ЛистЭксель.Cells(сч, 5).value);
		Стр6 = СокрЛП(ЛистЭксель.Cells(сч, 6).value);
		Стр7 = СокрЛП(ЛистЭксель.Cells(сч, 7).value);
		Стр8 = СокрЛП(ЛистЭксель.Cells(сч, 8).value);
		Стр9 = СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр10 = ЛистЭксель.Cells(сч, 10).value;
		Стр11 = СокрЛП(ЛистЭксель.Cells(сч, 11).value);
		
		НовСтр = ТаблицаЗагрузки.Добавить();
		НовСтр.Идентификатор       = Стр1;
		НовСтр.Наименование        = Стр4;
		НовСтр.Обозначение         = Стр5;
		НовСтр.ДокументНаПоставку  = Стр6;
		НовСтр.Цена                = Стр9;
		Если ТипЗнч(Стр10) = Тип("Дата") Тогда
			НовСтр.ДатаЦены		   = Стр10;
		Иначе
			МассДаты = СтрРазделить(СтрЗаменить(Стр10, " 00:00:00", ""), ".");
			НовСтр.ДатаЦены		   = Дата(МассДаты[2], МассДаты[1], МассДаты[0]);
		КонецЕсли; 
		НовСтр.ИнформацияОПравилах = Стр11;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	ЗагрузитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекПоставщик = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОСКНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПризнакОСК
	|	И НЕ Организации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Поставщики.ЗагрузитьЗначения(Выборка.ВыгрузитьКолонку("Ссылка"));
	Поставщики.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОСК(Команда)
	ЗаполнитьОСКНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометки(Флаг)
	Поставщики.ЗаполнитьПометки(Флаг);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	УстановитьСнятьПометки(Ложь)
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	УстановитьСнятьПометки(Истина)
КонецПроцедуры
