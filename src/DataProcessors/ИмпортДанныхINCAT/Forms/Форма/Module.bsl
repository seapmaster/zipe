//ДОДЕЛАТЬ - УСТАНАВЛИВАТЬ ПРИЗНАК ЗИП ПРИ НАЛИЧИИ КОЛИЧЕСТВА В ЗИП (0 - изделие, > 0 - ЗИП)

//ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ
Перем ТаблицаЭлементовСтруктурыЗаказа, СоответствиеСозданныхЭлементовСтруктурыЗаказа;

//ПРОЦЕДУРЫ И ФУНКЦИИ ИМПОРТА ДАННЫХ
#Область ИмпортДанных

&НаКлиенте
Процедура ИмпортироватьДанныеINCAT()
	
	//подключение к базе данных INCAT
	Состояние("Подключение к базе данных INCAT...",,,БиблиотекаКартинок.ДлительнаяОперация48);
	РезультатПодключенияКВнешнемуИсточникуДанных = ПодключитьсяКИсточникуДанных();
	
	Если Не РезультатПодключенияКВнешнемуИсточникуДанных = "Успешно" Тогда
		
		ПоказатьПредупреждение(,РезультатПодключенияКВнешнемуИсточникуДанных);
		Возврат;
		
	КонецЕсли;
	
	//импорт предметов снабжения
	Состояние("Заполнение таблицы предметов снабжения...",,,БиблиотекаКартинок.ДлительнаяОперация48);
	ЗагрузитьПредметыСнабжения();
	
	Если ТаблицаПредметовСнабжения.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,"Нет данных в базе данных INCAT!");
		Возврат;
		
	КонецЕсли;
	
	//импорт характеристик
	Если ЗагружатьХарактеристики Тогда
		
		Состояние("Импорт технических характеристик...",,,БиблиотекаКартинок.ДлительнаяОперация48);
		ЗагрузитьТехническиеХарактеристики();
		
	КонецЕсли;
	
	//импорт структуры заказа
	Если ИмпортироватьСтруктуруЗаказа Тогда    
		
		//формирование дерева структуры заказа
		Состояние("Формирование дерева структуры заказа...",,,БиблиотекаКартинок.ДлительнаяОперация48);
		ПолучитьДеревоСтруктурыЗаказа();
		
		//заполнение структуры заказа в БД
		Состояние("Заполнение структуры заказа...",,,БиблиотекаКартинок.ДлительнаяОперация48);
		ЗаполнитьСтруктуруЗаказа();
		
	КонецЕсли;
	
	//импорт неструктурированных элементов
	Если ИмпортироватьНеструктурированныеЭлементы И ЗначениеЗаполнено(ГруппаИмпорта) Тогда
		
		 Состояние("Импорт неструктурированных элементов...",,,БиблиотекаКартинок.ДлительнаяОперация48);
		 ЗагрузитьНеструктурированныеЭлементы();
		
	КонецЕсли; 
	
	//отключение от базы данных
	Если ОтключитьсяОтИсточникаДанныхПоЗавершении Тогда
		
		ОтключитьсяОтВнешнегоИсточникаДанных();
		
	КонецЕсли;
	
КонецПроцедуры

//процедура дополняет дерево структуры заказа по INCAT элементами таблицы Item базы данных INCAT,
//отсутствовавшими в таблице EASK (структура заказа)
&НаСервере
Процедура ЗагрузитьНеструктурированныеЭлементы()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|ПОМЕСТИТЬ втТаблицаПредметовСнабжения
	|ИЗ
	|	&ТаблицаПредметовСнабжения КАК ТаблицаПредметовСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения
	|ПОМЕСТИТЬ втСтруктурированныеПредметыСнабжения
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель В ИЕРАРХИИ(&Родитель)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|ИЗ
	|	втТаблицаПредметовСнабжения КАК втТаблицаПредметовСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтруктурированныеПредметыСнабжения КАК втСтруктурированныеПредметыСнабжения
	|		ПО втТаблицаПредметовСнабжения.ПредметСнабжения = втСтруктурированныеПредметыСнабжения.ПредметСнабжения
	|ГДЕ
	|	втСтруктурированныеПредметыСнабжения.ПредметСнабжения ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ТаблицаПредметовСнабжения",ТаблицаПредметовСнабжения.Выгрузить());
	Запрос.УстановитьПараметр("Владелец",Заказ);
	Запрос.УстановитьПараметр("Родитель",ГруппаИмпорта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаЭлементовСтруктурыЗаказа = ПолучитьТаблицуЭлементовСтруктурыЗаказа();
	
	ГруппаНеструктурировано = ПолучитьГруппуНеструктурировано();
	
	СтруктураЗаказаМенеджер = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	
	СтруктураЗаказаИзделие = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 1;
	
	Пока Выборка.Следующий() Цикл 
		
		ЭлементСтруктурыЗаказа = ПолучитьЭлементСтруктурыЗаказа(Выборка.ПредметСнабжения);
		ЭлементСтруктурыЗаказа.Родитель = ГруппаНеструктурировано;
		
		Если Не ЗначениеЗаполнено(ЭлементСтруктурыЗаказа.Ссылка) Тогда
			
			ЭлементСтруктурыЗаказа.ПредметСнабжения = Выборка.ПредметСнабжения;
			ЭлементСтруктурыЗаказа.Наименование = Строка(Выборка.ПредметСнабжения);
			ЭлементСтруктурыЗаказа.Владелец = Заказ;
			ЭлементСтруктурыЗаказа.Тип = СтруктураЗаказаИзделие;
			
		КонецЕсли;
		
		ЭлементСтруктурыЗаказа.Записать();
		
		ЗаписатьВЛог(ЭлементСтруктурыЗаказа.Ссылка, "Добавлен неструктурированный элемент");
		
		Сч = Сч + 1;
			
	КонецЦикла; 
	
КонецПроцедуры
 
//процедура заполняет структуру заказа в БД (если группа импорта не указана - будет создана новая группа)
&НаСервере
Процедура ЗаполнитьСтруктуруЗаказа()
	
	СоответствиеСозданныхЭлементовСтруктурыЗаказа = Новый Соответствие;
	
	СтруктураЗаказаГруппа = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
	СтруктураЗаказаИзделие = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
	
	
	Если ГруппаИмпорта.Пустая() Или ГруппаИмпорта = ГруппаINCAT Тогда
		
		НоваяГруппаINCAT = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		НоваяГруппаINCAT.Наименование = ГруппаINCAT.Наименование+" новый";
		НоваяГруппаINCAT.Владелец = Заказ;
		НоваяГруппаINCAT.Тип = СтруктураЗаказаГруппа;
		НоваяГруппаINCAT.ЕстьПодчиненные = Истина;
		НоваяГруппаINCAT.Записать();
		
		ГруппаИмпорта = НоваяГруппаINCAT.Ссылка;
		
	КонецЕсли;
	
	ТаблицаЭлементовСтруктурыЗаказа = ПолучитьТаблицуЭлементовСтруктурыЗаказа();
	
	ДобавитьЭлементыСтруктурыЗаказа(ДеревоСтруктурыЗаказа.ПолучитьЭлементы(), ГруппаИмпорта);
	
КонецПроцедуры

//функция возвращает таблицу значений, содержащую соответствие элементов структуры заказа предметам снабжения,
//к которым они относятся
&НаСервере
Функция ПолучитьТаблицуЭлементовСтруктурыЗаказа()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&Родитель)";
	Запрос.УстановитьПараметр("Владелец",Заказ);
	Запрос.УстановитьПараметр("Родитель",ГруппаINCAT);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
 
//процедура добавляет элементы в справочник Структура заказа
&НаСервере
Процедура ДобавитьЭлементыСтруктурыЗаказа(СтрокиДерева, Родитель)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ИдентификаторЭлемента = Строка(Родитель.УникальныйИдентификатор()) + "|" + Строка(СтрокаДерева.ПредметСнабжения.УникальныйИдентификатор());
		
		ЭлементСтруктурыЗаказаСсылка = СоответствиеСозданныхЭлементовСтруктурыЗаказа.Получить(ИдентификаторЭлемента);
		
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		
		Если ЭлементСтруктурыЗаказаСсылка = Неопределено Тогда //если на данном уровне иерархии такого элемента еще не было, то переместим или создадим новый
			
			ЭлементСтруктурыЗаказа = ПолучитьЭлементСтруктурыЗаказа(СтрокаДерева.ПредметСнабжения);
			ЗаполнитьЗначенияСвойств(ЭлементСтруктурыЗаказа, СтрокаДерева);
			ЭлементСтруктурыЗаказа.Наименование = Строка(СтрокаДерева.ПредметСнабжения);
			ЭлементСтруктурыЗаказа.Владелец = Заказ;
			ЭлементСтруктурыЗаказа.Родитель = Родитель;
						
			ТекстЛога = ?(ЗначениеЗаполнено(ЭлементСтруктурыЗаказа.Ссылка), "Перемещен элемент структуры заказа", "Создан элемент структуры заказа");
			
			Если Не ЗначениеЗаполнено(ЭлементСтруктурыЗаказа.Тип) Тогда
				
				ЭтоЗИП = (СтрокаДерева.КоличествоВЗИПБорт > 0 Или СтрокаДерева.КоличествоВЗИПБаза > 0 Или СтрокаДерева.КоличествоВЗИПДЭ > 0);
				
				ЭлементСтруктурыЗаказа.Тип = СтруктураЗаказаИзделие;
				
				ЭлементСтруктурыЗаказа.ЗИП = ЭтоЗИП;
				
			КонецЕсли;
			
			Если ПодчиненныеСтрокиДерева.Количество() > 0 Тогда
				
				ЭлементСтруктурыЗаказа.ЕстьПодчиненные = Истина;
				ЭлементСтруктурыЗаказа.Записать();
				
				ЭлементСтруктурыЗаказаСсылка = ЭлементСтруктурыЗаказа.Ссылка;
				
				СоответствиеСозданныхЭлементовСтруктурыЗаказа.Вставить(ИдентификаторЭлемента, ЭлементСтруктурыЗаказаСсылка);  
				
				ЗаписатьВЛог(ЭлементСтруктурыЗаказаСсылка, ТекстЛога);
				
				ДобавитьЭлементыСтруктурыЗаказа(ПодчиненныеСтрокиДерева, ЭлементСтруктурыЗаказаСсылка);
				
			Иначе
				 
			
				ЭлементСтруктурыЗаказа.Записать();
				
				ЭлементСтруктурыЗаказаСсылка = ЭлементСтруктурыЗаказа.Ссылка;
				
				СоответствиеСозданныхЭлементовСтруктурыЗаказа.Вставить(ИдентификаторЭлемента, ЭлементСтруктурыЗаказаСсылка);
				
				ЗаписатьВЛог(ЭлементСтруктурыЗаказаСсылка, ТекстЛога);
				
			КонецЕсли;
			
		ИначеЕсли ПодчиненныеСтрокиДерева.Количество() > 0 Тогда //если элемент уже был - то все подчиненные запишем в уже существующий
			
			 ТекстЛога = "Дополнен элемент структуры заказа";
			 
			 ЗаписатьВЛог(ЭлементСтруктурыЗаказаСсылка, ТекстЛога);
			 
			 ДобавитьПотомковЭлементаВСоответствиеСозданных(ЭлементСтруктурыЗаказаСсылка);
			
			 ДобавитьЭлементыСтруктурыЗаказа(ПодчиненныеСтрокиДерева, ЭлементСтруктурыЗаказаСсылка);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

//функция возвращает элемент структуры заказа из старой группы INCAT
//если такого элемента в старой группе нет - создает его
&НаСервере
Функция ПолучитьЭлементСтруктурыЗаказа(ПредметСнабжения)
	
	Если Не ПереноситьЭлементыСтаройСтруктуры Тогда
		
		ЭлементСтруктурыЗаказа = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		
		Обозначение = ПредметСнабжения.Обозначение;
		
		ЭлементСтруктурыЗаказа.ОбозначениеДоп = ?(Обозначение = "", ПредметСнабжения.ДокументНаПоставку, Обозначение);
		
		Возврат ЭлементСтруктурыЗаказа;
		
	КонецЕсли; 
	
	СтрокаТаблицыЭлементовСтруктурыЗаказа = ТаблицаЭлементовСтруктурыЗаказа.Найти(ПредметСнабжения,"ПредметСнабжения");
	
	Если СтрокаТаблицыЭлементовСтруктурыЗаказа = Неопределено Тогда
		
		Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		
	Иначе
		
		ЭлементСтруктурыЗаказаСсылка = СтрокаТаблицыЭлементовСтруктурыЗаказа.Ссылка;
		
		ЭлементСтруктурыЗаказа = ЭлементСтруктурыЗаказаСсылка.ПолучитьОбъект();
		
		ТаблицаЭлементовСтруктурыЗаказа.Удалить(СтрокаТаблицыЭлементовСтруктурыЗаказа);
		
		ДобавитьПотомковЭлементаВСоответствиеСозданных(ЭлементСтруктурыЗаказаСсылка);
		
		Возврат ЭлементСтруктурыЗаказа;
		
	КонецЕсли; 
	
КонецФункции

//процедура дополняет соответствие созданных элементов структуры заказа потомками перемещенного элемента
&НаСервере
Процедура ДобавитьПотомковЭлементаВСоответствиеСозданных(ЭлементСтруктурыЗаказаСсылка)
	
	Отбор = Новый Структура("Родитель", ЭлементСтруктурыЗаказаСсылка);
	
	МассивПотомков = ТаблицаЭлементовСтруктурыЗаказа.НайтиСтроки(Отбор);
	
	Для каждого ПотомокЭлемента Из МассивПотомков Цикл
		
		ИдентификаторЭлемента = Строка(ЭлементСтруктурыЗаказаСсылка.УникальныйИдентификатор()) + "|" + Строка(ПотомокЭлемента.ПредметСнабжения.УникальныйИдентификатор());
		
		СоответствиеСозданныхЭлементовСтруктурыЗаказа.Вставить(ИдентификаторЭлемента, ПотомокЭлемента.Ссылка); 
		
	КонецЦикла;  
	
КонецПроцедуры

//функция возвращает ссылку на подчиненную группе импорта группу Неструктурировано
&НаСервере
Функция ПолучитьГруппуНеструктурировано()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = ""Неструктурировано""";
	Запрос.УстановитьПараметр("Владелец",Заказ);
	Запрос.УстановитьПараметр("Родитель",ГруппаИмпорта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ГруппаНеструктурировано = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		ГруппаНеструктурировано.Наименование = "Неструктурировано";
		ГруппаНеструктурировано.Владелец = Заказ;
		ГруппаНеструктурировано.Родитель = ГруппаИмпорта;
		ГруппаНеструктурировано.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
		ГруппаНеструктурировано.ЕстьПодчиненные = Истина;
		ГруппаНеструктурировано.Записать();
		
		Возврат ГруппаНеструктурировано.Ссылка;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
				
	КонецЕсли; 
	
КонецФункции
  
//процедура заполняет дерево структуры заказа, построенное на основании таблицы EASK в базе данных INCAT
&НаСервере
Функция ПолучитьДеревоСтруктурыЗаказа()
	
	//импорт таблицы структуры заказа из базы данных INCAT
	ТаблицаСтруктурыЗаказа = ПолучитьТаблицуСтруктурыЗаказа();
	
	Если ТаблицаСтруктурыЗаказа = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	//формирование дерева структуры заказа
	//помещение таблицы структуры заказа во временную таблицу
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСтруктурыЗаказа.Родитель КАК Родитель,
	|	ТаблицаСтруктурыЗаказа.ПредметСнабжения КАК ПредметСнабжения,
	|	ТаблицаСтруктурыЗаказа.Количество КАК Количество,
	|	ТаблицаСтруктурыЗаказа.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	ТаблицаСтруктурыЗаказа.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	ТаблицаСтруктурыЗаказа.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втЭлементыСтруктурыЗаказа
	|ИЗ
	|	&ТаблицаСтруктурыЗаказа КАК ТаблицаСтруктурыЗаказа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель";
	Запрос.УстановитьПараметр("ТаблицаСтруктурыЗаказа",ТаблицаСтруктурыЗаказа);
	Запрос.Выполнить();
	
	//заполнение дерева структуры заказа
	ЗаполнитьДеревоСтруктурыЗаказа(ДеревоСтруктурыЗаказа.ПолучитьЭлементы(), Справочники.КаталогПредметовСнабжения.ПустаяСсылка(), Запрос);
	
КонецФункции

//процедура заполняет дерево структуры заказа значениями из таблицы структуры заказа
&НаСервере
Процедура ЗаполнитьДеревоСтруктурыЗаказа(СтрокиДерева, Родитель, Запрос, ЭтоКорневыеЭлементы = Истина)
	
	Если ЭтоКорневыеЭлементы Тогда //для корневых элементов выбираем из таблицы те ПС, которые не имеют родителей;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втЭлементыСтруктурыЗаказа.Родитель КАК ПредметСнабжения,
		|	0 КАК Количество,
		|	0 КАК КоличествоВЗИПБорт,
		|	0 КАК КоличествоВЗИПБаза,
		|	0 КАК КоличествоВЗИПДЭ
		|ИЗ
		|	втЭлементыСтруктурыЗаказа КАК втЭлементыСтруктурыЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЭлементыСтруктурыЗаказа КАК Родители
		|		ПО втЭлементыСтруктурыЗаказа.Родитель = Родители.ПредметСнабжения
		|ГДЕ
		|	Родители.ПредметСнабжения ЕСТЬ NULL";
		
	Иначе //для подчиненных элементов выбираем все элементы, принадлежащие данному родителю, но не входящие в его структуру подчинения (во избежание зацикливания)
		
		СписокИмеющихсяЭлементов.Добавить(Родитель);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втЭлементыСтруктурыЗаказа.ПредметСнабжения КАК ПредметСнабжения,
		|	втЭлементыСтруктурыЗаказа.Количество КАК Количество,
		|	втЭлементыСтруктурыЗаказа.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
		|	втЭлементыСтруктурыЗаказа.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
		|	втЭлементыСтруктурыЗаказа.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
		|ИЗ
		|	втЭлементыСтруктурыЗаказа КАК втЭлементыСтруктурыЗаказа
		|ГДЕ
		|	втЭлементыСтруктурыЗаказа.Родитель = &Родитель
		|	И НЕ втЭлементыСтруктурыЗаказа.ПредметСнабжения В (&СписокИмеющихсяЭлементов)";
		Запрос.УстановитьПараметр("Родитель",Родитель);
		Запрос.УстановитьПараметр("СписокИмеющихсяЭлементов",СписокИмеющихсяЭлементов);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		СписокИмеющихсяЭлементов.Удалить(СписокИмеющихсяЭлементов.НайтиПоЗначению(Родитель));
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
		ЗаполнитьДеревоСтруктурыЗаказа(СтрокаДерева.ПолучитьЭлементы(), Выборка.ПредметСнабжения, Запрос, Ложь);
		
	КонецЦикла;
	
	Если Не ЭтоКорневыеЭлементы Тогда
		
		СписокИмеющихсяЭлементов.Удалить(СписокИмеющихсяЭлементов.НайтиПоЗначению(Родитель));
		
	КонецЕсли; 
	
КонецПроцедуры
 
//функция возвращает обработанную (коды INCAT заменены на ссылки на предметы снабжения в БД) таблицу EASK
//для дальнейшего преобразования в дерево
&НаСервере
Функция ПолучитьТаблицуСтруктурыЗаказа()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	EASK.EASKItemCode КАК INCATРодителя,
	|	""00"" КАК Уровень,
	|	EASK.ItemCode КАК INCAT,
	|	EASK.QtyConstituent КАК Количество,
	|	EASK.QtyBDManufacturer КАК КоличествоВЗИПБаза,
	|	EASK.QtyOBManufacturer КАК КоличествоВЗИПБорт,
	|	EASK.QtyLTEManufacturer КАК КоличествоВЗИПДЭ
	|ИЗ
	|	ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.EASK КАК EASK
	|ГДЕ
	|	EASK.EASKType = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	EASK.EASKItemCode,
	|	""00"",
	|	EASK.ItemCode,
	|	EASK.QtyConstituent,
	|	EASK.QtyBDManufacturer,
	|	EASK.QtyOBManufacturer,
	|	EASK.QtyLTEManufacturer
	|ИЗ
	|	ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.EASK КАК EASK
	|ГДЕ
	|	EASK.EASKType = ""00""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	EASK.EASKItemCode,
	|	""00"",
	|	EASK.ItemCode,
	|	EASK.QtyConstituent,
	|	EASK.QtyBDManufacturer,
	|	EASK.QtyOBManufacturer,
	|	EASK.QtyLTEManufacturer
	|ИЗ
	|	ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.EASK КАК EASK
	|ГДЕ
	|	EASK.EASKType ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	EASK.EASKItemCode,
	|	EASK.EASKType,
	|	EASK.ItemCode,
	|	EASK.QtyConstituent,
	|	EASK.QtyBDManufacturer,
	|	EASK.QtyOBManufacturer,
	|	EASK.QtyLTEManufacturer
	|ИЗ
	|	ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.EASK КАК EASK
	|ГДЕ
	|	НЕ EASK.EASKType = """"
	|	И НЕ EASK.EASKType = ""00""
	|	И НЕ EASK.EASKType ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТаблицаСтруктурыЗаказаINCAT = РезультатЗапроса.Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСтруктурыЗаказаINCAT.INCATРодителя КАК INCATРодителя,
	|	ТаблицаСтруктурыЗаказаINCAT.Уровень КАК Уровень,
	|	ТаблицаСтруктурыЗаказаINCAT.INCAT КАК INCAT,
	|	ЕСТЬNULL(ТаблицаСтруктурыЗаказаINCAT.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ТаблицаСтруктурыЗаказаINCAT.КоличествоВЗИПБорт, 0) КАК КоличествоВЗИПБорт,
	|	ЕСТЬNULL(ТаблицаСтруктурыЗаказаINCAT.КоличествоВЗИПБаза, 0) КАК КоличествоВЗИПБаза,
	|	ЕСТЬNULL(ТаблицаСтруктурыЗаказаINCAT.КоличествоВЗИПДЭ, 0) КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втСтруктураЗаказаINCAT
	|ИЗ
	|	&ТаблицаСтруктурыЗаказаINCAT КАК ТаблицаСтруктурыЗаказаINCAT
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	INCAT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ТаблицаПредметовСнабжения.INCAT КАК INCAT
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	&ТаблицаПредметовСнабжения КАК ТаблицаПредметовСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	INCAT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтруктураЗаказаINCAT.INCATРодителя КАК INCATРодителя,
	|	втСтруктураЗаказаINCAT.Уровень КАК Уровень,
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втСтруктураЗаказаINCAT.Количество КАК Количество,
	|	втСтруктураЗаказаINCAT.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втСтруктураЗаказаINCAT.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втСтруктураЗаказаINCAT.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ПОМЕСТИТЬ втСтруктураЗаказаБезРодителей
	|ИЗ
	|	втСтруктураЗаказаINCAT КАК втСтруктураЗаказаINCAT
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыСнабжения КАК втПредметыСнабжения
	|		ПО втСтруктураЗаказаINCAT.INCAT = втПредметыСнабжения.INCAT
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	INCATРодителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК Родитель,
	|	втСтруктураЗаказаБезРодителей.Уровень КАК УровеньРодителя,
	|	втСтруктураЗаказаБезРодителей.ПредметСнабжения КАК ПредметСнабжения,
	|	втСтруктураЗаказаБезРодителей.Количество КАК Количество,
	|	втСтруктураЗаказаБезРодителей.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	втСтруктураЗаказаБезРодителей.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	втСтруктураЗаказаБезРодителей.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ
	|ИЗ
	|	втСтруктураЗаказаБезРодителей КАК втСтруктураЗаказаБезРодителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыСнабжения КАК втПредметыСнабжения
	|		ПО втСтруктураЗаказаБезРодителей.INCATРодителя = втПредметыСнабжения.INCAT";
	Запрос.УстановитьПараметр("ТаблицаСтруктурыЗаказаINCAT",ТаблицаСтруктурыЗаказаINCAT);
	Запрос.УстановитьПараметр("ТаблицаПредметовСнабжения",ТаблицаПредметовСнабжения.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

//функция возвращает выборку элементов таблицы структуры заказа, являющих корневыми
&НаСервере
Функция ПолучитьВыборкуКорневыхЭлементовСтруктурыЗаказа(ТаблицаСтруктурыЗаказа)
			
КонецФункции
 
//процедура выполняет подключение к базе данных INCAT
&НаСервере
Функция ПодключитьсяКИсточникуДанных()
	
	БазаINCAT = ВнешниеИсточникиДанных.БазаДанныхINCAT;
	
	Если БазаINCAT.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Подключен Тогда
		
		Сообщить("Внешний источник данных уже подключен");
		Возврат "Успешно";
		
	КонецЕсли; 
	
	СтрокаСоединения = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ="+ПутьКФайлуБД+";";
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		СтрокаСоединения = СтрокаСоединения + "UID=" + Пользователь + ";"; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пароль) Тогда
		
		СтрокаСоединения = СтрокаСоединения + "PWD=" + Пароль + ";"; 
		
	КонецЕсли; 
	
	ПараметрыСоединения = БазаINCAT.ПолучитьОбщиеПараметрыСоединения();
	ПараметрыСоединения.СтрокаСоединения = СтрокаСоединения;
	
	БазаINCAT.УстановитьОбщиеПараметрыСоединения(ПараметрыСоединения);
	
	Попытка
		
		БазаINCAT.УстановитьСоединение();
		Возврат "Успешно";
		
	Исключение
		
		Возврат "Не удалось подключиться к внешнему источнику данных по причине "+ОписаниеОшибки();
		
	КонецПопытки;
	
КонецФункции

//процедура выполняет отключение от базы данных INCAT
&НаСервере
Процедура ОтключитьсяОтВнешнегоИсточникаДанных()
	
	ВнешниеИсточникиДанных.БазаДанныхINCAT.РазорватьСоединение();
	
КонецПроцедуры
 
//процедура заполняет таблицу соответствия предметов снабжения в текущей базе предметам снабжения в INCAT. Отсутствующие в базе предметы снабжения будут созданы,
//для найденныхз предметов без указанного кода INCAT в базу будет добавлен код INCAT  
&НаСервере
Процедура ЗагрузитьПредметыСнабжения()
	
	ТаблицаПредметовСнабжения.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ItemCode КАК ItemCode,
	|	ВложенныйЗапрос.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Обозначение КАК Обозначение,
	|	EASK.EASKBookRef КАК ДокументНаПоставку
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВложенныйЗапрос.ItemCode КАК ItemCode,
	|		ВложенныйЗапрос.Наименование КАК Наименование,
	|		ВложенныйЗапрос1.Обозначение КАК Обозначение
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Item.ItemCode КАК ItemCode,
	|			Item.ItemDesc КАК Наименование
	|		ИЗ
	|			ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.Item КАК Item
	|		ГДЕ
	|			(Item.ItemDescRus = """"
	|					ИЛИ Item.ItemDescRus ЕСТЬ NULL)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			Item.ItemCode,
	|			Item.ItemDescRus
	|		ИЗ
	|			ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.Item КАК Item
	|		ГДЕ
	|			НЕ Item.ItemDescRus = """"
	|			И НЕ Item.ItemDescRus ЕСТЬ NULL) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Item.ItemCode КАК ItemCode,
	|				Item.ItemCode КАК Обозначение
	|			ИЗ
	|				ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.Item КАК Item
	|			ГДЕ
	|				(Item.ItemCodeRus = """"
	|						ИЛИ Item.ItemCodeRus ЕСТЬ NULL)
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				Item.ItemCode,
	|				Item.ItemCodeRus
	|			ИЗ
	|				ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.Item КАК Item
	|			ГДЕ
	|				НЕ Item.ItemCodeRus = """"
	|				И НЕ Item.ItemCodeRus ЕСТЬ NULL) КАК ВложенныйЗапрос1
	|			ПО ВложенныйЗапрос.ItemCode = ВложенныйЗапрос1.ItemCode) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.EASK КАК EASK
	|		ПО ВложенныйЗапрос.ItemCode = EASK.EASKItemCode";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Item.ItemCode КАК ItemCode,
	|	Item.Наименование КАК Наименование,
	|	Item.Обозначение КАК Обозначение,
	|	Item.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втItemsWG
	|ИЗ
	|	&Item КАК Item
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ItemCode
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втItemsWG.ItemCode КАК ItemCode,
	|	втItemsWG.Наименование КАК Наименование,
	|	втItemsWG.Обозначение КАК Обозначение,
	|	МАКСИМУМ(ЕСТЬNULL(втItemsWG.ДокументНаПоставку, """")) КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втItems
	|ИЗ
	|	втItemsWG КАК втItemsWG
	|
	|СГРУППИРОВАТЬ ПО
	|	втItemsWG.ItemCode,
	|	втItemsWG.Наименование,
	|	втItemsWG.Обозначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	КаталогПредметовСнабжения.Наименование КАК Наименование,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение,
	|	КаталогПредметовСнабжения.INCAT КАК INCAT
	|ПОМЕСТИТЬ втПредметыСнабженияINCAT
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Заказ
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &ГруппаINCAT
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	INCAT,
	|	Наименование,
	|	Обозначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втItems.ItemCode КАК ItemCode,
	|	втItems.Наименование КАК Наименование,
	|	втItems.Обозначение КАК Обозначение,
	|	МАКСИМУМ(ЕСТЬNULL(втПредметыСнабженияINCAT.ПредметСнабжения, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))) КАК ПредметСнабжения,
	|	втItems.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	втItems КАК втItems
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредметыСнабженияINCAT КАК втПредметыСнабженияINCAT
	|		ПО втItems.ItemCode = втПредметыСнабженияINCAT.INCAT
	|
	|СГРУППИРОВАТЬ ПО
	|	втItems.ItemCode,
	|	втItems.Наименование,
	|	втItems.Обозначение,
	|	втItems.ДокументНаПоставку
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ItemCode КАК ItemCode,
	|	втПредметыСнабжения.Наименование КАК Наименование,
	|	втПредметыСнабжения.Обозначение КАК Обозначение,
	|	втПредметыСнабжения.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втНенайденныеПредметыСнабжения
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|ГДЕ
	|	втПредметыСнабжения.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование,
	|	Обозначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втПредметыСнабжения.ItemCode КАК ItemCode,
	|	втПредметыСнабжения.Наименование КАК Наименование,
	|	втПредметыСнабжения.Обозначение КАК Обозначение,
	|	втПредметыСнабжения.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втПереченьПредметовСнабженияINCAT
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|ГДЕ
	|	НЕ втПредметыСнабжения.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(втПредметыСнабженияINCAT.ПредметСнабжения, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))),
	|	втНенайденныеПредметыСнабжения.ItemCode,
	|	втНенайденныеПредметыСнабжения.Наименование,
	|	втНенайденныеПредметыСнабжения.Обозначение,
	|	втНенайденныеПредметыСнабжения.ДокументНаПоставку
	|ИЗ
	|	втНенайденныеПредметыСнабжения КАК втНенайденныеПредметыСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредметыСнабженияINCAT КАК втПредметыСнабженияINCAT
	|		ПО втНенайденныеПредметыСнабжения.Наименование = втПредметыСнабженияINCAT.Наименование
	|			И втНенайденныеПредметыСнабжения.Обозначение = втПредметыСнабженияINCAT.Обозначение
	|			И (НЕ втНенайденныеПредметыСнабжения.Обозначение = """")
	|			И (втПредметыСнабженияINCAT.INCAT = """")
	|
	|СГРУППИРОВАТЬ ПО
	|	втНенайденныеПредметыСнабжения.ItemCode,
	|	втНенайденныеПредметыСнабжения.Наименование,
	|	втНенайденныеПредметыСнабжения.Обозначение,
	|	втНенайденныеПредметыСнабжения.ДокументНаПоставку
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПереченьПредметовСнабженияINCAT.ItemCode КАК ItemCode,
	|	втПереченьПредметовСнабженияINCAT.Наименование КАК Наименование,
	|	втПереченьПредметовСнабженияINCAT.Обозначение КАК Обозначение,
	|	втПереченьПредметовСнабженияINCAT.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втНенайденныеПредметыПеречня
	|ИЗ
	|	втПереченьПредметовСнабженияINCAT КАК втПереченьПредметовСнабженияINCAT
	|ГДЕ
	|	втПереченьПредметовСнабженияINCAT.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ItemCode
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(КаталогПредметовСнабжения.Ссылка, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))) КАК ПредметСнабжения,
	|	втНенайденныеПредметыПеречня.ItemCode КАК ItemCode,
	|	втНенайденныеПредметыПеречня.Наименование КАК Наименование,
	|	втНенайденныеПредметыПеречня.Обозначение КАК Обозначение,
	|	втНенайденныеПредметыПеречня.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втНайденныеПоINCAT
	|ИЗ
	|	втНенайденныеПредметыПеречня КАК втНенайденныеПредметыПеречня
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО втНенайденныеПредметыПеречня.ItemCode = КаталогПредметовСнабжения.INCAT
	|
	|СГРУППИРОВАТЬ ПО
	|	втНенайденныеПредметыПеречня.ItemCode,
	|	втНенайденныеПредметыПеречня.Наименование,
	|	втНенайденныеПредметыПеречня.Обозначение,
	|	втНенайденныеПредметыПеречня.ДокументНаПоставку
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНайденныеПоINCAT.ItemCode КАК ItemCode,
	|	втНайденныеПоINCAT.Наименование КАК Наименование,
	|	втНайденныеПоINCAT.Обозначение КАК Обозначение,
	|	втНайденныеПоINCAT.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втНенайденныеПоINCAT
	|ИЗ
	|	втНайденныеПоINCAT КАК втНайденныеПоINCAT
	|ГДЕ
	|	втНайденныеПоINCAT.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование,
	|	Обозначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПереченьПредметовСнабженияINCAT.ПредметСнабжения КАК ПредметСнабжения,
	|	втПереченьПредметовСнабженияINCAT.ItemCode КАК INCAT,
	|	втПереченьПредметовСнабженияINCAT.Наименование КАК Наименование,
	|	втПереченьПредметовСнабженияINCAT.Обозначение КАК Обозначение,
	|	втПереченьПредметовСнабженияINCAT.ДокументНаПоставку КАК ДокументНаПоставку
	|ПОМЕСТИТЬ втРезультат
	|ИЗ
	|	втПереченьПредметовСнабженияINCAT КАК втПереченьПредметовСнабженияINCAT
	|ГДЕ
	|	НЕ втПереченьПредметовСнабженияINCAT.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втНайденныеПоINCAT.ПредметСнабжения,
	|	втНайденныеПоINCAT.ItemCode,
	|	втНайденныеПоINCAT.Наименование,
	|	втНайденныеПоINCAT.Обозначение,
	|	втНайденныеПоINCAT.ДокументНаПоставку
	|ИЗ
	|	втНайденныеПоINCAT КАК втНайденныеПоINCAT
	|ГДЕ
	|	НЕ втНайденныеПоINCAT.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(КаталогПредметовСнабжения.Ссылка, ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка))),
	|	втНенайденныеПоINCAT.ItemCode,
	|	втНенайденныеПоINCAT.Наименование,
	|	втНенайденныеПоINCAT.Обозначение,
	|	втНенайденныеПоINCAT.ДокументНаПоставку
	|ИЗ
	|	втНенайденныеПоINCAT КАК втНенайденныеПоINCAT
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО втНенайденныеПоINCAT.Наименование = КаталогПредметовСнабжения.Наименование
	|			И втНенайденныеПоINCAT.Обозначение = КаталогПредметовСнабжения.Обозначение
	|			И (НЕ втНенайденныеПоINCAT.Обозначение = """")
	|			И (КаталогПредметовСнабжения.INCAT = """")
	|
	|СГРУППИРОВАТЬ ПО
	|	втНенайденныеПоINCAT.ItemCode,
	|	втНенайденныеПоINCAT.Наименование,
	|	втНенайденныеПоINCAT.Обозначение,
	|	втНенайденныеПоINCAT.ДокументНаПоставку
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультат.ПредметСнабжения КАК ПредметСнабжения,
	|	втРезультат.INCAT КАК INCAT,
	|	втРезультат.Наименование КАК Наименование,
	|	втРезультат.Обозначение КАК Обозначение,
	|	ЕСТЬNULL(КаталогПредметовСнабжения.INCAT, """") КАК ТекущийINCAT,
	|	втРезультат.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ЕСТЬNULL(КаталогПредметовСнабжения.ДокументНаПоставку, """") КАК ТекущийДокументНаПоставку,
	|	ЕСТЬNULL(КаталогПредметовСнабжения.Комментарий, """") КАК Комментарий
	|ИЗ
	|	втРезультат КАК втРезультат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО втРезультат.ПредметСнабжения = КаталогПредметовСнабжения.Ссылка";
	Запрос.УстановитьПараметр("Item",РезультатЗапроса.Выгрузить());
	Запрос.УстановитьПараметр("Заказ",Заказ);
	Запрос.УстановитьПараметр("ГруппаINCAT",ГруппаINCAT);
		
	ПредметыСнабженияМенеджер = Справочники.КаталогПредметовСнабжения;
	ПредметыСнабженияПустаяСсылка = ПредметыСнабженияМенеджер.ПустаяСсылка();
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицыЗапроса Из ТаблицаЗапроса Цикл
		
		Если СтрокаТаблицыЗапроса.ПредметСнабжения = ПредметыСнабженияПустаяСсылка Тогда //создаем отсутствующий предмет снабжения, обновляем ссылку на него в таблице
			
			ПредметСнабженияОбъект = ПредметыСнабженияМенеджер.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(ПредметСнабженияОбъект,СтрокаТаблицыЗапроса);
			ПредметСнабженияОбъект.Записать();
			
			СтрокаТаблицыЗапроса.ПредметСнабжения = ПредметСнабженияОбъект.Ссылка;
			
			ЗаписатьВЛог(СтрокаТаблицыЗапроса.ПредметСнабжения, "Создан элемент каталога предметов снабжения");
			
		ИначеЕсли СтрокаТаблицыЗапроса.ТекущийINCAT = "" Тогда
			
			 ПредметСнабженияОбъект = СтрокаТаблицыЗапроса.ПредметСнабжения.ПолучитьОбъект();
			 ПредметСнабженияОбъект.INCAT = СтрокаТаблицыЗапроса.INCAT;
			 ПредметСнабженияОбъект.Записать();
			 
			 ЗаписатьВЛог(СтрокаТаблицыЗапроса.ПредметСнабжения, "Добавлен код INCAT для предмета снабжения");	 
			 
		ИначеЕсли Не СтрокаТаблицыЗапроса.ТекущийДокументНаПоставку = СтрокаТаблицыЗапроса.ДокументНаПоставку И Не СтрокаТаблицыЗапроса.ДокументНаПоставку = "" Тогда
			
			Если СтрокаТаблицыЗапроса.ТекущийДокументНаПоставку = "" Тогда
				
				ПредметСнабженияОбъект = СтрокаТаблицыЗапроса.ПредметСнабжения.ПолучитьОбъект();
				ПредметСнабженияОбъект.ДокументНаПоставку = СтрокаТаблицыЗапроса.ДокументНаПоставку;
				ПредметСнабженияОбъект.Записать();
				
				ЗаписатьВЛог(СтрокаТаблицыЗапроса.ПредметСнабжения, "Указан документ на поставку для предмета снабжения");
				
			Иначе
				
				ТекстКомментария = "Документ на поставку: "+ СтрокаТаблицыЗапроса.ДокументНаПоставку;
				
				Если Найти(СтрокаТаблицыЗапроса.Комментарий, ТекстКомментария) = 0 Тогда
					
					ПредметСнабженияОбъект = СтрокаТаблицыЗапроса.ПредметСнабжения.ПолучитьОбъект();
					ПредметСнабженияОбъект.Комментарий = СокрЛП(СтрокаТаблицыЗапроса.Комментарий + " "+ТекстКомментария);
					ПредметСнабженияОбъект.Записать();
					
					ЗаписатьВЛог(СтрокаТаблицыЗапроса.ПредметСнабжения, "Не совпадает документ на поставку у предмета снабжения");
					
				КонецЕсли; 	
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ТаблицаПредметовСнабжения.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

//процедура импортирует характеристики предметов снабжения из базы данных INCAT. Отсутствующие характеристики создаются
&НаСервере
Процедура ЗагрузитьТехническиеХарактеристики()
	
	ТаблицаХарактеристикПредметовСнабжения = ПолучитьТаблицуХарактеристикПредметовСнабжения();
	
	Если ТаблицаХарактеристикПредметовСнабжения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ТаблицаПредметовСнабжения.INCAT КАК INCAT
	|ПОМЕСТИТЬ втПредметыСнабжения
	|ИЗ
	|	&ТаблицаПредметовСнабжения КАК ТаблицаПредметовСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	INCAT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаХарактеристикПредметовСнабжения.INCAT КАК INCAT,
	|	ТаблицаХарактеристикПредметовСнабжения.Характеристика КАК Характеристика,
	|	ТаблицаХарактеристикПредметовСнабжения.Значение КАК Значение
	|ПОМЕСТИТЬ втХарактеристикиПредметовСнабженияINCAT
	|ИЗ
	|	&ТаблицаХарактеристикПредметовСнабжения КАК ТаблицаХарактеристикПредметовСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	INCAT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПредметыСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втХарактеристикиПредметовСнабженияINCAT.Характеристика КАК Характеристика,
	|	втХарактеристикиПредметовСнабженияINCAT.Значение КАК Значение
	|ПОМЕСТИТЬ втХарактеристикиПредметовСнабжения
	|ИЗ
	|	втПредметыСнабжения КАК втПредметыСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втХарактеристикиПредметовСнабженияINCAT КАК втХарактеристикиПредметовСнабженияINCAT
	|		ПО втПредметыСнабжения.INCAT = втХарактеристикиПредметовСнабженияINCAT.INCAT
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втХарактеристикиПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втХарактеристикиПредметовСнабжения.Характеристика КАК Характеристика,
	|	втХарактеристикиПредметовСнабжения.Значение КАК Значение
	|ИЗ
	|	втХарактеристикиПредметовСнабжения КАК втХарактеристикиПредметовСнабжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|		ПО втХарактеристикиПредметовСнабжения.ПредметСнабжения = КаталогПредметовСнабженияХарактеристики.Ссылка
	|			И втХарактеристикиПредметовСнабжения.Характеристика = КаталогПредметовСнабженияХарактеристики.Характеристика
	|ГДЕ
	|	КаталогПредметовСнабженияХарактеристики.Ссылка ЕСТЬ NULL
	|ИТОГИ ПО
	|	ПредметСнабжения";
	Запрос.УстановитьПараметр("ТаблицаПредметовСнабжения",ТаблицаПредметовСнабжения.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаХарактеристикПредметовСнабжения",ТаблицаХарактеристикПредметовСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДеревоЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаПредметСнабжения Из ДеревоЗапроса.Строки Цикл
		
		ПредметСнабженияОбъект = СтрокаПредметСнабжения.ПредметСнабжения.ПолучитьОбъект();
		ХарактеристикиПредметаСнабжения = ПредметСнабженияОбъект.Характеристики;
		
		Для каждого СтрокаХарактеристика Из СтрокаПредметСнабжения.Строки Цикл
			
			 ХарактеристикаПредметаСнабжения = ХарактеристикиПредметаСнабжения.Добавить();
			 ЗаполнитьЗначенияСвойств(ХарактеристикаПредметаСнабжения,СтрокаХарактеристика);
			 ЗаписатьВЛог(СтрокаПредметСнабжения.ПредметСнабжения, "Создана характеристика "+Строка(СтрокаХарактеристика.Характеристика)+" предмета снабжения");
			
		 КонецЦикла;
		 
		 ПредметСнабженияОбъект.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

//функция возвращает таблицу соответствия характеристик в БД кодам INCAT предметов снабжения
//отсутствующие в БД характеристики создаются
&НаСервере
Функция ПолучитьТаблицуХарактеристикПредметовСнабжения()
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Characteristic.ItemCode КАК INCAT,
	|	Characteristic.CharacteristicName КАК Наименование,
	|	Characteristic.Value КАК Значение
	|ИЗ
	|	ВнешнийИсточникДанных.БазаДанныхINCAT.Таблица.Characteristic КАК Characteristic";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТаблицаХарактеристикINCAT = РезультатЗапроса.Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаХарактеристикINCAT.INCAT КАК INCAT,
	|	ТаблицаХарактеристикINCAT.Наименование КАК Наименование,
	|	ТаблицаХарактеристикINCAT.Значение КАК Значение
	|ПОМЕСТИТЬ втХарактеристикиПредметовСнабженияINCAT
	|ИЗ
	|	&ТаблицаХарактеристикINCAT КАК ТаблицаХарактеристикINCAT
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втХарактеристикиПредметовСнабженияINCAT.Наименование КАК Наименование
	|ПОМЕСТИТЬ втХарактеристикиINCAT
	|ИЗ
	|	втХарактеристикиПредметовСнабженияINCAT КАК втХарактеристикиПредметовСнабженияINCAT
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втХарактеристикиINCAT.Наименование КАК Наименование,
	|	МАКСИМУМ(ЕСТЬNULL(ХарактеристикиПредметовСнабжения.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиПредметовСнабжения.ПустаяСсылка))) КАК Характеристика
	|ИЗ
	|	втХарактеристикиINCAT КАК втХарактеристикиINCAT
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
	|		ПО втХарактеристикиINCAT.Наименование = ХарактеристикиПредметовСнабжения.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	втХарактеристикиINCAT.Наименование";
	Запрос.УстановитьПараметр("ТаблицаХарактеристикINCAT",ТаблицаХарактеристикINCAT);
	
	ТаблицаХарактеристик = Запрос.Выполнить().Выгрузить();
	
	ХарактеристикиМенеджер = Справочники.ХарактеристикиПредметовСнабжения;
	ХарактеристикиПустаяСсылка = ХарактеристикиМенеджер.ПустаяСсылка();
	
	Для каждого СтрокаТаблицыХарактеристик Из ТаблицаХарактеристик Цикл
		
		Если СтрокаТаблицыХарактеристик = ХарактеристикиПустаяСсылка Тогда //если характеристики с таким наименованием в БД нет, то создаем ее
			
			ХарактеристикаОбъект = ХарактеристикиМенеджер.СоздатьЭлемент();
			ХарактеристикаОбъект.Наименование = СтрокаТаблицыХарактеристик.Наименование;
			ХарактеристикаОбъект.Записать();
			
			СтрокаТаблицыХарактеристик.Характеристика = ХарактеристикаОбъект.Ссылка;
			
			ЗаписатьВЛог(СтрокаТаблицыХарактеристик.Характеристика, "Создана характеристика предметов снабжения ");
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втТаблицаХарактеристик.Наименование КАК Наименование,
	|	втТаблицаХарактеристик.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ втТаблицаХарактеристик
	|ИЗ
	|	&ТаблицаХарактеристик КАК втТаблицаХарактеристик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втХарактеристикиПредметовСнабженияINCAT.INCAT КАК INCAT,
	|	втТаблицаХарактеристик.Характеристика КАК Характеристика,
	|	втХарактеристикиПредметовСнабженияINCAT.Значение КАК Значение
	|ИЗ
	|	втТаблицаХарактеристик КАК втТаблицаХарактеристик
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втХарактеристикиПредметовСнабженияINCAT КАК втХарактеристикиПредметовСнабженияINCAT
	|		ПО втТаблицаХарактеристик.Наименование = втХарактеристикиПредметовСнабженияINCAT.Наименование";
	Запрос.УстановитьПараметр("ТаблицаХарактеристик",ТаблицаХарактеристик);
	
	ТаблицаХарактеристикПредметовСнабжения = Запрос.Выполнить().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Возврат ТаблицаХарактеристикПредметовСнабжения;
	
КонецФункции
 
//процедура записи изменений в лог загрузки
&НаСервере
Процедура ЗаписатьВЛог(Объект1С, Описание)
	
	ЛогЗагрузкиМенеджерЗаписи = РегистрыСведений.ЛогЗагрузки.СоздатьМенеджерЗаписи();
	ЛогЗагрузкиМенеджерЗаписи.Период = ТекущаяДата();
	ЛогЗагрузкиМенеджерЗаписи.ГУИД = Строка(Новый УникальныйИдентификатор);
	ЛогЗагрузкиМенеджерЗаписи.Файл = ПутьКФайлуБД;
	ЛогЗагрузкиМенеджерЗаписи.Объект1С = Объект1С;
	ЛогЗагрузкиМенеджерЗаписи.Описание = Описание;
	ЛогЗагрузкиМенеджерЗаписи.ПутьКФайлу = ПутьКФайлуБД;
	ЛогЗагрузкиМенеджерЗаписи.Записать();
	
	Если ОтображатьЛогВСлужебныхСообщениях Тогда
		
		Сообщить(Описание+" "+Строка(Объект1С));
		
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ СОБЫТИЙ ФОРМЫ
#Область СобытияФормы

&НаКлиенте
Процедура ВыполнитьИмпортДанных(Команда)
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуБД) Тогда
		
		ПоказатьПредупреждение(,"Не выбран файл базы данных!");
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		
		ПоказатьПредупреждение(,"Не выбран заказ!");
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГруппаINCAT) Тогда
		
		ПоказатьПредупреждение(,"Не выбрана группа INCAT!");
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьИмпортДанныхЗавершение", ЭтаФорма), "Данные в базе данных будут необратимо изменены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьИмпортДанныхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Сообщить("Импорт данных начат в "+ТекущаяДата());
		ИмпортироватьДанныеINCAT();
		Сообщить("Импорт данных окончен в "+ТекущаяДата());
		
	Иначе
		
		Сообщить("Прервано пользователем!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	  ПолучитьГруппуINCAT();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	ПолучитьГруппуINCAT();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьГруппуINCAT()
	
	ГруппаINCAT = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.НайтиПоНаименованию("INCAT",,,Заказ);
	
КонецПроцедуры
 

#КонецОбласти