
///////////////////////////////////////////////////////////////
// ЭКСПОРТНЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция УдалитьДубликаты(Параметры, АдресРезультата = "") Экспорт
	
	РезультатУдаления = Новый Структура("Отказ, КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки", Ложь, "", "");
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("СпособУдаления",       Параметры.СпособУдаления);
	ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Истина);
	ПараметрыЗамены.Вставить("УчитыватьПрикладныеПравила", Параметры.УчитыватьПрикладныеПравила);

	НачатьТранзакцию();
	
	Попытка
		
		КопироватьРеквизиты(Параметры.ПарыЗамен);
		ОбновитьСпецификации(Параметры.ПараметрыОбновленияСпецификации);
		ЗаменитьСсылки(Параметры.ПарыЗамен, ПараметрыЗамены, АдресРезультата);
		АктуализироватьСтруктурыЗаказов(Параметры.ПарыЗамен);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		РезультатУдаления.Отказ = Истина;
		РезультатУдаления.КраткоеПредставлениеОшибки = ИнформацияОбОшибке().Описание;
		РезультатУдаления.ПодробноеПредставлениеОшибки = ОписаниеОшибки();
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;

	КонецПопытки;	
	
	Возврат РезультатУдаления;	
		
КонецФункции


/////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// [ОбщегоНазначения.ЗаменитьСсылки]
Функция ЗаменитьСсылки(Знач ПарыЗамен, Знач Параметры = Неопределено, Знач АдресРезультата = "")
	
	Результат = ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, Параметры);
	Если Результат.Количество() > 0 Тогда
		//ВызватьИсключение Результат[0].ТекстОшибки;
		ВызватьИсключение НСтр("ru = 'Замена ссылок не выполнена. 
								|Подробности в журнале регистрации'");
	КонецЕсли;	
	
КонецФункции

#Область КопированиеРеквизитов

Процедура КопироватьРеквизиты(ПарыЗамен)

	СписокСохраняемыхРеквизитов = ПолучитьСписокСохраняемыхРеквизитов();
	
	СоответствиеОбъектовСсылкам = Новый Соответствие;
	
	ИндексНачалаТабличныхЧастей = ПолучитьИндексНачалаТабличныхЧастей(СписокСохраняемыхРеквизитов);
	
	ИндексКрайнегоЭлемента = СписокСохраняемыхРеквизитов.Количество() - 1;
	
	ИндексКрайнегоРеквизита = ?(ИндексНачалаТабличныхЧастей = Неопределено, ИндексКрайнегоЭлемента, ИндексНачалаТабличныхЧастей - 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗамен", ПолучитьТаблицуЗамен(ПарыЗамен));
	
	//если есть реквизиты для сохранения, то сохраняем значения реквизитов
	Если Не ИндексНачалаТабличныхЧастей = 0 Тогда
	
		Запрос.Текст = ПолучитьТекстЗапросаСохраненияРеквизитов(СписокСохраняемыхРеквизитов, ИндексКрайнегоРеквизита);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОригиналОбъект = ПолучитьОбъектПоСсылке(Выборка.Оригинал, СоответствиеОбъектовСсылкам);			
			
			Для Сч = 0 По ИндексКрайнегоРеквизита Цикл
				
				ИмяРеквизита = СписокСохраняемыхРеквизитов[Сч].Значение;
				
				Если Не ЗначениеЗаполнено(ОригиналОбъект[ИмяРеквизита]) И ЗначениеЗаполнено(Выборка[ИмяРеквизита]) Тогда
					
					ОригиналОбъект[ИмяРеквизита] = Выборка[ИмяРеквизита];
					
				КонецЕсли;
				
			КонецЦикла;
			
			СоответствиеОбъектовСсылкам.Вставить(Выборка.Оригинал, ОригиналОбъект);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//если есть табличные части, то сохраняем значения табличных частей
	Если Не ИндексНачалаТабличныхЧастей = Неопределено Тогда
		
		Для Сч = ИндексНачалаТабличныхЧастей По ИндексКрайнегоЭлемента Цикл
			
			ИмяТабличнойЧасти = СтрЗаменить(СписокСохраняемыхРеквизитов[Сч].Значение, "ТабличнаяЧасть.", "");
			
			Запрос.Текст = ПолучитьТекстЗапросаСохраненияТабличнойЧасти(ИмяТабличнойЧасти);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВыборкаЭлементов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЭлементов.Следующий() Цикл
				
				ОригиналОбъект = ПолучитьОбъектПоСсылке(ВыборкаЭлементов.Оригинал, СоответствиеОбъектовСсылкам);
				
				ТабличнаяЧастьОбъекта = ОригиналОбъект[ИмяТабличнойЧасти];
				
				ТабличнаяЧастьОбъекта.Очистить();
				
				ВыборкаЗаписейТабличнойЧасти = ВыборкаЭлементов.Выбрать();
				
				Пока ВыборкаЗаписейТабличнойЧасти.Следующий() Цикл
					
					СтрокаТабличнойЧасти = ТабличнаяЧастьОбъекта.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаЗаписейТабличнойЧасти);
					
				КонецЦикла;
				
				СоответствиеОбъектовСсылкам.Вставить(ВыборкаЭлементов.Оригинал, ОригиналОбъект);
				
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	
	Для каждого ЭлементСправочника Из СоответствиеОбъектовСсылкам Цикл
		
		ОбъектСправочника = ЭлементСправочника.Значение;
		
		Если ОбъектСправочника.Модифицированность() Тогда
			
			ОбъектСправочника.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Функция ПолучитьСписокСохраняемыхРеквизитов()
	
	СписокСохраняемыхРеквизитов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСохраненияРеквизитовПриОбъединенииДублейРеквизиты.Имя КАК Имя,
	|	НастройкиСохраненияРеквизитовПриОбъединенииДублейРеквизиты.Представление КАК Представление
	|ИЗ
	|	Справочник.НастройкиСохраненияРеквизитовПриОбъединенииДублей.Реквизиты КАК НастройкиСохраненияРеквизитовПриОбъединенииДублейРеквизиты
	|ГДЕ
	|	НастройкиСохраненияРеквизитовПриОбъединенииДублейРеквизиты.Ссылка.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", "КаталогПредметовСнабжения");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокСохраняемыхРеквизитов.Добавить(Выборка.Имя, Выборка.Представление);		
	
	КонецЦикла; 
	
	Возврат СписокСохраняемыхРеквизитов;
	
КонецФункции 

//функция возвращает объект по ссылке на объект
Функция ПолучитьОбъектПоСсылке(СсылкаНаОбъект, СоответствиеОбъектовСсылкам)
	
	Результат = СоответствиеОбъектовСсылкам.Получить(СсылкаНаОбъект);
	
	Если Результат = Неопределено Тогда
		
		Результат = СсылкаНаОбъект.ПолучитьОбъект();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

//функция возвращает текст запроса, объединяющего табличные части всех дубликатов одного оригинала и самого оригинала в единую таблицу
Функция ПолучитьТекстЗапросаСохраненияТабличнойЧасти(ИмяТабличнойЧасти)
	
	МетаданныеТабличнойЧасти = Метаданные.Справочники.КаталогПредметовСнабжения.ТабличныеЧасти[ИмяТабличнойЧасти];
	
	РеквизитыТабличнойЧасти =  ПолучитьКоллекциюРеквизитовОбъекта(МетаданныеТабличнойЧасти);
	
	СодержитХранилищеЗначения = ПроверитьНаличиеХранилищаЗначения(РеквизитыТабличнойЧасти);
	
	ТекстЗапроса = ПолучитьТекстНачалаЗапроса();
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + 
	"ВЫБРАТЬ " + ?(СодержитХранилищеЗначения, "", "РАЗЛИЧНЫЕ") + " 
	|	втТаблицаЗамен.Оригинал КАК Оригинал";
	
	Для каждого РеквизитТабличнойЧасти Из РеквизитыТабличнойЧасти Цикл
		
		ТекстЗапроса = ТекстЗапроса + "," +Символы.ПС + ПолучитьПредставлениеРеквизита(РеквизитыТабличнойЧасти, РеквизитТабличнойЧасти.Ключ) + " КАК " + РеквизитТабличнойЧасти.Ключ;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС +
	"ИЗ
	 |втТаблицаЗамен КАК втТаблицаЗамен
	 |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ОбластьПоискаДублей КАК ОбластьПоискаДублей
	 |		ПО втТаблицаЗамен.Дубликат = ОбластьПоискаДублей.Ссылка
	 |ИТОГИ ПО
	 |	Оригинал";
	
	ПредставлениеТабличнойЧасти = "Справочник.КаталогПредметовСнабжения." + ИмяТабличнойЧасти;
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ОбластьПоискаДублей", ПредставлениеТабличнойЧасти);
	
КонецФункции

//функция возвращает соответствие, содержащее реквизиты и стандартные реквизиты объекта метаданных (кроме ссылки и номера строки)
Функция ПолучитьКоллекциюРеквизитовОбъекта(МетаданныеОбъекта)
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	КоллекцияРеквизитов = МетаданныеОбъекта.Реквизиты;
	
	Для каждого ЭлементКоллекции Из КоллекцияРеквизитов Цикл
		
		СоответствиеРеквизитов.Вставить(ЭлементКоллекции.Имя, ЭлементКоллекции);
		
	КонецЦикла;
	
	КоллекцияСтандартныхРеквизитов = МетаданныеОбъекта.СтандартныеРеквизиты;
	
	Для каждого ЭлементКоллекции Из КоллекцияСтандартныхРеквизитов Цикл
		
		Если Не ЭлементКоллекции.Имя = "Ссылка" И Не ЭлементКоллекции.Имя = "НомерСтроки" Тогда
		
			СоответствиеРеквизитов.Вставить(ЭлементКоллекции.Имя, ЭлементКоллекции);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

//функция проверяет наличие в коллекции реквизитов реквизита с типом ХранилищеЗначения
Функция ПроверитьНаличиеХранилищаЗначения(КоллекцияРеквизитов)
	
	Результат = Ложь;
	
	ТипХранилищеЗначения = Тип("ХранилищеЗначения");
	
	Для каждого ЭлементКоллекции Из КоллекцияРеквизитов Цикл
		
		Результат =  ЭлементКоллекции.Значение.Тип.СодержитТип(ТипХранилищеЗначения);
		
		Если Результат Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//функция возвращает индекс элемента списка сохраняемых реквизитов, с которого начинается перечисление сохраняемых табличных частей
Функция ПолучитьИндексНачалаТабличныхЧастей(СписокСохраняемыхРеквизитов)
	
	ИндексНачалаТабличныхЧастей = Неопределено;
	
	Для каждого ЭлементСписка Из СписокСохраняемыхРеквизитов Цикл
		
		Если СтрНайти(ЭлементСписка.Представление, "Табличная часть:") > 0 Тогда
			
			ИндексНачалаТабличныхЧастей = СписокСохраняемыхРеквизитов.Индекс(ЭлементСписка);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИндексНачалаТабличныхЧастей;
	
КонецФункции

//функция возвращает текст запроса, объединяющего значения всех сохраняемых реквизитов одного оригинала и самого оригинала в единую запись
Функция ПолучитьТекстЗапросаСохраненияРеквизитов(СписокСохраняемыхРеквизитов, ИндексКрайнегоРеквизита)
	
	МетаданныеСправочника = Метаданные.Справочники.КаталогПредметовСнабжения;
	
	РеквизитыСправочника =  ПолучитьКоллекциюРеквизитовОбъекта(МетаданныеСправочника);
		
	ТекстЗапроса = ПолучитьТекстНачалаЗапроса();
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + 
	"ВЫБРАТЬ
	|	втТаблицаЗамен.Оригинал КАК Оригинал";
	
	Для Сч = 0 По ИндексКрайнегоРеквизита Цикл
		
		ЭлементСписка = СписокСохраняемыхРеквизитов[Сч];
		
		ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "МАКСИМУМ(" + ПолучитьПредставлениеРеквизита(РеквизитыСправочника, ЭлементСписка.Значение) + ") КАК " + ЭлементСписка.Значение;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС +
	"ИЗ
	 |втТаблицаЗамен КАК втТаблицаЗамен
	 |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК ОбластьПоискаДублей
	 |		ПО втТаблицаЗамен.Дубликат = ОбластьПоискаДублей.Ссылка
	 |СГРУППИРОВАТЬ ПО
	 |	Оригинал";
	
	Возврат ТекстЗапроса;
		
КонецФункции

//фукнция возвращает правило получения значения реквизита в запросе в зависимости от типов значений реквизита:
//строка неограниченной длины - строка с ограничением 1000 символов 
Функция ПолучитьПредставлениеРеквизита(КоллекцияРеквизитов, ИмяРеквизита)
	
	ОписаниеТиповРеквизита = КоллекцияРеквизитов[ИмяРеквизита].Тип;
	
	Если ОписаниеТиповРеквизита.СодержитТип(Тип("Строка")) И ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина = 0 Тогда //есть строка неограниченной длины
		
		Если ОписаниеТиповРеквизита.Типы().Количество() = 1 Тогда //строка неограниченной длины, выражаем как строку ограниченной длины
			
			Возврат "ВЫРАЗИТЬ(ОбластьПоискаДублей." + ИмяРеквизита + " КАК СТРОКА(1000))";
			
		Иначе //составной тип со строкой неограниченной длины, выражаем как строку ограниченной только значения такого типа
			
			Результат = 
			"ВЫБОР
			|	КОГДА ТИПЗНАЧЕНИЯ(ОбластьПоискаДублей.ИмяРеквизита) = ТИП(СТРОКА)
			|	ТОГДА ВЫРАЗИТЬ(ОбластьПоискаДублей.ИмяРеквизита КАК СТРОКА(1000))
			|	ИНАЧЕ ОбластьПоискаДублей.ИмяРеквизита
			|КОНЕЦ";
			
			Возврат СтрЗаменить(Результат, "ИмяРеквизита", ИмяРеквизита);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "ОбластьПоискаДублей." + ИмяРеквизита;
	
КонецФункции

//функция возвращает текст запроса помещения таблицы замен во временную таблицу
//с данного запроса начинуются все остальные запросы сохранения данных
Функция ПолучитьТекстНачалаЗапроса()
	
	Возврат 
	"ВЫБРАТЬ
	|	ТаблицаЗамен.Дубликат КАК Дубликат,
	|	ТаблицаЗамен.Оригинал КАК Оригинал
	|ПОМЕСТИТЬ втТаблицаЗамен
	|ИЗ
	|	&ТаблицаЗамен КАК ТаблицаЗамен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дубликат
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// ";
	
КонецФункции

//функция создает таблицу замен, пригодную для использования в запросах на основании соответствия замен
Функция ПолучитьТаблицуЗамен(ПарыЗамен)
			
	ТипСправочникСсылка = Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения");
	
	ТаблицаЗамен = Новый ТаблицаЗначений;
	ТаблицаЗамен.Колонки.Добавить("Дубликат", ТипСправочникСсылка);
	ТаблицаЗамен.Колонки.Добавить("Оригинал", ТипСправочникСсылка);
	
	Для каждого ПараЗамены Из ПарыЗамен Цикл
		
		СтрокаТаблицыЗамен = ТаблицаЗамен.Добавить();
		СтрокаТаблицыЗамен.Дубликат = ПараЗамены.Ключ;
		СтрокаТаблицыЗамен.Оригинал = ПараЗамены.Значение;
		
	КонецЦикла;
	
	Возврат ТаблицаЗамен;
	
КонецФункции

#КонецОбласти 

#Область ОбновлениеСпецификации

Процедура ОбновитьСпецификации(ПараметрыОбновленияСпецификации)
	
	Для каждого ОригиналИСпецификация Из ПараметрыОбновленияСпецификации Цикл
		
		Оригинал = ОригиналИСпецификация.Ключ;
		ТаблицаСпецификации = ПолучитьИзВременногоХранилища(ОригиналИСпецификация.Значение);
		СпецификацииПредметовСнабжения.ОбновитьСпецификациюПредметаСнабжения(Оригинал, ТаблицаСпецификации); 
		
	КонецЦикла;	

КонецПроцедуры 
	
#КонецОбласти 

#Область АктуализироватьСтруктурыЗаказов

Процедура АктуализироватьСтруктурыЗаказов(ПарыЗамен)
	
	ОчередьНаАктуализацию = Новый Массив;
	
	Для каждого ПараЗамены Из ПарыЗамен Цикл
		Если ОчередьНаАктуализацию.Найти(ПараЗамены.Значение) = Неопределено Тогда
		    ОчередьНаАктуализацию.Добавить(ПараЗамены.Значение); 		
		КонецЕсли;		
	КонецЦикла;
	
	Для каждого Оригинал Из ОчередьНаАктуализацию Цикл
	
		СтруктураЗаказа.ОбработатьСтруктуруЗаказов(Оригинал);	
	
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 