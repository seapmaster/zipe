
//////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьСписокРеквизитов();
	
	Если Параметры.Свойство("Дубликаты") И Параметры.Свойство("Оригинал") Тогда
		
		СтруктураЗамены = Новый Структура;
		СтруктураЗамены.Вставить("Дубликаты", Параметры.Дубликаты);
		СтруктураЗамены.Вставить("Оригинал",  Параметры.Оригинал);
		ЗаполнитьТаблицуНайденныеДубли(СтруктураЗамены);
		
	КонецЕсли;
	
	// Пошаговый мастер
	НастройкиПошаговогоМастера = ИнициализироватьМастер(Элементы.ШагиМастера, Элементы.Далее, Элементы.Назад, Элементы.Отмена);
	// Добавляем шаги, зависящие от логики формы.
	ИнициализироватьСценарийМастера();

	ТаблицаПрименямости.Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", Справочники.КаталогПредметовСнабжения.ПустаяСсылка());
	ТаблицаСпецификация.Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", Справочники.КаталогПредметовСнабжения.ПустаяСсылка());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьНачальнуюСтраницуМастера(Элементы.ШагВыборОсновногоЭлемента);
	ЗапуститьРаботуМастера();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	СохранитьНастройки();
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьОсновнойЭлемент(Команда)
	
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Или ДанныеСтроки.Основной Тогда
		Возврат; // Нет данных или Текущий уже основной.
	КонецЕсли;
	
	Родитель = ДанныеСтроки.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОсновнойЭлементИерархически(ДанныеСтроки, Родитель);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКандидатаВДубли(Команда)
	
	ОткрытьФормуДубля(Элементы.НайденныеДубли.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНеобработанныйДубль(Команда)
	
	ОткрытьФормуДубля(Элементы.НеобработанныеДубли.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераНазад(Команда)
	ШагМастера("Назад");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераДалее(Команда)
	ШагМастера("Далее");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераОтмена(Команда)
	ШагМастера("Отмена");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРеквизиты(Команда)
	
	МассивОтмеченныхРеквизитов = Новый Массив;
	
	Для каждого Реквизит Из СписокРеквизитов Цикл
		
		Если Реквизит.Пометка Тогда
			
			МассивОтмеченныхРеквизитов.Добавить(Реквизит.Значение);	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыбораРеквизитов", ЭтотОбъект, Новый Структура("МассивОтмеченныхРеквизитов", МассивОтмеченныхРеквизитов));
	ПараметрыОткрытия = Новый Структура("СписокРеквизитов", СписокРеквизитов);
	
	ОткрытьФорму("Обработка.УдалениеДублейПредметовСнабжения.Форма.ФормаВыборРеквизитов", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользованияНажатие(Элемент)
	
	ПоказатьМестаИспользования(НайденныеДубли);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПодробнееНажатие(Элемент)
	СтандартныеПодсистемыКлиент.ПоказатьПодробнуюИнформацию(Неопределено, Элемент.Подсказка);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбъединеннуюСпецификацию(Команда)
	ПоказатьОбъединеннуюСпецификациюНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПрименямостиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПрименямости.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ЭлементСтруктурыЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекущиеДанные.ЭлементСтруктурыЗаказа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНайденныеДубли

&НаКлиенте
Процедура НайденныеДублиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтложенныйОбработчикАктивизацииСтрокиДублей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйОбработчикАктивизацииСтрокиДублей()
	
	ТекущаяСтрока = Элементы.НайденныеДубли.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		
		ОбновитьПрименяемостьИСпецификациюПредметаСнабжения(ТекущаяСтрока.Ссылка);
	
	КонецЕсли;    		

КонецПроцедуры

&НаКлиенте
Процедура НайденныеДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуДубля(Элемент.ТекущиеДанные);
	
КонецПроцедуры  

&НаКлиенте
Процедура НайденныеДублиПометкаПриИзменении(Элемент)
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	
	ДанныеСтроки.Пометка = ДанныеСтроки.Пометка % 2;
	
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
			
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьСписокРеквизитов()

	СписокРеквизитов.Очистить();
	Реквизиты = Метаданные.Справочники.КаталогПредметовСнабжения.Реквизиты;
	
	Для каждого Реквизит Из Реквизиты Цикл     		
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда  			
			Продолжить;  			
		КонецЕсли; 	
		СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним);		
	КонецЦикла;
	
	СтандартныеРеквизиты = Неопределено; 	
	СтандартныеРеквизиты = Метаданные.Справочники.КаталогПредметовСнабжения.СтандартныеРеквизиты;	
	Для каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл   		
		Если СтандартныйРеквизит.Имя = "Ссылка" Тогда   		
			Продолжить;	                               		
		КонецЕсли; 
		Пометка = Ложь;
		Если СтандартныйРеквизит.Имя = "Наименование" Тогда   		
			Пометка = Истина;
  		КонецЕсли;
		СписокРеквизитов.Добавить(СтандартныйРеквизит.Имя, ?(ЗначениеЗаполнено(СтандартныйРеквизит.Синоним), СтандартныйРеквизит.Синоним, ОбщиеФункцииСервер.ПолучитьСиноним(СтандартныйРеквизит.Имя)),Пометка);	
	КонецЦикла;

	ЗначениеНастроек = ХранилищеОбщихНастроек.Загрузить("УдалениеДублейПредметовСнабжения", 
														"УдалениеДублейПредметовСнабжения", 
														"УдалениеДублейПредметовСнабжения", 
														Пользователи.ТекущийПользователь());
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда
		НастройкиСписокаРеквизитов = ЗначениеНастроек.Получить("СписокРеквизитов");
		Если ТипЗнч(НастройкиСписокаРеквизитов) = Тип("СписокЗначений") Тогда
			Для каждого Реквизит Из СписокРеквизитов Цикл
				РеквизитВНастрйках = НастройкиСписокаРеквизитов.НайтиПоЗначению(Реквизит.Значение);
				Если НЕ РеквизитВНастрйках = Неопределено Тогда
					Реквизит.Пометка = РеквизитВНастрйках.Пометка;				
				КонецЕсли;				
			КонецЦикла; 			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ИнициализироватьСписокРеквизитов()  

&НаСервере
Функция ПолучитьСтруктуруЗамены(ДеревоИсточник)
	
	СтруктураЗамены = Новый Структура;
	МассивСсылок = Новый Массив;
	Для Каждого ГруппаДублей Из ДеревоИсточник.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева Из ГруппаДублей.ПолучитьЭлементы() Цикл
			Если СтрокаДерева.Основной Тогда
			    СтруктураЗамены.Вставить("Оригинал", СтрокаДерева.Ссылка); 			
			КонецЕсли; 
			
			МассивСсылок.Добавить(СтрокаДерева.Ссылка);
		КонецЦикла;
	КонецЦикла; 	

	СтруктураЗамены.Вставить("Дубликаты", МассивСсылок);
	Возврат СтруктураЗамены;
	
КонецФункции // ПолучитьСтруктуруЗамены()

&НаКлиенте
Процедура ОбработчикВыбораРеквизитов(ВозвращаемоеЗначение, ДопПараметры) Экспорт

	Если ВозвращаемоеЗначение = Неопределено Тогда  	
		Возврат;		
	КонецЕсли;
	
	СписокРеквизитов = ВозвращаемоеЗначение;
	ЗаполнитьТаблицуНайденныеДубли();	
	
КонецПроцедуры // ОбработчикВыбораРеквизитов()

&НаСервере
Процедура ЗаполнитьТаблицуНайденныеДубли(СтруктураЗамены = Неопределено)
	
	Если СтруктураЗамены = Неопределено Тогда
		
		СтруктураЗамены = ПолучитьСтруктуруЗамены(НайденныеДубли);	
		
	КонецЕсли; 
	
	МассивВыбранныхДублей = СтруктураЗамены.Дубликаты;
	Оригинал 			  = СтруктураЗамены.Оригинал;
	
	НайденныеДубли.ПолучитьЭлементы().Очистить();
	
	УбратьВременныеКолонки();
	
	ТаблицаДублей = ПолучитьТаблицуДублей(МассивВыбранныхДублей);
	
	ДобавитьВременныеКолонки(ТаблицаДублей);
	
	ЗаполнитьДеревоНайденныеДубли(ТаблицаДублей, МассивВыбранныхДублей, Оригинал);
		
КонецПроцедуры // ЗаполнитьТаблицуНайденныеДубли()

&НаСервере
Функция ПолучитьТаблицуДублей(МассивВыбранныхДублей)
	
	МассивТекстаЗапроса = Новый Массив;
	
	МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
	
	Для каждого Реквизит Из СписокРеквизитов Цикл
	
		Если Реквизит.Пометка Тогда
			
			Если Реквизит.Значение = "ОбозначениеПредметаСнабжения" Тогда
			
				ИмяРеквизита = "ПредметСнабжения.Обозначение КАК ОбозначениеПредметаСнабжения";	
			
			ИначеЕсли Реквизит.Значение = "Родитель" Тогда
			
				ИмяРеквизита = "Родитель КАК РодительСсылки";
			
			Иначе
				
				ИмяРеквизита = Реквизит.Значение;	
			
			КонецЕсли;
		
			МассивТекстаЗапроса.Добавить("
			|	Таблица.");
			МассивТекстаЗапроса.Добавить(ИмяРеквизита);
			МассивТекстаЗапроса.Добавить(",");
		
		КонецЕсли;	
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&МассивСсылок)");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивВыбранныхДублей);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуДублей()

&НаСервере
Процедура УбратьВременныеКолонки()
	
	Если ЗначениеЗаполнено(АдресВременныхРеквизитовИЭлементов) Тогда
		
		ВременныеРеквизиты = ПолучитьИзВременногоХранилища(АдресВременныхРеквизитовИЭлементов);
		
		ИзменитьРеквизиты(, ВременныеРеквизиты);
		
		Для каждого ВременныйРеквизит Из ВременныеРеквизиты Цикл
			
			Элементы.Удалить(Элементы[СтрЗаменить(ВременныйРеквизит, ".", "")]);	
			
		КонецЦикла;
		
		УдалитьИзВременногоХранилища(АдресВременныхРеквизитовИЭлементов);
		
		АдресВременныхРеквизитовИЭлементов = "";
		
	КонецЕсли;	
	
КонецПроцедуры // УбратьВременныеКолонки

&НаСервере
Процедура ДобавитьВременныеКолонки(ТаблицаДублей, МассивРеквизитов = Неопределено)
	
	ДобавляемыеРеквизиты 	= Новый Массив;
	ВременныеРеквизиты 		= Новый Массив;
	
	Элементы.НайденныеДублиКод.Видимость = Не ТаблицаДублей.Колонки.Найти("Код") = Неопределено;
	Элементы.НайденныеДублиНаименование.Видимость = Не ТаблицаДублей.Колонки.Найти("Наименование") = Неопределено;
	
	Для каждого Колонка Из ТаблицаДублей.Колонки Цикл
		
		ИмяКолонки = ?(Колонка.Имя = "Количество", "КоличествоСсылки", Колонка.Имя);
		
		Если Не ИмяКолонки = "Ссылка" И Не ИмяКолонки = "Код" И Не ИмяКолонки = "Наименование" И Не ИмяКолонки = "Родитель" И 
			(МассивРеквизитов = Неопределено Или Не МассивРеквизитов.Найти(ИмяКолонки) = Неопределено Или Найти(ИмяКолонки, "ВладелецВладелец") > 0 Или ИмяКолонки = "КоличествоСсылки" Или ИмяКолонки = "РодительСсылки") Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ИмяКолонки, Колонка.ТипЗначения, "НайденныеДубли", Колонка.Заголовок); 
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			ВременныеРеквизиты.Добавить("НайденныеДубли." + ИмяКолонки);		
			
		КонецЕсли;			
		
	КонецЦикла;
	
	Если ВременныеРеквизиты.Количество() > 0 Тогда
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ИмяСправочника = "КаталогПредметовСнабжения";
		
		Для каждого ДобавляемыйРеквизит Из ДобавляемыеРеквизиты Цикл
			
			НоваяКолонка = Элементы.Вставить("НайденныеДубли" + ДобавляемыйРеквизит.Имя, Тип("ПолеФормы"), Элементы.НайденныеДубли, Элементы.НайденныеДублиКоличество);
			НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
			НоваяКолонка.Заголовок = ?(ДобавляемыйРеквизит.Заголовок = "ОбозначениеПредметаСнабжения", "Обозначение предмета снабжения", ОбщиеФункцииПовтИсп.ПолучитьСинонимРеквизитаСправочника(ИмяСправочника, ДобавляемыйРеквизит.Заголовок));
			НоваяКолонка.Ширина = СтрДлина(НоваяКолонка.Заголовок);
			НоваяКолонка.ПутьКДанным = "НайденныеДубли." + ДобавляемыйРеквизит.Имя;		
			
		КонецЦикла;
		
		АдресВременныхРеквизитовИЭлементов = ПоместитьВоВременноеХранилище(ВременныеРеквизиты, УникальныйИдентификатор);
		
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьВременныеКолонки()

&НаСервере
Процедура ЗаполнитьДеревоНайденныеДубли(ТаблицаДублей, МассивВыбранныхДублей, Оригинал)
	
	МестаИспользования = ОбщегоНазначения.МестаИспользования(МассивВыбранныхДублей);
	МестаИспользования = МестаИспользования.Скопировать(
	МестаИспользования.НайтиСтроки(Новый Структура("ВспомогательныеДанные", Ложь)));
	МестаИспользования.Индексы.Добавить("Ссылка");
	
	ГруппаДерева = НайденныеДубли.ПолучитьЭлементы().Добавить();
	ГруппаДерева.Пометка = 1;
	
	МаксСтрока = Неопределено;
	МаксМест   = -1;
	
	ЕстьКолонкаКоличество = Не ТаблицаДублей.Колонки.Найти("Количество") = Неопределено;
	
	Для каждого СтрокаДублей Из ТаблицаДублей Цикл
	
		СтрокаДерева = ГруппаДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДублей);
		
		Если ЕстьКолонкаКоличество Тогда
		
			СтрокаДерева.КоличествоСсылки = СтрокаДублей.Количество;	
		
		КонецЕсли;
		
		СтрокаДерева.Пометка = 1;
		СтрокаДерева.Количество = МестаИспользования.НайтиСтроки(Новый Структура("Ссылка", СтрокаДублей.Ссылка)).Количество();
		
		Если ЗначениеЗаполнено(Оригинал) Тогда
		    Если СтрокаДерева.Ссылка = Оригинал Тогда
				СтрокаДерева.Основной = ?(СтрокаДерева.Ссылка = Оригинал, Истина, Ложь);	
			    МаксСтрока = СтрокаДерева;
			КонецЕсли; 				
		Иначе
			Если МаксМест < СтрокаДерева.Количество Тогда
				Если МаксСтрока <> Неопределено Тогда
					МаксСтрока.Основной = Ложь;
				КонецЕсли;
				МаксСтрока = СтрокаДерева;
				МаксМест   = СтрокаДерева.Количество;
				МаксСтрока.Основной = Истина;
			КонецЕсли;
		КонецЕсли; 
			
	КонецЦикла;	
	
	ГруппаДерева.Наименование = МаксСтрока.Наименование + " (" + МассивВыбранныхДублей.Количество() + ")";
		
КонецПроцедуры // ЗаполнитьДеревоНайденныеДубли()

&НаКлиенте
Процедура ПоказатьМестаИспользования(ДеревоИсточник)
	МассивСсылок = Новый Массив;
	Для Каждого ГруппаДублей Из ДеревоИсточник.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева Из ГруппаДублей.ПолучитьЭлементы() Цикл
			МассивСсылок.Добавить(СтрокаДерева.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("НаборСсылок", МассивСсылок));
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Отчет.МестаИспользованияСсылок.Форма", ПараметрыОтчета, ЭтотОбъект, , , , , РежимОкна);
КонецПроцедуры // ПоказатьМестаИспользования

&НаКлиенте
Процедура ОткрытьФормуДубля(Знач ТекущиеДанные)
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекущиеДанные.Ссылка);
КонецПроцедуры // ОткрытьФормуДубля

&НаКлиенте
Процедура ИзменитьОсновнойЭлементИерархически(Знач ДанныеСтроки, Знач Родитель)
	Для Каждого Потомок Из Родитель.ПолучитьЭлементы() Цикл
		Потомок.Основной = Ложь;
	КонецЦикла;
	ДанныеСтроки.Основной = Истина;
	
	// Выбранный всегда используем.
	ДанныеСтроки.Пометка = 1;
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
	
	// И изменяем название группы
	Родитель.Наименование = ДанныеСтроки.Наименование + " (" + Родитель.Количество + ")";
КонецПроцедуры // ИзменитьОсновнойЭлементИерархически

&НаКлиенте
Процедура ИзменитьПометкиКандидатовИерархически(Знач ДанныеСтроки)
	ПроставитьПометкиВниз(ДанныеСтроки);
	ПроставитьПометкиВверх(ДанныеСтроки);
КонецПроцедуры // ИзменитьПометкиКандидатовИерархически

&НаКлиенте
Процедура ПроставитьПометкиВниз(Знач ДанныеСтроки)
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры // ПроставитьПометкиВниз

&НаКлиенте
Процедура ПроставитьПометкиВверх(Знач ДанныеСтроки)
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или (Потомок.Пометка > 0);
		КонецЦикла;
		
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
			
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
			
		Иначе
			РодительСтроки.Пометка = 0;
			
		КонецЕсли;
		
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
	
КонецПроцедуры // ПроставитьПометкиВверх

&НаКлиенте
Процедура ОбновитьПрименяемостьИСпецификациюПредметаСнабжения(ПредметСнабженияСсылка)

	ТаблицаПрименямости.Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", ПредметСнабженияСсылка);
	ТаблицаСпецификация.Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", ПредметСнабженияСсылка);
	
КонецПроцедуры // ОбновитьПрименяемостьПредметаСнабжения()

&НаКлиенте
Функция ЗапуститьУдалениеДубликатов()
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("СпособУдаления", "Пометка");
	ПараметрыМетода.Вставить("ПарыЗамен", ПарыЗаменДублей());
	ПараметрыМетода.Вставить("УчитыватьПрикладныеПравила", Истина);
	ПараметрыМетода.Вставить("ПараметрыОбновленияСпецификации", ПараметрыОбновленияСпецификации());

	
	Результат = УдалитьДубликатыНаСервере(ПараметрыМетода);
	Если Результат.Отказ = Истина Тогда
		
		Кратко = НСтр("ru = 'При удалении дублей возникла ошибка:'");
		
		Кратко = Кратко + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		Подробно = Кратко + Символы.ПС + Символы.ПС + Результат.ПодробноеПредставлениеОшибки;
		Элементы.НадписьТекстОшибки.Заголовок = Кратко;
		Элементы.СсылкаПодробнее.Подсказка    = Подробно;
		ПерейтиНаШагМастера(Элементы.ШагВозниклаОшибка);
		
	Иначе
		
		ШагМастера("Далее");		
		ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(НСтр("ru = 'Все найденные дубли успешно объединены'"));

	КонецЕсли;  
	
КонецФункции

&НаСервере
Функция УдалитьДубликатыНаСервере(ПараметрыМетода)
	
	ОбъектНаСервере = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектНаСервере.УдалитьДубликаты(ПараметрыМетода);
		
КонецФункции 

&НаСервере
Функция ПарыЗаменДублей()
	ПарыЗамен = Новый Соответствие;
	
	ДеревоДублей = РеквизитФормыВЗначение("НайденныеДубли");
	ФильтрПоиска = Новый Структура("Основной", Истина);
	
	Для Каждого Родитель Из ДеревоДублей.Строки Цикл
		ОсновнойВГруппе = Родитель.Строки.НайтиСтроки(ФильтрПоиска)[0].Ссылка;
		
		Для Каждого Потомок Из Родитель.Строки Цикл
			Если Потомок.Пометка = 1 Тогда 
				ПарыЗамен.Вставить(Потомок.Ссылка, ОсновнойВГруппе);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПарыЗамен;
КонецФункции

&НаСервере
Функция ПараметрыОбновленияСпецификации()
	ОригиналИСпецификация = Новый Соответствие;
	
	ДеревоДублей = РеквизитФормыВЗначение("НайденныеДубли");
	ФильтрПоиска = Новый Структура("Основной", Истина);
	
	Для Каждого Родитель Из ДеревоДублей.Строки Цикл
		Оригинал = Родитель.Строки.НайтиСтроки(ФильтрПоиска)[0].Ссылка;
		
		МассивДублей = Новый Массив;
		Для Каждого Потомок Из Родитель.Строки Цикл
			Если Потомок.Пометка = 1 И Потомок.Ссылка <> Оригинал Тогда 
				МассивДублей.Добавить(Потомок.Ссылка);
			КонецЕсли;
		КонецЦикла; 		
		ОригиналИСпецификация.Вставить(Оригинал, ПолучитьСпецификациюИПоместитьВХранилище(Оригинал, МассивДублей)); 
	КонецЦикла;
	
	Возврат ОригиналИСпецификация;
КонецФункции // ПараметрыОбновленияСпецификации

&НаСервере
Функция ПолучитьСпецификацию(Оригинал, МассивДублей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПС.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПС.ЗИП КАК ЗИП,
	|	СпецификацииПС.Количество КАК Количество,
	|	СпецификацииПС.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СпецификацииПС.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СпецификацииПС.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СпецификацииПС.КоличествоВЗИПР КАК КоличествоВЗИПР,
	|	СпецификацииПС.НомерПозиции КАК НомерПозиции,
	|	СпецификацииПС.Тип КАК Тип,
	|	СпецификацииПС.ПричинаВыбораДляЗИП КАК ПричинаВыбораДляЗИП
	|ПОМЕСТИТЬ ВТ_СпецификацияОригинала
	|ИЗ
	|	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	|ГДЕ
	|	СпецификацииПС.ПредметСнабжения = &ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпецификацииПС.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	МАКСИМУМ(СпецификацииПС.ЗИП) КАК ЗИП,
	|	МАКСИМУМ(СпецификацииПС.Количество) КАК Количество,
	|	МАКСИМУМ(СпецификацииПС.КоличествоВЗИПБорт) КАК КоличествоВЗИПБорт,
	|	МАКСИМУМ(СпецификацииПС.КоличествоВЗИПБаза) КАК КоличествоВЗИПБаза,
	|	МАКСИМУМ(СпецификацииПС.КоличествоВЗИПДЭ) КАК КоличествоВЗИПДЭ,
	|	МАКСИМУМ(СпецификацииПС.КоличествоВЗИПР) КАК КоличествоВЗИПР,
	|	МАКСИМУМ(СпецификацииПС.НомерПозиции) КАК НомерПозиции,
	|	МАКСИМУМ(СпецификацииПС.Тип) КАК Тип,
	|	МАКСИМУМ(СпецификацииПС.ПричинаВыбораДляЗИП) КАК ПричинаВыбораДляЗИП
	|ПОМЕСТИТЬ ВТ_СпецификацияДубликата
	|ИЗ
	|	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	|ГДЕ
	|	СпецификацииПС.ПредметСнабжения В (&ПредметСнабженияДубликаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПС.ПредметСнабжения,
	|	СпецификацииПС.СоставляющаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПредметСнабжения КАК ПредметСнабжения,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.СоставляющаяЧасть, ВТ_СпецификацияДубликата.СоставляющаяЧасть) КАК СоставляющаяЧасть,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.ЗИП, ВТ_СпецификацияДубликата.ЗИП) КАК ЗИП,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.Количество, ВТ_СпецификацияДубликата.Количество) КАК Количество,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.КоличествоВЗИПБорт, ВТ_СпецификацияДубликата.КоличествоВЗИПБорт) КАК КоличествоВЗИПБорт,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.КоличествоВЗИПБаза, ВТ_СпецификацияДубликата.КоличествоВЗИПБаза) КАК КоличествоВЗИПБаза,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.КоличествоВЗИПДЭ, ВТ_СпецификацияДубликата.КоличествоВЗИПДЭ) КАК КоличествоВЗИПДЭ,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.КоличествоВЗИПР, ВТ_СпецификацияДубликата.КоличествоВЗИПР) КАК КоличествоВЗИПР,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.НомерПозиции, ВТ_СпецификацияДубликата.НомерПозиции) КАК НомерПозиции,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.Тип, ВТ_СпецификацияДубликата.Тип) КАК Тип,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.ПричинаВыбораДляЗИП, ВТ_СпецификацияДубликата.ПричинаВыбораДляЗИП) КАК ПричинаВыбораДляЗИП
	|ИЗ
	|	ВТ_СпецификацияОригинала КАК ВТ_СпецификацияОригинала
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_СпецификацияДубликата КАК ВТ_СпецификацияДубликата
	|		ПО ВТ_СпецификацияОригинала.СоставляющаяЧасть = ВТ_СпецификацияДубликата.СоставляющаяЧасть";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", Оригинал);
	Запрос.УстановитьПараметр("ПредметСнабженияДубликаты", МассивДублей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСпецификацию

&НаКлиенте
Процедура ПоказатьОбъединеннуюСпецификациюНаКлиенте()
	
	Оригинал = Неопределено;
	МассивДублей = Новый Массив;
	
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	Родитель = ДанныеСтроки.ПолучитьРодителя();
	Если НЕ Родитель = Неопределено Тогда
		
		ДанныеСтроки = Родитель;
				
	КонецЕсли; 
	
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		
		Если Потомок.Пометка = 1 И Потомок.Основной Тогда 
			Оригинал = Потомок.Ссылка;
		КонецЕсли;
		
		Если Потомок.Пометка = 1 И НЕ Потомок.Основной Тогда 
			МассивДублей.Добавить(Потомок.Ссылка);
		КонецЕсли;
		
	КонецЦикла; 
	
	ПараметрыОткрытия = Новый Структура("Оригинал, АдресСпецификацииВХранилище", Оригинал, ПолучитьСпецификациюИПоместитьВХранилище(Оригинал, МассивДублей));
	
	ОткрытьФорму("Обработка.УдалениеДублейПредметовСнабжения.Форма.ФормаСпецификация", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ПоказатьОбъединеннуюСпецификациюНаКлиенте

&НаСервере
Функция ПолучитьСпецификациюИПоместитьВХранилище(Оригинал, МассивДублей)

	Возврат ПоместитьВоВременноеХранилище(ПолучитьСпецификацию(Оригинал, МассивДублей));

КонецФункции // ПолучитьСпецификациюИПоместитьВХранилище

&НаСервере
Процедура СохранитьНастройки()  
	Настройки = Новый Соответствие;
	Настройки.Вставить("СписокРеквизитов", СписокРеквизитов);
	
	ХранилищеОбщихНастроек.Сохранить("УдалениеДублейПредметовСнабжения", 
									 "УдалениеДублейПредметовСнабжения", 
									Настройки, 
									"УдалениеДублейПредметовСнабжения", 
									Пользователи.ТекущийПользователь());
КонецПроцедуры // СохранитьНастройки 

#КонецОбласти 

#Область ПошаговыйПомощник

&НаСервере
Процедура ИнициализироватьСценарийМастера()
	
	// 0. Выбор основных элементов.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Удалить дубли >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Удалить дубли'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Отказаться от замены дублей'");
	
	ДобавитьШагМастера(Элементы.ШагВыборОсновногоЭлемента,
		ДействиеШагаМастера("ПриАктивации",         "ШагВыборОсновногоЭлементаПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборОсновногоЭлементаПередДействиемОтмена",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборОсновногоЭлементаПередДействиемДалее",))),
		КнопкиМастера);
	
	// 1. Длительное удаление дублей.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Видимость = Ложь;
	//КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Прервать'");
	//КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Прервать удаление дублей'");
	
	ДобавитьШагМастера(Элементы.ШагВыполнениеУдаления,
		ДействиеШагаМастера("ПриАктивации",         "ШагВыполнениеУдаленияПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыполнениеУдаленияПередДействиемОтмена")), 
		КнопкиМастера);
	
	// 2. Успешное удаление.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.КнопкаПоУмолчанию = Истина;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагУспешноеУдаление,
		ДействиеШагаМастера("ПриАктивации",         "ШагУспешноеУдалениеПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагУспешноеУдалениеПередДействиемОтмена",)),
		КнопкиМастера);
	
	// 3. Ошибки выполнения.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагВозниклаОшибка,
		ДействиеШагаМастера("ПриАктивации",         "ШагВозниклаОшибкаПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВозниклаОшибкаПередДействиемОтмена")),
		КнопкиМастера);
	
КонецПроцедуры

// 0. выбор основных элементов.

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ЗавершитьШагМастера(ПараметрыШага);
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 1. Длительное удаление

&НаКлиенте
Процедура ШагВыполнениеУдаленияПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Истина;
	НастройкиПошаговогоМастера.ИмяПроцедуры = "";
	ЗапуститьУдалениеДубликатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеУдаленияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Ложь;
	Закрыть();
КонецПроцедуры

// 2. Успешное удаление

&НаКлиенте
Процедура ШагУспешноеУдалениеПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	ПодключитьОбработчикОжидания("ЗакрытиеОбработкиУдаленияДублейПредметовСнабжения", 0.5, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешноеУдалениеПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеОбработкиУдаленияДублейПредметовСнабжения()
	Если ЭтаФорма.Открыта() Тогда
		Закрыть(Истина);
	КонецЕсли;  	
КонецПроцедуры // ЗакрытиеОбработкиУдаленияДублейПредметовСнабжения

// 3. Ошибки выполнения.

&НаКлиенте
Процедура ШагВозниклаОшибкаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Истина;
	Элементы.СсылкаПодробнее.Видимость = ЗначениеЗаполнено(Элементы.СсылкаПодробнее.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВозниклаОшибкаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область БлокМастера

////////////////////////////////////////////////////////////////////////////////
// Блок мастера

// Для встраивания функционала мастера необходимо:
//
//     1) Нарисовать на форме группу, содержащую страницы помощника.
//     2) Определить на форме три команды для действий "Далее", "Назад", "Отмена". Определить им обработчики как:
//
//         &НаКлиенте
//         Процедура ШагМастераНазад(Команда)
//             ШагМастера("Назад");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераДалее(Команда)
//             ШагМастера("Далее");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераОтмена(Команда)
//             ШагМастера("Отмена");
//         КонецПроцедуры
//
//     3) Добавить блок методов пошагового помощника.
//
//     4) В коде на сервере:
//          - Инициализировать структуры помощника вызовом "ИнициализироватьМастер", передав туда соответствующие
//            элементы формы.
//
//          - Создать сценарий работы последовательным вызовами "ДобавитьШагМастера". Рекомендуется использовать 
//            вспомогательные функции "ДействиеШагаМастера" и "КнопкаШагаМастера". Например:
//
//              ДобавитьШагМастера(Элементы.ШагВыборЦелевогоЭлемента, 
//                      ДействиеШагаМастера("ПриАктивации",         "ШагВыборЦелевогоЭлементаПриАктивации",
//                      ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборЦелевогоЭлементаПередДействиемДалее",
//                      ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборЦелевогоЭлементаПередДействиемОтмена",
//                  ))), 
//                      КнопкиМастера()
//              );
//
//     5) В коде на клиенте (обычно при открытии):
//          - Указать начальную страницу мастера при помощи вызова "УстановитьНачальнуюСтраницуМастера".
//          - Запустить начальную страницу вызовом "ЗапуститьРаботуМастера".
//

&НаСервере
Функция ИнициализироватьМастер(Знач ГруппаСтраниц, Знач КнопкаДалее, Знач КнопкаНазад, Знач КнопкаОтмена)
	// Инициализирует структуры мастера.
	//
	// Параметры:
	//     ГруппаСтраниц - ГруппаФормы - Элемент формы, группа типа "страницы", содержащая в себе страницы-шаги мастера.
	//     КнопкаДалее   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Далее".
	//     КнопкаНазад   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Назад".
	//     КнопкаОтмена  - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Отмена".
	Результат = Новый Структура;
	
	Результат.Вставить("Шаги", Новый Массив);
	Результат.Вставить("НомерТекущегоШага", 0);
	Результат.Вставить("СтраницаСтарта", Неопределено);
	
	// Идентификаторы частей интерфейса.
	Результат.Вставить("ГруппаСтраниц", ГруппаСтраниц.Имя);
	Результат.Вставить("КнопкаДалее",   КнопкаДалее.Имя);
	Результат.Вставить("КнопкаНазад",   КнопкаНазад.Имя);
	Результат.Вставить("КнопкаОтмена",  КнопкаОтмена.Имя);
	
	// Для обработки длительных операций.
	Результат.Вставить("ИмяПроцедуры");
	Результат.Вставить("ПоказатьДиалогПередЗакрытием", Ложь);
	
	Возврат Результат;
КонецФункции

// Добавляет шаг мастера. Переходы между страницами будут происходить согласно порядку добавления.
//
// Параметры:
//
//     Страница - ГруппаФормы - Группа-страница, содержащая элементы текущего шага страницы.
// 
//     Действия - Структура - Описание действий, возможных на текущем шаге. Поля структуры:
//
//          *  ПриАктивации      - Строка - Необязательное имя процедуры, которая будет выполнена перед активацией
//                                          страницы с двумя параметрами:
//                                           <Страница> - ГруппаФормы - группа-страница, которая активизируется.
//                                           <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемДалее  - Строка - Необязательное имя процедуры, которая будет выполнена при нажатии кнопки
//                                            "Далее", перед переходом на следующую страницу. Процедура будет вызвана с
//                                            двумя параметрами:
//                                              <ПараметрыШага> - служебный реквизит. При успешном завершении цепочки
//                                                                немодальных  вызовов последняя процедура-обработчик
//                                                                должна произвести вызов.
//                                                                ЗавершитьШагМастера(ПараметрыШага), подтверждая
//                                                                действие.
//                                             <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемНазад  - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Назад".
//
//          * ПередДействиемОтмена - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Отмена".
//
//      Кнопки - Структура - описание кнопок на текущем шаге. Поля структуры:
//
//          * Далее  - Структура - Описание кнопки "Далее". поля: Заголовок, Подсказка, Доступность, Видимость,
//                                 КнопкаПоУмолчанию.
//                                 Пустая подсказка заменяется на заголовок. По умолчанию будут использованы значения:
//                                 Заголовок = "Далее >", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Истина;
//
//          * Назад  - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "< Назад", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
//          * Отмена - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "Отмена", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
// Для составления параметров рекомендуется использовать вспомогательные методы "ДобавитьШагМастера",
// "ДействиеШагаМастера", "КнопкаШагаМастера".
//
&НаСервере
Процедура ДобавитьШагМастера(Знач Страница, Знач Действия, Знач Кнопки)
	
	// Умолчания
	ОписаниеШага = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена");
	
	ОписаниеШага.Вставить("Страница", Страница.Имя);
	
	// Устанавливаем действия
	ЗаполнитьЗначенияСвойств(ОписаниеШага, Действия);
	
	// Регистрация описаний кнопок.
	Для Каждого КлючИЗначение Из Кнопки Цикл
		ИмяКнопки = КлючИЗначение.Ключ;
		ОписаниеКнопки = КлючИЗначение.Значение;
		// Дозаполнение вторичных свойств.
		Если Не ОписаниеКнопки.Видимость Тогда
			ОписаниеКнопки.Доступность = Ложь;
			ОписаниеКнопки.КнопкаПоУмолчанию = Ложь;
		Иначе
			Если Не ЗначениеЗаполнено(ОписаниеКнопки.Подсказка) Тогда
				ОписаниеКнопки.Подсказка = ОписаниеКнопки.Заголовок;
			КонецЕсли;
		КонецЕсли;
		// Регистрация с префиксом "Кнопка".
		ОписаниеШага.Вставить("Кнопка" + ИмяКнопки, ОписаниеКнопки);
	КонецЦикла;

	НастройкиПошаговогоМастера.Шаги.Добавить(ОписаниеШага);
КонецПроцедуры

// Вспомогательное формирование структуры, описывающей действие.
//
// Параметры:
//     Идентификатор    - Строка - Идентификатор действия, см описание метода "ДобавитьШагМастера".
//     ИмяОбработчика   - Строка - Имя процедуры, см описание метода "ДобавитьШагМастера".
//     СлужебныеДанные  - Структура - Накапливает значения.
//
// Возвращаемое значение - Структура - СлужебныеДанные с добавленными полями.
&НаСервере
Функция ДействиеШагаМастера(Знач Идентификатор, Знач ИмяОбработчика, СлужебныеДанные = Неопределено)
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	СлужебныеДанные.Вставить(Идентификатор, ИмяОбработчика);;
	Возврат СлужебныеДанные;
КонецФункции

// Вспомогательное формирование структуры, описывающей кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Кнопки мастера.
//       * Назад  - Структура - Описание кнопки Назад, сформированное методом КнопкаМастера().
//       * Далее  - Структура - Описание кнопки Далее, сформированное методом КнопкаМастера().
//       * Отмена - Структура - Описание кнопки Отмена, сформированное методом КнопкаМастера().
//
&НаСервере
Функция КнопкиМастера()
	Результат = Новый Структура("Далее, Назад, Отмена", КнопкаМастера(), КнопкаМастера(), КнопкаМастера());
	Результат.Далее.КнопкаПоУмолчанию = Истина;
	Результат.Далее.Заголовок = НСтр("ru='Далее >'");
	Результат.Назад.Заголовок = НСтр("ru='< Назад'");
	Результат.Отмена.Заголовок = НСтр("ru='Отмена'");
	Возврат Результат;
КонецФункции

// Описание настроек кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Настройки кнопки формы.
//       * Заголовок         - Строка - Заголовок кнопки.
//       * Подсказка         - Строка - Подсказка для кнопки.
//       * Видимость         - Булево - Когда Истина то кнопка видна. Значение по умолчанию: Истина.
//       * Доступность       - Булево - Когда Истина то кнопку можно нажимать. Значение по умолчанию: Истина.
//       * КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. Значение по умолчанию:
//                                      Ложь.
//
// См. также:
//   "КнопкаФормы" в синтакс-помощнике.
//
&НаСервере
Функция КнопкаМастера()
	Результат = Новый Структура;
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Подсказка", "");
	
	Результат.Вставить("Доступность", Истина);
	Результат.Вставить("Видимость", Истина);
	Результат.Вставить("КнопкаПоУмолчанию", Ложь);
	
	Возврат Результат;
КонецФункции

// Устанавливает начальную страницу для первого запуска мастера.
//
// Параметры:
//     СтартоваяСтраница - Число, Строка, ГруппаФормы - Номер шага, группа-страница, или ее идентификатор.
//
&НаКлиенте
Процедура УстановитьНачальнуюСтраницуМастера(Знач Страница)
	
	НастройкиПошаговогоМастера.СтраницаСтарта = НомерШагаМастераПоИдентификатору(Страница);
	
КонецПроцедуры

// Запускает начальную работу мастера с шага, установленного предварительно при помощи
// "УстановитьНачальнуюСтраницуМастера".
&НаКлиенте
Процедура ЗапуститьРаботуМастера()
	
	Если НастройкиПошаговогоМастера.СтраницаСтарта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Перед запуском мастера должна быть установлена начальная страница.'");
		
	ИначеЕсли НастройкиПошаговогоМастера.СтраницаСтарта = -1 Тогда
		// Разогрев. Проверяем наличие обработчиков действий у всех шагов.
		ВозможныеДействия = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена");
		Для Каждого ОписаниеШага Из НастройкиПошаговогоМастера.Шаги Цикл
			Для Каждого КлючЗначение Из ВозможныеДействия Цикл
				ИмяДействия = КлючЗначение.Ключ;
				ИмяОбработчика = ОписаниеШага[ИмяДействия];
				Если Не ПустаяСтрока(ИмяОбработчика) Тогда
					Попытка
						Тест = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
					Исключение
						Текст = НСтр("ru = 'Ошибка создания обработчика события %1 для страницы %2, не определена процедура %3'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяДействия, ОписаниеШага.Страница, ИмяОбработчика);
						ВызватьИсключение Текст;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Фактический запуск
		ПерейтиНаШагМастера(НастройкиПошаговогоМастера.НомерТекущегоШага);
	Иначе
		// По умолчанию все отключено
		Элементы[НастройкиПошаговогоМастера.КнопкаДалее].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаНазад].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаОтмена].Видимость = Ложь;
		
		// Отложенный запуск
		НастройкиПошаговогоМастера.НомерТекущегоШага = НастройкиПошаговогоМастера.СтраницаСтарта;
		НастройкиПошаговогоМастера.СтраницаСтарта    = -1;
		ПодключитьОбработчикОжидания("ЗапуститьРаботуМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Выполняет переключение мастера на следующую или предыдущую страницу.
//
// Параметры:
//     КодКоманды - Строка - Идентификатор действия, может принимать значения "Далее", "Назад" или "Отмена".
//
&НаКлиенте
Процедура ШагМастера(Знач КодКоманды)
	
	Если КодКоманды = "Далее" Тогда
		Направление = 1;
	ИначеЕсли КодКоманды = "Назад" Тогда
		Направление = -1;
	ИначеЕсли КодКоманды = "Отмена" Тогда
		Направление = 0;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректная команда шага помощника'");
	КонецЕсли;
	
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// Отрабатываем уход с текущей страницы.
	Если Направление = 1 Тогда
		Действие = ОписаниеШага.ПередДействиемДалее;
		
	ИначеЕсли Направление = -1 Тогда
		Действие = ОписаниеШага.ПередДействиемНазад;
		
	Иначе
		Действие = ОписаниеШага.ПередДействиемОтмена;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Действие) Тогда
		ЗавершитьШагМастера(Направление);
	Иначе
		Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Направление);
	КонецЕсли;
КонецПроцедуры

// Выполняет безусловное позиционирование мастера на страницу.
//
// Параметры:
//     ИдентификаторШага   - Число, Строка, ГруппаФормы - Номер, группа-страница формы или ее имя для перехода.
//     ИнициироватьСобытия - Булево - Флаг того, что необходимо вызывать события, связанные с активацией шага.
//
&НаКлиенте
Процедура ПерейтиНаШагМастера(Знач ИдентификаторШага, Знач ИнициироватьСобытия = Истина)
	СледующийШаг = НомерШагаМастераПоИдентификатору(ИдентификаторШага);
	Если СледующийШаг = Неопределено Тогда
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден шаг помощника %1'"), ИдентификаторШага);
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// И запускаем новую страницу
	ШагМастераЗавершениеБезусловно(СледующийШаг, ИнициироватьСобытия);
КонецПроцедуры

// Подтверждает действие шага мастера и вызывает переключение страницы.
//
// Параметры:
//     ПараметрыШага - Служебный реквизит, полученный в обработчике перед началом действия.
//
&НаКлиенте
Процедура ЗавершитьШагМастера(Знач ПараметрыШага)
	СледующийШаг = НастройкиПошаговогоМастера.НомерТекущегоШага + ПараметрыШага;
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	Если ПараметрыШага = 0 Тогда
		// Подтверждение отмены - ничего не делаем.
		Возврат;
		
	ИначеЕсли ПараметрыШага = 1 И СледующийШаг > ПоследнийШаг Тогда
		// Попытка сделать шаг за пределы вперед.
		ВызватьИсключение НСтр("ru='Попытка выхода за последний шаг мастера'");
		
	ИначеЕсли ПараметрыШага = -1 И СледующийШаг < 0 Тогда
		// Попытка сделать шаг за пределы назад.
		ВызватьИсключение НСтр("ru='Попытка выхода назад из первого шага мастера'");
		
	КонецЕсли;
	
	ШагМастераЗавершениеБезусловно(СледующийШаг);
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераЗавершениеБезусловно(Знач СледующийШаг, Знач ИнициироватьСобытия = Истина)
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу.
	Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	Если ИнициироватьСобытия И Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		// Отрабатываем "ПриАктивации" новой страницы, он же запустит ожидание.
		ПодключитьОбработчикОжидания("ОбработкаАктивацииСтраницыМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваКнопкиМастера(Знач ИмяКнопки, Знач Описание)
	
	КнопкаМастера = Элементы[ИмяКнопки];
	ЗаполнитьЗначенияСвойств(КнопкаМастера, Описание);
	КнопкаМастера.РасширеннаяПодсказка.Заголовок = Описание.Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивацииСтраницыМастера()
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	Если Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		Оповещение = Новый ОписаниеОповещения(ОписаниеШага.ПриАктивации, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Элементы[ОписаниеШага.Страница]);
	КонецЕсли;
КонецПроцедуры

// Может быть номер шага или группа-страница, или ее идентификатор.
&НаКлиенте
Функция НомерШагаМастераПоИдентификатору(Знач ИдентификаторШага)
	ТипПараметра = ТипЗнч(ИдентификаторШага);
	Если ТипПараметра = Тип("Число") Тогда
		Возврат ИдентификаторШага;
	КонецЕсли;
	
	ИмяПоиска = ?(ТипПараметра = Тип("ГруппаФормы"), ИдентификаторШага.Имя, ИдентификаторШага);
	Для НомерШага=0 По НастройкиПошаговогоМастера.Шаги.ВГраница() Цикл
		Если НастройкиПошаговогоМастера.Шаги[НомерШага].Страница = ИмяПоиска Тогда
			Возврат НомерШага;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден шаг ""%1"".'"), ИмяПоиска);
КонецФункции

#КонецОбласти
