
#Область УдалитьПустыхПоставщиков 
&НаСервере
Процедура УдалитьПустыеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|ГДЕ
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Об = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		к = 0;
		
		Пока к <= Об.ИзготовителиИПоставщики.Количество() -1 Цикл
			
			Стр = Об.ИзготовителиИПоставщики[к];
			
			Если НЕ ЗначениеЗаполнено(Стр.Контрагент) Тогда
			
				Об.ИзготовителиИПоставщики.Удалить(Стр);
				
			Иначе
				
				к = к + 1;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		Об.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПустыхПоставщиков(Команда)
	Сообщить("" + ТекущаяДата() + ": Начало " + Команда.Имя);
	
	УдалитьПустыеНаСервере();
	
	Сообщить("" + ТекущаяДата() + ": Окончание " + Команда.Имя);
КонецПроцедуры
#КонецОбласти 

#Область УдалитьДубликатыПоставщиков 

&НаСервере
Функция УдалитьДубликатыНаСервереОбщееКоличество()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка КАК Ссылка,
	               |	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент КАК Контрагент
				   |ПОМЕСТИТЬ ТаблицаКонтрагентовПС
	               |ИЗ
	               |	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка,
	               |	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка) > 1
				   |;
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Ссылка
				   |ИЗ ТаблицаКонтрагентовПС
				   |";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество(); 
	
КонецФункции

&НаСервере
Процедура УдалитьДубликатыНаСервере(Порция)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 666
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаКонтрагентовПС
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|
	|СГРУППИРОВАТЬ ПО
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка,
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент КАК Контрагент,
	|	МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.Поставщик) КАК Поставщик,
	|	МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.Разработчик) КАК Разработчик,
	|	МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.Изготовитель) КАК Изготовитель,
	|	МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.СрокиИзготовления) КАК СрокиИзготовления,
	|	МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.СостояниеПроизводства) КАК СостояниеПроизводства
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|ГДЕ
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаКонтрагентовПС.Ссылка
	|			ИЗ
	|				ТаблицаКонтрагентовПС)
	|
	|СГРУППИРОВАТЬ ПО
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка,
	|	КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "666", Формат(Порция,"ЧГ="));
	
	ВыборкаПС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПС.Следующий() Цикл
		
		Об = ВыборкаПС.Ссылка.ПолучитьОбъект();
		Об.ИзготовителиИПоставщики.Очистить();
		
		ВыборкаДетальныеЗаписи = ВыборкаПС.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрока = Об.ИзготовителиИПоставщики.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
		Об.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДубликатыПоставщиков(Команда)
	
	Сообщить("" + ТекущаяДата() + ": Начало " + Команда.Имя);
	
	ОбщееКоличество = УдалитьДубликатыНаСервереОбщееКоличество();
	
	ВремяНачалаОбработки = ТекущаяДата(); 
	
	Порция = 1; //МАКС(Цел(ОбщееКоличество/100),1);
	СкоростьОбновления = 2; //в секундах
	
	ТекСчетчик = 0;

	Пока ТекСчетчик < ОбщееКоличество Цикл
		
		ВремяНачалаОбработкиТекущейПорции = ТекущаяДата();
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение" + Команда.Имя,ВремяНачалаОбработки,ТекСчетчик,ОбщееКоличество);
		
		УдалитьДубликатыНаСервере(Порция);
		
		ТекСчетчик = МИН(ТекСчетчик + Порция,ОбщееКоличество);
	
		ВремяЗатраченноеНаПорцию = ТекущаяДата() - ВремяНачалаОбработкиТекущейПорции;
		Порция = ?(ВремяЗатраченноеНаПорцию > СкоростьОбновления,МАКС(Цел(СкоростьОбновления*Порция/ВремяЗатраченноеНаПорцию),1),Порция*2);
	
	КонецЦикла; 
	
	СтрПрошло = "";
	Если ТекСчетчик Тогда
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение" + Команда.Имя,ВремяНачалаОбработки,ОбщееКоличество,ОбщееКоличество,СтрПрошло);
	КонецЕсли; 

	Сообщить("" + ТекущаяДата() + ": Окончание " + Команда.Имя + " (затрачено: " + СтрПрошло + ")");

КонецПроцедуры
#КонецОбласти 

#Область ПеренестиПоставщиковИзЦен 
&НаСервере
Процедура ПеренестиПоставщиковИзЦенНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦеныПредметовСнабженияСрезПоследних.Контрагент КАК Контрагент,
	               |	ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения КАК ПредметСнабжения
	               |ИЗ
	               |	РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних КАК ЦеныПредметовСнабженияСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	               |		ПО ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения = КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка
	               |			И ЦеныПредметовСнабженияСрезПоследних.Контрагент = КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент
	               |ГДЕ
	               |	КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка ЕСТЬ NULL
	               |	И (НЕ ЦеныПредметовСнабженияСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	               |	И (ЦеныПредметовСнабженияСрезПоследних.Контрагент ССЫЛКА Справочник.Организации)
	               |ИТОГИ ПО
	               |	ПредметСнабжения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПС = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПС.Следующий() Цикл
		
		Об = ВыборкаПС.ПредметСнабжения.ПолучитьОбъект();
		
		Выборка = ВыборкаПС.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Стр = Об.ИзготовителиИПоставщики.Добавить();
			Стр.Контрагент = Выборка.Контрагент;
			Стр.Поставщик = Истина;
			
		КонецЦикла;
		
		Об.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПоставщиковИзЦен(Команда)
	ПеренестиПоставщиковИзЦенНаСервере();
КонецПроцедуры
#КонецОбласти 

#Область ОчисткаДокументаНаПоставкуЗагруженногоИзIncat 
&НаСервере
Функция ОчисткаДокументаНаПоставкуЗагруженногоИзIncatПолучитьОбщееКоличество()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(КаталогПредметовСнабжения.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		|ГДЕ
		|	КаталогПредметовСнабжения.ДокументНаПоставку ПОДОБНО ""11356.%""
		|	ИЛИ КаталогПредметовСнабжения.ДокументНаПоставку ПОДОБНО ""SR1199D-%""
		|	И КаталогПредметовСнабжения.ДокументНаПоставку ПОДОБНО ""%11356.%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Количество;
	
КонецФункции

&НаСервере
Процедура ОчисткаДокументаНаПоставкуЗагруженногоИзIncatНаСервере(Порция)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Порция,"ЧГ=") + " 
		|	КаталогПредметовСнабжения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
		|ГДЕ
		|	КаталогПредметовСнабжения.ДокументНаПоставку ПОДОБНО ""11356.%""
		|	ИЛИ КаталогПредметовСнабжения.ДокументНаПоставку ПОДОБНО ""SR1199D-%""
		|	И КаталогПредметовСнабжения.ДокументНаПоставку ПОДОБНО ""%11356.%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		ТекОбъект.ДокументНаПоставку = "";
		
		ТекОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаДокументаНаПоставкуЗагруженногоИзIncat(Команда)
	
	ВремяНачалаОбработки = ТекущаяДата(); 
	
	Сообщить("" + ТекущаяДата() + ": Начало" + Команда.Имя);
	
	ОбщееКоличество = ОчисткаДокументаНаПоставкуЗагруженногоИзIncatПолучитьОбщееКоличество();
	
	Порция = 1; //МАКС(Цел(ОбщееКоличество/100),1);
	СкоростьОбновления = 2; //в секундах
	
	ТекСчетчик = 0;

	
	Пока ТекСчетчик < ОбщееКоличество Цикл
		
		ВремяНачалаОбработкиТекущейПорции = ТекущаяДата();
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение" + Команда.Имя,ВремяНачалаОбработки,ТекСчетчик,ОбщееКоличество);
		
		ОчисткаДокументаНаПоставкуЗагруженногоИзIncatНаСервере(Порция);
		
		ТекСчетчик = МИН(ТекСчетчик + Порция,ОбщееКоличество);
	
		ВремяЗатраченноеНаПорцию = ТекущаяДата() - ВремяНачалаОбработкиТекущейПорции;
		Порция = ?(ВремяЗатраченноеНаПорцию > СкоростьОбновления,МАКС(Цел(СкоростьОбновления*Порция/ВремяЗатраченноеНаПорцию),1),Порция*2);
	
	КонецЦикла; 
	
	СтрПрошло = "";
	Если ТекСчетчик Тогда
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение" + Команда.Имя,ВремяНачалаОбработки,ОбщееКоличество,ОбщееКоличество,СтрПрошло);
	КонецЕсли; 

	Сообщить("" + ТекущаяДата() + ": Окончание " + Команда.Имя + " (затрачено: " + СтрПрошло + ")");
	
КонецПроцедуры
#КонецОбласти 

#Область УдалитьДублиХарактеристик 

&НаСервере
Функция УдалитьДублиХарактеристикНаСервереОбщееКоличество()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабженияХарактеристики.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабженияХарактеристики.Характеристика КАК Характеристика
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|
	|СГРУППИРОВАТЬ ПО
	|	КаталогПредметовСнабженияХарактеристики.Ссылка,
	|	КаталогПредметовСнабженияХарактеристики.Характеристика
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(КаталогПредметовСнабженияХарактеристики.Характеристика) > 1
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

&НаСервере
Процедура УдалитьДублиХарактеристикНаСервере(Порция)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ " + Формат(Порция,"ЧГ=") + "
	|	КаталогПредметовСнабженияХарактеристики.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабженияХарактеристики.Характеристика КАК Характеристика
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|
	|СГРУППИРОВАТЬ ПО
	|	КаталогПредметовСнабженияХарактеристики.Ссылка,
	|	КаталогПредметовСнабженияХарактеристики.Характеристика
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(КаталогПредметовСнабженияХарактеристики.Характеристика) > 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Характеристика
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаПС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПС.Следующий() Цикл
		
		СпрОб = ВыборкаПС.Ссылка.ПолучитьОбъект();
		ТЧ_Хар = СпрОб.Характеристики;
		ТЧ_Хар.Сортировать("Характеристика,Значение УБЫВ");
		
		ВыборкаХар = ВыборкаПС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХар.Следующий() Цикл
			
			Найдено = ТЧ_Хар.НайтиСтроки(Новый Структура("Характеристика", ВыборкаХар.Характеристика));
			
			Пропуск = Истина;
			Если Найдено.Количество() > 1 Тогда
				Для каждого Стр Из Найдено Цикл
					Если Пропуск Тогда
						Пропуск = Ложь;
						Продолжить;
					КонецЕсли; 
					ТЧ_Хар.Удалить(Стр);
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЦикла; 
		
		СпрОб.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДублиХарактеристик(Команда)
	
	Сообщить("" + ТекущаяДата() + ": Начало " + Команда.Имя);
	
	ОбщееКоличество = УдалитьДублиХарактеристикНаСервереОбщееКоличество();
	
	ВремяНачалаОбработки = ТекущаяДата(); 
	
	Порция = 1; //МАКС(Цел(ОбщееКоличество/100),1);
	СкоростьОбновления = 2; //в секундах
	
	ТекСчетчик = 0;

	Пока ТекСчетчик < ОбщееКоличество Цикл
		
		ВремяНачалаОбработкиТекущейПорции = ТекущаяДата();
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение" + Команда.Имя,ВремяНачалаОбработки,ТекСчетчик,ОбщееКоличество);
		
		УдалитьДублиХарактеристикНаСервере(Порция);
		
		ТекСчетчик = МИН(ТекСчетчик + Порция,ОбщееКоличество);
	
		ВремяЗатраченноеНаПорцию = ТекущаяДата() - ВремяНачалаОбработкиТекущейПорции;
		Порция = ?(ВремяЗатраченноеНаПорцию > СкоростьОбновления,МАКС(Цел(СкоростьОбновления*Порция/ВремяЗатраченноеНаПорцию),1),Порция*2);
	
	КонецЦикла; 
	
	СтрПрошло = "";
	Если ТекСчетчик Тогда
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение" + Команда.Имя,ВремяНачалаОбработки,ОбщееКоличество,ОбщееКоличество,СтрПрошло);
	КонецЕсли; 

	Сообщить("" + ТекущаяДата() + ": Окончание " + Команда.Имя + " (затрачено: " + СтрПрошло + ")");

КонецПроцедуры
#КонецОбласти 

#Область УдалитьДублиЦен 
&НаСервере
Функция УдалитьДублиЦенНаСервереПолучитьОбщееКоличество()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения КАК ПредметСнабжения,
	|	ЦеныПредметовСнабженияСрезПоследних.ТипЦены КАК ТипЦены,
	|	ЦеныПредметовСнабженияСрезПоследних.Контрагент КАК Контрагент,
	|	ЦеныПредметовСнабженияСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних КАК ЦеныПредметовСнабженияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения,
	|	ЦеныПредметовСнабженияСрезПоследних.ТипЦены,
	|	ЦеныПредметовСнабженияСрезПоследних.Контрагент,
	|	ЦеныПредметовСнабженияСрезПоследних.Цена
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ЦеныПредметовСнабженияСрезПоследних.ПредметСнабжения) > 1";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции

&НаСервере
Процедура УдалитьДублиЦенНаСервере(Порция)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныПредметовСнабжения.Период КАК Период,
	|	ЦеныПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	ЦеныПредметовСнабжения.ТипЦены КАК ТипЦены,
	|	ЦеныПредметовСнабжения.Контрагент КАК Контрагент,
	|	ЦеныПредметовСнабжения.Цена КАК Цена,
	|	ЦеныПредметовСнабжения.Количество КАК Количество,
	|	ЦеныПредметовСнабжения.Статус КАК Статус,
	|	ЦеныПредметовСнабжения.Валюта КАК Валюта,
	|	ЦеныПредметовСнабжения.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныПредметовСнабжения.Регистратор КАК Регистратор,
	|	ЦеныПредметовСнабжения.UID КАК ГУИД,
	|	ВЫРАЗИТЬ(ЦеныПредметовСнабжения.УсловиеПоставки КАК СТРОКА(20)) КАК УсловиеПоставки
	|ИЗ
	|	РегистрСведений.ЦеныПредметовСнабжения КАК ЦеныПредметовСнабжения
	|ГДЕ
	|	(ЦеныПредметовСнабжения.ПредметСнабжения, ЦеныПредметовСнабжения.ТипЦены, ЦеныПредметовСнабжения.Контрагент, ЦеныПредметовСнабжения.Цена) В
	//|			(ВЫБРАТЬ ПЕРВЫЕ " + Формат(Порция,"ЧГ=") + "
	|			(ВЫБРАТЬ 
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.ПредметСнабжения,
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.ТипЦены,
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.Контрагент,
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.Цена
	|			ИЗ
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних
	|			СГРУППИРОВАТЬ ПО
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.ПредметСнабжения,
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.ТипЦены,
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.Контрагент,
	|				РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.Цена
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(РегистрСведений.ЦеныПредметовСнабжения.СрезПоследних.ПредметСнабжения) > 1)
	|    И Регистратор ССЫЛКА Документ.ВводНачальныхОстатковЦен
	|УПОРЯДОЧИТЬ ПО
	|	ПредметСнабжения,
	|	ТипЦены,
	|	Цена УБЫВ,
	|	УсловиеПоставки УБЫВ,
	|	Количество УБЫВ,
	|	Статус УБЫВ,
	|	Валюта УБЫВ,
	|	ЕдиницаИзмерения УБЫВ,
	|	Период УБЫВ
	|ИТОГИ ПО
	|	ПредметСнабжения,
	|	ТипЦены,
	|	Контрагент,
	|	Цена";
	
	ТаблицаДляУдаления = Новый ТаблицаЗначений;
	ТаблицаДляУдаления.Колонки.Добавить("Регистратор");
	ТаблицаДляУдаления.Колонки.Добавить("ГУИД");
	
	ВыборкаПС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // ПС
	Пока ВыборкаПС.Следующий() Цикл 
		ВыборкаТЦ = ВыборкаПС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // ТипЦены
		Пока ВыборкаТЦ.Следующий() Цикл 
			ВыборкаКонтр = ВыборкаТЦ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // Контрагент
			Пока ВыборкаКонтр.Следующий() Цикл
				ВыборкаЦена = ВыборкаКонтр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // Цена
				Пока ВыборкаЦена.Следующий() Цикл
					
					ВыборкаДетали = ВыборкаЦена.Выбрать(); 
					Первый = Истина;
					Пока ВыборкаДетали.Следующий() Цикл
						
						Если Первый Тогда
							Первый = Ложь;
							Продолжить;
						КонецЕсли;
						
						НовСтр = ТаблицаДляУдаления.Добавить();
						НовСтр.Регистратор = ВыборкаДетали.Регистратор;
						НовСтр.ГУИД = ВыборкаДетали.ГУИД;
						
					КонецЦикла;
					
				КонецЦикла; 
			КонецЦикла; 			
		КонецЦикла; 
	КонецЦикла;  

	Регистраторы = ТаблицаДляУдаления.Скопировать(, "Регистратор");
	Регистраторы.Свернуть("Регистратор");
	Регистраторы.Сортировать("Регистратор");
	
	ТаблицаДляУдаления.Сортировать("ГУИД"); 
	
	//НачатьТранзакцию();
	
	Для каждого ДокРегистратор Из Регистраторы Цикл
		
		НайдСтроки = ТаблицаДляУдаления.НайтиСтроки(Новый Структура("Регистратор", ДокРегистратор.Регистратор));
		
		РегЦен = РегистрыСведений.ЦеныПредметовСнабжения.СоздатьНаборЗаписей();
		РегЦен.Отбор.Регистратор.Установить(ДокРегистратор.Регистратор);
		РегЦен.Прочитать();
		
		ТЗ = РегЦен.Выгрузить();
		
		Для каждого СтрокаУдалить Из НайдСтроки Цикл
			
			НайдСтрока = ТЗ.Найти(СтрокаУдалить.ГУИД, "UID");
			ТЗ.Удалить(НайдСтрока);
			
		КонецЦикла; 
		
		РегЦен.Загрузить(ТЗ);
		РегЦен.Записать();
		
		ТЗ.Колонки.Удалить(0);
		
		ДокРегистраторОбъект = ДокРегистратор.Регистратор.ПолучитьОбъект();
		ДокРегистраторОбъект.Цены.Загрузить(ТЗ);
		ДокРегистраторОбъект.Записать();
		
	КонецЦикла; 

	//Если ТранзакцияАктивна() Тогда
	//	ЗафиксироватьТранзакцию();
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДублиЦен(Команда)
	
	Сообщить("" + ТекущаяДата() + ": Начало " + Команда.Имя);
	
	//ОбщееКоличество = УдалитьДублиЦенНаСервереПолучитьОбщееКоличество();
	
	ОбщееКоличество = 1;
	
	ВремяНачалаОбработки = ТекущаяДата(); 
	
	Порция = МАКС(Цел(ОбщееКоличество/100),1);
	
	ТекСчетчик = 0;

	Пока ТекСчетчик < ОбщееКоличество Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение " + Команда.Имя,ВремяНачалаОбработки,ТекСчетчик,ОбщееКоличество);
		
		УдалитьДублиЦенНаСервере(Порция);
		
		ТекСчетчик = МИН(ТекСчетчик + Порция,ОбщееКоличество);
	
	КонецЦикла; 
	
	СтрПрошло = "";
	Если ТекСчетчик Тогда
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение " + Команда.Имя,ВремяНачалаОбработки,ОбщееКоличество,ОбщееКоличество,СтрПрошло);
	КонецЕсли; 

	Сообщить("" + ТекущаяДата() + ": Окончание " + Команда.Имя + " (затрачено: " + СтрПрошло + ")");

КонецПроцедуры
#КонецОбласти 

#Область УдалитьЛишниеФайлы 

// Удаляет запись в регистре ПрисоединенныеФайлы.
//
// Параметры:
// ФайлСсылка - ссылка на файл.
//
Процедура УдалитьЗаписьИзРегистраПрисоединенныеФайлы(ФайлСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПрисоединенныеФайлы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПрисоединенныйФайл.Установить(ФайлСсылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЛишнийФайлыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВладелецФайла, Расширение, Наименование, Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабженияПрисоединенныеФайлы КАК КаталогПредметовСнабженияПрисоединенныеФайлы
	|ГДЕ
	|	(ВладелецФайла, Расширение, Наименование) В
	|			(ВЫБРАТЬ
	|				ВладелецФайла, Расширение, Наименование
	|			ИЗ
	|				Справочник.КаталогПредметовСнабженияПрисоединенныеФайлы КАК КаталогПредметовСнабженияПрисоединенныеФайлы
	|			СГРУППИРОВАТЬ ПО
	|				КаталогПредметовСнабженияПрисоединенныеФайлы.ВладелецФайла,
	|				КаталогПредметовСнабженияПрисоединенныеФайлы.Расширение,
	|				КаталогПредметовСнабженияПрисоединенныеФайлы.Наименование
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(КаталогПредметовСнабженияПрисоединенныеФайлы.Ссылка) > 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецФайла, Расширение, Наименование, ДатаМодификацииУниверсальная УБЫВ
	|ИТОГИ ПО
	|	ВладелецФайла, Расширение, Наименование";
	
	ВыборкаВладелец = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВладелец.Следующий() Цикл
		
		Сообщить(ВыборкаВладелец.ВладелецФайла);
		
		ВыборкаРасширение = ВыборкаВладелец.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРасширение.Следующий() Цикл
			ВыборкаНаименование = ВыборкаРасширение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаНаименование.Следующий() Цикл
				ВыборкаСсылка = ВыборкаНаименование.Выбрать();
				
				Первый = Истина;
				
				Пока ВыборкаСсылка.Следующий() Цикл
					
					Если Первый Тогда
						Первый = Ложь;
						Продолжить;
					КонецЕсли; 
					
					УдалитьЗаписьИзРегистраПрисоединенныеФайлы(ВыборкаСсылка.Ссылка);
					СправочникОбъект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
					СправочникОбъект.Удалить();
					
				КонецЦикла; 
				
			КонецЦикла;  
			
			
		КонецЦикла;  
		
	КонецЦикла;  
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишниеФайлы(Команда)
	УдалитьЛишнийФайлыНаСервере();
КонецПроцедуры

#КонецОбласти

#Область УдалитьИзАрхиваУжеИмеющиесяНаКораблях 
&НаСервере
Функция УдалитьИзАрхиваУжеИмеющиесяНаКорабляхНаСервереПолучитьОбщееКоличество()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Архив,
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Корабль
	               |ПОМЕСТИТЬ ТаблицаГрупп
	               |ИЗ
	               |	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	               |ГДЕ
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = ""Архив""
	               |	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Корабль
	               |ПОМЕСТИТЬ ИзделияВГРуппах
	               |ИЗ
	               |	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	               |ГДЕ
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				ТаблицаГрупп.Архив
	               |			ИЗ
	               |				ТаблицаГрупп)
	               |	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	               |	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Корабль,
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения
	               |ПОМЕСТИТЬ ПредметыСнабженияДляУдаленияИзАрхива
	               |ИЗ
	               |	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	               |ГДЕ
	               |	НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ
	               |				(ВЫБРАТЬ
	               |					ИзделияВГРуппах.Ссылка
	               |				ИЗ
	               |					ИзделияВГРуппах)
	               |	И (СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения, СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец) В
	               |			(ВЫБРАТЬ
	               |				ИзделияВГРуппах.ПредметСнабжения,
	               |				ИзделияВГРуппах.Корабль
	               |			ИЗ
	               |				ИзделияВГРуппах)
	               |	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаГрупп.Архив КАК Родитель,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИзделияВГРуппах.Ссылка) КАК Количество
	               |ИЗ
	               |	ИзделияВГРуппах КАК ИзделияВГРуппах
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГрупп КАК ТаблицаГрупп
	               |		ПО ИзделияВГРуппах.Корабль = ТаблицаГрупп.Корабль
	               |ГДЕ
	               |	(ИзделияВГРуппах.ПредметСнабжения, ИзделияВГРуппах.Корабль) В
	               |			(ВЫБРАТЬ
	               |				ПредметыСнабженияДляУдаленияИзАрхива.ПредметСнабжения,
	               |				ПредметыСнабженияДляУдаленияИзАрхива.Корабль
	               |			ИЗ
	               |				ПредметыСнабженияДляУдаленияИзАрхива)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаГрупп.Архив
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Количество";
	
	ТаблицаРодителейВрем = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(ТаблицаРодителейВрем,"ТаблицаРодителей");
	
	Возврат ТаблицаРодителейВрем.Итог("Количество");
	
КонецФункции

&НаСервере
Процедура УдалитьСсылкиИзРегистраСведений(ИмяРегистра, ИмяИзмерения, Ссылка)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор[ИмяИзмерения].Установить(Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Функция УдалитьСсылкиИзРегистровСведений(Ссылка)
	
	Результат = Новый Структура("Выполнено, Описание", Истина, "");
	
	Попытка
		
		УдалитьСсылкиИзРегистраСведений("ЛогЗагрузки", "Объект1С", Ссылка);
		УдалитьСсылкиИзРегистраСведений("ДополнительныеНаименования", "Владелец", Ссылка);
		УдалитьСсылкиИзРегистраСведений("ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП", "ЭлементСтруктуры", Ссылка);
		УдалитьСсылкиИзРегистраСведений("ЭлементыСтруктурыЗаказовПоКомплектующимИзделиямИЗИПДляИзмененияОписанияИерархии", "ЭлементСтруктуры", Ссылка);
		УдалитьСсылкиИзРегистраСведений("ЭлементыСтруктурыКораблейДляЗаполненияЗаведованияПодчиненных", "ЭлементСтруктуры", Ссылка);
		УдалитьСсылкиИзРегистраСведений("СтруктураЗаказаРегистрацияРодителей", "ЭлементСтруктурыЗаказа", Ссылка);
		
	Исключение
		
		Результат.Выполнено = Ложь;
		Результат.Описание = "Не удалось удалить элемент структуры заказа " + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Процедура УдалитьИзАрхиваУжеИмеющиесяНаКорабляхНаСервере(Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	               |ГДЕ
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ
	               |			(ВЫБРАТЬ
	               |				СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	               |			ИЗ
	               |				Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	               |			ГДЕ
	               |				НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |				И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	               |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Корабль
	               |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ (&Архив)
	               |				И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения
	               |					ИЗ
	               |						Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	               |					ГДЕ
	               |						Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Корабль
	               |						И НЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	               |						И НЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ЗНАЧЕНИЕ(Справочник.КаталогПредметовСнабжения.ПустаяСсылка)
	               |						И НЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ (&Архив)))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка ИЕРАРХИЯ УБЫВ";
	
	Запрос.УстановитьПараметр("Архив",Родитель);
	Запрос.УстановитьПараметр("Корабль",Родитель.Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЭлемент = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	НачатьТранзакцию();
	
	Пока ВыборкаЭлемент.Следующий() Цикл
		
		Сч = Сч + 1;
		
				
		РезультатУдаленияСсылок = УдалитьСсылкиИзРегистровСведений(ВыборкаЭлемент.Ссылка);
		
		
		СтруктураЗаказаПоКомплектующимИзделиямИЗИПОбъект = ВыборкаЭлемент.Ссылка.ПолучитьОбъект();
		
		Если НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИПОбъект = Неопределено Тогда
			СтруктураЗаказаПоКомплектующимИзделиямИЗИПОбъект.Удалить();
		КонецЕсли; 
		
		Если Сч % 1000 = 0 ИЛИ Сч = ВыборкаЭлемент.Количество() Тогда
			
			ЗафиксироватьТранзакцию();
			
			Если НЕ Сч = ВыборкаЭлемент.Количество() Тогда
				
				НачатьТранзакцию();
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзАрхиваУжеИмеющиесяНаКораблях(Команда)
	
	Сообщить("" + ТекущаяДата() + ": Начало " + Команда.Имя);
	
	ОбщееКоличество = УдалитьИзАрхиваУжеИмеющиесяНаКорабляхНаСервереПолучитьОбщееКоличество();
	
	ВремяНачалаОбработки = ТекущаяДата(); 
	
	ТекСчетчик = 0;
	
	Для каждого Стр Из ТаблицаРодителей Цикл
		
		Порция = Стр.Количество;
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение " + Команда.Имя,ВремяНачалаОбработки,ТекСчетчик,ОбщееКоличество);
		
		УдалитьИзАрхиваУжеИмеющиесяНаКорабляхНаСервере(Стр.Родитель);
		
		ТекСчетчик = МИН(ТекСчетчик + Порция,ОбщееКоличество);
		
	КонецЦикла; 
	
	СтрПрошло = "";
	Если ТекСчетчик Тогда
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение " + Команда.Имя,ВремяНачалаОбработки,ОбщееКоличество,ОбщееКоличество,СтрПрошло);
	КонецЕсли; 

	Сообщить("" + ТекущаяДата() + ": Окончание " + Команда.Имя + " (затрачено: " + СтрПрошло + ")");
	
КонецПроцедуры

#КонецОбласти 

#Область ПоменятьМестамиПереводВХарактеристикахНаСервере 
&НаСервере
Процедура ПоменятьМестамиПереводВХарактеристикахНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХарактеристикиПредметовСнабжения.Ссылка КАК Владелец,
		|	ХарактеристикиПредметовСнабжения.Наименование КАК Перевод,
		|	ДополнительныеНаименования.ИмяРеквизита КАК ИмяРеквизита,
		|	ДополнительныеНаименования.Язык КАК Язык,
		|	ДополнительныеНаименования.Перевод КАК Наименование
		|ИЗ
		|	РегистрСведений.ДополнительныеНаименования КАК ДополнительныеНаименования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
		|		ПО ДополнительныеНаименования.Владелец = ХарактеристикиПредметовСнабжения.Ссылка
		|ГДЕ
		|	ХарактеристикиПредметовСнабжения.Наименование ПОДОБНО ""[a-z]%""
		|	И ДополнительныеНаименования.Перевод ПОДОБНО ""[а-я]%""
		|	И ДополнительныеНаименования.ИмяРеквизита = ""Наименование""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	НЗ = РегистрыСведений.ДополнительныеНаименования.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		
		ХарактеристикаОбъект = Выборка.Владелец.ПолучитьОбъект();
		ХарактеристикаОбъект.Наименование = Выборка.Наименование;
		ХарактеристикаОбъект.Записать();
		
		МЗ = РегистрыСведений.ДополнительныеНаименования.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ,Выборка);
		МЗ.Записать(Истина);
		
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьМестамиПереводВХарактеристиках(Команда)
	ПоменятьМестамиПереводВХарактеристикахНаСервере();
КонецПроцедуры
#КонецОбласти

#Область ОчиститьЛишниеПробелыВКаталогеПС
&НаСервере
Функция ОчиститьЛишниеПробелыВКаталогеПСПолучитьОбщееКоличество()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(КаталогПредметовСнабжения.Ссылка) КАК Количество
	               |ИЗ
	               |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	               |ГДЕ
	               |	(КаталогПредметовСнабжения.Наименование ПОДОБНО ""%  %""
	               |			ИЛИ КаталогПредметовСнабжения.Обозначение ПОДОБНО ""%  %""
	               |			ИЛИ КаталогПредметовСнабжения.ДокументНаПоставку ПОДОБНО ""%  %""
	               |			ИЛИ КаталогПредметовСнабжения.ОбозначениеТранслитированное ПОДОБНО ""%  %"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

&НаСервере
Процедура ОчиститьЛишниеПробелыНаСервере(Порция)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(Порция,"ЧГ=") + "

	               |	КаталогПредметовСнабжения.Ссылка
	               |ИЗ
	               |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	               |ГДЕ
	               |	(КаталогПредметовСнабжения.Наименование ПОДОБНО ""%  %""
	               |			ИЛИ КаталогПредметовСнабжения.Обозначение ПОДОБНО ""%  %""
	               |			ИЛИ КаталогПредметовСнабжения.ДокументНаПоставку ПОДОБНО ""%  %""
	               |			ИЛИ КаталогПредметовСнабжения.ОбозначениеТранслитированное ПОДОБНО ""%  %"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МПробелы = Новый Массив;
	МПробелы.Добавить("          ");
	МПробелы.Добавить("         ");
	МПробелы.Добавить("        ");
	МПробелы.Добавить("       ");
	МПробелы.Добавить("      ");
	МПробелы.Добавить("     ");
	МПробелы.Добавить("    ");
	МПробелы.Добавить("   ");
	МПробелы.Добавить("  ");
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		ПСОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для каждого Пробелы Из МПробелы Цикл
			
			Пока Найти(ПСОбъект.Наименование,Пробелы) Цикл
				ПСОбъект.Наименование = СтрЗаменить(ПСОбъект.Наименование,Пробелы," ");
			КонецЦикла; 
			
			Пока Найти(ПСОбъект.Обозначение,Пробелы) Цикл
				ПСОбъект.Обозначение = СтрЗаменить(ПСОбъект.Обозначение,Пробелы," ");
			КонецЦикла; 
			
			Пока Найти(ПСОбъект.ДокументНаПоставку,Пробелы) Цикл
				ПСОбъект.ДокументНаПоставку = СтрЗаменить(ПСОбъект.ДокументНаПоставку,Пробелы," ");
			КонецЦикла; 
			
			Пока Найти(ПСОбъект.ОбозначениеТранслитированное,Пробелы) Цикл
				ПСОбъект.ОбозначениеТранслитированное = СтрЗаменить(ПСОбъект.ОбозначениеТранслитированное,Пробелы," ");
			КонецЦикла; 
			
		КонецЦикла; 
		
		ПСОбъект.ОбменДанными.Загрузка = Истина;
		ПСОбъект.Записать();
		
	КонецЦикла; 

	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛишниеПробелыВКаталогеПС(Команда)
	Сообщить("" + ТекущаяДата() + ": Начало " + Команда.Имя);
	
	ОбщееКоличество = ОчиститьЛишниеПробелыВКаталогеПСПолучитьОбщееКоличество();
	
	Порция = 1; //МАКС(Цел(ОбщееКоличество/100),1);
	СкоростьОбновления = 2; //в секундах
	
	ВремяНачалаОбработки = ТекущаяДата(); 
	
	
	ТекСчетчик = 0;

	Пока ТекСчетчик < ОбщееКоличество Цикл
		
		ВремяНачалаОбработкиТекущейПорции = ТекущаяДата();
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение " + Команда.Имя,ВремяНачалаОбработки,ТекСчетчик,ОбщееКоличество);
		
		ОчиститьЛишниеПробелыНаСервере(Порция);
		
		ТекСчетчик = МИН(ТекСчетчик + Порция,ОбщееКоличество);
		
		ВремяЗатраченноеНаПорцию = ТекущаяДата() - ВремяНачалаОбработкиТекущейПорции;
		Порция = ?(ВремяЗатраченноеНаПорцию > СкоростьОбновления,МАКС(Цел(СкоростьОбновления*Порция/ВремяЗатраченноеНаПорцию),1),Порция + 1);
		
	КонецЦикла; 
	
	СтрПрошло = "";
	Если ТекСчетчик Тогда
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение " + Команда.Имя,ВремяНачалаОбработки,ОбщееКоличество,ОбщееКоличество,СтрПрошло);
	КонецЕсли; 

	Сообщить("" + ТекущаяДата() + ": Окончание " + Команда.Имя + " (затрачено: " + СтрПрошло + ")");
КонецПроцедуры

#КонецОбласти

//++ 30.11.2017 Веденеев П. //перенумерация составляющих частей
#Область ПеренумерацияСпецификаций

&НаКлиенте
Процедура ПеренумероватьСоставляющиеЧасти(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренумероватьСоставляющиеЧастиЗавершение", ЭтаФорма);
	
	ПоказатьВопрос(ОписаниеОповещения, "Все составляющие части во всех спецификациях будут перенумерованы. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьСоставляющиеЧастиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Сообщить("Перенумарция начата в " + ТекущаяДата());
		ВыполнитьПеренумерацию();
		Сообщить("Перенумерация окончена в " + ТекущаяДата());
		
	Иначе
		
		ПоказатьПредупреждение(, "Действие отменено");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПеренумерацию()
	
	Состояние("Получение предметов снабжения к перенумерации...", , , БиблиотекаКартинок.ДлительнаяОперация48);
	
	МассивПредметовСнабжения = ПолучитьПредметыСнабженияКПеренумерацииСпецификаций();
	
	Если МассивПредметовСнабжения = Неопределено Тогда
		
		ПоказатьПредупреждение(, "Спецификации не нуждаются в перенумерации");
		Возврат;
		
	КонецЕсли;
	
	ДатаНачала = ТекущаяДата();
	Сч = 1;
	ВсегоЭлементов = МассивПредметовСнабжения.Количество();
	
	Для каждого ПредметСнабжения Из МассивПредметовСнабжения Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Перенумерация составляющих частей...", ДатаНачала, Сч, ВсегоЭлементов);
		
		ПеренумероватьСоставляющиеЧастиПредметаСнабжения(ПредметСнабжения);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредметыСнабженияКПеренумерацииСпецификаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПредметовСнабжения.ПредметСнабжения
	|
	|ИМЕЮЩИЕ
	|	(НЕ МАКСИМУМ(СпецификацииПредметовСнабжения.НомерПозиции) = КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпецификацииПредметовСнабжения.НомерПозиции)
	|		ИЛИ МИНИМУМ(СпецификацииПредметовСнабжения.НомерПозиции) = 0
	|		ИЛИ НЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпецификацииПредметовСнабжения.НомерПозиции) = КОЛИЧЕСТВО(СпецификацииПредметовСнабжения.НомерПозиции))";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПредметСнабжения");
	
КонецФункции

&НаСервере
Процедура ПеренумероватьСоставляющиеЧастиПредметаСнабжения(ПредметСнабжения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	СпецификацииПредметовСнабжения.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА СпецификацииПредметовСнабжения.НомерПозиции = 0
	|			ТОГДА 999999
	|		ИНАЧЕ СпецификацииПредметовСнабжения.НомерПозиции
	|	КОНЕЦ КАК НомерПозиции,
	|	СпецификацииПредметовСнабжения.Тип КАК Тип,
	|	СпецификацииПредметовСнабжения.ОбозначениеСНК КАК ОбозначениеСНК,
	|	СпецификацииПредметовСнабжения.ПричинаВыбораДляЗИП КАК ПричинаВыбораДляЗИП,
	|	СпецификацииПредметовСнабжения.УказательНаЭлементСхемы КАК УказательНаЭлементСхемы,
	|	СпецификацииПредметовСнабжения.Взаимозаменяемость КАК Взаимозаменяемость,
	|	СпецификацииПредметовСнабжения.ПризнакПодбора КАК ПризнакПодбора,
	|	СпецификацииПредметовСнабжения.ОбозначениеЗаготовки КАК ОбозначениеЗаготовки
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|		ПО СпецификацииПредметовСнабжения.СоставляющаяЧасть = КаталогПредметовСнабжения.Ссылка
	|ГДЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения = &ПредметСнабжения
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПозиции,
	|	КаталогПредметовСнабжения.Наименование";
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СпецификацииПредметовСнабжения");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ПредметСнабжения", ПредметСнабжения);
	Блокировка.Заблокировать();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОтменитьТранзакцию();
		Возврат;
		
	КонецЕсли;
	
	ПорядковыйНомер = 1;
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		СтрокаТаблицы.НомерПозиции = ПорядковыйНомер;
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;
	
	СпецификацииНаборЗаписей = РегистрыСведений.СпецификацииПредметовСнабжения.СоздатьНаборЗаписей();
	СпецификацииНаборЗаписей.Отбор.ПредметСнабжения.Установить(ПредметСнабжения);
	СпецификацииНаборЗаписей.Загрузить(ТаблицаЗапроса);
	СпецификацииНаборЗаписей.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры
//-- 30.11.2017 Веденеев П. //перенумерация составляющих частей


// + 01.03.2018 15:01:15 Базунов Д.А. Задача:

&НаСервере
Процедура ПроверкаСоответствияГУИД_УИДСервер(ЭлементСостава, ЭтоСпр)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекСправочник.Ссылка КАК Ссылка,
	|	ТекСправочник.UID КАК УИД
	|ИЗ
	|	"+?(ЭтоСпр, "Справочник.", "Документ.")+ЭлементСостава+" КАК ТекСправочник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Кол = 0;
	
	Пока Выборка.Следующий() Цикл
		ГУИД = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Если НЕ ГУИД = Выборка.УИД Тогда
			кол = кол + 1;
			Если Исправить Тогда
				ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ЭлементОбъект.UID = ГУИД;
				ЭлементОбъект.Записать();
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Сообщить(ЭлементСостава + " - " + Строка(кол));
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьОбщееКолвоОбщегоРеквизита()
	
	Для каждого Элем Из Метаданные.ОбщиеРеквизиты.UID.Состав Цикл
		
		Если НЕ Строка(Элем.Использование) = "Использовать" Тогда
			Продолжить;
		КонецЕсли; 
		ЭтоСпр = Метаданные.Справочники.Содержит(Элем.Метаданные);
		ЭтоДок = Метаданные.Документы.Содержит(Элем.Метаданные);
		Если НЕ (ЭтоСпр ИЛИ ЭтоДок) Тогда
			Продолжить;
		КонецЕсли; 
		
		ТекСпрИмя = Элем.Метаданные.Имя;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТекСправочник.Ссылка) КАК КолСсылка
		|ИЗ
		|	"+?(ЭтоСпр, "Справочник.", "Документ.")+ТекСпрИмя+" КАК ТекСправочник";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.КолСсылка = 0 Тогда
				НовСтр = ТаблицаСостав.Добавить();
				НовСтр.ЭлементСостава = ТекСпрИмя;
				НовСтр.Количество = Выборка.КолСсылка;
				НовСтр.ЭтоСпр = ЭтоСпр;
			КонецЕсли; 
		КонецЦикла;  
		
	КонецЦикла;
	
	ТаблицаСостав.Сортировать("Количество");
	
	Возврат ТаблицаСостав.Количество()
	
КонецФункции
 

&НаКлиенте
Процедура ПроверкаСоответствияГУИД_УИД(Команда)
	
	Сообщить("" + ТекущаяДата() + ": Начало " + Команда.Имя); ТаблицаСостав.Очистить();
	
	ОбщееКоличество = ПолучитьОбщееКолвоОбщегоРеквизита();
	
	ВремяНачалаОбработки = ТекущаяДата(); 
	
	ТекСчетчик = 0;
	
	Для каждого Стр Из ТаблицаСостав Цикл
		
		ТекСчетчик = ТекСчетчик + 1;
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение " + Команда.Имя,ВремяНачалаОбработки,ТекСчетчик,ОбщееКоличество);
		
		ПроверкаСоответствияГУИД_УИДСервер(Стр.ЭлементСостава, Стр.ЭтоСпр);
				
	КонецЦикла; 
	
	СтрПрошло = "";
	Если ТекСчетчик Тогда
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Выполнение " + Команда.Имя,ВремяНачалаОбработки,ОбщееКоличество,ОбщееКоличество,СтрПрошло);
	КонецЕсли; 

	Сообщить("" + ТекущаяДата() + ": Окончание " + Команда.Имя + " (затрачено: " + СтрПрошло + ")");
	
КонецПроцедуры

// - 01.03.2018 15:01:15 Базунов Д.А. Задача:
#КонецОбласти

#Область ОтображениеХарактеристикДляЗаказчика

&НаКлиенте
Процедура УстановитьФлагОтображенияДляЗаказчика(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьФлагЗавершение", ЭтаФорма),"Данные в БД будут изменены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Сообщить("Установка флагов начата " + ТекущаяДата());
		Состояние("Установка флагов...", , , БиблиотекаКартинок.ДлительнаяОперация48);
		ВыполнитьУстановкуФлагов();
		Сообщить("Установка флагов окончена " + ТекущаяДата());
		
	Иначе
		
		Сообщить("Действие отменено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьУстановкуФлагов()
	
	МассивНеотображаемыхХарактеристик = ПолучитьМассивНеотображаемыхХарактеристик();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КаталогПредметовСнабженияХарактеристики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|ГДЕ
	|	НЕ КаталогПредметовСнабженияХарактеристики.ОтображениеДляЗаказчика";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Сч = 1;
	ВсегоЭлементов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		ПредметСнабженияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ФлагиПроставлены = Ложь;
		
		Для каждого СтрокаТЧ Из ПредметСнабженияОбъект.Характеристики Цикл
			
			Если Не СтрокаТЧ.ОтображениеДляЗаказчика И МассивНеотображаемыхХарактеристик.Найти(СтрокаТЧ.Характеристика) = Неопределено Тогда
				
				СтрокаТЧ.ОтображениеДляЗаказчика = Истина;
				ФлагиПроставлены = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ФлагиПроставлены Тогда
			
			Попытка
				
				ПредметСнабженияОбъект.Записать();
				
			Исключение
				
				Сообщить("Не удалось записать предмет снабжения " + ПредметСнабженияОбъект.Наименование + ": " + ОписаниеОшибки());
				
			КонецПопытки;
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивНеотображаемыхХарактеристик()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиПредметовСнабжения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
	|ГДЕ
	|	ХарактеристикиПредметовСнабжения.Наименование ПОДОБНО ""Код%""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
	|ГДЕ
	|	ХарактеристикиПредметовСнабжения.Наименование ПОДОБНО ""Срок%""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
	|ГДЕ
	|	ХарактеристикиПредметовСнабжения.Наименование ПОДОБНО ""СФО%""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
	|ГДЕ
	|	ХарактеристикиПредметовСнабжения.Наименование ПОДОБНО ""ТНВЭД%""
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ХарактеристикиПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиПредметовСнабжения КАК ХарактеристикиПредметовСнабжения
	|ГДЕ
	|	ХарактеристикиПредметовСнабжения.Наименование ПОДОБНО ""ТО-%""";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область ПеренумерацияОбъектов

&НаСервере
Процедура ПеренумероватьКлассыКораблейНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КлассыИПодклассыКораблей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлассыИПодклассыКораблей КАК КлассыИПодклассыКораблей
		|
		|УПОРЯДОЧИТЬ ПО
		|	КлассыИПодклассыКораблей.Наименование
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	к = 0;
	
	НачатьТранзакцию();
	
	СоотвОб = Новый Соответствие;
	
	Пока ВыборкаСсылка.Следующий() Цикл
		
		Если СоотвОб[ВыборкаСсылка.Ссылка] = Неопределено Тогда
			
			СоотвОб[ВыборкаСсылка.Ссылка] = Истина;
			
			к = к + 1;
			
			Об = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
			Об.Код = Прав("00" + к,3);
			Об.ОбменДанными.Загрузка = Истина;
			Об.Записать();
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ОбновитьНумерациюОбъектов(Об.Метаданные());
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренумероватьКлассыКораблей(Команда)
	ПеренумероватьКлассыКораблейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОчисткаСсылокВИсторииНаПомеченныеНаУдалениеОбъектыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.ИсторияИзмененияРеквизитовОбъектов КАК ИсторияИзменения
		|ГДЕ
		|	ИсторияИзменения.СтароеЗначение.ПометкаУдаления
		|	ИЛИ ИсторияИзменения.НовоеЗначение.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		МЗ = РегистрыСведений.ИсторияИзмененияРеквизитовОбъектов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ,Выборка);
		
		Если МЗ.СтароеЗначение.ПометкаУдаления Тогда
			МЗ.СтароеЗначение = Неопределено;
		КонецЕсли; 
		Если МЗ.НовоеЗначение.ПометкаУдаления Тогда
			МЗ.НовоеЗначение = Неопределено;
		КонецЕсли; 
		
		МЗ.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	РегистрСведений.ИсторияИзмененияРеквизитовТабличныхЧастей КАК ИсторияИзменения
		|ГДЕ
		|	ИсторияИзменения.СтароеЗначение.ПометкаУдаления
		|	ИЛИ ИсторияИзменения.НовоеЗначение.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		МЗ = РегистрыСведений.ИсторияИзмененияРеквизитовОбъектов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ,Выборка);
		
		Если МЗ.СтароеЗначение.ПометкаУдаления Тогда
			МЗ.СтароеЗначение = Неопределено;
		КонецЕсли; 
		Если МЗ.НовоеЗначение.ПометкаУдаления Тогда
			МЗ.НовоеЗначение = Неопределено;
		КонецЕсли; 
		
		МЗ.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаСсылокВИсторииНаПомеченныеНаУдалениеОбъекты(Команда)
	ОчисткаСсылокВИсторииНаПомеченныеНаУдалениеОбъектыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПринудительноЗавершитьРедактированиеВсехФайловНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.ПрисоединенныйФайл КАК ПрисоединенныйФайл
	|ИЗ
	|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ПрисоединенныеФайлы.ПрисоединенныйФайл.Редактирует = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		Об = Выборка.ПрисоединенныйФайл.ПолучитьОбъект();
		Об.Редактирует = Неопределено;
		Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринудительноЗавершитьРедактированиеВсехФайлов(Команда)
	ПринудительноЗавершитьРедактированиеВсехФайловНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеФайлыПомеченныхНаУдалениеОбъектовНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл КАК ПрисоединенныйФайл
		|ИЗ
		|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	НЕ ПрисоединенныеФайлы.ПрисоединенныйФайл.ПометкаУдаления
		|	И ПрисоединенныеФайлы.ПрисоединенныйФайл.ВладелецФайла.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		Об = Выборка.ПрисоединенныйФайл.ПолучитьОбъект();
		Об.ПометкаУдаления = Истина;
		Об.ОбменДанными.Загрузка = Истина;
		Об.Записать();
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеФайлыПомеченныхНаУдалениеОбъектов(Команда)
	ПометитьНаУдалениеФайлыПомеченныхНаУдалениеОбъектовНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНумерациюВсехОбъектовНаСервере()
	
	Массив = Новый Массив;
	Массив.Добавить("Справочники");
	Массив.Добавить("Документы");
	Массив.Добавить("БизнесПроцессы");
	Массив.Добавить("Задачи");
	Массив.Добавить("ПланыВидовХарактеристик");
	
	Для каждого ЭлементМассива Из Массив Цикл
		
		Для каждого ЭлементМета Из Метаданные[ЭлементМассива] Цикл
			
			ОбновитьНумерациюОбъектов(ЭлементМета);
			
		КонецЦикла; 
		
	КонецЦикла; 
		
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбновитьНумерациюВсехОбъектов(Команда)
	
	
	ОбновитьНумерациюВсехОбъектовНаСервере();
	
КонецПроцедуры


#КонецОбласти