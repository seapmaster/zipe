///////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область Сервис

&НаКлиенте
Процедура УсловияПоставкиВыбор(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда		
		Возврат;                    				
	КонецЕсли; // Если Список = Неопределено Тогда
	
	МассивУсловийПоставки = Новый Массив;	
	Для Каждого ЭлементСписка Из Список Цикл		
		Если ЭлементСписка.Пометка Тогда			
			МассивУсловийПоставки.Добавить(ЭлементСписка.Значение);			
		КонецЕсли; // Если ЭлементСписка.Пометка Тогда					
	КонецЦикла; // Для каждого ЭлементСписка Из Список Цикл			
	
	УсловияПоставки = СтрСоединить(МассивУсловийПоставки, ", ");	
КонецПроцедуры // УсловияПоставкиВыбор

&НаКлиенте
Процедура ОбработчикВыбораИзделия(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если Результат = Неопределено Тогда 	
	ТекущаяСтрока							= Элементы.ТаблицаДанных.ТекущиеДанные;
	ТекущаяСтрока.ИзделиеСсылка				= Результат.Изделие;
	ТекущаяСтрока.ОписаниеИерархииИзделия 	= Результат.Описание;	
КонецПроцедуры // ОбработчикВыбораИзделия()

#КонецОбласти

#Область Проверки

&НаКлиенте
Функция ПроверитьЗаполнениеНастроек()
	Результат = Истина;
	
	Если НомерПервойСтроки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан номер первой строки",, "НомерПервойСтроки");
		Результат = Ложь;
	КонецЕсли; // Если НомерПервойСтроки = 0 Тогда
	
	Если НомерПоследнейСтроки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан номер последней строки",, "НомерПоследнейСтроки");
		Результат = Ложь;
	КонецЕсли; // Если НомерПоследнейСтроки = 0 Тогда
	
	Если НомерПоследнейСтроки < НомерПервойСтроки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Номер последней строки должен быть больше номера первой строки",, "НомерПоследнейСтроки");
		Результат = Ложь;
	КонецЕсли; // Если НомерПоследнейСтроки < НомерПервойСтроки Тогда
	
	Если КолонкаНомерСтроки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка номера строки",, "КолонкаНомерСтроки");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаНомерСтроки = 0 Тогда
	
	Если КолонкаКодПС = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка кода ПС",, "КолонкаКодПС");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаКодПС = 0 Тогда
	
	Если КолонкаНаименованиеПС = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка наименования ПС",, "КолонкаНаименованиеПС");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаНаименованиеПС = 0 Тогда
	
	Если КолонкаНаименованиеИзделия = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка наименования изделия",, "КолонкаНаименованиеИзделия");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаНаименованиеИзделия = 0 Тогда
	
	Если КолонкаКоличество = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка количества",, "КолонкаКоличество");
		Результат = Ложь;
	КонецЕсли; // Если КолонкаКоличество = 0 Тогда
	
	Возврат Результат;
КонецФункции // ПроверитьЗаполнениеНастроек

&НаКлиенте
Функция ПроверитьЗаполнениеНастроекСозданияДокументов()
	Результат = Истина;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана дата",, "Дата");
		Результат = Ложь;
	КонецЕсли; // Если Не ЗначениеЗаполнено(Дата) Тогда
	
	Если Не ЗначениеЗаполнено(Заказчик) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан заказчик",, "Заказчик");
		Результат = Ложь;
	КонецЕсли; // Если Не ЗначениеЗаполнено(Заказчик) Тогда
	
	Если Не ЗначениеЗаполнено(НомерЗаказчика) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан номер заказчика",, "НомерЗаказчика");
		Результат = Ложь;
	КонецЕсли; // Если Не ЗначениеЗаполнено(НомерЗаказчика) Тогда
	
	МассивКораблей = Новый Массив;
	Для Каждого Строка Из ТаблицаЗаказов Цикл
		Если Не Строка.Выбран Тогда
			Продолжить;
		КонецЕсли; // Если Не Строка.Выбран Тогда
		МассивКораблей.Добавить(Строка.Корабль);
	КонецЦикла; // Для Каждого Строка Из ТаблицаЗаказов Цикл
	
	Если МассивКораблей.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран ни один корабль",, "ТаблицаЗаказов");
		Результат = Ложь;
	КонецЕсли; // Если МассивКораблей.Количество() = 0 Тогда
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Таблица предметов снабжения пустая",, "ТаблицаДанных");
		Результат = Ложь;
	КонецЕсли; // Если ТаблицаДанных.Количество() = 0 Тогда
	
	Возврат Результат;
КонецФункции // ПроверитьЗаполнениеНастроекСозданияДокументов

#КонецОбласти

#Область ПолучениеДанных

&НаСервере
Функция ПолучитьМассивКораблей()
	УстановитьПривилегированныйРежим(Истина);
	МассивКораблей = Новый Массив;
	Для Каждого Строка Из ТаблицаЗаказов Цикл
		Если Не Строка.Выбран Тогда
			Продолжить;
		КонецЕсли; // Если Не Строка.Выбран Тогда		
		
		МассивКораблей.Добавить(Строка.Корабль);
	КонецЦикла; // Для Каждого Строка Из ТаблицаЗаказов Цикл	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат МассивКораблей;
КонецФункции // ПолучитьМассивКораблей

&НаСервере
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	Возврат Ссылка[ИмяРеквизита];
КонецФункции // ПолучитьОбозначение

&НаСервере
Процедура ЗаполнитьПредметыСнабжения()
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредметСнабжения) Тогда
			Продолжить;
		КонецЕсли; // Если ЗначениеЗаполнено(СтрокаТаблицы.ПредметСнабжения) Тогда
		
		СтрокаТаблицы.ПредметСнабжения 	= Справочники.КаталогПредметовСнабжения.НайтиПоОбозначению(СтрокаТаблицы.Обозначение);
		СтрокаТаблицы.ОбозначениеПС 	= СтрокаТаблицы.ПредметСнабжения.Обозначение;
	КонецЦикла; // Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // ПодобратьПредметыСнабжения

&НаСервере
Функция ПолучитьСтруктуруИзделия(ПредметСнабжения)
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПолучитьИзделие(
													ПредметСнабжения,
													ПолучитьМассивКораблей());
КонецФункции // ПолучитьСтруктуруИзделия

&НаСервере
Процедура ЗаполнитьИзделия()
	УстановитьПривилегированныйРежим(Истина);
	МассивКораблей = ПолучитьМассивКораблей();	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если ЗначениеЗаполнено(СтрокаДанных.ПредметСнабжения) 
			И ЗначениеЗаполнено(СтрокаДанных.ИзделиеСсылка) Тогда
			Продолжить;
		КонецЕсли; // Если ЗначениеЗаполнено(СтрокаДанных.ИзделиеСсылка) Тогда
		
		СтруктураИзделия 			= Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПолучитьИзделие(
													СтрокаДанных.ПредметСнабжения,
													МассивКораблей);
		Если Не СтруктураИзделия = Неопределено Тогда
			СтрокаДанных.ИзделиеСсылка 				= СтруктураИзделия.Изделие;
			СтрокаДанных.ОписаниеИерархииИзделия 	= СтруктураИзделия.Описание;
		КонецЕсли; // Если Не СтруктураИзделия = Неопределено Тогда
	КонецЦикла; // Для Каждого СтрокаДанных Из ТаблицаДанных Цикл	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // ЗаполнитьИзделия

&НаСервере
Функция ПолучитьСписокВыбораПредметовСнабжения(Обозначение)
	Возврат Справочники.КаталогПредметовСнабжения.ПолучитьСписокПодобных(Обозначение);
КонецФункции // ПолучитьСписокВыбора

&НаСервере
Функция ПолучитьСписокВыбораИзделий(ПредметСнабжения)
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПолучитьСписок(ПредметСнабжения, ПолучитьМассивКораблей());
КонецФункции // ПолучитьСписокВыбораИзделий

&НаСервере
Процедура ЗаполнитьТаблицуЗаказов()
	УстановитьПривилегированныйРежим(Истина);
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	Заказы.Ссылка КАК Корабль,
	             	  |	Заказы.Владелец КАК Проект
	             	  |ИЗ
	             	  |	Справочник.Заказы КАК Заказы
	             	  |ГДЕ
	             	  |	Заказы.Заказчик = &Флот
	             	  |	И НЕ Заказы.ПометкаУдаления
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	Проект,
	             	  |	Корабль";
	Запрос.УстановитьПараметр("Флот", Заказчик.ВМС);
	ТаблицаЗаказов.Загрузить(Запрос.Выполнить().Выгрузить());
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры // ЗаполнитьТаблицуЗаказов

&НаСервереБезКонтекста
Функция ПолучитьСписокУсловийПоставки()
	УстановитьПривилегированныйРежим(Истина);
	Результат 		= Новый СписокЗначений;
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	Инкотермс2010.Код КАК Код,
	             	  |	Инкотермс2010.Наименование КАК Наименование
	             	  |ИЗ
	             	  |	Справочник.Инкотермс2010 КАК Инкотермс2010
	             	  |ГДЕ
	             	  |	НЕ Инкотермс2010.ПометкаУдаления
	             	  |
	             	  |УПОРЯДОЧИТЬ ПО
	             	  |	Код";
	Выборка 		= Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл	
		Результат.Добавить(Выборка.Код, Выборка.Код + " (" + Выборка.Наименование + ")");			
	КонецЦикла; // Пока Выборка.Следующий() Цикл	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;                              
КонецФункции // ПолучитьСписокУсловийПоставки

&НаСервере
Функция ПолучитьОписаниеИзделия(Изделие)
	Возврат РегистрыСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ПолучитьОписание(Изделие);
КонецФункции // ПолучитьОписаниеИзделия

#КонецОбласти

#Область ЧтениеExcel

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если ВыбранныеФайлы = Неопределено Тогда
	
	ИмяФайла 	= ВыбранныеФайлы[0];
	ДанныеExcel = ПрочитатьExcel(ИмяФайла);
	ЗаполнитьНачальныеПараметрыПоискаВДокументе();
КонецПроцедуры // ПослеВыбораФайла

&НаКлиенте
Функция ПрочитатьExcel(ИмяФайла)
	Результат 	= Неопределено;     	
	
	Файл 		= Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Сообщить("Файл не существует!");
		Возврат Результат;
	КонецЕсли; // Если НЕ Файл.Существует() Тогда
	
	Попытка
		Excel 		= Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(ИмяФайла);
		ExcelЛист 	= Excel.Sheets(1);
	Исключение
		Сообщить("Ошибка при открытии Excel: " + ОписаниеОшибки());
		Возврат Результат;		
	КонецПопытки;
	
	Результат 	= Новый ТабличныйДокумент;
	xlLastCell 	= 11;
	ActiveCell 	= Excel.ActiveCell.SpecialCells(xlLastCell);
	RowCount	= ?(ActiveCell.Row > 200, 		200, 	ActiveCell.Row);
	ColumnCount	= ?(ActiveCell.Column > 200, 	50, 	ActiveCell.Column);

	Для Row = 1 По RowCount Цикл  
		Для Column = 1 По ColumnCount Цикл
			Результат.Область("R" + Формат(Row, "ЧГ=") +"C" + Формат(Column, "ЧГ=")).Текст = ExcelЛист.Cells(Row,Column).Text;
		КонецЦикла; // Для Column = 1 По ColumnCount Цикл		
	КонецЦикла; // Для Row = 1 По RowCount Цикл  
	
	Excel.WorkBooks.Close();
	Excel 		= Неопределено;
	
	Возврат Результат;
КонецФункции // ПрочитатьExcel

&НаКлиенте
Функция ЗаполнитьНачальныеПараметрыПоискаВДокументе()
	
	// Ищем шапку в первых 5 строках
	Для НомерСтроки = 1 По 10 Цикл
		Для НомерКолонки = 1 По 15 Цикл
			Значение 						= ПолучитьЗначение(НомерСтроки, НомерКолонки);
			Если Значение = "I/LINE NO" Тогда
				НомерПервойСтроки 			= НомерСтроки + 1;
				КолонкаНомерСтроки			= НомерКолонки;
			ИначеЕсли Значение = "PART NO" Тогда
				КолонкаКодПС 				= НомерКолонки;
			ИначеЕсли Значение = "DESCRIPTION" Тогда
				КолонкаНаименованиеПС 		= НомерКолонки;
			ИначеЕсли Значение = "EQUIPMENT" Тогда
				КолонкаНаименованиеИзделия 	= НомерКолонки;
			ИначеЕсли Значение = "QTY" Тогда
				КолонкаКоличество 			= НомерКолонки;
			КонецЕсли; // Если Значение = "I/LINE NO" Тогда			
		КонецЦикла; // Для НомерКолонки = 1 По 15 Цикл		
	КонецЦикла; // Для НомерСтроки = 1 По 10 Цикл
	
	// Определяем количество строк
	Если НомерПервойСтроки > 0 И КолонкаНомерСтроки > 0 Тогда
		Для НомерСтроки = НомерПервойСтроки По ?(ДанныеExcel.ВысотаТаблицы > 200, 200, ДанныеExcel.ВысотаТаблицы) Цикл
			Если ПолучитьЗначение(НомерСтроки, КолонкаНомерСтроки, Истина) > 0 Тогда
				НомерПоследнейСтроки = НомерСтроки;
			КонецЕсли; // Если ПолучитьЗначение(НомерСтроки, КолонкаНомерСтроки, Истина) > 0 Тогда			
		КонецЦикла; // Для Сч = НомерПервойСтроки По ?(ДанныеExcel.ВысотаТаблицы > 200, 200, ДанныеExcel.ВысотаТаблицы) Цикл		
	КонецЕсли; // Если НомерПервойСтроки > 0 Тогда 	
КонецФункции // ЗаполнитьНачальныеПараметрыПоискаВДокументе

#КонецОбласти

#Область ОбработкаТабличногоДокумента

&НаСервере
Функция ПолучитьЗначение(НомерСтроки, НомерКолонки, ЧисловоеЗначение = Ложь)
	Попытка
		ИмяОбласти 		= "R" + Формат(НомерСтроки, "ЧГ=") +"C" + Формат(НомерКолонки);
		СтрокаДанных 	= ДанныеExcel.Область(ИмяОбласти).Текст;
		СтрокаДанных 	= СокрЛП(СтрокаДанных);
		Если ЧисловоеЗначение Тогда
			Результат 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДанных);
		Иначе
			Результат 	= СтрокаДанных;
		КонецЕсли;
	Исключение
		Результат 		= ?(ЧисловоеЗначение, -1, "");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ИмяОбласти + ": не удалось получить значение. " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции // ПолучитьЗначение

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Функция СоздатьЗапрос()
	
	Запрос = Документы.ЗапросТКПRFP.СоздатьДокумент();
	
	Запрос.Дата 			= Дата;
	Запрос.НомерЗаказчика	= НомерЗаказчика;
	Запрос.Заказчик 		= Заказчик;
	Запрос.СрокПоставки 	= СрокПоставки;
	Запрос.УсловияПоставки 	= УсловияПоставки;
	Запрос.Грузополучатель 	= Грузополучатель;
	Запрос.Примечание 		= Примечание;
	
	Если ЗначениеЗаполнено(РуководительПроекта) Тогда
		Запрос.РуководительПроектаВТС = РуководительПроекта;
	Иначе
		Запрос.РуководительПроектаВТС = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Запрос.Записать();
	
	Возврат Запрос.Ссылка;	
	
КонецФункции // СоздатьЗапрос

&НаСервере
Функция СоздатьЗаявку(Запрос)
	Заявка 						= Документы.Заявка.СоздатьДокумент();
	Заявка.Дата 				= Дата;
	Заявка.НомерЗаказчика 		= НомерЗаказчика;
	Заявка.Категория 			= Категория;
	Заявка.Валюта 				= ОбщиеФункцииПовтИсп.ПолучитьВалютуUSD();
	Заявка.КоличествоПозиций 	= ТаблицаДанных.Количество();
	Заявка.ЗапросТКПRFP 		= Запрос;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		НоваяСтрока 										= Заявка.Спецификация.Добавить();
		НоваяСтрока.ИдентификаторПозиции 					= Новый УникальныйИдентификатор;
		НоваяСтрока.ПредметСнабжения 						= СтрокаТаблицы.ПредметСнабжения;
		НоваяСтрока.НаименованиеПредметаСнабженияЗаказчика 	= СтрокаТаблицы.Наименование;
		НоваяСтрока.КодПредметаСнабженияЗаказчика			= СтрокаТаблицы.Обозначение;
		НоваяСтрока.НаименованиеИзделияЗаказчика 			= СтрокаТаблицы.Изделие;
		НоваяСтрока.ЕдиницаИзмерения 						= СтрокаТаблицы.ПредметСнабжения.ЕдиницаИзмерения;
		НоваяСтрока.Количество								= СтрокаТаблицы.Количество;
		НоваяСтрока.Изделие									= СтрокаТаблицы.ИзделиеСсылка;
		НоваяСтрока.ОписаниеИерархииИзделия					= СтрокаТаблицы.ОписаниеИерархииИзделия;
	КонецЦикла; // Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
	
	Для Каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
		Если Не СтрокаЗаказа.Выбран Тогда
			Продолжить;
		КонецЕсли; // Если СтрокаЗаказа.Выбран Тогда		
		НоваяСтрока				= Заявка.Проекты.Добавить();
		НоваяСтрока.Корабль 	= СтрокаЗаказа.Проект;		
	КонецЦикла; // Для Каждого СтрокаЗаказа Из ТаблицаЗаказов Цикл
	Заявка.Проекты.Свернуть("Корабль");	
	Заявка.Корабли = СтрСоединить(Заявка.Проекты.ВыгрузитьКолонку("Корабль"), ", ");
	
	Если ЗначениеЗаполнено(РуководительПроекта) Тогда
		Заявка.РуководительПроектаВТС = РуководительПроекта;
	Иначе
		Заявка.РуководительПроектаВТС = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Заявка.Записать();
	Возврат Заявка;
КонецФункции // СоздатьЗаявку

&НаСервере
Функция СоздатьДокументы()
	Результат = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Запрос = СоздатьЗапрос();
		Заявка = СоздатьЗаявку(Запрос);		
		Если ЗапуститьБизнесПроцесс Тогда 
			ОбменСИнформационнымиСистемами.СоздатьБизнесПроцессУведомлениеОФормированииЗаявки(Запрос);
		КонецЕсли; // Если ЗапуститьБизнесПроцесс) Тогда 		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При создании документов произошла ошибка: " + ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;
КонецФункции // СоздатьДокументы

#КонецОбласти

///////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

#Область Команды

&НаКлиенте
Процедура КомандаЗаполнитьТаблицуДанных(Команда)
	Если Не ПроверитьЗаполнениеНастроек() Тогда
		Возврат;
	КонецЕсли; // Если Не ПроверитьЗаполнениеНастроек() Тогда
	
	ТаблицаДанных.Очистить();
	Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
		НоваяСтрока 				= ТаблицаДанных.Добавить();
		НоваяСтрока.НомерСтроки 	= ПолучитьЗначение(НомерСтроки, КолонкаНомерСтроки, Истина);
		НоваяСтрока.Обозначение 	= ПолучитьЗначение(НомерСтроки, КолонкаКодПС);
		НоваяСтрока.Наименование 	= ПолучитьЗначение(НомерСтроки, КолонкаНаименованиеПС);
		НоваяСтрока.Изделие 		= ПолучитьЗначение(НомерСтроки, КолонкаНаименованиеИзделия);
		НоваяСтрока.Количество 		= ПолучитьЗначение(НомерСтроки, КолонкаКоличество, Истина);
	КонецЦикла; // Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
	
	ЗаполнитьПредметыСнабжения();
	ЗаполнитьИзделия();
КонецПроцедуры // КомандаЗаполнитьТаблицуДанных

&НаКлиенте
Процедура КомандаПодобратьПредметыСнабжения(Команда)
	ЗаполнитьПредметыСнабжения();
	ЗаполнитьИзделия();
КонецПроцедуры // КомандаПодобратьПредметыСнабжения

&НаКлиенте
Процедура КомандаПодобратьИзделия(Команда)
	ЗаполнитьИзделия();
КонецПроцедуры // КомандаПодобратьИзделия

&НаКлиенте
Процедура КомандаСоздатьДокументы(Команда)
	Если Не ПроверитьЗаполнениеНастроекСозданияДокументов() Тогда
		Возврат;
	КонецЕсли; // Если Не ПроверитьЗаполнениеНастроекСозданияДокументов() Тогда

	Если СоздатьДокументы() Тогда
		ПоказатьПредупреждение(, "Создание документов выполнено успешно!", 60, "Внимание");
	КонецЕсли; // Если СоздатьДокументы() Тогда
	
КонецПроцедуры // КомандаСоздатьДокументы

&НаКлиенте
Процедура КомандаВыбратьВсеЗаказы(Команда)
	Для Каждого Строка Из ТаблицаЗаказов Цикл
		Строка.Выбран = Истина;
	КонецЦикла; // Для Каждого Строка Из ТаблицаЗаказов Цикл	
КонецПроцедуры // КомандаВыбратьВсеЗаказы

&НаКлиенте
Процедура КомандаСнятьВсеЗаказы(Команда)
	Для Каждого Строка Из ТаблицаЗаказов Цикл
		Строка.Выбран = Ложь;
	КонецЦикла; // Для Каждого Строка Из ТаблицаЗаказов Цикл	
КонецПроцедуры // КомандаСнятьВсеЗаказы

#КонецОбласти

///////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

#Область СобытияФормыИЭлементов

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Дата 				= ТекущаяДата();
	РуководительПроекта = ПараметрыСеанса.ТекущийПользователь;
	
КонецПроцедуры // ПриСозданииНаСервере

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка				= Ложь;
	Режим 								= РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла 				= Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла 	= ИмяФайла;
	ДиалогОткрытияФайла.Заголовок 		= "Файл с данными тендера";
	ДиалогОткрытияФайла.Фильтр			= "Файлы excel|*.xls;*.xlsx";
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтаФорма));	
КонецПроцедуры // ИмяФайлаНачалоВыбора

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	ЗаполнитьТаблицуЗаказов();
КонецПроцедуры // ЗаказчикПриИзменении

&НаКлиенте
Процедура УсловияПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СписокУсловийПоставки = ПолучитьСписокУсловийПоставки();		
	СписокУсловийПоставки.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("УсловияПоставкиВыбор", ЭтаФорма), 
															"Выберите условия поставки:");
КонецПроцедуры // УсловияПоставкиНачалоВыбора

#КонецОбласти

#Область СобытияТаблицыДанных

&НаКлиенте
Процедура ТаблицаДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ТаблицаДанныхПередНачаломДобавления

&НаКлиенте
Процедура ТаблицаДанныхПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ТаблицаДанныхПередУдалением

&НаКлиенте
Процедура ТаблицаДанныхПредметСнабженияПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если ТекущаяСтрока = Неопределено Тогда
	
	ТекущаяСтрока.ОбозначениеПС = ПолучитьЗначениеРеквизита(ТекущаяСтрока.ПредметСнабжения, "Обозначение");
	СтруктураИзделия 			= ПолучитьСтруктуруИзделия(ТекущаяСтрока.ПредметСнабжения);
		Если СтруктураИзделия = Неопределено Тогда
			ТекущаяСтрока.ИзделиеСсылка 			= "";
			ТекущаяСтрока.ОписаниеИерархииИзделия 	= "";
		Иначе
			ТекущаяСтрока.ИзделиеСсылка 			= СтруктураИзделия.Изделие;
			ТекущаяСтрока.ОписаниеИерархииИзделия 	= СтруктураИзделия.Описание;
		КонецЕсли; // Если Не СтруктураИзделия = Неопределено Тогда
КонецПроцедуры // ТаблицаДанныхПредметСнабженияПриИзменении

&НаКлиенте
Процедура ТаблицаДанныхПредметСнабженияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		ТекущаяСтрока 				= Элементы.ТаблицаДанных.ТекущиеДанные;
		СписокВыбора 				= ПолучитьСписокВыбораПредметовСнабжения(ТекущаяСтрока.Обозначение);
		Если СписокВыбора.Количество() > 0 Тогда
			СтандартнаяОбработка 	= Ложь;
			ДанныеВыбора 			= СписокВыбора;		
		КонецЕсли; // Если СписокВыбора.Количество() > 0 Тогда
	КонецЕсли; // Если Ожидание = 0 Тогда
КонецПроцедуры // ТаблицаДанныхПредметСнабженияАвтоПодбор

&НаКлиенте
Процедура ТаблицаДанныхИзделиеСсылкаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; // Если ТекущаяСтрока = Неопределено Тогда
	
	ТекущаяСтрока.ОписаниеИерархииИзделия = ПолучитьОписаниеИзделия(ТекущаяСтрока.ИзделиеСсылка);
КонецПроцедуры // ТаблицаДанныхИзделиеСсылкаПриИзменении

&НаКлиенте
Процедура ТаблицаДанныхИзделиеСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка 	= Ложь;	
	ПредметСнабжения 		= Элементы.ТаблицаДанных.ТекущиеДанные.ПредметСнабжения;	
	Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда                               	
		ПоказатьПредупреждение(, "Не заполнен предмет снабжения",, 
									"Действие запрещено");
		Возврат;                                          	
	КонецЕсли; // Если Не ЗначениеЗаполнено(ПредметСнабжения) Тогда
	
	ПараметрыОткрытия 		= Новый Структура("ПредметСнабжения", ПредметСнабжения);      	
	ОписаниеОповещения 		= Новый ОписаниеОповещения("ОбработчикВыбораИзделия", ЭтаФорма);	
	ОткрытьФорму("Документ.Заявка.Форма.ФормаПодбораИзделия", 
							ПараметрыОткрытия, 
							ЭтотОбъект,,,, 
							ОписаниеОповещения, 
							РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ТаблицаДанныхИзделиеСсылкаНачалоВыбора

&НаКлиенте
Процедура ТаблицаДанныхИзделиеСсылкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		ТекущаяСтрока 				= Элементы.ТаблицаДанных.ТекущиеДанные;
		СписокВыбора 				= ПолучитьСписокВыбораИзделий(ТекущаяСтрока.ПредметСнабжения);
		Если СписокВыбора.Количество() > 0 Тогда
			СтандартнаяОбработка 	= Ложь;
			ДанныеВыбора 			= СписокВыбора;		
		КонецЕсли; // Если СписокВыбора.Количество() > 0 Тогда
	КонецЕсли; // Если Ожидание = 0 Тогда
КонецПроцедуры // ТаблицаДанныхИзделиеСсылкаАвтоПодбор

#КонецОбласти

#Область СобытияТаблицыЗаказов

&НаКлиенте
Процедура ТаблицаЗаказовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ТаблицаЗаказовПередНачаломДобавления

&НаКлиенте
Процедура ТаблицаЗаказовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ТаблицаЗаказовПередУдалением

#КонецОбласти
