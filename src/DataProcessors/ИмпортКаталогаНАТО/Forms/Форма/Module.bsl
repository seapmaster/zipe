
#Область СобытияФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьКнопкиКоманднойПанели();
	
	Элементы.ГруппаЗагруженныеДанные.Видимость = ПоказатьЗагруженныеДанные;
			
	ВариантЗагрузки = Элементы.ВариантЗагрузки.СписокВыбора[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеСразуПослеЧтенияПриИзменении(Элемент)
	
	УстановитьКнопкиКоманднойПанели();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗагруженныеДанныеПриИзменении(Элемент)
	
	Элементы.ГруппаЗагруженныеДанные.Видимость = ПоказатьЗагруженныеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ВыборФайла.Показать(Новый ОписаниеОповещения("ПолноеИмяФайлаНачалоВыбораЗавершение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяФайлаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		
		ПолноеИмяФайла = ВыбранныеФайлы[0];
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкиКоманднойПанели()
	
	Если ЗаписатьДанныеСразуПослеЧтения Тогда
		
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаПрочитатьДанные.Заголовок = "Импортировать данные";
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписатьДанные.Видимость = Ложь;
		
	Иначе
		
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаПрочитатьДанные.Заголовок = "Прочитать данные";
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписатьДанные.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ ЧТЕНИЯ ДАННЫХ ИЗ ФАЙЛА
#Область ЧтениеДанных

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	
	Если Не ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ПоказатьПредупреждение(, "Выберите файл с данными!");
		Возврат;
		
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = Файл.Имя;
	ПутьКФайлу = Файл.Путь;
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПрочитатьДанныеПродолжение", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеПродолжение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ТекстВопроса = ?(ЗаписатьДанныеСразуПослеЧтения, "Данные в базе данных будут изменены. Продолжить?", "Результат предыдущего чтения будет очищен. Продолжить?");
	
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрочитатьДанныеЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПоказатьПредупреждение(, "Файл не обнаружен!");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьЧтениеДанных();
		
		Если ЗаписатьДанныеСразуПослеЧтения Тогда
			
			ВыполнитьЗаписьДанных();
			
		КонецЕсли;
		
	Иначе
		
		Сообщить("Действие отменено!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЧтениеДанных()
	
	Сообщить("Чтение данных начато в " + ТекущаяДата());
	
	ЗагруженныеДанные.Очистить();
	
	Если ВариантЗагрузки = "Excel.Application" Тогда //читаем через Excel.Application
		
		ExcelApplication = Новый COMОбъект("Excel.Application");
		
		Попытка
			
			КнигаExcel = ExcelApplication.Workbooks.Open(ПолноеИмяФайла, , Истина);
			
		Исключение
			
			Сообщить("Ошибка открытия Excel " + Символы.ПС + ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
		КоличествоЛистов = КнигаExcel.Sheets.Count();
		
		Лист = Неопределено;
		
		Для ТекЛист = 1 По КоличествоЛистов Цикл
			
			Лист = КнигаExcel.WorkSheets(ТекЛист);
			
			Если ЗначениеЗаполнено(СокрЛП(Строка(Лист.Cells(1,1).Value))) Тогда
				
				ВызватьЧтениеДанных(Лист);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		КнигаExcel.Application.Quit();
		
		КнигаExcel = Неопределено;
		
	Иначе //читаем через ODBC-драйвер 
		
		СтрокаПодключения = "Provider=MSDASQL.1;Persist Security Info=False;Extended Properties=""DSN=Excel Files;DBQ=&Filename;DefaultDir=&Foldername;DriverId=1046;MaxBufferSize=2048;PageTimeout=5;""";
		СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "&Filename", ПолноеИмяФайла);
		СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "&Foldername", ПутьКФайлу);
		
		Соединение = Новый COMОбъект("ADODB.CONNECTION");
		
		Попытка
			
			Соединение.Open(СтрокаПодключения);
			
		Исключение
			
			Сообщить("Ошибка открытия Excel " + Символы.ПС + ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
		БД = Новый COMОбъект("ADOX.Catalog");
		БД.ActiveConnection = Соединение;
		
		ТекстЗапроса =
		"select *
		|from [&ИмяТаблицы]";
		
		ТаблицыБД = БД.Tables;
		
		Для каждого ТаблицаБД из ТаблицыБД Цикл 
			
			НаборЗаписей = ОткрытьТаблицу(ТаблицаБД.Name, ТекстЗапроса, Соединение);
			
			Если Не НаборЗаписей = Неопределено Тогда
				
				ВызватьЧтениеДанных(НаборЗаписей);
				
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		НаборЗаписей = Неопределено;
		БД = Неопределено;
		Соединение = Неопределено;
		
	КонецЕсли;
	
	Сообщить("Чтение данных окончено в " + ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьЧтениеДанных(Источник)
	
	ЗагрузкаЧерезApplication = (ВариантЗагрузки = "Excel.Application");
	
	ДатаНачала = ТекущаяДата();
	Сч = 2;		
	ВсегоСтрок = ?(ЗагрузкаЧерезApplication, Источник.Cells.SpecialCells(11).Row, Источник.RecordCount);
	
	Пока ?(ЗагрузкаЧерезApplication, Сч <= ВсегоСтрок, Источник.EOF() = 0) Цикл
		
		КонтрольноеЧисло = ((Сч - 1) / 500);
		
		Если Сч = 2 Или КонтрольноеЧисло = Цел(КонтрольноеЧисло) Тогда
		
			УправлениеИнтерфейсом.ВывестиТекущееСостояние("Чтение данных...", ДатаНачала, Сч - 1, ВсегоСтрок);
			
		КонецЕсли;
		
		NSN = ПолучитьЗначениеВЯчейке(Источник, Сч, 0, ЗагрузкаЧерезApplication);
		
		Если Не ЗначениеЗаполнено(NSN) Тогда
			
			Продолжить;
			
			Если Не ЗагрузкаЧерезApplication Тогда
				
				Источник.MoveNext();
				
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЕсли;
		
		СтрокаДанных = ЗагруженныеДанные.Добавить();
		СтрокаДанных.NSN = NSN;
		СтрокаДанных.RN = ПолучитьЗначениеВЯчейке(Источник, Сч, 1, ЗагрузкаЧерезApplication);
		СтрокаДанных.RN_TRANSLIT = ПолучитьЗначениеВЯчейке(Источник, Сч, 2, ЗагрузкаЧерезApplication);
		СтрокаДанных.ORIG_NAME_RU = ПолучитьЗначениеВЯчейке(Источник, Сч, 3, ЗагрузкаЧерезApplication);
		СтрокаДанных.ORIG_NAME_ENG = ПолучитьЗначениеВЯчейке(Источник, Сч, 4, ЗагрузкаЧерезApplication);
		СтрокаДанных.ORIG_NAME_TRANSLIT = ПолучитьЗначениеВЯчейке(Источник, Сч, 5, ЗагрузкаЧерезApplication);
		СтрокаДанных.INC = ПолучитьЗначениеВЯчейке(Источник, Сч, 6, ЗагрузкаЧерезApplication);
		СтрокаДанных.NAME_EN = ПолучитьЗначениеВЯчейке(Источник, Сч, 7, ЗагрузкаЧерезApplication);
		СтрокаДанных.NAME_RU = ПолучитьЗначениеВЯчейке(Источник, Сч, 8, ЗагрузкаЧерезApplication);
		СтрокаДанных.NSG = ПолучитьЗначениеВЯчейке(Источник, Сч, 9, ЗагрузкаЧерезApplication);
		СтрокаДанных.NSC = ПолучитьЗначениеВЯчейке(Источник, Сч, 10, ЗагрузкаЧерезApplication);
		СтрокаДанных.NCAGE = ПолучитьЗначениеВЯчейке(Источник, Сч, 11, ЗагрузкаЧерезApplication);
		СтрокаДанных.CODIFIED_BY = ПолучитьЗначениеВЯчейке(Источник, Сч, 12, ЗагрузкаЧерезApplication);
		СтрокаДанных.NAME_ORG = ПолучитьЗначениеВЯчейке(Источник, Сч, 13, ЗагрузкаЧерезApplication);
		СтрокаДанных.NAME_ORG_TRANSLIT = ПолучитьЗначениеВЯчейке(Источник, Сч, 14, ЗагрузкаЧерезApplication);
		СтрокаДанных.CIN = ПолучитьЗначениеВЯчейке(Источник, Сч, 15, ЗагрузкаЧерезApplication);
		СтрокаДанных.DATE_CREA = ПолучитьДату(ПолучитьЗначениеВЯчейке(Источник, Сч, 16, ЗагрузкаЧерезApplication), Сч, "DATE_CREA");
		СтрокаДанных.DATE_ASSI = ПолучитьДату(ПолучитьЗначениеВЯчейке(Источник, Сч, 17, ЗагрузкаЧерезApplication), Сч, "DATE_ASSI");
		СтрокаДанных.DATE_CANC = ПолучитьДату(ПолучитьЗначениеВЯчейке(Источник, Сч, 18, ЗагрузкаЧерезApplication), Сч, "DATE_CANC");
		СтрокаДанных.TIIC = ПолучитьЗначениеВЯчейке(Источник, Сч, 19, ЗагрузкаЧерезApplication);
		СтрокаДанных.RPDMRC = ПолучитьЗначениеВЯчейке(Источник, Сч, 20, ЗагрузкаЧерезApplication);
		СтрокаДанных.KIDN = ПолучитьЗначениеВЯчейке(Источник, Сч, 21, ЗагрузкаЧерезApplication);
		СтрокаДанных.RNCC = ПолучитьЗначениеВЯчейке(Источник, Сч, 22, ЗагрузкаЧерезApplication);
		СтрокаДанных.RNVC = ПолучитьЗначениеВЯчейке(Источник, Сч, 23, ЗагрузкаЧерезApplication);
		СтрокаДанных.DAC = ПолучитьЗначениеВЯчейке(Источник, Сч, 24, ЗагрузкаЧерезApplication);
		СтрокаДанных.RNJC = ПолучитьЗначениеВЯчейке(Источник, Сч, 25, ЗагрузкаЧерезApplication);
		СтрокаДанных.RNSC = ПолучитьЗначениеВЯчейке(Источник, Сч, 26, ЗагрузкаЧерезApplication);
		СтрокаДанных.RNFC = ПолучитьЗначениеВЯчейке(Источник, Сч, 27, ЗагрузкаЧерезApplication);
		СтрокаДанных.RNAAC = ПолучитьЗначениеВЯчейке(Источник, Сч, 28, ЗагрузкаЧерезApplication);
		СтрокаДанных.НомерСтроки = Сч;
		
		Если Не ЗагрузкаЧерезApplication Тогда
			
			Источник.MoveNext();
			
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьТаблицу(ИмяТаблицы, ТекстЗапроса, Соединение)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	
	Попытка
		
		НаборЗаписей.CursorType = 3;
		НаборЗаписей.Open(ТекстЗапроса, Соединение);
		
	Исключение
		
		Сообщить("Ошибка взаимодействия с Excel " + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если НаборЗаписей.RecordCount = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат НаборЗаписей;
		
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеВЯчейке(Источник, НомерСтроки, ИндексКолонки, ЗагрузкаЧерезApplication)
	
	Возврат ?(ЗагрузкаЧерезApplication, Источник.Cells(НомерСтроки, ИндексКолонки + 1).Value, Источник.Fields(ИндексКолонки).Value);
	
КонецФункции

&НаКлиенте
Функция ПолучитьДату(ДатаСтрокой, НомерСтроки, ИмяКолонки)
	
	Если Не ЗначениеЗаполнено(ДатаСтрокой) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ПромежуточнаяСтрока = СтрЗаменить(СтрЗаменить(СтрЗаменить(ДатаСтрокой, "-", ""), ":", ""), " ", "");
	ПромежуточнаяСтрока = Лев(ПромежуточнаяСтрока, СтрДлина(ПромежуточнаяСтрока) - 2);
	
	Попытка
		
		Возврат Дата(ПромежуточнаяСтрока);
		
	Исключение
		
		Сообщить("Некорретный формат даты " + ДатаСтрокой + " в строке " + НомерСтроки + " колонка " + ИмяКолонки);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

//ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПИСИ ДАННЫХ В БАЗУ ДАННЫХ
#Область ЗаписьДанных

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	
	Если ЗагруженныеДанные.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, "Нет данных для загрузки!");
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьДанныеЗавершение", ЭтаФорма), "Данные в базе данных будут изменены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьЗаписьДанных();
		
	Иначе
		
		Сообщить("Действие отменено!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаписьДанных()
	
	Сообщить("Запись данных начата в " + ТекущаяДата());
	Состояние("Запись данных в базу данных...", , , БиблиотекаКартинок.ДлительнаяОперация48);
	ВыполнитьЗаписьДанныхНаСервере();
	Сообщить("Запись данных окончена в " + ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаписьДанныхНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗагруженныеДанные.NSN КАК NSN,
	|	ЗагруженныеДанные.RN КАК RN,
	|	ЗагруженныеДанные.RN_TRANSLIT КАК RN_TRANSLIT,
	|	ЗагруженныеДанные.ORIG_NAME_RU КАК ORIG_NAME_RU,
	|	ЗагруженныеДанные.ORIG_NAME_ENG КАК ORIG_NAME_ENG,
	|	ЗагруженныеДанные.ORIG_NAME_TRANSLIT КАК ORIG_NAME_TRANSLIT,
	|	ЗагруженныеДанные.INC КАК INC,
	|	ЗагруженныеДанные.NAME_EN КАК NAME_EN,
	|	ЗагруженныеДанные.NAME_RU КАК NAME_RU,
	|	ЗагруженныеДанные.NSG КАК NSG,
	|	ЗагруженныеДанные.NSC КАК NSC,
	|	ЗагруженныеДанные.NCAGE КАК NCAGE,
	|	ЗагруженныеДанные.CODIFIED_BY КАК CODIFIED_BY,
	|	ЗагруженныеДанные.NAME_ORG КАК NAME_ORG,
	|	ЗагруженныеДанные.NAME_ORG_TRANSLIT КАК NAME_ORG_TRANSLIT,
	|	ЗагруженныеДанные.CIN КАК CIN,
	|	ЗагруженныеДанные.DATE_CREA КАК DATE_CREA,
	|	ЗагруженныеДанные.DATE_ASSI КАК DATE_ASSI,
	|	ЗагруженныеДанные.DATE_CANC КАК DATE_CANC,
	|	ЗагруженныеДанные.TIIC КАК TIIC,
	|	ЗагруженныеДанные.RPDMRC КАК RPDMRC,
	|	ЗагруженныеДанные.KIDN КАК KIDN,
	|	ЗагруженныеДанные.RNCC КАК RNCC,
	|	ЗагруженныеДанные.RNVC КАК RNVC,
	|	ЗагруженныеДанные.DAC КАК DAC,
	|	ЗагруженныеДанные.RNJC КАК RNJC,
	|	ЗагруженныеДанные.RNSC КАК RNSC,
	|	ЗагруженныеДанные.RNFC КАК RNFC,
	|	ЗагруженныеДанные.RNAAC КАК RNAAC,
	|	ЗагруженныеДанные.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ втЗагруженныеДанные
	|ИЗ
	|	&ЗагруженныеДанные КАК ЗагруженныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	NSN,
	|	RN,
	|	NCAGE
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПредметыСнабженияНАТО.Ссылка, ЗНАЧЕНИЕ(Справочник.ПредметыСнабженияНАТО.ПустаяСсылка)) КАК ПредметСнабженияНАТО,
	|	втЗагруженныеДанные.NSN КАК NSN,
	|	втЗагруженныеДанные.RN КАК RN,
	|	втЗагруженныеДанные.RN_TRANSLIT КАК RN_TRANSLIT,
	|	втЗагруженныеДанные.ORIG_NAME_RU КАК ORIG_NAME_RU,
	|	втЗагруженныеДанные.ORIG_NAME_ENG КАК ORIG_NAME_ENG,
	|	втЗагруженныеДанные.ORIG_NAME_TRANSLIT КАК ORIG_NAME_TRANSLIT,
	|	втЗагруженныеДанные.INC КАК INC,
	|	втЗагруженныеДанные.NAME_EN КАК NAME_EN,
	|	втЗагруженныеДанные.NAME_RU КАК NAME_RU,
	|	втЗагруженныеДанные.NSG КАК NSG,
	|	втЗагруженныеДанные.NSC КАК NSC,
	|	втЗагруженныеДанные.NCAGE КАК NCAGE,
	|	втЗагруженныеДанные.CODIFIED_BY КАК CODIFIED_BY,
	|	втЗагруженныеДанные.NAME_ORG КАК NAME_ORG,
	|	втЗагруженныеДанные.NAME_ORG_TRANSLIT КАК NAME_ORG_TRANSLIT,
	|	втЗагруженныеДанные.CIN КАК CIN,
	|	втЗагруженныеДанные.DATE_CREA КАК DATE_CREA,
	|	втЗагруженныеДанные.DATE_ASSI КАК DATE_ASSI,
	|	втЗагруженныеДанные.DATE_CANC КАК DATE_CANC,
	|	втЗагруженныеДанные.TIIC КАК TIIC,
	|	втЗагруженныеДанные.RPDMRC КАК RPDMRC,
	|	втЗагруженныеДанные.KIDN КАК KIDN,
	|	втЗагруженныеДанные.RNCC КАК RNCC,
	|	втЗагруженныеДанные.RNVC КАК RNVC,
	|	втЗагруженныеДанные.DAC КАК DAC,
	|	втЗагруженныеДанные.RNJC КАК RNJC,
	|	втЗагруженныеДанные.RNSC КАК RNSC,
	|	втЗагруженныеДанные.RNFC КАК RNFC,
	|	втЗагруженныеДанные.RNAAC КАК RNAAC,
	|	втЗагруженныеДанные.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втЗагруженныеДанные КАК втЗагруженныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредметыСнабженияНАТО КАК ПредметыСнабженияНАТО
	|		ПО втЗагруженныеДанные.NSN = ПредметыСнабженияНАТО.КодNSN
	|			И втЗагруженныеДанные.RN = ПредметыСнабженияНАТО.RN
	|			И втЗагруженныеДанные.NCAGE = ПредметыСнабженияНАТО.NCAGE
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("ЗагруженныеДанные", ЗагруженныеДанные.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	ПредметыСнабженияНАТОМенеджер = Справочники.ПредметыСнабженияНАТО;
	
	СозданныеЭлементы = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
		Ключ = СтрокаТаблицы.NSN + "|" + СтрокаТаблицы.RN + "" + СтрокаТаблицы.NCAGE;
			
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредметСнабженияНАТО) Или Не СозданныеЭлементы.Найти(Ключ) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПредметСнабженияНАТООбъект = ПредметыСнабженияНАТОМенеджер.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ПредметСнабженияНАТООбъект, СтрокаТаблицы);
		ПредметСнабженияНАТООбъект.Наименование = СтрокаТаблицы.INC;
		ПредметСнабженияНАТООбъект.КодNSN = СтрокаТаблицы.NSN;
		
		Попытка
			
			 ПредметСнабженияНАТООбъект.Записать();
			 СтрокаТаблицы.ПредметСнабженияНАТО = ПредметСнабженияНАТООбъект.Ссылка;
			 ЗаписатьВЛог(СтрокаТаблицы.ПредметСнабженияНАТО, "Создан предмет снабжения НАТО", Формат(СтрокаТаблицы.НомерСтроки, "ЧГ=0"));
			 СОзданныеЭлементы.Добавить(Ключ);
			
		 Исключение
			 
			 Описание = "Не удалось создать предмет снабжения " + СтрокаТаблицы.NSN + " " +СтрокаТаблицы.NAME_RU + " " +СтрокаТаблицы.RN + ":" +
			 	Символы.ПС + ОписаниеОшибки();
				
			 ЗаписатьВЛог(, Описание, Формат(СтрокаТаблицы.НомерСтроки, "ЧГ=0"));
			 Сообщить(Описание, СтатусСообщения.Важное);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗагруженныеДанные.Загрузить(ТаблицаЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВЛог(Объект1С = Неопределено, Описание, ИдентификаторСтроки)
			
	ЛогЗагрузкиМенеджер = РегистрыСведений.ЛогЗагрузки.СоздатьМенеджерЗаписи();
	ЛогЗагрузкиМенеджер.Период = ТекущаяДата();
	ЛогЗагрузкиМенеджер.ГУИД = Строка(Новый УникальныйИдентификатор);
	ЛогЗагрузкиМенеджер.Файл = ИмяФайла;
	ЛогЗагрузкиМенеджер.Объект1С = Объект1С;
	ЛогЗагрузкиМенеджер.ИдентификаторСтроки = ИдентификаторСтроки;
	ЛогЗагрузкиМенеджер.Описание = Описание;
	ЛогЗагрузкиМенеджер.ПутьКФайлу = ПолноеИмяФайла;		
	ЛогЗагрузкиМенеджер.Записать(); 
	
КонецПроцедуры

#КонецОбласти