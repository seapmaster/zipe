Перем СтруВидов;
Перем ЕдиницыИзмеренияПустаяСсылка;
// Общие ++
#Область Общие

&НаСервере
Процедура ЗаписатьВЛог(ГУИД, Ссылка, ИдентификаторСтроки=Неопределено, Описание, СтруктураДанных=Неопределено)
	
	// возврат;
	
	МЗ = РегистрыСведений.ЛогЗагрузки.СоздатьМенеджерЗаписи();
	МЗ.ГУИД = ГУИД;
	МЗ.Файл = ТекИмяФайла;
	МЗ.ПутьКФайлу = ТекПутьКФайлу;
	МЗ.Объект1С = Ссылка;
	МЗ.Период = ТекущаяДата();
	МЗ.ИдентификаторСтроки = ИдентификаторСтроки;
	МЗ.Описание = Описание;
	МЗ.СтруктураДанных = СтруктураДанных;
	Попытка
		МЗ.Записать(Истина);
	Исключение
	    аа = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПеревод(Ссылка, Язык, Перевод, ИндСтроки="")
	
	Если Язык = "" Тогда
		ЯзыкСсылка = Справочники.Языки.Английский;
	Иначе
		ЯзыкСсылка = Справочники.Языки.НайтиПоНаименованию(Язык);
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.ДополнительныеНаименования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(Ссылка);
	НаборЗаписей.Отбор.ИмяРеквизита.Установить("Наименование");
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();	
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Владелец = Ссылка;
	НоваяЗапись.ИмяРеквизита = "Наименование";
	НоваяЗапись.Язык = ЯзыкСсылка;
	НоваяЗапись.Перевод = Перевод;
	
	Попытка
		НаборЗаписей.Записать();	
		ЗаписатьВЛог(Ссылка.УникальныйИдентификатор(), Ссылка, ИндСтроки, "Записан перевод для языка: " + Строка(Язык));
	Исключение
		Сообщить(ОписаниеОшибки());
		ЗаписатьВЛог(Ссылка.УникальныйИдентификатор(), Ссылка, ИндСтроки, "Не записан перевод для языка: " + Строка(Язык));
	КонецПопытки;
	
КонецПроцедуры
 
&НаСервере
Функция УдалитьЛишниеСимволыСервер(Знач ТекСтрока)
	
	ТекСтрока = СтрЗаменить(ТекСтрока, Символы.ПС, "");
	ТекСтрока = СтрЗаменить(ТекСтрока, Символы.ВК, "");
	возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекСтрока, " ");
	
	ТекСтрока = СокрЛП(ТекСтрока);
	
	НоваяСтрока = "";

	СтрокаСимволов = "0123456789ёячсмитьбюфывапролджэйцукенгшщзхъzxcvbnm,.asdfghjkl;qwertyuiop[]-=+:;!№%?*()/ 	 "+Символы.ПС;
	СтрокаСимволов = СтрокаСимволов + ВРЕГ(СтрокаСимволов);
	
	
	Для к = 1 По СтрДлина(ТекСтрока) Цикл
	
		Если Найти(СтрокаСимволов,Сред(ТекСтрока,к,1)) Тогда
		
			НоваяСтрока = НоваяСтрока + Сред(ТекСтрока,к,1);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	
	НоваяСтрока = СокрЛП(НоваяСтрока);
	
	Если Лев(НоваяСтрока,1) = Символы.ПС Тогда
	
		НоваяСтрока = Прав(НоваяСтрока,СтрДлина(НоваяСтрока)-1)
		
	ИначеЕсли Прав(НоваяСтрока,1) = Символы.ПС Тогда
	
		НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-1);
		
	КонецЕсли; 
	
	
	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция УдалитьЛишниеСимволы1(Знач ТекСтрока)
	
	ТекСтрока = СтрЗаменить(ТекСтрока, Символы.ПС, " ");
	ТекСтрока = СтрЗаменить(ТекСтрока, Символы.ВК, " ");
	возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СокрЛП(ТекСтрока), " ");
КонецФункции

&НаКлиенте
Функция УдалитьЛишниеСимволыБезПереноса(Знач ТекСтрока)
	
	//ТекСтрока = СтрЗаменить(ТекСтрока, Символы.ПС, "");
	//ТекСтрока = СтрЗаменить(ТекСтрока, Символы.ВК, "");
	возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СокрЛП(ТекСтрока), " ");
	
КонецФункции

&НаКлиенте
Функция УдалитьЛишниеСимволы(Знач ТекСтрока)
	
	ТекСтрока = СтрЗаменить(ТекСтрока, Символы.ПС, "");
	ТекСтрока = СтрЗаменить(ТекСтрока, Символы.ВК, "");
	возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СокрЛП(ТекСтрока), " ");
	
	ТекСтрока = СокрЛП(ТекСтрока);
	
	НоваяСтрока = "";

	СтрокаСимволов = "0123456789ёячсмитьбюфывапролджэйцукенгшщзхъzxcvbnm,.asdfghjkl;qwertyuiop[]--=+:;!№%?*()/ 	 " + Символы.ПС;
	СтрокаСимволов = СтрокаСимволов + ВРЕГ(СтрокаСимволов);                                       
	
	
	Для к = 1 По СтрДлина(ТекСтрока) Цикл
	
		Если Найти(СтрокаСимволов,Сред(ТекСтрока,к,1)) Тогда
		
			НоваяСтрока = НоваяСтрока + Сред(ТекСтрока,к,1);
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	
	НоваяСтрока = СокрЛП(НоваяСтрока);
	
	Если Лев(НоваяСтрока,1) = Символы.ПС Тогда
	
		НоваяСтрока = Прав(НоваяСтрока,СтрДлина(НоваяСтрока)-1)
		
	ИначеЕсли Прав(НоваяСтрока,1) = Символы.ПС Тогда
	
		НоваяСтрока = Лев(НоваяСтрока,СтрДлина(НоваяСтрока)-1);
		
	КонецЕсли; 
	
	
	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция ПодключитсяКЭксель()
	
	XLSОбъект = Новый COMОбъект("Excel.Application"); 
	
    Попытка
        Эксель = XLSОбъект.Workbooks.Open(ИмяФайла, , Истина);
    Исключение
		Инф = ИнформацияОбОшибке();
		Сообщить ("Проблемы с подключением к Excel: " + Инф.Причина.Описание);
		Возврат Неопределено;
    КонецПопытки;
	
	Возврат Эксель; 
	
КонецФункции

&НаСервере
Функция НайтиСоздатьПоставщика(Наименование, КодCAGE = "")
	
	Найд = Справочники.Организации.НайтиПоНаименованию(Наименование);
	Если Найд.Пустая() Тогда
		НовЭл = Справочники.Организации.СоздатьЭлемент();
		НовЭл.Наименование = Наименование;
		НовЭл.КодCAGE = КодCAGE;
		
		Попытка
			НовЭл.Записать();
			ЗаписатьВЛог(НовЭл.Ссылка.УникальныйИдентификатор(), НовЭл.Ссылка, "000001", "Новый элемент спр. Организации");
		Исключение
			аа = ИнформацияОбОшибке();
			ЗаписатьВЛог("", "", "000001", "Не записали новый элемент спр. Организации" + " ош: "+ОписаниеОшибки());
		КонецПопытки;
		
		Возврат НовЭл.Ссылка;
	//++веденеев 17.08.2017 - запись кода CAGE	
	ИначеЕсли ОбновлятьСуществующиеДанные И ЗначениеЗаполнено(КодCAGE) И Не Найд.КодCAGE = КодCAGE Тогда
		
		НовЭл = Найд.ПолучитьОбъект();
		НовЭл.КодCAGE = КодCAGE;
		НовЭл.Записать();
		
		Возврат НовЭл.Ссылка;
		
	//--веденеев 17.08.2017 - запись кода CAGE
	Иначе
		
		Возврат найд;
		
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция НайтиСоздатьИностранногоЗаказчика(Наименование)
	
	Найд = Справочники.ИностранныеЗаказчики.НайтиПоНаименованию(Наименование);
	Если Найд.Пустая() Тогда
		НовЭл = Справочники.ИностранныеЗаказчики.СоздатьЭлемент();
		НовЭл.Наименование = Наименование;
		НовЭл.Название	   = Наименование;
		
		Попытка
			НовЭл.Записать();
		Исключение
			ЗаписатьВЛог(НовЭл.Ссылка.УникальныйИдентификатор(), НовЭл.Ссылка, "000001", "Новый элемент спр. ИностранныеЗаказчики");
		КонецПопытки;
		
		Возврат НовЭл.Ссылка;
		
	Иначе
		
		Возврат найд;
		
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция НайтиСоздатьХарактеристику(Наименование)
	
	Найд = Справочники.ХарактеристикиПредметовСнабжения.НайтиПоНаименованию(Наименование);
	Если Найд.Пустая() Тогда
		новЭл = Справочники.ХарактеристикиПредметовСнабжения.СоздатьЭлемент();
		новЭл.Наименование = Наименование;
		
		Попытка
			новЭл.Записать();
		Исключение
			ЗаписатьВЛог(НовЭл.Ссылка.УникальныйИдентификатор(), НовЭл.Ссылка, "000002", "Новый элемент спр. Организации");
		КонецПопытки;
		
		Возврат новЭл.Ссылка;
		
	Иначе
		
		Возврат найд;
		
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция НайтиПС(Стру, ТаблицаХарактеристик=Неопределено)
	
	//++веденеев 12.07.17 - добавлена возможность обновления существующих элементов
    СпрСсылка=Неопределено;
	//--веденеев 12.07.17 - добавлена возможность обновления существующих элементов
	// .Обозначение, Стру.ДокНаПоставку, Стру.Наименование
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КаталогПредметовСнабжения.Ссылка
	//|ИЗ
	//|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	//|ГДЕ
	//|	КаталогПредметовСнабжения.Наименование = &Наименование";
	//Запрос.УстановитьПараметр("Наименование", СокрЛП(Стру.Наименование));
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//
	//Если РезультатЗапроса.Следующий()И РезультатЗапроса.Количество() = 1 Тогда
	//	Возврат РезультатЗапроса.Ссылка;
	//КонецЕсли; 
	
	Если Стру.Свойство("Обозначение") Тогда
		Обознач = СокрЛП(Стру.Обозначение);
	Иначе
		Обознач = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	КаталогПредметовСнабжения.Обозначение = &Обозначение
	|	И КаталогПредметовСнабжения.Наименование = &Наименование
	|	И НЕ КаталогПредметовСнабжения.Обозначение = """"";
	Запрос.УстановитьПараметр("Обозначение", Обознач);
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Стру.Наименование));
	РезультатЗапросаПС = Запрос.Выполнить().Выбрать();
	
	// Обновляем все найденные !!! 08.09.2017
	КолНайденных = РезультатЗапросаПС.Количество();
	МассивПС = Новый Массив;
	
	Если РезультатЗапросаПС.Следующий() Тогда
		СпрСсылка = РезультатЗапросаПС.Ссылка;
		ИндСтроки = "";
		Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
		ЗаписатьВЛог(СпрСсылка.УникальныйИдентификатор(), СпрСсылка, ИндСтроки, "Нашли элемент спр. КаталогПредметовСнабжения");
		Если Стру.Свойство("Перевод") Тогда
			ЗаписатьПеревод(СпрСсылка, Стру.Язык, Стру.Перевод, ИндСтроки);
		КонецЕсли;
		//++веденеев 12.07.17 - добавлена возможность обновления существующих элементов
		Если Не ОбновлятьСуществующиеДанные Тогда
			Возврат СпрСсылка;
		КонецЕсли;
		//--веденеев 12.07.17 - добавлена возможность обновления существующих элементов
		МассивПС.Добавить(СпрСсылка);
	КонецЕсли; 
	
	//Если Стру.Свойство("ДокНаПоставку") И СпрСсылка = Неопределено Тогда
	//	Если НЕ СокрЛП(Стру.ДокНаПоставку) = "" Тогда
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	КаталогПредметовСнабжения.Ссылка
	//		|ИЗ
	//		|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	//		|ГДЕ
	//		|	КаталогПредметовСнабжения.ДокументНаПоставку = &ДокументНаПоставку
	//		|	И НЕ КаталогПредметовСнабжения.ДокументНаПоставку = """"";
	//		Запрос.УстановитьПараметр("ДокументНаПоставку", СокрЛП(Стру.ДокНаПоставку));
	//		РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//		
	//		Если РезультатЗапроса.Следующий() Тогда
	//			// один ГОСТ (документ на поставку) для нескольких наименований
	//			Если СтрСравнить(РезультатЗапроса.Ссылка.Наименование, Стру.Наименование) = 0 Тогда
	//				СпрСсылка = РезультатЗапроса.Ссылка;
	//				ИндСтроки = "";
	//				Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
	//				ЗаписатьВЛог(СпрСсылка.УникальныйИдентификатор(), СпрСсылка, ИндСтроки, "Нашли элемент спр. КаталогПредметовСнабжения");
	//				Если Стру.Свойство("Перевод") Тогда
	//					ЗаписатьПеревод(СпрСсылка, Стру.Язык, Стру.Перевод, ИндСтроки);
	//				КонецЕсли;
	//				//++веденеев 12.07.17 - добавлена возможность обновления существующих элементов
	//				Если Не ОбновлятьСуществующиеДанные Тогда
	//					Возврат СпрСсылка;
	//				КонецЕсли;
	//				//--веденеев 12.07.17 - добавлена возможность обновления существующих элементов
	//			КонецЕсли; 
	//		КонецЕсли;
	//	КонецЕсли; 
	//КонецЕсли; 
	//++веденеев 12.07.17 - добавлена возможность обновления существующих элементов
	
	Если МассивПС.Количество() = 0 Тогда
		// Если не нашли, то надо создать новый, новый создается в цикле
		// поэтому добавим пустоту для захода в цикл
		МассивПС.Добавить();
	КонецЕсли; 
	
	// Обновляем найденные
	Для каждого Стр Из МассивПС Цикл
		
		Если СпрСсылка=Неопределено Тогда
			НовЭл = Справочники.КаталогПредметовСнабжения.СоздатьЭлемент();
			ТекстЛога="Новый ";
		Иначе
			НовЭл=СпрСсылка.ПолучитьОбъект();
			ТекстЛога="Обновлен ";
		КонецЕсли;
		
		//--веденеев 12.07.17 - добавлена возможность обновления существующих элементов
		НовЭл.Наименование  = Стру.Наименование;
		Если Стру.Свойство("Обозначение") Тогда
			НовЭл.Обозначение   = Стру.Обозначение;
		КонецЕсли;
		Если Стру.Свойство("ДокНаПоставку") И НЕ Стру.ДокНаПоставку = "" Тогда
			НовЭл.ДокументНаПоставку = Стру.ДокНаПоставку;
		КонецЕсли;
		Если Стру.Свойство("Шифр") Тогда
			НовЭл.Шифр = Стру.Шифр;
		КонецЕсли;
		Если Стру.Свойство("тнвэд") Тогда
			НовЭл.ТНВЭД = Справочники.ТНВЭД.НайтиПоКоду(СтрЗаменить(СокрЛП(Стру.тнвэд), " ", ""));
		КонецЕсли;
		Если Стру.Свойство("окп") Тогда
			Если СтрНайти(НовЭл.Комментарий, "ОКП:") = 0 Тогда
				НовЭл.Комментарий = НовЭл.Комментарий + ?(НовЭл.Комментарий="", "", Символы.ПС) + "ОКП: " + СтрЗаменить(Стру.окп, " ", "");
			КонецЕсли; 
		КонецЕсли;
		Если Стру.Свойство("ДопИнф") Тогда
			Если СтрНайти(НовЭл.Комментарий, "Хар-ки:") = 0 Тогда
				НовЭл.Комментарий = НовЭл.Комментарий + ?(НовЭл.Комментарий="", "", Символы.ПС) + "Хар-ки: " + Стру.ДопИнф;
			КонецЕсли;
		КонецЕсли;
		//++веденеев 17.08.2017 - добавлены правила транспортировки хранения, фнн
		Если Стру.Свойство("ПравилаУпаковкиТранспортировкиХранения") ИЛИ Стру.Свойство("УслПоставки") Тогда
			НовЭл.ПравилаУпаковкиТранспортировкиХранения = Стру.ПравилаУпаковкиТранспортировкиХранения;
		КонецЕсли;
		Если Стру.Свойство("фнн") Тогда
			НовЭл.ФНН = Стру.фнн;
		КонецЕсли;
		//--веденеев 17.08.2017 - добавлены правила транспортировки хранения, фнн
		//аналоги
		Если Стру.Свойство("аналог") Тогда
			ПС_Аналог = НайтиПС_ПоОбозначению_Аскольд(Стру.аналог);
			Если НовЭл.Аналоги.Найти(ПС_Аналог) = Неопределено Тогда
				НовСтр = НовЭл.Аналоги.Добавить();
				НовСтр.Аналог    = ПС_Аналог;
				НовСтр.ТипЗамены = Справочники.ТипыЗаменыПредметаСнабженияАналогом.НайтиПоКоду("F");
			КонецЕсли; 
		КонецЕсли;
		
		Если Стру.Свойство("ЕдиницаИзмерения") Тогда
			//++веденеев 17.08.2017 - если единица измерения передается напрямую, то напрямую и пишем, если нет - ищем в справочнике
			Если ТипЗнч(Стру.ЕдиницаИзмерения) = Тип("СправочникСсылка.ОКЕИ") Тогда
				НовЭл.ЕдиницаИзмерения = Стру.ЕдиницаИзмерения;
			Иначе 
				Если НРег(Стру.ЕдиницаИзмерения) = "шт" ИЛИ Стру.ЕдиницаИзмерения = "796" Тогда
					НовЭл.ЕдиницаИзмерения = Справочники.ОКЕИ.НайтиПоКоду(796);
				ИначеЕсли НРег(Стру.ЕдиницаИзмерения) = "кг" Тогда
					НовЭл.ЕдиницаИзмерения = Справочники.ОКЕИ.НайтиПоКоду(166);
				ИначеЕсли НРег(Стру.ЕдиницаИзмерения) = "компл" Или НРег(Стру.ЕдиницаИзмерения) = "к-т" Тогда
					НовЭл.ЕдиницаИзмерения = Справочники.ОКЕИ.НайтиПоКоду(839);
				ИначеЕсли НРег(Стру.ЕдиницаИзмерения) = "м" Тогда
					НовЭл.ЕдиницаИзмерения = Справочники.ОКЕИ.НайтиПоКоду(006);
				КонецЕсли;
			КонецЕсли;
			//--веденеев 17.08.2017 - если единица измерения передается напрямую, то напрямую и пишем, если нет - ищем в справочнике
		КонецЕсли; 
		Если Стру.свойство("МассаЕдиницы") Тогда
			ДобавитьХарактеристикуПредметаСнабжения(НовЭл,Стру.МассаЕдиницы,"Масса",Стру.КодМассы);
		КонецЕсли;
		Если Стру.свойство("Поставщик") И Не Стру.Поставщик = "" Тогда
			//++веденеев 14.08.17 - добавлена проверка наличия такого поставщика в ТЧ
			КодCAGE = ?(Стру.Свойство("КодCAGE"),Стру.КодCAGE,""); //веденеев 17.08.2017 - запись кода CAGE
			Контрагент = НайтиСоздатьПоставщика(Стру.Поставщик,КодCAGE);
			НовСтр = НовЭл.ИзготовителиИПоставщики.Найти(Контрагент,"Контрагент");
			Если НовСтр = Неопределено Тогда
				НовСтр = НовЭл.ИзготовителиИПоставщики.Добавить();
			КонецЕсли;
			НовСтр.Поставщик = Истина;
			НовСтр.Контрагент = Контрагент;
			//--веденеев 14.08.17 - добавлена проверка наличия такого поставщика в ТЧ
		КонецЕсли;
		Если Стру.свойство("Разработчик") И Не Стру.Разработчик = "" Тогда
			Контрагент = НайтиСоздатьПоставщика(Стру.Разработчик);
			НовСтр = НовЭл.ИзготовителиИПоставщики.Найти(Контрагент,"Контрагент");
			Если НовСтр = Неопределено Тогда
				НовСтр = НовЭл.ИзготовителиИПоставщики.Добавить();
			КонецЕсли;
			НовСтр.Разработчик = Истина;
			НовСтр.Контрагент = Контрагент;
			//--веденеев 14.08.17 - добавлена проверка наличия такого поставщика в ТЧ
		КонецЕсли;
		Если Стру.свойство("ПроцТехГотовности") Тогда
			Если НЕ Стру.ПроцТехГотовности = "" Тогда
				ДобавитьХарактеристикуПредметаСнабжения(НовЭл,Стру.ПроцТехГотовности,"Процент технической готовности","744");
			КонецЕсли; 	
		КонецЕсли;
		Если Стру.свойство("КодВидаДокумента") Тогда
			Если НЕ Стру.КодВидаДокумента = "" Тогда
				ДобавитьХарактеристикуПредметаСнабжения(НовЭл,Стру.КодВидаДокумента,"Код вида документа","796");
			КонецЕсли; 	
		КонецЕсли;
		//++веденеев 17.08.2017 - срок хранения, срок выполнения, срок годности
		Если Стру.свойство("СрокГодности") Тогда
			Если НЕ Стру.СрокГодности = "" И НЕ Стру.СрокГодности = 0 Тогда
				ДобавитьХарактеристикуПредметаСнабжения(НовЭл,Стру.СрокГодности,"Срок годности","362"); //месяц
			КонецЕсли; 	
		КонецЕсли;
		Если Стру.свойство("СрокХранения") Тогда
			Если НЕ Стру.СрокХранения = "" И НЕ Стру.СрокХранения = 0 Тогда
				ДобавитьХарактеристикуПредметаСнабжения(НовЭл,Стру.СрокХранения,"Срок хранения","362"); //месяц
			КонецЕсли; 	
		КонецЕсли;
		Если Стру.свойство("СрокВыполнения") Тогда
			Если НЕ Стру.СрокВыполнения = "" И НЕ Стру.СрокВыполнения = 0 Тогда
				ДобавитьХарактеристикуПредметаСнабжения(НовЭл,Стру.СрокВыполнения,"Срок выполнения заявки","359"); //день
			КонецЕсли; 	
		КонецЕсли;
		//--веденеев 17.08.2017 - срок хранения, срок выполнения, срок годности
		//++ 2017070301 12.07.2017 Веденеев П. //добавляем загрузку номеров по классификации НАТО, описания и характеристик из описания от НПО Аврора
		Если Стру.Свойство("НомерКлассификацииНАТО") Тогда
			НовЭл.NSN=Стру.НомерКлассификацииНАТО;
		КонецЕсли;
		Если Стру.Свойство("Комментарий") Тогда
			НовЭл.Комментарий=НовЭл.Комментарий + Стру.Комментарий;
		КонецЕсли;
		
		Если ТаблицаХарактеристик<>Неопределено Тогда
			Для каждого СтрокаТаблицыХарактеристик Из ТаблицаХарактеристик Цикл
				НовХарактеристика=НайтиСоздатьХарактеристику(СтрокаТаблицыХарактеристик.НаименованиеБД);
				Если НовЭл.Характеристики.Найти(НовХарактеристика,"Характеристика")=Неопределено Тогда //если такой характеристики еще нет - добавим, если есть - не будем перезаписывать
					НовСтр=НовЭл.Характеристики.Добавить();
					НовСтр.Характеристика=НовХарактеристика;
					НовСтр.Значение=СтрокаТаблицыХарактеристик.Значение;
					НовСтр.ЕдиницаИзмерения=СтрокаТаблицыХарактеристик.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//-- 2017070301 12.07.2017 Веденеев П.
		
		ИндСтроки = "";
		Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
		
		Попытка
			НовЭл.Записать();
		Исключение
			ЗаписатьВЛог(НовЭл.Ссылка.УникальныйИдентификатор(), НовЭл.Ссылка, ИндСтроки, "Не записан эл. спр. КаталогПредметовСнабжения");
		КонецПопытки;
		
		Если Стру.Свойство("Перевод") Тогда
			ЗаписатьПеревод(НовЭл.Ссылка, Стру.Язык, Стру.Перевод, ИндСтроки);
		КонецЕсли;
		
		СпрСсылка = НовЭл.Ссылка;
		ЗаписатьВЛог(СпрСсылка.УникальныйИдентификатор(), СпрСсылка, ИндСтроки, ТекстЛога+"элемент спр. КаталогПредметовСнабжения");
		
	КонецЦикла; 
	
	Возврат СпрСсылка;
	
КонецФункции

//++веденеев 14.08.17 - процедура добавления характеристики в ТЧ
&НаСервере
Процедура ДобавитьХарактеристикуПредметаСнабжения(ПредметСнабженияОбъект,ЗначениеХарактеристики,ИмяХарактеристикиБД,КодЕдиницыИзмерения)
	
	ХарактеристикаСсылка = НайтиСоздатьХарактеристику(ИмяХарактеристикиБД);
	
	НовСтр = ПредметСнабженияОбъект.Характеристики.Найти(ХарактеристикаСсылка,"Характеристика"); 
	Если НовСтр = Неопределено Тогда
		НовСтр = ПредметСнабженияОбъект.Характеристики.Добавить();
	КонецЕсли;
	
	НовСтр.Характеристика = ХарактеристикаСсылка;
	НовСтр.Значение = ЗначениеХарактеристики;
	НовСтр.ЕдиницаИзмерения = Справочники.ОКЕИ.НайтиПоКоду(КодЕдиницыИзмерения);
	
КонецПроцедуры
//--веденеев 14.08.17 - процедура добавления характеристики в ТЧ

&НаСервере
Функция ВернутьТипСЧ(видПозиции)
	
	СпрТипСЧ = Справочники.РазделыСпецификацииЗИП;
	
	Если СтруВидов = Неопределено Тогда
		СтруВидов = новый Структура;
		СтруВидов.Вставить("ЗапаснаяЧасть",  СпрТипСЧ.НайтиПоКоду(21));
		СтруВидов.Вставить("Инструмент",     СпрТипСЧ.НайтиПоКоду(30));
		СтруВидов.Вставить("Приспособление", СпрТипСЧ.НайтиПоКоду(32));
		СтруВидов.Вставить("Принадлежности", СпрТипСЧ.НайтиПоКоду(22));
		СтруВидов.Вставить("Материал", СпрТипСЧ.НайтиПоКоду(39));
		СтруВидов.Вставить("Изделие",  СпрТипСЧ.НайтиПоКоду(18));
		СтруВидов.Вставить("ИнстрИПринадл",  СпрТипСЧ.НайтиПоКоду(17));
		СтруВидов.Вставить("ПрочиеПринадл",  СпрТипСЧ.НайтиПоКоду(34));
		СтруВидов.Вставить("Крепеж", 	     СпрТипСЧ.НайтиПоКоду(38));
		СтруВидов.Вставить("СпецИнструмент", СпрТипСЧ.НайтиПоКоду(50));
	КонецЕсли; 
	
	Если видПозиции = "" Тогда
		Возврат СпрТипСЧ.ПустаяСсылка();
	КонецЕсли; 
	
	видПозициизнч = "";
	Если СтруВидов.Свойство(видПозиции, видПозициизнч) Тогда
		Возврат видПозициизнч;
	Иначе
		Возврат СпрТипСЧ.ПустаяСсылка();
	КонецЕсли; 

	//Если видПозиции = "ЗапаснаяЧасть" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(48);
	//ИначеЕсли видПозиции = "Инструмент" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(30);
	//ИначеЕсли видПозиции = "Приспособление" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(32);
	//ИначеЕсли видПозиции = "Материал" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(39);
	//ИначеЕсли видПозиции = "Изделие" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(18);
	//ИначеЕсли видПозиции = "ИнстрИПринадл" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(17);
	//ИначеЕсли видПозиции = "ПрочиеПринадл" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(34);
	//ИначеЕсли видПозиции = "Крепеж" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(38);
	//ИначеЕсли видПозиции = "СпецИнструмент" Тогда
	//	Возврат СпрТипСЧ.НайтиПоКоду(50);
	//КонецЕсли;
		
КонецФункции

&НаСервере
Функция СоздатьГруппу(Стру)
	
	Найд = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.НайтиПоНаименованию(Стру.Наименование, Истина, Стру.Родитель, Заказ);
	Если Найд.Пустая() Тогда
		НовГр = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		НовГр.Владелец = Заказ;
		НовГр.Наименование = Стру.Наименование;
		НовГр.Родитель = Стру.Родитель;
		НовГр.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа;
		Если Стру.Свойство("Обозначение") Тогда
			НовГр.ОбозначениеДоп   = Стру.Обозначение;
		КонецЕсли;
		Если Стру.Свойство("Количество") Тогда
			НовГр.Количество = Стру.Количество;
		КонецЕсли;
		Если Стру.свойство("КоличествоВЗИПДЭ") Тогда
			НовГр.КоличествоВЗИПДЭ = Стру.КоличествоВЗИПДЭ;
		КонецЕсли; 
		
		ИндСтроки = "";
		Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
		
		Попытка
			НовГр.Записать();
		Исключение
			ЗаписатьВЛог(НовГр.Ссылка.УникальныйИдентификатор(), НовГр.Ссылка, ИндСтроки, "Не записан новая гр. спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
		КонецПопытки;
		
		Если Стру.Свойство("Перевод") Тогда
			ЗаписатьПеревод(НовГр.Ссылка, Стру.Язык, Стру.Перевод, ИндСтроки);
		КонецЕсли;
		ЗаписатьВЛог(НовГр.Ссылка.УникальныйИдентификатор(), НовГр.Ссылка, ИндСтроки, "Новая группа спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
		
	Иначе
		
		Новгр = Найд;
		
		ИндСтроки = "";
		Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
		Если Стру.Свойство("Перевод") Тогда
			ЗаписатьПеревод(НовГр.Ссылка, Стру.Язык, Стру.Перевод, ИндСтроки);
		КонецЕсли;
		ЗаписатьВЛог(НовГр.Ссылка.УникальныйИдентификатор(), НовГр.Ссылка, ИндСтроки, "Нашли группу спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
		
	КонецЕсли; 
	
	Возврат НовГр.Ссылка;
	
КонецФункции
 
&НаСервере
Функция СоздатьЭлемент(Стру, Это11356 = Ложь, ТаблицаХарактеристик = Неопределено)
	
	Если Стру.Свойство("ЭтоЗИП") Тогда
		ЭтоЗИП = Стру.ЭтоЗИП;
	Иначе
		ЭтоЗИП = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = &Наименование
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП = &ЭтоЗИП
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ОбозначениеДоп = &Обозначение";
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Стру.Наименование));
	Запрос.УстановитьПараметр("Владелец", 	  Заказ);
	Запрос.УстановитьПараметр("Родитель", 	  Стру.Родитель);
	Это11356 = (Не Стру.Свойство("Обозначение") И Стру.Свойство("ДокНаПоставку"));
	Запрос.УстановитьПараметр("Обозначение",  ?(Это11356, Стру.ДокНаПоставку,Стру.Обозначение));
	Запрос.УстановитьПараметр("ЭтоЗИП", 	  ЭтоЗИП);	
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Найд = Рез.Ссылка;
	Иначе
		Найд = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
	КонецЕсли; 
	//Найд = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.НайтиПоНаименованию(Стру.Наименование, Истина, , Заказ);
	
	Если Найд.Пустая() Или ОбновлятьСуществующиеДанные Тогда
		//++веденеев 12.07.17 - добавлена возможность обновления существующих элементов
		Если Найд.Пустая() Тогда
			НовЭл = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
			ТекстЛога="Новый "
		Иначе
			НовЭл = Найд.ПолучитьОбъект();
			ТекстЛога="Обновлен ";
		КонецЕсли;
		//--веденеев 12.07.17
		НовЭл.Владелец = Заказ.Ссылка;
		НовЭл.Наименование = Стру.Наименование;
		НовЭл.Родитель = Стру.Родитель;
		НовЭл.ПредметСнабжения = НайтиПС(Стру,ТаблицаХарактеристик);
		НовЭл.ОбозначениеДоп   = ?(Это11356, Стру.ДокНаПоставку, Стру.Обозначение);
		Если Стру.свойство("МестоХранения") Тогда
			НовЭл.МестоХранения = Стру.МестоХранения;
		КонецЕсли; 
		Если Стру.свойство("Количество") Тогда
			НовЭл.Количество = Стру.Количество;
		КонецЕсли; 
		Если ЭтоЗИП Тогда
			НовЭл.ЗИП = Стру.ЭтоЗИП;
			НовЭл.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
			//НовЭл.Количество = Стру.Количество;
			Если Стру.свойство("КоличествоВЗИПБорт") Тогда
				НовЭл.КоличествоВЗИПБорт = Стру.КоличествоВЗИПБорт;
			КонецЕсли; 
			Если Стру.свойство("КоличествоВЗИПБаза") Тогда
				НовЭл.КоличествоВЗИПБаза = Стру.КоличествоВЗИПБаза;
			КонецЕсли; 
			Если Стру.свойство("КоличествоВЗИПДЭ") Тогда
				НовЭл.КоличествоВЗИПДЭ = Стру.КоличествоВЗИПДЭ;
			КонецЕсли; 
			Если Стру.свойство("КоличествоВЗИПР") Тогда
				НовЭл.КоличествоВЗИПР = Стру.КоличествоВЗИПР;
			КонецЕсли; 
			Если Стру.свойство("Вид") Тогда
				Если НЕ стру.вид = "" Тогда
					НовЭл.ТипСоставляющейЧасти = ВернутьТипСЧ(Стру.Вид);
				КонецЕсли; 
			Иначе
				//НовЭл.ТипСоставляющейЧасти = Справочники.РазделыСпецификацииЗИП.НайтиПоКоду(21);
			КонецЕсли; 
			
		Иначе 
			НовЭл.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
		КонецЕсли; 
		
		ИндСтроки = "";
		Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
		
		Попытка
			НовЭл.Записать();
		Исключение
		    ЗаписатьВЛог(НовЭл.Ссылка.УникальныйИдентификатор(), НовЭл.Ссылка, ИндСтроки, "Не записан элемент спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
			Сообщить(НовЭл.Наименование+" "+Строка(НовЭл.Владелец)+" "+ОписаниеОшибки());
		КонецПопытки;
		
		ЗаписатьВЛог(НовЭл.Ссылка.УникальныйИдентификатор(), НовЭл.Ссылка, ИндСтроки, ТекстЛога+"элемент спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
		Если Стру.Свойство("Перевод") Тогда
			ЗаписатьПеревод(НовЭл.Ссылка, Стру.Язык, Стру.Перевод, ИндСтроки);
		КонецЕсли;
		
	Иначе
		//Если НЕ Найд.Родитель = Стру.Родитель Тогда
		//	СпрОб = Найд.ПолучитьОбъект();
		//	СпрОб.Родитель = Стру.Родитель;
		//	СпрОб.Записать();
		//КонецЕсли; 
		НовЭл = Найд;
		ИндСтроки = "";
		Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
		ЗаписатьВЛог(НовЭл.Ссылка.УникальныйИдентификатор(), НовЭл.Ссылка, ИндСтроки, "Нашли элемент спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
		Если Стру.Свойство("Перевод") Тогда
			ЗаписатьПеревод(НовЭл.Ссылка, Стру.Язык, Стру.Перевод, ИндСтроки);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат НовЭл.Ссылка;
	
КонецФункции

&НаСервере
Функция СоздатьЭлемент956(Стру, ДЭ=Ложь)
	
	Если Стру.Свойство("ЭтоЗИП") Тогда
		ЭтоЗИП = Стру.ЭтоЗИП;
	Иначе
		ЭтоЗИП = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = &Наименование
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Родитель
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП = &ЭтоЗИП
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.Обозначение = &Обозначение";
	Запрос.УстановитьПараметр("Наименование", СокрЛП(Стру.Наименование));
	Запрос.УстановитьПараметр("Владелец", Заказ);
	Запрос.УстановитьПараметр("Родитель", 	 Стру.Родитель);
	Запрос.УстановитьПараметр("Обозначение", Стру.Обозначение);
	Запрос.УстановитьПараметр("ЭтоЗИП", ЭтоЗИП);
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		Найд = Рез.Ссылка;
	Иначе
		Найд = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
	КонецЕсли; 
	//Найд = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.НайтиПоНаименованию(Стру.Наименование, Истина, , Заказ);
	
	Если Найд.Пустая() Тогда
		НовЭл = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.СоздатьЭлемент();
		НовЭл.Владелец = Заказ;
		НовЭл.Наименование = Стру.Наименование;
		НовЭл.Родитель = Стру.Родитель;
		НовЭл.ПредметСнабжения = НайтиПС(Стру);
		Если Стру.свойство("МестоХранения") Тогда
			НовЭл.МестоХранения = Стру.МестоХранения;
		КонецЕсли; 
		Если ЭтоЗИП Тогда
			НовЭл.ЗИП = Стру.ЭтоЗИП;
			НовЭл.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
			Если Стру.свойство("Количество") Тогда
				НовЭл.Количество = Стру.Количество;
			КонецЕсли; 
			Если Стру.свойство("КоличествоВЗИПБорт") Тогда
				НовЭл.КоличествоВЗИПБорт = Стру.КоличествоВЗИПБорт;
			КонецЕсли; 
			Если Стру.свойство("КоличествоВЗИПБаза") Тогда
				НовЭл.КоличествоВЗИПБаза = Стру.КоличествоВЗИПБаза;
			КонецЕсли; 
			Если Стру.свойство("КоличествоВЗИПДЭ") Тогда
				НовЭл.КоличествоВЗИПДЭ = Стру.КоличествоВЗИПДЭ;
			КонецЕсли; 
			Если Стру.свойство("КоличествоВЗИПР") Тогда
				НовЭл.КоличествоВЗИПР = Стру.КоличествоВЗИПР;
			КонецЕсли; 
			Если Стру.свойство("Вид") Тогда
				Если НЕ стру.вид = "" Тогда
					НовЭл.ТипСоставляющейЧасти = ВернутьТипСЧ(Стру.Вид);
				КонецЕсли; 
			Иначе
				//НовЭл.ТипСоставляющейЧасти = Справочники.РазделыСпецификацииЗИП.НайтиПоКоду(21);
			КонецЕсли; 
			
		Иначе 
			НовЭл.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие;
		КонецЕсли; 
		
		ИндСтроки = "";
		Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
		
		Попытка
			НовЭл.Записать();
		Исключение
			ЗаписатьВЛог(НовЭл.Ссылка.УникальныйИдентификатор(), НовЭл.Ссылка, ИндСтроки, "Новый элемент спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		
		Если ДЭ Тогда
			СпрОБ = Найд.ПолучитьОбъект();
			Если Стру.свойство("КоличествоВЗИПДЭ") Тогда
				СпрОБ.КоличествоВЗИПДЭ = Стру.КоличествоВЗИПДЭ;
				
				ИндСтроки = "";
				Стру.Свойство("ИдентификаторСтроки", ИндСтроки);
				Попытка
					СпрОБ.Записать();
				Исключение
					ЗаписатьВЛог(СпрОБ.Ссылка.УникальныйИдентификатор(), СпрОБ.Ссылка, ИндСтроки, "Новый элемент спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
				КонецПопытки;				
			КонецЕсли;
			НовЭл = СпрОБ.Ссылка;
		Иначе
			НовЭл = Найд;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат НовЭл.Ссылка;
	
КонецФункции

&НаСервере
Функция ВернутьПустуюСсылку()
	Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка()
КонецФункции

&НаСервере
Функция ВернутьВидПозиции(Наименование)
	
	видПозиции = "";
	Если СтрНайти(НРег(Наименование), "запасн") > 0 И СтрНайти(НРег(Наименование), "част") > 0 Тогда
		видПозиции = "ЗапаснаяЧасть";
	ИначеЕсли СтрНайти(НРег(Наименование), "инструмент") > 0 Тогда
		видПозиции = "Инструмент";
	ИначеЕсли СтрНайти(НРег(Наименование), "приспособлен") > 0 Тогда
		видПозиции = "Приспособление";
	ИначеЕсли СтрНайти(НРег(Наименование), "принадлежности") > 0 Тогда
		видПозиции = "Принадлежности";
	ИначеЕсли СтрНайти(НРег(Наименование), "материал") > 0 Тогда
		видПозиции = "Материал";
	ИначеЕсли СтрНайти(НРег(Наименование), "издели") > 0 Тогда
		видПозиции = "Изделие";
	ИначеЕсли СтрНайти(НРег(Наименование), "инструмент и принад") > 0 Тогда
		видПозиции = "ИнстрИПринадл";
	ИначеЕсли СтрНайти(НРег(Наименование), "проч") > 0 И СтрНайти(НРег(Наименование), "принадлежност") > 0 Тогда
		видПозиции = "ПрочиеПринадл";
	ИначеЕсли СтрНайти(НРег(Наименование), "крепежн") > 0 И СтрНайти(НРег(Наименование), "детал") > 0 Тогда
		видПозиции = "Крепеж";
	ИначеЕсли СтрНайти(НРег(Наименование), "спец") > 0 И СтрНайти(НРег(Наименование), "инструмент") > 0 Тогда
		видПозиции = "СпецИнструмент";
	КонецЕсли;
	
	Возврат видПозиции;
	
КонецФункции

&НаСервере
Функция ВернутьТаблицуДляЦен()
	
	ТЗ_Цен = Новый ТаблицаЗначений;
	ТЗ_Цен.Колонки.Добавить("ПредметСнабжения");
	ТЗ_Цен.Колонки.Добавить("ТипЦены");
	ТЗ_Цен.Колонки.Добавить("Контрагент");
	ТЗ_Цен.Колонки.Добавить("Цена");
	ТЗ_Цен.Колонки.Добавить("Количество");
	ТЗ_Цен.Колонки.Добавить("Валюта");
	ТЗ_Цен.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ_Цен.Колонки.Добавить("Статус");
	ТЗ_Цен.Колонки.Добавить("ДатаЦены");
	ТЗ_Цен.Колонки.Добавить("Примечание");
	
	Возврат ТЗ_Цен;
	
КонецФункции

&НаСервере
Функция СоздатьВводЦен(ТЗ, НаДату="", Комментарий="")
	
	НовДок = Документы.ВводНачальныхОстатковЦен.СоздатьДокумент();
	НовДок.Дата = ?(НаДату = "", ТекущаяДата(), НаДату);
	НовДок.Комментарий = Комментарий;
	
	НовДок.Цены.Загрузить(ТЗ);
	
	НовДок.Записать(РежимЗаписиДокумента.Проведение);
	
КонецФункции

Функция СодержитАнглБуквы(КодСимвола) Экспорт
	
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
#КонецОбласти 
// общие --

// 877 ++
#Область з877


&НаСервере
Функция ЗагрузитьПриложение1Сервер()
	
	Цифры = "1234567890";

	Родители = Новый Массив;
	
	видПозиции = "";
	
	Для каждого Стр Из Табл877 Цикл
		
		Стру = Новый Структура;
		Стру.Вставить("Количество", Стр.Количество);
		Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
		Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
		Стру.Вставить("Обозначение",      Стр.Обозначение);
		
		ПустойНомПП = (Стр.НомПП = "");
		Если ПустойНомПП И НРег(Стр.Тип) = "группа" И Стр.Уровень = "" Тогда
			видПозиции = ВернутьВидПозиции(Стр.Наименование);
			Продолжить;
		КонецЕсли; 
		Стру.Вставить("Вид", видПозиции);     
		
		// Группа верх уровня
		Если СтрНайти(Стр.НомВедомости, "Ведомость  бортового комплекта ЗИП.") > 0 Тогда
			Стру.Вставить("Наименование", СтрЗаменить(Стр.НомВедомости, "Ведомость  бортового комплекта ЗИП. ", ""));
			Стру.Вставить("Родитель", 	  ВернутьПустуюСсылку());
			Родители.Очистить();
			ГрСсылка = СоздатьГруппу(Стру);
			Попытка
				Родители.Установить(0, ГрСсылка);
			Исключение
			    Родители.Вставить(0, ГрСсылка);
			КонецПопытки;
		ИначеЕсли НЕ Стр.Уровень = "" Тогда // 2
			ИндексЧисло = Число(Стр.Уровень) - 1;
			Стру.Вставить("Родитель", 	  Родители[ИндексЧисло-1]);
			Если НРег(Стр.Тип) = "изделие" Тогда
				Стру.Вставить("Наименование", Стр.Наименование);
				Стру.Вставить("Обозначение",   Стр.Обозначение);
				Стру.Вставить("ДокНаПоставку", Стр.ДокНаПоставку);
				ЭлСсылка = СоздатьЭлемент(Стру);
				Попытка
					Родители.Установить(ИндексЧисло, ЭлСсылка);
				Исключение
					Родители.Вставить(ИндексЧисло, ЭлСсылка);
				КонецПопытки;
				//ЭтоИзделие = Истина;
			ИначеЕсли НРег(Стр.Тип) = "группа" Тогда
				Наим = Стр.Наименование + " " + Стр.Обозначение;
				Наим = ?(СтрДлина(Наим) > 150, Лев(Наим, 150), Наим); // укоротим до длины рекв. для поиска
				Стру.Вставить("Наименование", Наим);
				ГрСсылка = СоздатьГруппу(Стру);
				Попытка
					Родители.Установить(ИндексЧисло, ГрСсылка);
				Исключение
					Родители.Вставить(ИндексЧисло, ГрСсылка);
				КонецПопытки;
			КонецЕсли;
			
			Для инд = ИндексЧисло + 1 По Родители.ВГраница() Цикл
				ДелИнд = Родители.ВГраница();
				Родители.Удалить(ДелИнд);
				ДелИнд = ДелИнд - 1;
			КонецЦикла; 
		ИначеЕсли НЕ Стр.Обозначение = "" И Стр.НомПП = "" Тогда
			Стру.Вставить("Наименование",  Стр.Наименование);
			Стру.Вставить("Родитель", 	   Родители[Родители.ВГраница()]);
			Стру.Вставить("Обозначение",   Стр.Обозначение);
			Стру.Вставить("КоличествоВЗИПБорт", Стр.КоличествоБорт);
			Стру.Вставить("КоличествоВЗИПБаза", Стр.КоличествоБаза);
			Стру.Вставить("ДокНаПоставку", Стр.ДокНаПоставку);
			СоздатьЭлемент(Стру);
			//ЭтоИзделие = Истина;
		ИначеЕсли НЕ Стр.НомПП = "" Тогда
			Стру.Вставить("Наименование", Стр.Наименование);
			Стру.Вставить("Родитель", 	  Родители[Родители.ВГраница()]);
			Стру.Вставить("ЭтоЗИП", 	  Истина);
			Стру.Вставить("Обозначение",  Стр.Обозначение);
			Стру.Вставить("ДокНаПоставку",  Стр.ДокНаПоставку);
			Стру.Вставить("КоличествоВЗИПБорт", Стр.КоличествоБорт);
			Стру.Вставить("КоличествоВЗИПБаза", Стр.КоличествоБаза);
			СоздатьЭлемент(Стру);
			//ЭтоЗИП = Истина;
		КонецЕсли; 
		
		//Если ЭтоГруппа Тогда
		//	Родитель = СоздатьГруппу(Стру);
		//ИначеЕсли ЭтоИзделие Тогда 
		//	СоздатьЭлемент(Стру);
		//ИначеЕсли ЭтоЗИП Тогда 
		//	СоздатьЭлемент(Стру);
		//КонецЕсли; 
		//
		//счетчик=счетчик+1;
		//Если счетчик = 300 ИЛИ счетчик = Тогда
		//	Если ТранзакцияАктивна() Тогда
		//		ЗафиксироватьТранзакцию();
		//	КонецЕсли; 
		//	НачатьТранзакцию();
		//	счетчик = 0;
		//КонецЕсли; 		
		
	КонецЦикла; 	
	
	//Сообщить("Загружено: " + Строка(счетчик));
	
КонецФункции 

&НаКлиенте
Процедура ЗагрузитьПриложение1()
	
	Эксель = ПодключитсяКЭксель();
	
	Табл877.Очистить();
	
	Цифры = "0123456789";
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 5 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 1).value));
		Стр2 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 4).value));
		Стр3 = СокрЛП(УдалитьЛишниеСимволыБезПереноса(ЛистЭксель.Cells(сч, 5).value));
		Стр4 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 6).value));
		Стр5 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 7).value));
		Стр6 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 8).value));
		Стр7 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 9).value));
		Стр8 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 11).value));
		Стр9 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 13).value));
		
		стр11 = СокрЛП(ЛистЭксель.Cells(сч, 2).value);
		стр12 = СокрЛП(ЛистЭксель.Cells(сч, 3).value);
		
		Если Стр2 = "1" И Стр3="2" И Стр4="3" И Стр5="4" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозШТ = СтрНайти(НРег(Стр3), "шт");
		Если ПозШТ > 0 Тогда
			Масс = Новый Массив; МассЧисел = Новый Массив;
			Для номСтр = 1 По СтрЧислоСтрок(Стр3) Цикл
				ТекСтр = СтрПолучитьСтроку(стр3, номСтр);
				ПозШТ = СтрНайти(НРег(ТекСтр), "шт");
				Если НЕ СтрДлина(ТекСтр) = ПозШТ+1 И НЕ Сред(ТекСтр, ПозШт+2, 1) = " " И (Сред(ТекСтр, ПозШт+2, 1) = "" ИЛИ СтрНайти(Цифры, Сред(ТекСтр, ПозШт+2, 1)) = 0) Тогда
					Продолжить;
				КонецЕсли; 
				Пока НЕ ПозШТ = 0 Цикл
					Нач = ПозШТ-1; ЧислоСтр = "";
					Пока Истина Цикл
						ТекСимвол = Сред(ТекСтр, Нач, 1);
						Если Найти(Цифры, ТекСимвол) > 0 Тогда
							ЧислоСтр = ТекСимвол + ЧислоСтр;
						КонецЕсли;
						Если ТекСимвол = "(" ИЛИ ТекСимвол = "-" ИЛИ ТекСимвол = "." ИЛИ Нач = 0 Тогда
							Прервать;
						КонецЕсли; 
						Нач = Нач - 1;
					КонецЦикла; 
					МассЧисел.Добавить(ЧислоСтр);
					ТекСтр = СтрЗаменить(ТекСтр, "- " + ЧислоСтр+"шт", " ");
					ТекСтр = СтрЗаменить(ТекСтр, "- " + ЧислоСтр+" шт", " ");
					ТекСтр = СтрЗаменить(ТекСтр, "-" + ЧислоСтр+"шт", " ");
					ТекСтр = СтрЗаменить(ТекСтр, "-" + ЧислоСтр+" шт", " ");
					ТекСтр = СтрЗаменить(ТекСтр, ЧислоСтр+"шт", " ");
					ТекСтр = СтрЗаменить(ТекСтр, ЧислоСтр+" шт", " ");
					ТекСтр = СтрЗаменить(ТекСтр, "()", "");
					//ТекСтр = СтрЗаменить(ТекСтр, " - ", "");
					ТекСтр = СокрЛП(ТекСтр);				
					ПозШТ = СтрНайти(НРег(ТекСтр), "шт");
				КонецЦикла; 
				Масс.Добавить(ТекСтр);
			КонецЦикла; 
			Если Стр7 = "" Тогда
				ТекЧисло = 0;
				Для каждого Элмас Из МассЧисел Цикл
					ТекЧисло = ТекЧисло + Число(Элмас);
				КонецЦикла; 
				Стр7 = ТекЧисло;
			КонецЕсли;
			Стр3 = СтрСоединить(Масс, " ");
		КонецЕсли; 
		Если СтрНайти(Стр3, Символы.ВК) > 0 Тогда
			Стр3 = СтрЗаменить(Стр3, Символы.ВК, " ");
		КонецЕсли; 
		Если СтрНайти(Стр3, Символы.ПС) > 0 Тогда
			Стр3 = СтрЗаменить(Стр3, Символы.ПС, " ");
		КонецЕсли; 
		//Если СтрНайти(НРег(Стр5), "запасные части") Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		НовСтр = Табл877.Добавить();
		НовСтр.НомВедомости   = Стр1;
		НовСтр.НомПП 		  = Стр2;
		НовСтр.Обозначение 	  = Стр3;
		НовСтр.ДокНаПоставку  = Стр4;
		НовСтр.Наименование   = Стр5;
		НовСтр.ЕдИзмерения 	  = Стр6;
		НовСтр.Количество 	  = Стр7;
		НовСтр.КоличествоБорт = Стр8;
		НовСтр.КоличествоБаза = Стр9;
		
		НовСтр.Уровень = стр11;
		НовСтр.Тип     = стр12;
		
		//НовСтр.Примечание  	= Стр9;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	ЗагрузитьПриложение1Сервер();
	
КонецПроцедуры

&НаСервере
Функция НайтиСоздатьГруппуВерхУровня(Наименование = "")
	
	СпрПустая = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
	
	Если Наименование = "" Тогда
		Возврат СпрПустая;
	КонецЕсли; 
	
	Найд = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.НайтиПоНаименованию(Наименование, Истина, СпрПустая, Заказ);
	
	Если Найд.Пустая() Тогда
		Стру = Новый Структура;
		Стру.Вставить("Наименование", Наименование);
		Стру.Вставить("Родитель", СпрПустая);
		Возврат СоздатьГруппу(Стру);
	Иначе
		Если Найд.Тип = Справочники.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа Тогда
			Возврат Найд.Ссылка;
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ЗагрузитьПриложение2Сервер(Материалы=Ложь)
	
	Если Материалы Тогда
		РодительВерх = НайтиСоздатьГруппуВерхУровня("Материалы");
	Иначе
		РодительВерх = НайтиСоздатьГруппуВерхУровня("Заказные ведомости");
	КонецЕсли; 
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	Для каждого Стр Из Табл877 Цикл
		
		Найд = СпрЗип.НайтиПоНаименованию(Стр.Уровень, Истина, РодительВерх, Заказ);
		Если Найд = СпрЗипПустая Тогда
			СтруГруппа = Новый Структура;
			СтруГруппа.Вставить("Количество",   Стр.Количество);
			СтруГруппа.Вставить("Наименование", Стр.Уровень);
			СтруГруппа.Вставить("Родитель",     РодительВерх);
			СтруГруппа.Вставить("ИдентификаторСтроки", Стр.НомПП);
			Родитель = СоздатьГруппу(СтруГруппа);
		Иначе
			Родитель = Найд;
		КонецЕсли; 
		
		Стру = Новый Структура;
		Стру.Вставить("Наименование",  Стр.Наименование);
		Стру.Вставить("Родитель", 	   Родитель);
		Стру.Вставить("Количество",    Стр.Количество);
		Стру.Вставить("КоличествоВЗИПБорт", Стр.КоличествоБорт);
		Стру.Вставить("КоличествоВЗИПБаза", Стр.КоличествоБаза);
		Стру.Вставить("Вид", "Материал");
		//СтрОбозначение = СтрНайти(
		Стру.Вставить("Обозначение",   Стр.Обозначение);
		Стру.Вставить("ДокНаПоставку", Стр.ДокНаПоставку);
		Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
		Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
		
		СоздатьЭлемент(Стру);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПриложение2()
	
	Эксель = ПодключитсяКЭксель();
	
	Табл877.Очистить();
	
	// Лист оборудование
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 3 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 14).value));
		Стр2 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 1).value));
		Стр3 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 2).value));
		Стр31 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 3).value));
		Стр4 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 7).value));
		Стр5 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 5).value));
		Стр51 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 6).value));
		Стр6 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 8).value));
		Стр7 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 9).value));
		Стр8 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр9 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 11).value);
		
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		
		НовСтр = Табл877.Добавить();
		НовСтр.НомВедомости   = Стр1;
		НовСтр.НомПП 		  = Стр2;
		НовСтр.Обозначение 	  = Стр3 + ?(Стр31="", "", " (" +Стр31+")");
		НовСтр.ДокНаПоставку  = Стр4;
		НовСтр.Наименование   = ?(СтрНайти(Стр5, СокрЛП(Стр51)) > 0, Стр5, Стр5 +" "+Стр51);
		НовСтр.ЕдИзмерения 	  = Стр6;
		НовСтр.Количество 	  = Стр7;
		НовСтр.КоличествоБорт = Стр8;
		НовСтр.КоличествоБаза = Стр9;
		НовСтр.Уровень		  = Стр1; // имя группы
		//НовСтр.Примечание  	= Стр9;
		
	КонецЦикла;
	
	ЗагрузитьПриложение2Сервер();
	
	Табл877.Очистить();
	
	// Лист материалы
	ЛистЭксель = Эксель.WorkSheets(2); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 3 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 7).value);
		Стр2 = СокрЛП(ЛистЭксель.Cells(сч, 1).value);
		Стр3 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 2).value);
		Стр4 = СокрЛП(ЛистЭксель.Cells(сч, 4).value);
		Стр5 = СокрЛП(ЛистЭксель.Cells(сч, 3).value)+" "+СокрЛП(ЛистЭксель.Cells(сч, 5).value);
		Стр6 = СокрЛП(ЛистЭксель.Cells(сч, 8).value);
		Стр7 = СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр8 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр9 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 11).value);
		
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		
		НовСтр = Табл877.Добавить();
		НовСтр.НомВедомости   = Стр1;
		НовСтр.НомПП 		  = Стр2;
		НовСтр.Обозначение 	  = Стр3;
		НовСтр.ДокНаПоставку  = Стр4;
		НовСтр.Наименование   = Стр5;
		НовСтр.ЕдИзмерения 	  = Стр6;
		НовСтр.Количество 	  = Стр7;
		НовСтр.КоличествоБорт = Стр8;
		НовСтр.КоличествоБаза = Стр9;
		НовСтр.Уровень		  = Стр1; // имя группы
		//НовСтр.Примечание  	= Стр9;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	ЗагрузитьПриложение2Сервер(Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПриложение3Сервер()
	
	РодительВерх = НайтиСоздатьГруппуВерхУровня("Спецификации");
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	Для каждого Стр Из Табл877 Цикл
		
		Найд = СпрЗип.НайтиПоНаименованию(Стр.Уровень, Истина, РодительВерх, Заказ);
		Если Найд = СпрЗипПустая Тогда
			СтруГруппа = Новый Структура;
			СтруГруппа.Вставить("Количество",   Стр.Количество);
			СтруГруппа.Вставить("Наименование", Стр.Уровень);
			СтруГруппа.Вставить("Родитель",     РодительВерх);
			СтруГруппа.Вставить("ИдентификаторСтроки", Стр.НомПП);
			Родитель = СоздатьГруппу(СтруГруппа);
		Иначе
			Родитель = Найд;
		КонецЕсли; 
		
		Стру = Новый Структура;
		Стру.Вставить("Наименование",  Стр.Наименование);
		Стру.Вставить("Родитель", 	   Родитель);
		Стру.Вставить("Количество",    Стр.Количество);
		Стру.Вставить("КоличествоВЗИПБорт", Стр.КоличествоБорт);
		Стру.Вставить("КоличествоВЗИПБаза", Стр.КоличествоБаза);
		Стру.Вставить("Обозначение",   Стр.Обозначение);
		Стру.Вставить("ДокНаПоставку", Стр.ДокНаПоставку);
		Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
		Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
		
		СоздатьЭлемент(Стру);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПриложение3()
	
	Эксель = ПодключитсяКЭксель();
	
	Табл877.Очистить();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 3 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 3).value);
		Стр2 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 2).value);
		Стр3 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 6).value));
		Стр31 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 7).value));
		Стр4 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 8).value));
		Стр5 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 9).value));
		Стр6 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 13).value));
		Стр7 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 12).value));
		Стр8 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр9 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 11).value);
		
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		
		НовСтр = Табл877.Добавить();
		НовСтр.НомВедомости   = "";
		НовСтр.НомПП 		  = Стр2;
		НовСтр.Обозначение 	  = Стр3 + ?(Стр31 = "", "", " ("+Стр31+")");
		НовСтр.ДокНаПоставку  = Стр4;
		НовСтр.Наименование   = Стр5;
		НовСтр.ЕдИзмерения 	  = Стр6;
		НовСтр.Количество 	  = Стр7;
		НовСтр.КоличествоБорт = Стр8;
		НовСтр.КоличествоБаза = Стр9;
		НовСтр.Уровень		  = Стр1; // имя группы
		
		//НовСтр.Примечание  	= Стр9;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	ЗагрузитьПриложение3Сервер();
	
КонецПроцедуры

 // Доп ++
 &НаСервере
 Функция НайтиЭлементВ877(Наименование, Обозначение)
	 
	 ПустоеНаим = (Наименование = "");
	 
	 Запрос = Новый Запрос;
	 Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	 |ИЗ
	 |	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	 |ГДЕ
	 |	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец"
	 +?(ПустоеНаим, "", " И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Наименование = &Наименование")+
	 "	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ОбозначениеДоп = &Обозначение";
	 Запрос.УстановитьПараметр("Владелец", Заказ);
	 Если НЕ ПустоеНаим Тогда
		 Запрос.УстановитьПараметр("Наименование", Наименование);
	 КонецЕсли; 
	 Запрос.УстановитьПараметр("Обозначение",  Обозначение);
	 
	 РезультатЗапроса = Запрос.Выполнить().Выбрать();
	 
	 Если РезультатЗапроса.Следующий() Тогда
		 Возврат РезультатЗапроса.Ссылка;
	 иначе
		 Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка()
	 КонецЕсли; 
	 
 КонецФункции
  
&НаСервере
Функция ЗагрузитьЦеныСервер()
	
	ТЗ_Цен = ВернутьТаблицуДляЦен();
	
	Родитель = НайтиСоздатьГруппуВерхУровня("Поставщики и цены");
	
	ДолларСША = Справочники.ОКВ.НайтиПоКоду("840");
	ИнЗаказчик = НайтиСоздатьИностранногоЗаказчика("Индия");
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	счет1 = 0;
	счет2 = 0;
	
	Для каждого Стр Из Табл877 Цикл
		
		//Перевод
		МассНаим = СтрРазделить(Стр.Наименование, Символы.ПС);
		Если МассНаим.Количество() = 2 Тогда
			Наименование = СокрЛП(МассНаим[0]);
			Перевод      = СокрЛП(МассНаим[1]);
		Иначе
			МассНаим = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Стр.Наименование, "      ", Истина);
			Если МассНаим.Количество() = 2 Тогда
				Наименование = СокрЛП(МассНаим[0]);
				Перевод      = СокрЛП(МассНаим[1]);
			ИначеЕсли МассНаим.Количество() > 2 Тогда
			Иначе
				Наименование = Стр.Наименование;
				Перевод      = "";
			КонецЕсли;
		КонецЕсли;
		Если НЕ Перевод = "" Тогда
			Символ = Лев(Перевод, 1);
			Если НЕ СодержитАнглБуквы(КодСимвола(Символ)) Тогда
				Наименование = Наименование + " " + Перевод;
				Перевод = "";
			КонецЕсли; 
		КонецЕсли; 
		
		Стру = Новый Структура;
		Стру.Вставить("Наименование",  Наименование);
		Стру.Вставить("Родитель", 	   Родитель);
		Стру.Вставить("Количество",    Стр.Количество);
		Стру.Вставить("КоличествоВЗИПБорт", Стр.КоличествоБорт);
		Стру.Вставить("КоличествоВЗИПБаза", Стр.КоличествоБаза);
		Стру.Вставить("Обозначение",   Стр.Обозначение);
		Стру.Вставить("ДокНаПоставку", Стр.ДокНаПоставку);
		//Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
		Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
		Стру.Вставить("ЭтоЗИП", Истина);
		Если НЕ Перевод = "" Тогда
			Стру.Вставить("Перевод", Перевод);
			Стру.Вставить("Язык",    "Английский");
		КонецЕсли; 
		Если НЕ Стр.Поставщик = "" Тогда
			Стру.Вставить("Поставщик", Стр.Поставщик);
		КонецЕсли; 
		//Если НЕ Стр.Цена = "" Тогда
		//	Стру.Вставить("Цена", Стр.Цена);
		//	Стру.Вставить("ДатаЦены", Стр.ДатаЦены);
		//КонецЕсли;
		
		НайдЭлем = НайтиЭлементВ877(Наименование, Стр.Обозначение);
		Если НЕ НайдЭлем = СпрЗипПустая Тогда
			Если НЕ Стр.Поставщик = "" Тогда
				мПоставщик = НайтиСоздатьПоставщика(Стру.Поставщик);
				СпрОб = НайдЭлем.ПредметСнабжения.ПолучитьОбъект();
				Найд = СпрОб.ИзготовителиИПоставщики.Найти(мПоставщик, "Контрагент");
				Если Найд = Неопределено Тогда
					НовСтр = СпрОб.ИзготовителиИПоставщики.Добавить();
					НовСтр.Поставщик = Истина;
					НовСтр.Контрагент = мПоставщик;
					СпрОб.Записать();
				КонецЕсли; 
			КонецЕсли; 	
			Если НЕ Перевод = "" Тогда
				ЗаписатьПеревод(НайдЭлем, Стру.Язык, Стру.Перевод, Стр.НомПП);
			КонецЕсли;
			счет1 = счет1 + 1;
		КонецЕсли; 
		
		ЭлемСсылка = СоздатьЭлемент(Стру);
		ЭлемПС = ЭлемСсылка.ПредметСнабжения;
		Если ТЗ_Цен.Найти(ЭлемПС, "ПредметСнабжения") = Неопределено Тогда
			НовСтр = ТЗ_Цен.Добавить();
			НовСтр.ПредметСнабжения = ЭлемПС;
			НовСтр.ТипЦены = Перечисления.ТипыЦен.Внешняя; 
			НовСтр.Контрагент = ИнЗаказчик;
			НовСтр.Цена = Стр.Цена;
			НовСтр.Количество = 0;
			НовСтр.Валюта = ДолларСША;
			НовСтр.ЕдиницаИзмерения = "";
			НовСтр.ДатаЦены = Стр.ДатаЦены;
		Иначе 
			Сообщить("Дубль " + Строка(ЭлемПС));
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТЗ_Годов = ТЗ_Цен.Скопировать();
	ТЗ_Годов.Свернуть("ДатаЦены");
	
	Для каждого Стр Из ТЗ_Годов Цикл
		Если НЕ СтрДлина(Стр.ДатаЦены) = 5 Тогда
			Продолжить;
		КонецЕсли; 
		НовТЗ = ТЗ_Цен.Скопировать(ТЗ_Цен.НайтиСтроки(Новый Структура("ДатаЦены", Стр.ДатаЦены)));
		СоздатьВводЦен(НовТЗ, КонецГода(Дата(Стр.ДатаЦены, 12, 31)));
	КонецЦикла; 
		
КонецФункции

&НаКлиенте
Процедура ЗагрузитьЦены()
	
	Эксель = ПодключитсяКЭксель();
	
	Табл877.Очистить();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 5 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 1).value);
		Стр2 = СокрЛП(УдалитьЛишниеСимволыБезПереноса(ЛистЭксель.Cells(сч, 2).value));
		Стр3 = СокрЛП(УдалитьЛишниеСимволыБезПереноса(ЛистЭксель.Cells(сч, 3).value));
		Стр4 = ""; //СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 4).value));
		Стр5 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 5).value));
		Стр6 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 6).value));
		Стр7 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 7).value));
		
		Если СтрНайти(НРег(Стр3), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр3), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр3), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр3), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр3), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		Если сч >= 1461 и сч <= 1478 Тогда
			тмп  = стр2;
			Стр2 = Стр3;
			Стр3 = тмп;
		КонецЕсли; 
		НовСтр = Табл877.Добавить();
		НовСтр.НомВедомости   = "";
		НовСтр.НомПП 		  = Стр1;
		НовСтр.Обозначение 	  = Стр2;
		НовСтр.Наименование   = Стр3;
		НовСтр.ЕдИзмерения 	  = Стр4;
		НовСтр.Количество 	  = "";
		НовСтр.КоличествоБорт = "";
		НовСтр.КоличествоБаза = "";
		НовСтр.Поставщик      = Стр5;
		НовСтр.Цена 		  = Стр6;
		НовСтр.ДатаЦены		  = Стр7;
		
		//НовСтр.Примечание  	= Стр9;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	ЗагрузитьЦеныСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить877()
	
	Файл = Новый Файл(ИмяФайла);
	ТекИмяФайла   = Файл.Имя;
	ТекПутьКФайлу = Файл.Путь;
	
	Если СтрНайти(НРег(ИмяФайла), "приложение 1") > 0 Тогда
		ЗагрузитьПриложение1();
	ИначеЕсли СтрНайти(НРег(ИмяФайла), "приложение 2") > 0 Тогда
		ЗагрузитьПриложение2();
	ИначеЕсли СтрНайти(НРег(ИмяФайла), "приложение 3") > 0 Тогда
		ЗагрузитьПриложение3();
	ИначеЕсли СтрНайти(НРег(ИмяФайла), "зип к пвн звездочка") > 0 Тогда
		ЗагрузитьЦены();
	КонецЕсли; 
	
КонецПроцедуры
// Доп --

// загрузка одиночная
&НаКлиенте
Процедура ЗагрузитьЭксель(Команда)
	Заполнить877();
КонецПроцедуры
#КонецОбласти 
// 877 --

// 956 ++
#Область з956


&НаСервере
Функция СоединитьЯчейки(Знач1, Знач2)
	
	Если Знач1 = Знач2 Тогда
		Возврат Знач1;
	ИначеЕсли Знач1 = "" И НЕ Знач2 = "" Тогда 
		Возврат Знач2;
	ИначеЕсли НЕ Знач1 = "" И Знач2 = "" Тогда 
		Возврат Знач1;
	ИначеЕсли НЕ Знач1 = "" И НЕ Знач2 = "" Тогда 
		Возврат Знач1 + " " + Знач2;
	КонецЕсли; 
	
КонецФункции
 
&НаСервере
Процедура СоединитьСтроки()
	
	МассУдаляемых = Новый Массив;
	
	Для каждого Стр Из Табл956 Цикл
		
		ТекПоз = Стр.Позиция;
		Если ТекПоз = "" Тогда
			Продолжить;
		КонецЕсли; 
		
		НайдСтроки = Табл956.НайтиСтроки(Новый Структура("Позиция", ТекПоз));
		
		Если НайдСтроки.Количество() >= 2 Тогда
			
			Стр1 = НайдСтроки[0];
			
			
			Для счетчик = 1 По НайдСтроки.Количество()-1 Цикл
				
				Стр2 = НайдСтроки[счетчик];
				
				Стр1.Уровень 	   = СоединитьЯчейки(Стр1.Уровень, 		 Стр2.Уровень);
				Стр1.Тип		   = СоединитьЯчейки(Стр1.Тип, 			 Стр2.Тип);
				Стр1.Позиция 	   = СоединитьЯчейки(Стр1.Позиция, 		 Стр2.Позиция);
				Стр1.Наименование  = СоединитьЯчейки(Стр1.Наименование,  Стр2.Наименование);   
				Стр1.Обозначение   = СоединитьЯчейки(Стр1.Обозначение,   Стр2.Обозначение);
				Стр1.ЕдИзмерения   = СоединитьЯчейки(Стр1.ЕдИзмерения,   Стр2.ЕдИзмерения);
				Стр1.МассаЕдиницы  = СоединитьЯчейки(Стр1.МассаЕдиницы,  Стр2.МассаЕдиницы);
				Стр1.Количество    = СоединитьЯчейки(Стр1.Количество,    Стр2.Количество);
				Стр1.МестоХранения = СоединитьЯчейки(Стр1.МестоХранения, Стр2.МестоХранения);
				Стр1.КодЕдМассы    = СоединитьЯчейки(Стр1.КодЕдМассы, 	 Стр2.КодЕдМассы);
				
				Стр2.Позиция = "";
				
				МассУдаляемых.Добавить(Стр2);
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого Стр Из МассУдаляемых Цикл
		Табл956.Удалить(Стр);
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
Функция ВернутьГруппуПоИмениФайла(ФайлИмя = "")
	
	ФайлИмя = СтрЗаменить(ФайлИмя, "W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-002_ЗИ-К_892\", "");
	ФайлИмя = СтрЗаменить(ФайлИмя, ".doc", "");
	
	ФайлИмя = СокрЛП(ФайлИмя); 
	ИмяГруппы = "";
	ИмяПодГруппы = "";
	
	//	 Если ФайлИмя = "956ЭМ-079-001 ЗИ-К" Тогда
	//	ИмяГруппы = "Штурманская часть";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-002 ЗИ-К" Тогда
	//	ИмяГруппы = "Ракетно-артиллерийская часть";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-003 ЗИ-К" Тогда
	//	ИмяГруппы = "Минно-торпедная часть";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-004 ЗИ-К" Тогда
	//	ИмяГруппы = "Часть связи";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-005 ЗИ-К часть 1" Тогда
	//	ИмяГруппы = "Электромеханическая часть";
	//	ИмяПодГруппы = "Механизмы, аппараты и прочее оборудование энергетической установки";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-005 ЗИ-К часть 2" Тогда
	//	ИмяГруппы = "Электромеханическая часть";
	//	ИмяПодГруппы = "Приборы автоматики энергетической установки";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-005 ЗИ-К часть3" Тогда
	//	ИмяГруппы = "Электромеханическая часть";
	//	ИмяПодГруппы = "Механизмы, аппараты и прочее оборудование общесудовых систем";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-005 ЗИ-К часть3_л1" Тогда
	//	ИмяГруппы = "Электромеханическая часть";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-005 ЗИ-К часть 4" Тогда
	//	ИмяГруппы = "Электромеханическая часть";
	//	ИмяПодГруппы = "Средства измерения и контроля";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-005 ЗИ-К часть 5" Тогда
	//	ИмяГруппы = "Электромеханическая часть";
	//	ИмяПодГруппы = "Средства измерения и контроля";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-005 ЗИ-К часть 6" Тогда
	//	ИмяГруппы = "Электромеханическая часть";
	//	ИмяПодГруппы = "Арматура трубопроводов и трубы";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-005 ЗИ-К часть 7" Тогда
	//	ИмяГруппы = "Электромеханическая часть";
	//	ИмяПодГруппы = "Электротехническое оборудование";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-006 ЗИ-К" Тогда
	//	ИмяГруппы = "Радиотехническая часть";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-007 ЗИ-К" Тогда
	//	ИмяГруппы = "Химическая Служба";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-008 ЗИ-К" Тогда
	//	ИмяГруппы = "Боцманская команда";
	//ИначеЕсли ФайлИмя = "956ЭМ-079-008 ЗИ-К_л1" Тогда
	//	ИмяГруппы = "Боцманская команда";
	Если Найти(ФайлИмя, "956ЭМ-059-001_ЗИ-К_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ-079-021_ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Штурманская часть";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-002_ЗИ-К_01_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ-079-022_ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Ракетно-артиллерийская часть";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-003_ЗИ-К_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ-079-023_ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Минно-торпедная часть";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-004_ЗИ-К_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ-079-024_ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Часть связи";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-005_ЗИ-К_часть_1_892") > 0 ИЛИ  Найти(ФайлИмя, "956ЭМ-079-025 ЗИ ДЭ") > 0 Тогда
		ИмяГруппы = "Электромеханическая часть";
		ИмяПодГруппы = "Механизмы, аппараты и прочее оборудование энергетической установки";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-005_ЗИ-К_часть_2_892") > 0 Тогда
		ИмяГруппы = "Электромеханическая часть";
		ИмяПодГруппы = "Приборы автоматики энергетической установки";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-005_ЗИ-К_часть_3_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ-079-025_ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Электромеханическая часть";
		ИмяПодГруппы = "Механизмы, аппараты и прочее оборудование общесудовых систем";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-005_ЗИ-К_часть_4_892") > 0 Тогда
		ИмяГруппы = "Электромеханическая часть";
		ИмяПодГруппы = "Устройства и оборудование";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-005_ЗИ-К_часть_5_892") > 0 Тогда
		ИмяГруппы = "Электромеханическая часть";
		ИмяПодГруппы = "Средства измерения и контроля";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-005_ЗИ-К_часть_6_892") > 0 Тогда
		ИмяГруппы = "Электромеханическая часть";
		ИмяПодГруппы = "Арматура трубопроводов и трубы";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-005_ЗИ-К_часть_7_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ -079-025 ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Электромеханическая часть";
		ИмяПодГруппы = "Электротехническое оборудование";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-006_ЗИ-К_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ-079-026_ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Радиотехническая часть";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-007_ЗИ-К_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ-079-027_ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Химическая Служба";
	ИначеЕсли Найти(ФайлИмя, "956ЭМ-059-008_ЗИ-К_892") > 0 ИЛИ Найти(ФайлИмя, "956ЭМ-079-028 ЗИ-ДЭ") > 0 Тогда
		ИмяГруппы = "Боцманская команда";
	КонецЕсли;

	Стру= Новый Структура;
	Стру.Вставить("ИмяГруппы", ИмяГруппы);
	Стру.Вставить("ИмяПодГруппы", ИмяПодГруппы);
	
	Возврат Стру;
	
КонецФункции
 
&НаСервере
Функция ЗагрузитьНаСервере956(ИмяБезРасширения="", МассСодержание, ДЭ=Ложь)
	
	Группы = ВернутьГруппуПоИмениФайла(ИмяБезРасширения);
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	Родители = Новый Массив;
	
	Стру = Новый Структура;
	Если Группы.Свойство("ИмяГруппы") Тогда
		Стру.Вставить("Наименование", Группы.ИмяГруппы);
		Стру.Вставить("ИдентификаторСтроки", "00001");
		Стру.Вставить("Родитель", СпрЗип.ПустаяСсылка());
		Родители.Добавить(СоздатьГруппу(Стру));
	КонецЕсли; 
	Если Группы.Свойство("ИмяПодГруппы") Тогда
		Если НЕ Группы.ИмяПодГруппы = "" Тогда
			Стру.Вставить("Наименование", Группы.ИмяПодГруппы);
			Стру.Вставить("ИдентификаторСтроки", "00002");
			Стру.Вставить("Родитель", Родители[0]);
			Родители.Добавить(СоздатьГруппу(Стру));
		КонецЕсли; 
	КонецЕсли;
	
	КолРодителей = Родители.ВГраница();
	РодительВерх = Родители[Родители.ВГраница()];
	РодительИзделие = РодительВерх;
	
	видПозиции   = ""; ЭтоИзделиеРодитель = Ложь;
	
	Для каждого стр Из Табл956 Цикл
		
		ПустойНомПП = (Стр.Позиция = "" И стр.Обозначение = "" И стр.Тип = "");
		
		Если ПустойНомПП Тогда
			видПозиции = ВернутьВидПозиции(Стр.Наименование);
			Если НЕ видПозиции = "" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		
		Если ЭтоИзделиеРодитель И НЕ стр.Уровень = "" И НЕ стр.Тип = "" Тогда
			ЭтоИзделиеРодитель = Ложь;
		КонецЕсли; 
		
		Если ЭтоИзделиеРодитель Тогда
			Если НЕ Стр.Позиция = "" Тогда
				ЭтоИзделиеРодитель = Ложь;
				Родители.Удалить(Родители.ВГраница());
			КонецЕсли; 
		КонецЕсли; 
		
		Если НЕ стр.Уровень = "" И НЕ стр.Тип = "" Тогда
			
			ИндексРод = КолРодителей + (Число(Стр.Уровень) - 1 );
			Найд = СпрЗип.НайтиПоНаименованию(Стр.Наименование, Истина, Родители[ИндексРод], Заказ);
			
			Если Найд = СпрЗипПустая Тогда
				СтруГруппа = Новый Структура;
				СтруГруппа.Вставить("Наименование", Стр.Наименование);
				СтруГруппа.Вставить("Родитель",     Родители[ИндексРод]);
				Если ДЭ Тогда
					Стру.Вставить("КоличествоВЗИПДЭ", Стр.Количество);
				Иначе
					Стру.Вставить("Количество", Стр.Количество);
					Стру.Вставить("КоличествоВЗИПБорт", Стр.Количество);
				КонецЕсли;
				СтруГруппа.Вставить("Количество",   Стр.Количество);
				СтруГруппа.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
				СтруГруппа.Вставить("Обозначение",  Стр.Обозначение);
				СтруГруппа.Вставить("МестоХранения", Стр.МестоХранения);
				СтруГруппа.Вставить("ИдентификаторСтроки", Стр.Позиция);
				СтруГруппа.Вставить("Тип",  Стр.Тип);
				Если НРег(Стр.Тип) = "и" ИЛИ НРег(Стр.Тип) = "сч" Тогда
					Родитель1 = СоздатьЭлемент956(СтруГруппа);
				Иначе
					Родитель1 = СоздатьГруппу(СтруГруппа);
				КонецЕсли; 
			Иначе
				СпрОб = Найд.ПолучитьОбъект();
				СпрОб.Родитель = Родители[ИндексРод];
				Попытка
					СпрОб.Записать();
				Исключение
					ЗаписатьВЛог(Найд.Ссылка.УникальныйИдентификатор(), Найд.Ссылка, Стр.Позиция, "Смена родителя спр. СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
				КонецПопытки;
				Родитель1 = Найд;
			КонецЕсли;
			
			ТекИнд = КолРодителей+Число(Стр.Уровень);
			Попытка
				Родители.Установить(ТекИнд, Родитель1);
			Исключение
				Родители.Вставить(ТекИнд, Родитель1);
			КонецПопытки;			
			Для инд = ТекИнд+1 По Родители.ВГраница() Цикл
				ДелИнд = Родители.ВГраница();
				Родители.Удалить(ДелИнд);
				ДелИнд = ДелИнд - 1;
			КонецЦикла; 
			Продолжить;
		КонецЕсли; 
		
		Стру = Новый Структура;
		Стру.Вставить("Наименование",  Стр.Наименование);
		Стру.Вставить("Родитель", 	   Родители[Родители.ВГраница()]);
		Если ДЭ Тогда
			Стру.Вставить("КоличествоВЗИПДЭ", Стр.Количество);
		Иначе
			Стру.Вставить("Количество", Стр.Количество);
			Стру.Вставить("КоличествоВЗИПБорт", Стр.Количество);
		КонецЕсли;
		Стру.Вставить("Обозначение",   Стр.Обозначение);
		Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
		Стру.Вставить("МассаЕдиницы", Стр.МассаЕдиницы);
		Стру.Вставить("МестоХранения", Стр.МестоХранения);
		Стру.Вставить("КодМассы",     Стр.КодЕдМассы);
		Стру.Вставить("ЭтоЗИП", Истина);
		Стру.Вставить("Вид", видПозиции);
		Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
		
		РодительИзделие = СоздатьЭлемент956(Стру, ДЭ);
		
		Если СтрНайти(НРег(Стр.Наименование), "в составе") > 0 ИЛИ СтрНайти(НРег(Стр.Наименование), "в том числе") > 0 Тогда
			Если ЭтоИзделиеРодитель Тогда // двойная вложенность
				Родители.Удалить(Родители.ВГраница());
			КонецЕсли; 
			Попытка
				Родители.Установить(Родители.ВГраница()+1, РодительИзделие);
			Исключение
				Родители.Вставить(Родители.ВГраница()+1, РодительИзделие);
			КонецПопытки;			
			ЭтоИзделиеРодитель = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура Загрузить956_Ворд(ФайлЗагрузки = "")
	
	Если ФайлЗагрузки = "" Тогда
		Возврат;
	КонецЕсли; 
	
	Табл956.Очистить();
	
	Ворд = Новый COMОбъект("Word.Application"); 
	Ворд.Visible = Ложь;
	Ворд.Documents.Open(ФайлЗагрузки,, Истина); 
	
	Документ = Ворд.ActiveDocument(); 
	МассСодержание = новый Массив;
	
	Попытка
		
		КолСодер = Документ.TablesOfContents.Count;
		Для ТекС = 1 По КолСодер Цикл
			Содержание = Документ.TablesOfContents(ТекС).Range.Text;
			МассСтр = СтрРазделить(Содержание, Символы.ВК, Ложь); //СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Содержание, Символы.ВК, Истина)
			МассСодержание = Новый Массив;
			Цифры = "0123456789";
			Для каждого стр Из МассСтр Цикл
				Длина = СтрДлина(Стр);
				Пока НЕ длина = 0 Цикл
					Символ = Сред(Стр, Длина, 1);
					Если Найти(Цифры, Символ) > 0 Тогда
						стр = Сред(стр, 1, Длина-1);
					КонецЕсли;
					Если Символ = "	" ИЛИ Символ = " " Тогда
						стр = СокрЛП(стр);
						Прервать;
					КонецЕсли;
					длина = Длина-1;
				КонецЦикла;
				МассСодержание.Добавить(УдалитьЛишниеСимволы(стр));
			КонецЦикла; 
			Если МассСодержание.Количество() > 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	Исключение
		ааа= ОписаниеОшибки();
		МассСодержание = новый Массив;
	КонецПопытки;
	
	Если СтрНайти(ИмяФайла, "059-005_ЗИ-К_часть_2") > 0 Тогда
		МассСодержание.Очистить();
		МассСодержание.Добавить("РЕГУЛЯТОР УРОВНЯ В ГЛАВНОМ КОНДЕНСАТОРЕ РУ-2Д-1.1");
		МассСодержание.Добавить("РЕГУЛЯТОР ДАВЛЕНИЯ ОТРАБОТАВШЕГО ПАРА РД-4-03/1");
		МассСодержание.Добавить("РЕГУЛЯТОР ДАВЛЕНИЯ СЛАБОПЕРЕГРЕТОГО ПАРА РД-4-01/25");
		МассСодержание.Добавить("РЕГУЛЯТОР ДАВЛЕНИЯ В СИСТЕМЕ УПЛОТНЕНИЙ РД-4/0,1");
		МассСодержание.Добавить("РЕГУЛЯТОР ДАВЛЕНИЯ В ДЕАЭРАТОРЕ РД-4/0,25");
		МассСодержание.Добавить("РЕГУЛЯТОР ТЕМПЕРАТУРЫ МАСЛА ЭРТ-У/150-М");
		МассСодержание.Добавить("ЛОКАЛЬНАЯ СИСТЕМА УПРАВЛЕНИЯ ДВУХКОТЕЛЬНОЙ УСТАНОВКОЙ (ПРАВАЯ МОДЕЛЬ), ЛОКАЛЬНАЯ СИСТЕМА УПРАВЛЕНИЯ ДВУХКОТЕЛЬНОЙ УСТАНОВКОЙ (ЛЕВАЯ МОДЕЛЬ), ЛОКАЛЬНАЯ СИСТЕМА УПРАВЛЕНИЯ ВСПОМОГАТЕЛЬНОГО КОТЛА");
		МассСодержание.Добавить("ОБЪЕДИНЕННЫЙ КОМПЛЕКТ ЗИП. МЕХАНИЧЕСКАЯ ЧАСТЬ");
	КонецЕсли; 
		
	КолТаблиц = Документ.Tables.Count;
	
	Для ТекТабл = 1 По КолТаблиц Цикл
		
		Таблица = Документ.Tables(ТекТабл);
		
		КолСтрок    = Таблица.Rows.Count;
		КолСтолбцов = Таблица.Columns.Count;
		Если НЕ КолСтолбцов = 8 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для сч = 1 По КолСтрок Цикл
			
			//ТекстЗнач = УдалитьЛишниеСимволы(СокрЛП(Таблица.Cell(сч, столбец).Range.Text));
			
			Стр1 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 1).Range.Text));
			Если стр1 = "" Тогда
				Стр1 = СокрЛП(УдалитьЛишниеСимволы(Строка(Таблица.Cell(сч, 1).Range.ListFormat.ListValue)));
				Стр1 = ?(Стр1="0", "", Стр1);
			КонецЕсли; 
			Стр2 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 2).Range.Text));
			Стр3 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 3).Range.Text));
			Стр4 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 4).Range.Text));
			Стр5 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 5).Range.Text));
			Стр6 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 6).Range.Text));
			Попытка	
				Стр7 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 7).Range.Text));
			Исключение
				//Стр7 = "";
				//Сообщить("Пропущена: " + Строка(сч));
				//Продолжить;
			КонецПопытки;
			
			Если Стр1="" И Стр2="" И Стр3="" И Стр4="" И Стр5="" Тогда // Пустые строки
				Продолжить;
			КонецЕсли; 
			Если Стр1="Позиция" И Стр2="Наименование" И Стр3="Обозначение" И Стр4="Единица измерения" Тогда // Типа шапка
				Продолжить;
			КонецЕсли; 
			Если Стр1="1" И Стр2="2" И Стр3="3" И Стр4="4" И Стр5="5" Тогда // шапка2 
				Продолжить;
			КонецЕсли; 
			Если СтрНайти(НРег(Стр2), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр2), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр2), "пакет") > 0 ИЛИ 
				СтрНайти(НРег(Стр2), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр2), "упаковка") > 0 Тогда
				Продолжить;
			КонецЕсли;         
			
			НовСтр = Табл956.Добавить();
			НовСтр.Позиция 		 = Стр1;
			НовСтр.Наименование  = Стр2;   
			НовСтр.Обозначение   = Стр3;
			НовСтр.ЕдИзмерения   = Стр4;
			НовСтр.МассаЕдиницы  = Стр5;
			НовСтр.Количество 	 = Стр6;
			НовСтр.МестоХранения = Стр7;
			НовСтр.КодЕдМассы    = "166"; // для 965 везде кг
			
			//Если сч % 100 = 0 Тогда
			//	Состояние("загрузка: " + Строка(сч));
			//КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	Документ.Close(); 
	Ворд.Quit();
		
	ИмяБезРасш = СокрЛП(ФайлЗагрузки);
	ЗагрузитьНаСервере956(ИмяБезРасш, МассСодержание);
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить956(ФайлЗагрузки = "")
	
	Если ФайлЗагрузки = "" Тогда
		Возврат;
	КонецЕсли; 
	
	Табл956.Очистить();
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 2 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 1).value);
		Стр2 = СокрЛП(ЛистЭксель.Cells(сч, 2).value);
		Стр3 = СокрЛП(ЛистЭксель.Cells(сч, 3).value);
		Стр4 = СокрЛП(ЛистЭксель.Cells(сч, 4).value);
		Стр5 = СокрЛП(ЛистЭксель.Cells(сч, 5).value);
		Стр6 = СокрЛП(ЛистЭксель.Cells(сч, 6).value);
		Стр7 = СокрЛП(ЛистЭксель.Cells(сч, 7).value);
		Стр8 = СокрЛП(ЛистЭксель.Cells(сч, 8).value);
		Стр9 = СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		
		Если Стр1="" И Стр2="" И Стр3="" И Стр4="" И Стр5="" Тогда // Пустые строки
			Продолжить;
		КонецЕсли; 
		Если Стр1="Позиция" И Стр2="Наименование" И Стр3="Обозначение" И Стр4="Единица измерения" Тогда // Типа шапка
			Продолжить;
		КонецЕсли; 
		Если Стр1="1" И Стр2="2" И Стр3="3" И Стр4="4" И Стр5="5" Тогда // шапка2 
			Продолжить;
		КонецЕсли; 
		Если СтрНайти(НРег(Стр2), "ящик") > 0   ИЛИ СтрНайти(НРег(Стр2), "сундук") > 0   ИЛИ СтрНайти(НРег(Стр2), "пакет") > 0 ИЛИ 
			 СтрНайти(НРег(Стр2), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр2), "упаковка") > 0 ИЛИ СтрНайти(НРег(Стр2), "полка") > 0 ИЛИ
			 СтрНайти(НРег(Стр2), "пенал") > 0  ИЛИ СтрНайти(НРег(Стр2), "стойка") > 0   ИЛИ СтрНайти(НРег(Стр2), "мешок") > 0 ИЛИ
			 СтрНайти(НРег(Стр2), "секция") > 0 ИЛИ СтрНайти(НРег(Стр2), "шкаф") > 0     ИЛИ СтрНайти(НРег(Стр2), "укладка") > 0 ИЛИ
			 СтрНайти(НРег(Стр2), "сумка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		
		НовСтр = Табл956.Добавить();
		НовСтр.Уровень 		 = Стр1;
		НовСтр.Тип		 	 = Стр2;
		НовСтр.Позиция 		 = Стр3;
		НовСтр.Наименование  = Стр4;   
		НовСтр.Обозначение   = Стр5;
		НовСтр.ЕдИзмерения   = СтрЗаменить(Стр6, ".", "");
		НовСтр.МассаЕдиницы  = Стр7;
		НовСтр.Количество 	 = Стр8;
		НовСтр.МестоХранения = Стр9;
		НовСтр.КодЕдМассы    = "166"; // для 965 везде кг
		
		//Если сч % 100 = 0 Тогда
		//	Состояние("загрузка: " + Строка(сч));
		//КонецЕсли;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	Если СтрНайти(ИмяФайла, "Exc_956ЭМ-059-005_ЗИ-К_часть_3_892") > 0 ИЛИ СтрНайти(ИмяФайла, "Exc_956ЭМ-059-005_ЗИ-К_часть_4_892") Тогда
		СоединитьСтроки();
	КонецЕсли; 
		
	ИмяБезРасш = СокрЛП(ФайлЗагрузки);
	ЗагрузитьНаСервере956(ИмяБезРасш, "");
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить956_ДЭ(ФайлЗагрузки = "")
	
	Если ФайлЗагрузки = "" Тогда
		Возврат;
	КонецЕсли; 
	
	Табл956.Очистить();
	
	Ворд = Новый COMОбъект("Word.Application"); 
	Ворд.Visible = Ложь;
	Ворд.Documents.Open(ФайлЗагрузки,, Истина); 
	
	Документ = Ворд.ActiveDocument(); 
	МассСодержание = новый Массив;
	
	Попытка
		
		КолСодер = Документ.TablesOfContents.Count;
		Для ТекС = 1 По КолСодер Цикл
			Содержание = Документ.TablesOfContents(ТекС).Range.Text;
			МассСтр = СтрРазделить(Содержание, Символы.ВК, Ложь); //СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Содержание, Символы.ВК, Истина)
			МассСодержание = Новый Массив;
			Цифры = "0123456789";
			Для каждого стр Из МассСтр Цикл
				Длина = СтрДлина(Стр);
				Пока НЕ длина = 0 Цикл
					Символ = Сред(Стр, Длина, 1);
					Если Найти(Цифры, Символ) > 0 Тогда
						стр = Сред(стр, 1, Длина-1);
					КонецЕсли;
					Если Символ = "	" ИЛИ Символ = " " Тогда
						стр = СокрЛП(стр);
						Прервать;
					КонецЕсли;
					длина = Длина-1;
				КонецЦикла;
				МассСодержание.Добавить(УдалитьЛишниеСимволы(стр));
			КонецЦикла; 
			Если МассСодержание.Количество() > 0 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	Исключение
		ааа= ОписаниеОшибки();
		МассСодержание = новый Массив;
	КонецПопытки; 
	
	КолТаблиц = Документ.Tables.Count;
	
	Для ТекТабл = 1 По КолТаблиц Цикл
		
		Таблица = Документ.Tables(ТекТабл);
		
		КолСтрок    = Таблица.Rows.Count;
		КолСтолбцов = Таблица.Columns.Count;
		Если НЕ КолСтолбцов = 9 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для сч = 1 По КолСтрок Цикл
			
			//ТекстЗнач = УдалитьЛишниеСимволы(СокрЛП(Таблица.Cell(сч, столбец).Range.Text));
			
			Стр1 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 1).Range.Text));
			Если стр1 = "" Тогда
				Стр1 = СокрЛП(УдалитьЛишниеСимволы(Строка(Таблица.Cell(сч, 1).Range.ListFormat.ListValue)));
				Стр1 = ?(Стр1="0", "", Стр1);
			КонецЕсли; 
			Стр2 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 2).Range.Text));
			Стр3 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 3).Range.Text));
			Стр4 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 7).Range.Text));
			Стр5 = ""; //СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 5).Range.Text));
			Стр6 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 8).Range.Text));
			Попытка	
				Стр7 = ""; //СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 7).Range.Text));
			Исключение
				//Стр7 = "";
				//Сообщить("Пропущена: " + Строка(сч));
				//Продолжить;
			КонецПопытки;
			
			Если Стр1="" И Стр2="" И Стр3="" И Стр4="" И Стр5="" Тогда // Пустые строки
				Продолжить;
			КонецЕсли; 
			Если Стр1="Позиция" И Стр2="Наименование" И Стр3="Обозначение" И Стр4="Единица измерения" Тогда // Типа шапка
				Продолжить;
			КонецЕсли; 
			Если Стр1="1" И Стр2="2" И Стр3="3" И Стр4="4" И Стр5="5" Тогда // шапка2 
				Продолжить;
			КонецЕсли; 
			Если СтрНайти(НРег(Стр2), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр2), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр2), "пакет") > 0 ИЛИ 
				СтрНайти(НРег(Стр2), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр2), "упаковка") > 0 Тогда
				Продолжить;
			КонецЕсли;         
			
			НовСтр = Табл956.Добавить();
			НовСтр.Позиция 		 = Стр1;
			НовСтр.Наименование  = Стр2;   
			НовСтр.Обозначение   = Стр3;
			НовСтр.ЕдИзмерения   = Стр4;
			НовСтр.МассаЕдиницы  = Стр5;
			НовСтр.Количество 	 = Стр6;
			НовСтр.МестоХранения = Стр7;
			
			//Если сч % 100 = 0 Тогда
			//	Состояние("загрузка: " + Строка(сч));
			//КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	Документ.Close(); 
	Ворд.Quit();
		
	ИмяБезРасш = СокрЛП(ФайлЗагрузки);
	ЗагрузитьНаСервере956(ИмяБезРасш, МассСодержание, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить956()
	
	Файл = Новый Файл(ИмяФайла);
	ТекИмяФайла = Файл.Имя;
	ТекПутьКФайлу = Файл.Путь;
	
	Загрузить956(ИмяФайла);
	
	Состояние(СокрЛП(Файл.ИмяБезРасширения));
	
	//ДЭ
	
	//Путь = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\для ОСК ВЕДОМОСТИ ЗИП ДЭ 956ЭМ";
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить956_ДЭ()
	
	НайдФайлы = НайтиФайлы(ИмяФайла, "*ДЭ*.doc", Истина);
	
	Для каждого Файл Из НайдФайлы Цикл
		//Файл = Новый Файл(ИмяФайла);
		ТекИмяФайла = Файл.Имя;
		ТекПутьКФайлу = Файл.Путь;
		
		Загрузить956_ДЭ(ТекПутьКФайлу+ТекИмяФайла);
		
		Состояние("ДЭ "+СокрЛП(Файл.ИмяБезРасширения));
		
	КонецЦикла; 
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТабл956()
	
	//Для каждого Стр Из Табл956 Цикл
	//	
	//	Стр.Позиция 	  = УдалитьЛишниеСимволыСервер(Стр.Позиция);
	//	Стр.Наименование  = УдалитьЛишниеСимволыСервер(Стр.Наименование);   
	//	Стр.Обозначение   = УдалитьЛишниеСимволыСервер(Стр.Обозначение);
	//	Стр.ЕдИзмерения   = УдалитьЛишниеСимволыСервер(Стр.ЕдИзмерения);
	//	Стр.МассаЕдиницы  = УдалитьЛишниеСимволыСервер(Стр.МассаЕдиницы);
	//	Стр.Количество 	  = УдалитьЛишниеСимволыСервер(Стр.Количество);
	//	Стр.МестоХранения = УдалитьЛишниеСимволыСервер(Стр.МестоХранения);		
	//	
	//КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти 

// 956 --


// ++ 1234
#Область з1234


&НаСервере
Функция ЗагрузитьНаСервере1234(Ексель=Ложь)
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	//НовСтр.Позиция 	   = Стр1;
	//НовСтр.Наименование  = Стр2;
	//НовСтр.Обозначение   = Стр3;
	//НовСтр.ЕдИзмерения   = Стр4;
	//НовСтр.МассаЕдиницы  = Стр5;
	//НовСтр.Количество    = Стр6;
	//НовСтр.МестоХранения = Стр7;
	
	Если Ексель Тогда
		
		Родители = Новый Массив;
		Родители.Вставить(0, СпрЗипПустая);
		
		Для каждого стр Из Табл956 Цикл
			
			//Перевод
			МассНаим = СтрРазделить(Стр.Наименование, Символы.ПС);    
			Если МассНаим.Количество() = 2 Тогда
				Наименование = МассНаим[0];
				Перевод      = МассНаим[1];
			Иначе
				Наименование = Стр.Наименование;
				Перевод = "";
			КонецЕсли; 
			
			Уровни = СтрРазделить(стр.Позиция, ".");
			КолУровней = Уровни.Количество();
			Если КолУровней = 1 Тогда
				РодительГр = СпрЗипПустая;
			Иначе
				РодительГр = ?(Родители.Количество() = 1, Родители[0], Родители[Число(КолУровней)-1]); // Родители.ВГраница()-1
			КонецЕсли;				
			ЭтоГрИзд = Ложь;
			Если НРег(стр.ЕдИзмерения) = "" Тогда // Группа
				Найд = СпрЗип.НайтиПоНаименованию(Наименование, Истина, РодительГр, Заказ);
				Если Найд = СпрЗипПустая Тогда
					СтруГруппа = Новый Структура;
					СтруГруппа.Вставить("Наименование", Наименование);
					Если НЕ Перевод = "" Тогда
						СтруГруппа.Вставить("Перевод",      Перевод);
						СтруГруппа.Вставить("Язык",      	"Французский");
					КонецЕсли; 
					СтруГруппа.Вставить("Родитель",     РодительГр);
					СтруГруппа.Вставить("Количество",   Стр.Количество);
					СтруГруппа.Вставить("Обозначение",  Стр.Обозначение);
					СтруГруппа.Вставить("ИдентификаторСтроки", Стр.Позиция);
					Родитель1 = СоздатьГруппу(СтруГруппа);
				Иначе
					Родитель1 = Найд;
				КонецЕсли;
				ЭтоГрИзд = Истина;
				//Продолжить;
			ИначеЕсли НРег(стр.ЕдИзмерения) = "компл" Тогда // Изделие
				
				//Инд = ?(Родители.Количество() = 1, 0, Родители.ВГраница()-1);
				Найд = СпрЗип.НайтиПоНаименованию(Наименование, Истина, РодительГр, Заказ);
				Если Найд = СпрЗипПустая Тогда
					Стру = Новый Структура;
					Стру.Вставить("Наименование", Наименование);
					Если НЕ Перевод = "" Тогда
						Стру.Вставить("Перевод",      Перевод);
						Стру.Вставить("Язык",      	"Французский");
					КонецЕсли; 
					Стру.Вставить("Родитель",     РодительГр);
					Стру.Вставить("Количество",   Стр.Количество);
					Стру.Вставить("Обозначение",  Стр.Обозначение);
					Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
					Родитель1 = СоздатьЭлемент(Стру);
				Иначе
					Родитель1 = Найд;
				КонецЕсли;
				ЭтоГрИзд = Истина;
				//Продолжить;
			КонецЕсли; 
			Если ЭтоГрИзд Тогда
				Если КолУровней = 1 Тогда
					Попытка
						Родители.Установить(1, Родитель1);
					Исключение
						Родители.Вставить(1,   Родитель1);
					КонецПопытки;
				ИначеЕсли КолУровней = 2 Тогда
					Попытка
						Родители.Установить(2, Родитель1);
					Исключение
						Родители.Вставить(2,   Родитель1);
					КонецПопытки;
				ИначеЕсли КолУровней = 3 Тогда
					Попытка
						Родители.Установить(3, Родитель1);
					Исключение
						Родители.Вставить(3,   Родитель1);
					КонецПопытки;
				КонецЕсли;
				Для инд = КолУровней+1 По Родители.ВГраница() Цикл
					ДелИнд = Родители.ВГраница();
					Родители.Удалить(ДелИнд);
					ДелИнд = ДелИнд - 1;
				КонецЦикла; 
				Продолжить;
			КонецЕсли; 

			// Зип
			
			Стру = Новый Структура;
			Стру.Вставить("Наименование", Наименование);
			Если НЕ Перевод = "" Тогда
				Стру.Вставить("Перевод",      Перевод);
				Стру.Вставить("Язык",      	"Французский");
			КонецЕсли; 
			Стру.Вставить("Родитель", 	  Родители[Родители.ВГраница()]);
			Стру.Вставить("КоличествоВЗИПБорт",   Стр.Количество);
			Стру.Вставить("Обозначение",  	  Стр.Обозначение);
			Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
			Стру.Вставить("ЭтоЗИП", Истина);
			Стру.Вставить("Вид", "ЗапаснаяЧасть");
			Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
			
			СоздатьЭлемент(Стру);
			
		КонецЦикла; 
		
	Иначе // ВОрд
		
		Родитель1 = СпрЗипПустая; 
		
		Для каждого стр Из Табл956 Цикл
			
			Если НРег(стр.ЕдИзмерения) = "компл" Тогда // Изделие
				Найд = СпрЗип.НайтиПоНаименованию(Стр.Наименование, Истина, СпрЗипПустая, Заказ);
				Если Найд = СпрЗипПустая Тогда
					Стру = Новый Структура;
					Стру.Вставить("Наименование", Стр.Наименование);
					Стру.Вставить("Родитель",     СпрЗипПустая);
					Стру.Вставить("Количество",   Стр.Количество);
					Стру.Вставить("Обозначение",  Стр.Обозначение);
					Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
					Родитель1 = СоздатьЭлемент(Стру);
				Иначе
					Родитель1 = Найд;
				КонецЕсли;
				Продолжить;
			ИначеЕсли стр.ЕдИзмерения = "" Тогда // Изделие
				Найд = СпрЗип.НайтиПоНаименованию(Стр.Наименование, Истина, СпрЗипПустая, Заказ);
				Если Найд = СпрЗипПустая Тогда
					Стру = Новый Структура;
					Стру.Вставить("Наименование", Стр.Наименование);
					Стру.Вставить("Родитель",     СпрЗипПустая);
					Стру.Вставить("Количество",   Стр.Количество);
					Стру.Вставить("Обозначение",  Стр.Обозначение);
					Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
					Родитель1 = СоздатьГруппу(Стру);
				Иначе
					Родитель1 = Найд;
				КонецЕсли;
				Продолжить;
			КонецЕсли; 
			
			// Зип
			
			Стру = Новый Структура;
			Стру.Вставить("Наименование",  Стр.Наименование);
			Стру.Вставить("Родитель", 	   Родитель1);
			Стру.Вставить("КоличествоВЗИПБорт",    Стр.Количество);
			Стру.Вставить("Обозначение",   Стр.Обозначение);
			Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
			Стру.Вставить("ЭтоЗИП", Истина);
			Стру.Вставить("Вид", "ЗапаснаяЧасть");
			Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
			
			СоздатьЭлемент(Стру);
			
		КонецЦикла; 
		
	КонецЕсли; 
		
КонецФункции

&НаКлиенте
Процедура Заполнить1234_Ворд()
	
	// Используем ту же таблицу
	Табл956.Очистить();
	
	Ворд = Новый COMОбъект("Word.Application"); 
	Ворд.Visible = Ложь;
	Ворд.Documents.Open(ИмяФайла,, Истина); 
	
	Документ = Ворд.ActiveDocument(); 
	
	Если Найти(ИмяФайла, "(803)-2") > 0 Тогда
		Таблица = Документ.Tables(2);
	Иначе
		Таблица = Документ.Tables(3);
	КонецЕсли; 
	
	КолСтрок    = Таблица.Rows.Count;
	КолСтолбцов = Таблица.Columns.Count;
	
	Для сч = 1 По КолСтрок Цикл
		
		//ТекстЗнач = УдалитьЛишниеСимволы(СокрЛП(Таблица.Cell(сч, столбец).Range.Text));
		                       
			Стр1 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 1).Range.Text));
	        Если стр1 = "" Тогда
				Стр1 = СокрЛП(УдалитьЛишниеСимволы(Строка(Таблица.Cell(сч, 1).Range.ListFormat.ListValue)));
				Стр1 = ?(Стр1="0", "", Стр1);
			КонецЕсли; 
			Стр2 = ""; //СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 2).Range.Text));
			Стр3 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 3).Range.Text));
			Стр4 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 4).Range.Text));
			Стр5 = ""; //СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 5).Range.Text));
			Стр6 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 5).Range.Text));
			Стр7 = "";
			
		Если Стр1="" И Стр3="" И Стр4="" Тогда // Пустые строки
			Продолжить;
		КонецЕсли; 
		Если Стр1="Позиция" И Стр2="Наименование" И Стр3="Обозначение" И Стр4="Единица измерения" Тогда // Типа шапка
			Продолжить;
		КонецЕсли; 
		Если Стр1="1" И Стр3="3" И Стр4="4" Тогда // шапка2 
			Продолжить;
		КонецЕсли; 
		
		НовСтр = Табл956.Добавить();
		НовСтр.Позиция 		 = Стр1;
		НовСтр.Наименование  = Стр3;   
		НовСтр.Обозначение   = Стр2;
		НовСтр.ЕдИзмерения   = Стр4;
		НовСтр.МассаЕдиницы  = Стр5;
		НовСтр.Количество 	 = Стр6;
		НовСтр.МестоХранения = Стр7;
		
	КонецЦикла; 
	
	Документ.Close(); 
	Ворд.Quit();
		
	ЗагрузитьНаСервере1234();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить1234_Эксель()
	
	// Используем ту же таблицу
	Табл956.Очистить();
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 12 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 2).value);
		Стр2 = СокрЛП(ЛистЭксель.Cells(сч, 3).value);
		Стр3 = СокрЛП(ЛистЭксель.Cells(сч, 4).value);
		Стр4 = СокрЛП(ЛистЭксель.Cells(сч, 5).value);
		Стр5 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 7).value);
		Стр6 = СокрЛП(ЛистЭксель.Cells(сч, 6).value);
		Стр7 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр8 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 10).value);
		
		Если Стр2 = "1" И Стр3="2" И Стр4="3" И Стр5="4" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		//Если СтрНайти(НРег(Стр5), "запасные части") Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		НовСтр = Табл956.Добавить();
		НовСтр.Позиция 		 = Стр1;
		НовСтр.Наименование  = Стр2 + Символы.ПС + СокрЛП(ЛистЭксель.Cells(сч+1, 3).value);;   
		НовСтр.Обозначение   = Стр3;
		НовСтр.ЕдИзмерения   = Стр4;
		НовСтр.МассаЕдиницы  = Стр5;
		НовСтр.Количество 	 = Стр6;
		НовСтр.МестоХранения = Стр7;
		
		сч=сч+1;
				
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
		
	ЗагрузитьНаСервере1234(Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере1234_2()
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	//НовСтр.Позиция 	   = Стр1;
	//НовСтр.Наименование  = Стр2;
	//НовСтр.Обозначение   = Стр3;
	//НовСтр.ЕдИзмерения   = Стр4;
	//НовСтр.МассаЕдиницы  = Стр5;
	//НовСтр.Количество    = Стр6;
	//НовСтр.МестоХранения = Стр7;
	РодительГр = СпрЗипПустая;
	
	Для каждого стр Из Табл956 Цикл
		
		Если НРег(стр.Обозначение) = "группа" Тогда // Группа
			СтруГруппа = Новый Структура;
			СтруГруппа.Вставить("Наименование", Стр.Наименование);
			СтруГруппа.Вставить("Родитель",     СпрЗипПустая);
			СтруГруппа.Вставить("Количество",   Стр.Количество);
			СтруГруппа.Вставить("Обозначение",  Стр.Обозначение);
			СтруГруппа.Вставить("ИдентификаторСтроки", Стр.Позиция);
			РодительГр = СоздатьГруппу(СтруГруппа);
			Продолжить;
		ИначеЕсли НРег(стр.Обозначение) = "изделие" Тогда // Изделие
			
			Стру = Новый Структура;
			Стру.Вставить("Наименование", Стр.Наименование);
			Стру.Вставить("Родитель",     РодительГр);
			Стру.Вставить("Количество",   Стр.Количество);
			Стру.Вставить("Обозначение",  Стр.Обозначение);
			Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
			Родитель1 = СоздатьЭлемент(Стру);
			Продолжить;
		КонецЕсли; 
		
		// Зип
		Стру = Новый Структура;
		Стру.Вставить("Наименование", Стр.Наименование);
		Стру.Вставить("Родитель", 	  Родитель1);
		Стру.Вставить("КоличествоВЗИПБорт",   Стр.Количество);
		Стру.Вставить("Обозначение",  	  Стр.Обозначение);
		Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
		Стру.Вставить("ЭтоЗИП", Истина);
		Стру.Вставить("Вид", "ЗапаснаяЧасть");
		Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
		
		СоздатьЭлемент(Стру);
		
	КонецЦикла; 
		
КонецФункции

&НаКлиенте
Процедура Заполнить1234_Эксель_2()
	
	// Используем ту же таблицу
	Табл956.Очистить();
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 3 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч,  9).value);
		Стр2 = СокрЛП(ЛистЭксель.Cells(сч, 10).value);
		Стр3 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 4).value);
		Стр4 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 5).value);
		Стр5 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 7).value);
		Стр6 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 6).value);
		Стр7 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр8 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 10).value);
		
		Если Стр2="" И Стр3="" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		//Если СтрНайти(НРег(Стр5), "запасные части") Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		НовСтр = Табл956.Добавить();
		НовСтр.Позиция 		 = "";
		НовСтр.Наименование  = Стр2;   
		НовСтр.Обозначение   = Стр1;
		НовСтр.ЕдИзмерения   = Стр4;
		НовСтр.МассаЕдиницы  = Стр5;
		НовСтр.Количество 	 = Стр6;
		НовСтр.МестоХранения = Стр7;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
		
	ЗагрузитьНаСервере1234_2();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить1234()
	
	Если Найти(ИмяФайла, "doc") > 0 Тогда
		Заполнить1234_Ворд();
	ИначеЕсли Найти(ИмяФайла, "1234.xls") > 0 Тогда
		Заполнить1234_Эксель_2();
	ИначеЕсли Найти(ИмяФайла, "xls") > 0 Тогда
		Заполнить1234_Эксель();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 
// -- 1234


// ++ 1159
#Область з1159

&НаСервере
Функция ЗагрузитьНаСервере1159(Ексель=Ложь)
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	//НовСтр.Позиция 	   = Стр1;
	//НовСтр.Наименование  = Стр2;
	//НовСтр.Обозначение   = Стр3;
	//НовСтр.ЕдИзмерения   = Стр4;
	//НовСтр.МассаЕдиницы  = Стр5;
	//НовСтр.Количество    = Стр6;
	//НовСтр.МестоХранения = Стр7;
	
	Если Ексель Тогда
		
		Родители = Новый Массив;
		Родители.Вставить(0, СпрЗипПустая);
		
		Для каждого стр Из Табл956 Цикл
			
			//Перевод
			МассНаим = СтрРазделить(Стр.Наименование, Символы.ПС);
			Если МассНаим.Количество() = 2 Тогда
				Наименование = МассНаим[0];
				Перевод      = МассНаим[1];
			Иначе
				Наименование = Стр.Наименование;
				Перевод = "";
			КонецЕсли; 
			
			Уровни = СтрРазделить(стр.Позиция, ".");
			Если стр.Позиция = "6.20.181" Тогда
				стр.ЕдИзмерения = "компл";
			КонецЕсли; 
			КолУровней = Уровни.Количество();
			Если КолУровней = 1 Тогда
				РодительГр = СпрЗипПустая;
			Иначе
				РодительГр = ?(Родители.Количество() = 1, Родители[0], Родители[Число(КолУровней)-1]);
			КонецЕсли;				
			ЭтоГрИзд = Ложь;
			Если НРег(стр.ЕдИзмерения) = "" Тогда // Группа
				Найд = СпрЗип.НайтиПоНаименованию(Наименование, Истина, РодительГр, Заказ);
				Если Найд = СпрЗипПустая Тогда
					СтруГруппа = Новый Структура;
					СтруГруппа.Вставить("Наименование", Наименование);
					Если НЕ Перевод = "" Тогда
						СтруГруппа.Вставить("Перевод",      Перевод);
						СтруГруппа.Вставить("Язык",      	  "Французский");
					КонецЕсли; 
					СтруГруппа.Вставить("Родитель",     РодительГр);
					СтруГруппа.Вставить("Количество",   Стр.Количество);
					СтруГруппа.Вставить("Обозначение",  Стр.Обозначение);
					СтруГруппа.Вставить("ИдентификаторСтроки", Стр.Позиция);
					Родитель1 = СоздатьГруппу(СтруГруппа);
				Иначе
					Родитель1 = Найд;
				КонецЕсли;
				ЭтоГрИзд = Истина;
				//Продолжить;
			ИначеЕсли НРег(стр.ЕдИзмерения) = "компл" Тогда // Изделие
				
				//Инд = ?(Родители.Количество() = 1, 0, Родители.ВГраница()-1);
				Найд = СпрЗип.НайтиПоНаименованию(Наименование, Истина, РодительГр, Заказ);
				Если Найд = СпрЗипПустая Тогда
					Стру = Новый Структура;
					Стру.Вставить("Наименование", Наименование);
					Если НЕ Перевод = "" Тогда
						Стру.Вставить("Перевод",      Перевод);
						Стру.Вставить("Язык",      	  "Французский");
					КонецЕсли; 
					Стру.Вставить("Родитель",     РодительГр);
					Стру.Вставить("Количество",   Стр.Количество);
					Стру.Вставить("Обозначение",  Стр.Обозначение);
					Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
					Родитель1 = СоздатьЭлемент(Стру);
				Иначе
					Родитель1 = Найд;
				КонецЕсли;
				ЭтоГрИзд = Истина;
				//Продолжить;
			КонецЕсли; 
			Если ЭтоГрИзд Тогда
				Если КолУровней = 1 Тогда
					Попытка
						Родители.Установить(1, Родитель1);
					Исключение
						Родители.Вставить(1,   Родитель1);
					КонецПопытки;
				ИначеЕсли КолУровней = 2 Тогда
					Попытка
						Родители.Установить(2, Родитель1);
					Исключение
						Родители.Вставить(2,   Родитель1);
					КонецПопытки;
				ИначеЕсли КолУровней = 3 Тогда
					Попытка
						Родители.Установить(3, Родитель1);
					Исключение
						Родители.Вставить(3,   Родитель1);
					КонецПопытки;
				КонецЕсли;
				Для инд = КолУровней+1 По Родители.ВГраница() Цикл
					ДелИнд = Родители.ВГраница();
					Родители.Удалить(ДелИнд);
					ДелИнд = ДелИнд - 1;
				КонецЦикла; 
				Продолжить;
			КонецЕсли; 

			// Зип
			
			Стру = Новый Структура;
			Стру.Вставить("Наименование", Наименование);
			Если НЕ Перевод = "" Тогда
				Стру.Вставить("Перевод",      Перевод);
				Стру.Вставить("Язык",      	  "Французский");
			КонецЕсли; 
			Стру.Вставить("Родитель", 	  Родители[Родители.ВГраница()]);
			Стру.Вставить("КоличествоВЗИПБорт",   Стр.Количество);
			Стру.Вставить("Обозначение",  Стр.Обозначение);
			Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
			Стру.Вставить("ЭтоЗИП", Истина);
			Стру.Вставить("Вид", "ЗапаснаяЧасть");
			Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
			
			СоздатьЭлемент(Стру);
			
		КонецЦикла; 
		
	Иначе // ВОрд
		
		РодительГр = СпрЗипПустая;
		Родитель1  = СпрЗипПустая; 
		
		Для каждого стр Из Табл956 Цикл
			
			Если НРег(стр.ЕдИзмерения) = "компл" Тогда // Изделие
				Найд = СпрЗип.НайтиПоНаименованию(Стр.Наименование, Истина, СпрЗипПустая, Заказ);
				Если Найд = СпрЗипПустая Тогда
					Стру = Новый Структура;
					Стру.Вставить("Наименование", Стр.Наименование);
					Стру.Вставить("Родитель",     СпрЗипПустая);
					Стру.Вставить("КоличествоВЗИПБорт",   Стр.Количество);
					Стру.Вставить("Обозначение",  Стр.Обозначение);
					Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
					Родитель1 = СоздатьЭлемент(Стру);
				Иначе
					Родитель1 = Найд;
				КонецЕсли;
				Продолжить;
			ИначеЕсли стр.ЕдИзмерения = "" Тогда // Изделие
				Найд = СпрЗип.НайтиПоНаименованию(Стр.Наименование, Истина, СпрЗипПустая, Заказ);
				Если Найд = СпрЗипПустая Тогда
					Стру = Новый Структура;
					Стру.Вставить("Наименование", Стр.Наименование);
					Стру.Вставить("Родитель",     СпрЗипПустая);
					Стру.Вставить("КоличествоВЗИПБорт",   Стр.Количество);
					Стру.Вставить("Обозначение",  Стр.Обозначение);
					Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
					Родитель1 = СоздатьГруппу(Стру);
				Иначе
					Родитель1 = Найд;
				КонецЕсли;
				Продолжить;
			КонецЕсли; 
			
			// Зип
			Стру = Новый Структура;
			Стру.Вставить("Наименование",  Стр.Наименование);
			Стру.Вставить("Родитель", 	   Родитель1);
			Стру.Вставить("КоличествоВЗИПБорт",    Стр.Количество);
			Стру.Вставить("Обозначение",   Стр.Обозначение);
			Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
			Стру.Вставить("ЭтоЗИП", Истина);
			Стру.Вставить("Вид", "ЗапаснаяЧасть");
			Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
			
			СоздатьЭлемент(Стру);
			
		КонецЦикла; 
		
	КонецЕсли; 
		
КонецФункции

&НаКлиенте
Процедура Заполнить1159_Ворд()
	
	// Используем ту же таблицу
	Табл956.Очистить();
	
	Ворд = Новый COMОбъект("Word.Application"); 
	Ворд.Visible = Ложь;
	Ворд.Documents.Open(ИмяФайла,, Истина); 
	
	Документ = Ворд.ActiveDocument(); 
	
	Если Найти(ИмяФайла, "(902)-2") > 0 Тогда
		Таблица = Документ.Tables(2);
	Иначе
		Таблица = Документ.Tables(2);
	КонецЕсли; 
	
	КолСтрок    = Таблица.Rows.Count;
	КолСтолбцов = Таблица.Columns.Count;
	
	Для сч = 1 По КолСтрок Цикл
		
		//ТекстЗнач = УдалитьЛишниеСимволы(СокрЛП(Таблица.Cell(сч, столбец).Range.Text));
		                       
			Стр1 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 1).Range.Text));
	        Если стр1 = "" Тогда
				Стр1 = СокрЛП(УдалитьЛишниеСимволы(Строка(Таблица.Cell(сч, 1).Range.ListFormat.ListValue)));
				Стр1 = ?(Стр1="0", "", Стр1);
			КонецЕсли; 
			Стр2 = ""; //СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 2).Range.Text));
			Стр3 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 3).Range.Text));
			Стр4 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 4).Range.Text));
			Стр5 = ""; //СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 5).Range.Text));
			Стр6 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 5).Range.Text));
			Стр7 = "";
			
		Если Стр1="" И Стр3="" И Стр4="" Тогда // Пустые строки
			Продолжить;
		КонецЕсли; 
		Если Стр1="Позиция" И Стр2="Наименование" И Стр3="Обозначение" И Стр4="Единица измерения" Тогда // Типа шапка
			Продолжить;
		КонецЕсли; 
		Если Стр1="1" И Стр3="3" И Стр4="4" Тогда // шапка2 
			Продолжить;
		КонецЕсли; 
		
		НовСтр = Табл956.Добавить();
		НовСтр.Позиция 		 = Стр1;
		НовСтр.Наименование  = Стр3;   
		НовСтр.Обозначение   = Стр2;
		НовСтр.ЕдИзмерения   = Стр4;
		НовСтр.МассаЕдиницы  = Стр5;
		НовСтр.Количество 	 = Стр6;
		НовСтр.МестоХранения = Стр7;
		
	КонецЦикла; 
	
	Документ.Close(); 
	Ворд.Quit();
		
	ЗагрузитьНаСервере1159();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить1159_Эксель()
	
	// Используем ту же таблицу
	Табл956.Очистить();
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 14 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 2).value);
		Стр2 = СокрЛП(ЛистЭксель.Cells(сч, 3).value);
		Стр3 = СокрЛП(ЛистЭксель.Cells(сч, 4).value);
		Стр4 = СокрЛП(ЛистЭксель.Cells(сч, 5).value);
		Стр5 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 7).value);
		Стр6 = СокрЛП(ЛистЭксель.Cells(сч, 6).value);
		Стр7 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр8 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 10).value);
		
		Если Стр2 = "1" И Стр3="2" И Стр4="3" И Стр5="4" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		//Если СтрНайти(НРег(Стр5), "запасные части") Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		НовСтр = Табл956.Добавить();
		НовСтр.Позиция 		 = Стр1;
		НовСтр.Наименование  = Стр2 + Символы.ПС + СокрЛП(ЛистЭксель.Cells(сч+1, 3).value);   
		НовСтр.Обозначение   = Стр3;
		НовСтр.ЕдИзмерения   = Стр4;
		НовСтр.МассаЕдиницы  = Стр5;
		НовСтр.Количество 	 = Стр6;
		НовСтр.МестоХранения = Стр7;
		
		сч=сч+1;
				
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
		
	ЗагрузитьНаСервере1159(Истина);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНаСервере1159_2()
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	//НовСтр.Позиция 	   = Стр1;
	//НовСтр.Наименование  = Стр2;
	//НовСтр.Обозначение   = Стр3;
	//НовСтр.ЕдИзмерения   = Стр4;
	//НовСтр.МассаЕдиницы  = Стр5;
	//НовСтр.Количество    = Стр6;
	//НовСтр.МестоХранения = Стр7;
	РодительГр = СпрЗипПустая;
	
	Для каждого стр Из Табл956 Цикл
		
		Если НРег(стр.Обозначение) = "группа" Тогда // Группа
			СтруГруппа = Новый Структура;
			СтруГруппа.Вставить("Наименование", Стр.Наименование);
			СтруГруппа.Вставить("Родитель",     СпрЗипПустая);
			СтруГруппа.Вставить("Количество",   Стр.Количество);
			СтруГруппа.Вставить("Обозначение",  Стр.Обозначение);
			СтруГруппа.Вставить("ИдентификаторСтроки", Стр.Позиция);
			РодительГр = СоздатьГруппу(СтруГруппа);
			Продолжить;
		ИначеЕсли НРег(стр.Обозначение) = "изделие" Тогда // Изделие
			
			Стру = Новый Структура;
			Стру.Вставить("Наименование", Стр.Наименование);
			Стру.Вставить("Родитель",     РодительГр);
			Стру.Вставить("Количество",   Стр.Количество);
			Стру.Вставить("Обозначение",  Стр.Обозначение);
			Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
			Родитель1 = СоздатьЭлемент(Стру);
			Продолжить;
		КонецЕсли; 
		
		// Зип
		Стру = Новый Структура;
		Стру.Вставить("Наименование", Стр.Наименование);
		Стру.Вставить("Родитель", 	  Родитель1);
		Стру.Вставить("КоличествоВЗИПБорт",   Стр.Количество);
		Стру.Вставить("Обозначение",  	  Стр.Обозначение);
		Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
		Стру.Вставить("ЭтоЗИП", Истина);
		Стру.Вставить("Вид", "ЗапаснаяЧасть");
		Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
		
		СоздатьЭлемент(Стру);
		
	КонецЦикла; 
		
КонецФункции

&НаКлиенте
Процедура Заполнить1159_Эксель_2()
	
	// Используем ту же таблицу
	Табл956.Очистить();
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	Для сч = 3 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 8).value);
		Стр2 = СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр3 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 4).value);
		Стр4 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 5).value);
		Стр5 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 7).value);
		Стр6 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 6).value);
		Стр7 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр8 = ""; //СокрЛП(ЛистЭксель.Cells(сч, 10).value);
		
		Если Стр2="" И Стр1="" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		//Если СтрНайти(НРег(Стр5), "запасные части") Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		НовСтр = Табл956.Добавить();
		НовСтр.Позиция 		 = "";
		НовСтр.Наименование  = Стр2;   
		НовСтр.Обозначение   = Стр1;
		НовСтр.ЕдИзмерения   = Стр4;
		НовСтр.МассаЕдиницы  = Стр5;
		НовСтр.Количество 	 = Стр6;
		НовСтр.МестоХранения = Стр7;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
		
	ЗагрузитьНаСервере1159_2();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить1159()
	
	Если Найти(ИмяФайла, "doc") > 0 Тогда
		Заполнить1159_Ворд();
	ИначеЕсли Найти(ИмяФайла, "1159.xls") > 0 Тогда
		Заполнить1159_Эксель_2();
	ИначеЕсли Найти(ИмяФайла, "xls") > 0 Тогда
		Заполнить1159_Эксель();
	КонецЕсли; 
	
КонецПроцедуры
#КонецОбласти 
// -- 1159


// ++ 11661

&НаСервере
Функция ЗагрузитьНаСервере11661()
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
//НовСтр.Позиция
//НовСтр.Наименование
//НовСтр.Обозначение
//НовСтр.ЕдИзмерения
//НовСтр.МассаЕдиницы
//НовСтр.Количество
//НовСтр.МестоХранения
//НовСтр.КодЕдМассы
//НовСтр.УслНаименование
//НовСтр.КодЕдИзмерения
//НовСтр.Поставщик
//НовСтр.ПроцТехГотовности
//НовСтр.КодВидаДокумента
	
	Родитель1  = СпрЗипПустая; 
	
	Для каждого стр Из Табл11661 Цикл
		
		Уровень = СтрРазделить(стр.Позиция, ".").Количество();
		Если Уровень = 1 Тогда
			Родитель1 = СпрЗипПустая;
		КонецЕсли; 
		
		// Зип
		Стру = Новый Структура;
		Стру.Вставить("Наименование",  Стр.Наименование);
		Стру.Вставить("Родитель", 	   Родитель1);
		Стру.Вставить("Количество",    Стр.Количество);
		Стру.Вставить("Обозначение",   Стр.Обозначение);
		//Стру.Вставить("ЭтоЗИП", Истина);
		Стру.Вставить("МассаЕдиницы",  Стр.МассаЕдиницы);
		Стру.Вставить("МестоХранения", Стр.МестоХранения);
		Стру.Вставить("КодМассы",      Стр.КодЕдМассы);
		Стру.Вставить("УслНаименование",   Стр.УслНаименование);
		Стру.Вставить("ЕдиницаИзмерения",  Стр.ЕдИзмерения);
		Стру.Вставить("КодЕдИзмерения",    Стр.КодЕдИзмерения);
		Стру.Вставить("Поставщик",    	   Стр.Поставщик);
		Стру.Вставить("ПроцТехГотовности", Стр.ПроцТехГотовности);
		Стру.Вставить("КодВидаДокумента",  Стр.КодВидаДокумента);
		Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
		
		Родитель1 = СоздатьЭлемент(Стру);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура Загрузить11661()
	
	Табл11661.Очистить();
	
	Ворд = Новый COMОбъект("Word.Application"); 
	Ворд.Visible = Ложь;
	Ворд.Documents.Open(ИмяФайла,, Истина); 
	
	Документ = Ворд.ActiveDocument(); 
	
	КолТаблиц = Документ.Tables.Count;
	
	Для ТекТабл = 1 По КолТаблиц Цикл
		
		Таблица = Документ.Tables(ТекТабл);
		
		КолСтрок    = Таблица.Rows.Count;
		КолСтолбцов = Таблица.Columns.Count;
		
		Если НЕ КолСтолбцов = 15 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для сч = 1 По КолСтрок Цикл
			Попытка
				Стр1  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  1).Range.Text));
				Если СтрНайти(Стр1, "Форма ЭЛ") > 0 Тогда
					Продолжить;
				КонецЕсли; 
			Исключение
			    Стр1 = "";
			КонецПопытки;
			Попытка
				Стр2  = СокрЛП(УдалитьЛишниеСимволы1(Таблица.Cell(сч,  2).Range.Text));
			Исключение
			    Стр2 = "";
			КонецПопытки;
			Попытка
				Стр3  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  3).Range.Text));
			Исключение
			    Стр3 = "";
			КонецПопытки;
			Попытка
				Стр4  = ""; //СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  4).Range.Text));
			Исключение
			    Стр4 = "";
			КонецПопытки;
			Попытка
				Стр5  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  5).Range.Text));
			Исключение
			    Стр5 = "";
			КонецПопытки;
			Попытка
				Стр6  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  6).Range.Text));
			Исключение
			    Стр6 = "";
			КонецПопытки;
			Попытка
				Стр7  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  7).Range.Text));
			Исключение
			    Стр7 = "";
			КонецПопытки;
			Попытка
				Стр8  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  8).Range.Text));
			Исключение
			    Стр8 = "";
			КонецПопытки;
			Попытка
				Стр9  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  9).Range.Text));
			Исключение
			    Стр9 = "";
			КонецПопытки;
			Попытка
				Стр10 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 10).Range.Text));
			Исключение
			    Стр10 = "";
			КонецПопытки;
			Попытка
				Стр13 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 12).Range.Text));
			Исключение
			    Стр13 = "";
			КонецПопытки;
			Попытка
				Стр14 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 13).Range.Text));
			Исключение
			    Стр14 = "";
			КонецПопытки;
			
			Если Стр3="" И Стр4="" И Стр5="" Тогда // Пустые строки
				Продолжить;
			КонецЕсли; 
			Если Стр1="Поз." И СтрНайти(Стр2, "Наименование") > 0 Тогда // Типа шапка
				Продолжить;
			КонецЕсли; 
			Если Стр1="1" И Стр3="3" И Стр5="5" И Стр6="6" Тогда // шапка2 
				Продолжить;
			КонецЕсли; 
			
			НовСтр = Табл11661.Добавить();
			НовСтр.Позиция 		 = Стр1;
			НовСтр.Наименование  = Стр2 + " " + Стр3;   
			НовСтр.Обозначение   = Стр5;
			НовСтр.ЕдИзмерения   = "";
			НовСтр.МассаЕдиницы  = Стр7;
			НовСтр.Количество 	 = Стр9;
			НовСтр.КодЕдМассы    = Стр6;
			НовСтр.УслНаименование = Стр3;
			НовСтр.КодЕдИзмерения  = Стр8;
			НовСтр.Поставщик       = Стр10;
			НовСтр.ПроцТехГотовности = Стр13;
			НовСтр.КодВидаДокумента  = Стр14;
			
//НовСтр.Позиция
//НовСтр.Наименование
//НовСтр.Обозначение
//НовСтр.ЕдИзмерения
//НовСтр.МассаЕдиницы
//НовСтр.Количество
//НовСтр.МестоХранения
//НовСтр.КодЕдМассы
//НовСтр.УслНаименование
//НовСтр.КодЕдИзмерения
//НовСтр.Поставщик
//НовСтр.ПроцТехГотовности
//НовСтр.КодВидаДокумента
		КонецЦикла; 
		
	КонецЦикла; 
	
	Документ.Close(); 
	Ворд.Quit();
		
	ЗагрузитьНаСервере11661();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить11661()
	
	Каталог = ИмяФайла;
	масс = НайтиФайлы(Каталог, "*.doc", Истина);
	
	Для каждого Файл Из масс Цикл
		
		ТекИмяФайла = Файл.Имя;
		ТекПутьКФайлу = Файл.Путь;
		ИмяФайла = ТекПутьКФайлу + ТекИмяФайла;
		
		Загрузить11661();
		
	КонецЦикла; 
	//Если Найти(ИмяФайла, "doc") > 0 Тогда
	//	Загрузить11661();
	//КонецЕсли; 
	
КонецПроцедуры


// -- 11661

// ++ 11356
&НаСервере
Функция ВернутьГруппуПоИмениФайлаДля356(ФайлИмя = "")
	
	ФайлИмя = СтрЗаменить(ФайлИмя, "W:\КТ\зип-Э\Янтарь\Ведомости 11356", "");
	ФайлИмя = СтрЗаменить(ФайлИмя, ".doc", "");
	
	ФайлИмя = СокрЛП(ФайлИмя); 
	ИмяГруппы = "";
	Если Найти(ФайлИмя, "208.002") > 0 Тогда
		ИмяГруппы = "Импортное оборудование";
	ИначеЕсли Найти(ФайлИмя, "208.020") > 0 Тогда
		ИмяГруппы = "Импортные фитинги";
	ИначеЕсли Найти(ФайлИмя, "208.031") > 0 Тогда
		ИмяГруппы = "Предметы снабжения (покупные)";
	ИначеЕсли Найти(ФайлИмя, "208.032") > 0 Тогда
		ИмяГруппы = "Предметы снабжения (инструмент)";
	ИначеЕсли Найти(ФайлИмя, "218.001") Тогда
		ИмяГруппы = "Поковки и отливки";
	ИначеЕсли Найти(ФайлИмя, "228.001") > 0 Тогда
		ИмяГруппы = "Дельные вещи и спасательные средства (СНГ)";
	ИначеЕсли Найти(ФайлИмя, "228.002") > 0 Тогда
		ИмяГруппы = "Дельные вещи и спасательные средства (Россия)";
	ИначеЕсли Найти(ФайлИмя, "238.002") > 0 Тогда
		ИмяГруппы = "Мебель и предметы оборудования помещений";
	ИначеЕсли Найти(ФайлИмя, "238.004") > 0 Тогда
		ИмяГруппы = "Скобяные изделия";
	ИначеЕсли Найти(ФайлИмя, "248.001") > 0 Тогда
		ИмяГруппы = "Механическое оборудование (СНГ)";
	ИначеЕсли Найти(ФайлИмя, "248.002") > 0 Тогда
		ИмяГруппы = "Механическое оборудование (Россия)";
	ИначеЕсли Найти(ФайлИмя, "248.005") > 0 Тогда
		ИмяГруппы = "Разное механическое оборудование";
	ИначеЕсли Найти(ФайлИмя, "248.007") > 0 Тогда
		ИмяГруппы = "Система и аппаратура управления";
	ИначеЕсли Найти(ФайлИмя, "248.009") > 0 Тогда
		ИмяГруппы = "Контрольно-измерительные приборы (СНГ)";
	ИначеЕсли Найти(ФайлИмя, "248.010") > 0 Тогда
		ИмяГруппы = "Контрольно-измерительные приборы (Россия)";
	ИначеЕсли Найти(ФайлИмя, "248.012") > 0 Тогда
		ИмяГруппы = "Дозиметрические приборы";
	ИначеЕсли Найти(ФайлИмя, "258.001") > 0 Тогда
		ИмяГруппы = "Арматура ОКС и трубопроводов (СНГ)";
	ИначеЕсли Найти(ФайлИмя, "258.002") > 0 Тогда
		ИмяГруппы = "Арматура ОКС и трубопроводов (Россия)";
	ИначеЕсли Найти(ФайлИмя, "258.005") > 0 Тогда
		ИмяГруппы = "Арматура вентиляции";
	ИначеЕсли Найти(ФайлИмя, "258.007") > 0 Тогда
		ИмяГруппы = "Изделия системы кондиционирования воздуха (СНГ)";
	ИначеЕсли Найти(ФайлИмя, "258.008") > 0 Тогда
		ИмяГруппы = "Изделия системы кондиционирования воздуха (Россия)";
	ИначеЕсли Найти(ФайлИмя, "258.010") > 0 Тогда
		ИмяГруппы = "Электровентиляторы";
	ИначеЕсли Найти(ФайлИмя, "268.001") > 0 Тогда
		ИмяГруппы = "Электрооборудование сильного тока";
	ИначеЕсли Найти(ФайлИмя, "268.002") > 0 Тогда
		ИмяГруппы = "Освещение";
	ИначеЕсли Найти(ФайлИмя, "268.004") > 0 Тогда
		ИмяГруппы = "Аппаратура внутренней связи";
	ИначеЕсли Найти(ФайлИмя, "268.005") > 0 Тогда
		ИмяГруппы = "Нестандартные электрораспределительные щиты";
	ИначеЕсли Найти(ФайлИмя, "268.019") > 0 Тогда
		ИмяГруппы = "Радиоэлектронное оборудование";
	ИначеЕсли Найти(ФайлИмя, "268.022") > 0 Тогда
		ИмяГруппы = "Навигационное оборудование";
	ИначеЕсли Найти(ФайлИмя, "268.023") > 0 Тогда
		ИмяГруппы = "Электротехническое оборудование";
	ИначеЕсли Найти(ФайлИмя, "268.031") > 0 Тогда
		ИмяГруппы = "Электрооборудование (снабжение)";
	ИначеЕсли Найти(ФайлИмя, "278.002") > 0 Тогда
		ИмяГруппы = "Специальные изделия";
	КонецЕсли;

	Стру= Новый Структура;
	Стру.Вставить("ИмяГруппы", ИмяГруппы);
	
	Возврат Стру;
	
КонецФункции

&НаСервере
Функция ЗагрузитьНаСервере11356()
	
	Группы = ВернутьГруппуПоИмениФайлаДля356(ИмяФайла);
	ВерхУровень  = НайтиСоздатьГруппуВерхУровня("Заказные ведомости"); 
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	
	Стру = Новый Структура;
	Если Группы.Свойство("ИмяГруппы") Тогда
		Стру.Вставить("Наименование", Группы.ИмяГруппы);
		Стру.Вставить("ИдентификаторСтроки", "00001");
		Стру.Вставить("Родитель", ВерхУровень);
		РодительВерхУровня = СоздатьГруппу(Стру);
	Иначе
		РодительВерхУровня = ВерхУровень;
	КонецЕсли; 
//НовСтр.Позиция
//НовСтр.Наименование
//НовСтр.Обозначение
//НовСтр.ЕдИзмерения
//НовСтр.МассаЕдиницы
//НовСтр.Количество
//НовСтр.МестоХранения
//НовСтр.КодЕдМассы
//НовСтр.УслНаименование
//НовСтр.КодЕдИзмерения
//НовСтр.Поставщик
//НовСтр.ПроцТехГотовности
//НовСтр.КодВидаДокумента
	
	ЭтоИзделиеРодитель = Ложь;
	Родитель1 = РодительВерхУровня;
	
	Для каждого стр Из Табл11661 Цикл
		
		Если ЭтоИзделиеРодитель Тогда
			Если НЕ Стр.Позиция = "" Тогда
				ЭтоИзделиеРодитель = Ложь;
				Родитель1 = РодительВерхУровня; 
			КонецЕсли; 
		КонецЕсли; 
		
		Если Стр.Позиция = "" Тогда
			//Стру.Вставить("Родитель", РодительВерхУровня);
			//Родитель1 = СоздатьГруппу(Стру);
			Продолжить;
		КонецЕсли; 
		
		// Зип
		Стру = Новый Структура;
		Стру.Вставить("Наименование",  Стр.Наименование);
		Стру.Вставить("Родитель", 	   Родитель1);
		Стру.Вставить("Количество",    Стр.Количество);
		Стру.Вставить("ДокНаПоставку", Стр.Обозначение);
		//Стру.Вставить("Обозначение",   Стр.Обозначение);
		Стру.Вставить("МассаЕдиницы",  Стр.МассаЕдиницы);
		Стру.Вставить("МестоХранения", Стр.МестоХранения);
		Стру.Вставить("КодМассы",      Стр.КодЕдМассы);
		Стру.Вставить("УслНаименование",   Стр.УслНаименование);
		Стру.Вставить("ЕдиницаИзмерения",  Стр.ЕдИзмерения);
		Стру.Вставить("КодЕдИзмерения",    Стр.КодЕдИзмерения);
		Стру.Вставить("Поставщик",    	   Стр.Поставщик);
		Стру.Вставить("ПроцТехГотовности", Стр.ПроцТехГотовности);
		Стру.Вставить("КодВидаДокумента",  Стр.КодВидаДокумента);
		Стру.Вставить("ИдентификаторСтроки", Стр.Позиция);
		
		ТекЭлемент = СоздатьЭлемент(Стру, Истина);
		
		Если СтрНайти(НРег(Стр.Наименование), "в составе") > 0 ИЛИ СтрНайти(НРег(Стр.Наименование), "в том числе") > 0 Тогда
			Родитель1 = ТекЭлемент;
			ЭтоИзделиеРодитель = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуПоставщиков(Таблица)
	
	ТаблПоставщиков.Очистить();
	
	КолСтрок    = Таблица.Rows.Count;
	Для сч = 1 По КолСтрок Цикл
		
		Попытка
			Стр1  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  1).Range.Text));
			Стр2  = СокрЛП(УдалитьЛишниеСимволы1(Таблица.Cell(сч,  2).Range.Text));
			Стр3  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  3).Range.Text));
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Стр1="" И Стр2="" И Стр3="" Тогда // Пустые строки
			Продолжить;
		КонецЕсли; 
		
		НовСтр = ТаблПоставщиков.Добавить();
		НовСтр.Индекс	 = Стр1;
		НовСтр.Поставщик = Стр2;
		НовСтр.Адрес 	 = Стр3;
		
	КонецЦикла;
	
КонецПроцедуры
 
&НаКлиенте
Процедура Загрузить11356()
	
	Табл11661.Очистить(); // Таблица та же
	
	Ворд = Новый COMОбъект("Word.Application"); 
	Ворд.Visible = Ложь;
	Ворд.Documents.Open(ИмяФайла,, Истина); 
	
	Документ = Ворд.ActiveDocument(); 
	
	КолТаблиц = Документ.Tables.Count;
	
	Для ТекТабл = 1 По КолТаблиц Цикл
		
		Таблица = Документ.Tables(ТекТабл);
		
		КолСтрок    = Таблица.Rows.Count;
		КолСтолбцов = Таблица.Columns.Count;
		
		Если КолСтолбцов = 3 Тогда // Поставщики
			ЗаполнитьТаблицуПоставщиков(Таблица);
			Продолжить;
		КонецЕсли; 
		
		Если НЕ КолСтолбцов = 15 Тогда
			Продолжить;
		КонецЕсли; 
		
		Для сч = 1 По КолСтрок Цикл
			Попытка
				Стр1 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  1).Range.Text));
			Исключение
			    Стр1 = "";
			КонецПопытки;
			Попытка
				Стр2 = СокрЛП(УдалитьЛишниеСимволы1(Таблица.Cell(сч,  2).Range.Text));
				Если Стр2 = "." Тогда
					Стр2 = "";
				КонецЕсли; 
			Исключение
			    Стр2 = "";
			КонецПопытки;
			Попытка
				Стр3 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  3).Range.Text));
			Исключение
			    Стр3 = "";
			КонецПопытки;
			Попытка
				Стр4 = ""; //СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  4).Range.Text));
			Исключение
			    Стр4 = "";
			КонецПопытки;
			Попытка
				Стр5 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  5).Range.Text));
			Исключение
			    Стр5 = "";
			КонецПопытки;
			Попытка
				Стр6  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  6).Range.Text));
			Исключение
			    Стр6 = "";
			КонецПопытки;
			Попытка
				Стр7  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  7).Range.Text));
			Исключение
			    Стр7 = "";
			КонецПопытки;
			Попытка
				Стр8  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  8).Range.Text));
			Исключение
			    Стр8 = "";
			КонецПопытки;
			Попытка
				Стр9  = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч,  9).Range.Text));
			Исключение
			    Стр9 = "";
			КонецПопытки;
			Попытка
				Стр10 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 10).Range.Text));
			Исключение
			    Стр10 = "";
			КонецПопытки;
			Попытка
				Стр13 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 12).Range.Text));
			Исключение
			    Стр13 = "";
			КонецПопытки;
			Попытка
				Стр14 = СокрЛП(УдалитьЛишниеСимволы(Таблица.Cell(сч, 13).Range.Text));
			Исключение
			    Стр14 = "";
			КонецПопытки;
			
			Если Стр2="" И Стр3="" И Стр4="" И Стр5="" Тогда // Пустые строки
				Продолжить;
			КонецЕсли; 
			Если СтрНайти(Стр1, "Позиция") > 0 И СтрНайти(Стр2, "Наименование") > 0 Тогда // Типа шапка
				Продолжить;
			КонецЕсли; 
			Если Стр1="1" И Стр3="3" И Стр5="5" И Стр6="6" Тогда // шапка2 
				Продолжить;
			КонецЕсли; 
			
			Найд = ТаблПоставщиков.НайтиСтроки(Новый Структура("Индекс", Стр10));
			Если Найд.Количество() > 0 Тогда
				Пост = Найд[0].Поставщик;
			Иначе
				Пост = Стр10;
			КонецЕсли; 
			
			НовСтр = Табл11661.Добавить();
			НовСтр.Позиция 		 = Стр1;
			НовСтр.Наименование  = Стр2 + " " + Стр3;   
			НовСтр.Обозначение   = Стр5;
			НовСтр.ЕдИзмерения   = "";
			НовСтр.МассаЕдиницы  = Стр7;
			НовСтр.Количество 	 = Стр9;
			НовСтр.КодЕдМассы    = Стр6;
			НовСтр.УслНаименование = Стр3;
			НовСтр.КодЕдИзмерения  = Стр8;
			НовСтр.Поставщик       = Пост;
			НовСтр.ПроцТехГотовности = Стр13;
			НовСтр.КодВидаДокумента  = Стр14;
			
//НовСтр.Позиция
//НовСтр.Наименование
//НовСтр.Обозначение
//НовСтр.ЕдИзмерения
//НовСтр.МассаЕдиницы
//НовСтр.Количество
//НовСтр.МестоХранения
//НовСтр.КодЕдМассы
//НовСтр.УслНаименование
//НовСтр.КодЕдИзмерения
//НовСтр.Поставщик
//НовСтр.ПроцТехГотовности
//НовСтр.КодВидаДокумента
		КонецЦикла; 
		
	КонецЦикла; 
	
	Документ.Close(); 
	Ворд.Quit();
		
	ЗагрузитьНаСервере11356();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить11356()
	
	Каталог = ИмяФайла;
	масс = НайтиФайлы(Каталог, "*.doc", Истина);
	
	Для каждого Файл Из масс Цикл
		
		ТекИмяФайла = Файл.Имя;
		ТекПутьКФайлу = Файл.Путь;
		ИмяФайла = ТекПутьКФайлу + ТекИмяФайла;
		
		Если СтрНайти(ТекИмяФайла, "мебель11356") > 0 ИЛИ СтрНайти(ТекИмяФайла, "360069") > 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Загрузить11356();
		
	КонецЦикла; 
	
КонецПроцедуры

// -- 11356


// +++ 06360

&НаСервере
Функция ЗагрузитьНаСервере06360()
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	РодительВерх = СпрЗипПустая;	
	
	//НовСтр.Обозначение 	  = Стр3 + ?(Стр31="", "", " (" +Стр31+")");
	//НовСтр.ДокНаПоставку  = "";
	//НовСтр.Наименование   = Стр5;
	//НовСтр.ЕдИзмерения 	  = Стр4;
	//НовСтр.Количество 	  = Стр7;
	//НовСтр.КоличествоЗИП  = Стр11;
	//НовСтр.КоличествоБаза = "";
	//НовСтр.Уровень		  = Стр2; // имя группы
	//НовСтр.КодЕдМассы	  = Стр8;
	//НовСтр.МассаЕдиницы   = Стр9;
	//НовСтр.Поставщик      = Стр6;
	//НовСтр.ПроцГотовности = Стр10
	
	Для каждого Стр Из Табл06360 Цикл
		
		Найд = СпрЗип.НайтиПоНаименованию(Стр.Уровень, Истина, РодительВерх, Заказ);
		Если Найд = СпрЗипПустая Тогда
			СтруГруппа = Новый Структура;
			СтруГруппа.Вставить("Количество",   Стр.Количество);
			СтруГруппа.Вставить("Наименование", Стр.Уровень);
			СтруГруппа.Вставить("Родитель",     РодительВерх);
			СтруГруппа.Вставить("ИдентификаторСтроки", Стр.НомПП);
			Родитель = СоздатьГруппу(СтруГруппа);
		Иначе
			Родитель = Найд;
		КонецЕсли; 
		
		Стру = Новый Структура;
		Стру.Вставить("Наименование",  Стр.Наименование);
		Стру.Вставить("Родитель", 	   Родитель);
		Стру.Вставить("Количество",    Стр.Количество);
		Стру.Вставить("КоличествоВЗИПБорт", Стр.КоличествоЗИП);
		Стру.Вставить("КоличествоВЗИПБаза", Стр.КоличествоБаза);
		Стру.Вставить("Обозначение",   Стр.Обозначение);
		Стру.Вставить("ДокНаПоставку", Стр.ДокНаПоставку);
		Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
		Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
		Если НЕ Стр.МассаЕдиницы = "" Тогда
			Стру.Вставить("МассаЕдиницы", Стр.МассаЕдиницы);
			Стру.Вставить("КодМассы", Стр.КодЕдМассы);
		КонецЕсли; 
		Если НЕ Стр.ПроцГотовности = "" Тогда
			Стру.Вставить("ПроцТехГотовности", Стр.ПроцГотовности);
		КонецЕсли; 
		Если НЕ Стр.Поставщик = "" Тогда
			Стру.Вставить("Поставщик", Стр.Поставщик);
		КонецЕсли; 
		
		СоздатьЭлемент(Стру);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура Загрузить06360_1()
	
	Эксель = ПодключитсяКЭксель();
	
	Табл06360.Очистить();
	
	// Лист оборудование
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	номпп=0;
	Для сч = 5 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1  = ""; //СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 14).value));
		Стр2  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 4).value));
		Стр3  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 10).value));
		Стр31 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 12).value));
		Стр4  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 16).value));
		Стр5  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 25).value));
		Стр6  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 30).value));
		Стр7  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 17).value));
		Стр8  = СокрЛП(ЛистЭксель.Cells(сч, 14).value);
		Стр9  = СокрЛП(ЛистЭксель.Cells(сч, 15).value);
		Стр10 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 23).value));
		Стр11 = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 18).value));
		
		Если Стр5 = "" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		
		номпп=номпп+1;
		НовСтр = Табл06360.Добавить();
		НовСтр.НомПП = номпп;
		НовСтр.Обозначение 	  = Стр3 + ?(Стр31="", "", " (" +Стр31+")");
		НовСтр.ДокНаПоставку  = "";
		НовСтр.Наименование   = Стр5;
		НовСтр.ЕдИзмерения 	  = Прав(Стр4, 3);
		НовСтр.Количество 	  = Стр7;
		НовСтр.КоличествоЗИП  = Стр11;
		НовСтр.КоличествоБаза = "";
		НовСтр.Уровень		  = Стр2; // имя группы
		НовСтр.КодЕдМассы	  = Прав(Стр8, 3);
		НовСтр.МассаЕдиницы   = ?(Стр9="0", "", Стр9);
		НовСтр.Поставщик      = Стр6;
		НовСтр.ПроцГотовности = Стр10
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	ЗагрузитьНаСервере06360();
			
КонецПроцедуры

&НаКлиенте
Процедура Загрузить06360_2()
	
	Сообщить("Загрузка данных начата в "+Строка(ТекущаяДата())); //2017070401 04.07.2017 Веденеев П.
	
	Эксель = ПодключитсяКЭксель();
	
	Табл06360.Очистить();
	
	// Лист оборудование
	ЛистЭксель = Эксель.WorkSheets(2); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	номпп=0;
	Для сч = 2 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		//++2017070401 04.07.2017 Веденеев П. //вывод прогресса загрузки
		ТекПрогресс=Окр(100*сч/ВсегоСтрок,0);
		Состояние("Выполняется чтение из файла",ТекПрогресс);
		//++2017070401 04.07.2017 Веденеев П.
		
		Стр1  = ""; //СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 14).value));
		Стр2  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 4).value));
		Стр3  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 14).value));
		Стр31 = ""; //СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 12).value));
		Стр4  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 11).value));
		Стр5  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 33).value));
		Стр6  = ""; //СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 30).value));
		Стр7  = СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 12).value));
		Стр8  = ""; //СокрЛП(ЛистЭксель.Cells(сч, 14).value);
		Стр9  = СокрЛП(ЛистЭксель.Cells(сч, 13).value);
		Стр10 = ""; //СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 23).value));
		Стр11 = ""; //СокрЛП(УдалитьЛишниеСимволы(ЛистЭксель.Cells(сч, 18).value));
		
		Если Стр5 = "" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Или Не ЗначениеЗаполнено(Стр4) Тогда //++ 2017070301 05.07.17 Веденеев П.А. //загрузка данных Севмаш - условие по отсечению материалов (нет ед.изм.)
			Продолжить;
		КонецЕсли;         
		
		номпп=номпп+1;
		НовСтр = Табл06360.Добавить();
		НовСтр.НомПП = номпп;
		НовСтр.Обозначение 	  = Стр3 + ?(Стр31="", "", " (" +Стр31+")");
		НовСтр.ДокНаПоставку  = "";
		НовСтр.Наименование   = Стр5;
		НовСтр.ЕдИзмерения 	  = Стр4;
		НовСтр.Количество 	  = Стр7;
		НовСтр.КоличествоЗИП  = Стр11;
		НовСтр.КоличествоБаза = "";
		НовСтр.Уровень		  = Стр2; // имя группы
		НовСтр.КодЕдМассы	  = "166"; // кг жестко
		НовСтр.МассаЕдиницы   = ?(Стр9="0", "", Стр9);
		НовСтр.Поставщик      = Стр6;
		НовСтр.ПроцГотовности = Стр10
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	Состояние("Выполняется запись данных в базу"); //2017070401 04.07.2017 Веденеев П.
	
	ЗагрузитьНаСервере06360();
	
	Сообщить("Загрузка данных окончена в "+Строка(ТекущаяДата())); //2017070401 04.07.2017 Веденеев П.
			
КонецПроцедуры

&НаКлиенте
Процедура Заполнить06360()
	
	Файл = Новый Файл(ИмяФайла);
	ТекИмяФайла   = Файл.Имя;
	ТекПутьКФайлу = Файл.Путь;
	                               
	Если СтрНайти(НРег(ИмяФайла), "взизд_06360") > 0 Тогда
		Загрузить06360_1();                   
	ИначеЕсли СтрНайти(НРег(ИмяФайла), "копия спчв проект-06360") > 0 Тогда
		Загрузить06360_2();
	КонецЕсли; 
	
КонецПроцедуры

// +++ 06360

//++ 2017030701 05.07.17 Веденеев П. //импорт данных от НПО "Аврора"
#Область ИмпортДанныхАврора

//функция возвращает ссылку на проект корабля по наименованию, в случае отсутствия проекта - создает его
&НаСервере
Функция ПолучитьСсылкуНаПроект(НаименованиеПроекта,НомерСтроки="")
	ПроектСсылка=Справочники.ПроектыКораблей.НайтиПоНаименованию(НаименованиеПроекта);
	ТекстЛога="";
	Если ПроектСсылка.Пустая() Или ОбновлятьСуществующиеДанные Тогда
		Попытка
			Если ПроектСсылка.Пустая() Тогда
				ПроектОбъект=Справочники.ПроектыКораблей.СоздатьЭлемент();
				ТекстЛога="Создан ";
			Иначе
				ПроектОбъект=ПроектСсылка.ПолучитьОбъект();
				ТекстЛога="Обновлен ";
			КонецЕсли;
			ПроектОбъект.Наименование=НаименованиеПроекта;
			ПроектОбъект.Записать();
			ТекстЛога=ТекстЛога+"проект корабля "+НаименованиеПроекта;
			Сообщить(ТекстЛога);
			ПроектСсылка=ПроектОбъект.Ссылка;
		Исключение
			ТекстЛога="Не удалось записать проект корабля "+НаименованиеПроекта+" по причине "+ОписаниеОшибки();
			Сообщить(ТекстЛога);
			ПроектСсылка=Справочники.ПроектыКораблей.ПустаяСсылка();
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстЛога) Тогда
		ЗаписатьВЛог(ПроектСсылка.УникальныйИдентификатор(), ПроектСсылка, НомерСтроки, ТекстЛога);
	КонецЕсли;
	Возврат ПроектСсылка;
КонецФункции

//функция возвращает ссылку на флот по наименованию страны
&НаСервере
Функция ПолучитьСсылкуНаФлот(НаименованиеЗаказчика)
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Флоты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Флоты КАК Флоты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ОКСМ.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ОКСМ КАК ОКСМ
	|		ГДЕ
	|			ОКСМ.Наименование = &Наименование) КАК ВложенныйЗапрос
	|		ПО Флоты.Страна = ВложенныйЗапрос.Ссылка";
	Запрос.УстановитьПараметр("Наименование",ВРег(НаименованиеЗаказчика));
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат=Выборка.Ссылка;
	Иначе
		Результат=Справочники.Флоты.ПустаяСсылка();
	КонецЕсли;
	Возврат Результат;
КонецФункции

//функция возвращает ссылку на заказ по наименованию, в случае отсутствия заказа - создает его
&НаСервере
Функция ПолучитьСсылкуНаЗаказ(НаименованиеЗаказа,НаименованиеЗаказчика,НомерСтроки="")
	ТекстЛога="";
	ЗаказыМенеджер=Справочники.Заказы;
	ЗаказСсылка=ЗаказыМенеджер.НайтиПоРеквизиту("ЗаводскойНомер",НаименованиеЗаказа,,Проект);
	Если ЗаказСсылка.Пустая() Или ОбновлятьСуществующиеДанные Тогда
		Попытка
			Если ЗаказСсылка.Пустая() Тогда
				ЗаказОбъект=Справочники.Заказы.СоздатьЭлемент();
				ТекстЛога="Создан ";
			Иначе
				ЗаказОбъект=ЗаказСсылка.ПолучитьОбъект();
				ТекстЛога="Обновлен ";
			КонецЕсли;
			ЗаказОбъект.Владелец=Проект;
			ЗаказОбъект.Наименование=НаименованиеЗаказа;
			ЗаказОбъект.ЗаводскойНомер=НаименованиеЗаказа;
			ЗаказОбъект.Заказчик=ПолучитьСсылкуНаФлот(НаименованиеЗаказчика);
			ЗаказОбъект.Записать();
			ТекстЛога=ТекстЛога+"заказ "+НаименованиеЗаказа+" проект "+Проект.Наименование;
			Сообщить(ТекстЛога);
			ЗаказСсылка=ЗаказОбъект.Ссылка;
		Исключение
			ТекстЛога="Не удалось создать заказ "+НаименованиеЗаказа+" проект "+Проект.Наименование+" по причине "+ОписаниеОшибки();
			Сообщить(ТекстЛога);
			ЗаказСсылка=ЗаказыМенеджер.ПустаяСсылка();
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстЛога) Тогда
		ЗаписатьВЛог(ЗаказСсылка.УникальныйИдентификатор(), ЗаказСсылка, НомерСтроки, ТекстЛога);
	КонецЕсли;
	Возврат ЗаказСсылка;
КонецФункции

//функция возвращает ссылку на изделие или ЗИП по наименованию и обозначению, в случае отсутствия такого элемента - создает новый
&НаСервере
Функция ПолучитьЭлементСтруктурыЗаказа(СтрАврора,ЭтоЗип,Родитель,КолонкиТаблицы=Неопределено,СоответствиеЕдиницИзмеренияХарактеристик=Неопределено,ТаблХарактеристик=Неопределено)
	Стру = Новый Структура;
	Стру.Вставить("Наименование",?(ЭтоЗип,СтрАврора.Наименование,СтрАврора.Изделие));
	Стру.Вставить("Родитель",Родитель);
	Стру.Вставить("Обозначение",?(ЭтоЗип,СтрАврора.Обозначение,СтрАврора.Изделие));
	Стру.Вставить("ЭтоЗИП",ЭтоЗип);
	Стру.Вставить("ИдентификаторСтроки",СтрАврора.НомерСтрокиВФайле);
	Стру.Вставить("ЕдиницаИзмерения","шт"); //анализ загружаемых данных показал, что единицами измерения ЗИП в них являются только штуки
	Если ЭтоЗип Тогда //для ЗИПов грузим всю имеющуюся в файле информацию
		Стру.Вставить("Количество",СтрАврора.Количество);
		Стру.Вставить("КоличествоВЗИПБорт",СтрАврора.КоличествоВЗИПБорт);
		Стру.Вставить("КоличествоВЗИПБаза",СтрАврора.КоличествоВЗИПБаза);
		Стру.Вставить("КоличествоВЗИПДЭ",СтрАврора.КоличествоВЗИПДЭ);
		Стру.Вставить("КоличествоВЗИПР",СтрАврора.КоличествоВЗИПР);
		Если ЗначениеЗаполнено(СтрАврора.НаименованиеАнгл) Тогда
			Стру.Вставить("Перевод",СтрАврора.НаименованиеАнгл);
			Стру.Вставить("Язык",Справочники.Языки.Английский);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрАврора.НомерКлассификацииНАТО) Тогда
			Стру.Вставить("НомерКлассификацииНАТО",СтрАврора.НомерКлассификацииНАТО);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрАврора.Описание) Тогда
			Стру.Вставить("Комментарий",СтрАврора.Описание);
			//++ добавление характеристик
			Для Сч=19 По 32 Цикл //обходим колонки характеристик
				КолонкаТаблицы=КолонкиТаблицы[Сч];
				ИмяХарактеристики=КолонкаТаблицы.Имя;
				ЗначениеХарактеристики=СтрАврора[ИмяХарактеристики];
				Если ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
					СтрокаТаблицыХарактеристик=ТаблХарактеристик.Добавить();
					СтрокаТаблицыХарактеристик.НаименованиеБД=КолонкаТаблицы.Заголовок;
					СтрокаТаблицыХарактеристик.Значение=ЗначениеХарактеристики;
					ЕдиницаИзмерения=СоответствиеЕдиницИзмеренияХарактеристик.Получить(ИмяХарактеристики);
					СтрокаТаблицыХарактеристик.ЕдиницаИзмерения=?(ЕдиницаИзмерения=Неопределено,ЕдиницыИзмеренияПустаяСсылка,ЕдиницаИзмерения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//-- добавление характеристик
	КонецЕсли;
    ЭлементСтруктурыЗаказа=СоздатьЭлемент(Стру,,ТаблХарактеристик);
	Возврат ЭлементСтруктурыЗаказа;
КонецФункции

//функция получает синоним из имени по правилам 1С
&НаСервере
Функция ПолучитьСинонимРеквизита(ИмяРеквизита)
	Синоним = ВРег(Сред(ИмяРеквизита, 1, 1));
    ДлинаСтроки = СтрДлина(ИмяРеквизита);
    Для ъ=2 По ДлинаСтроки Цикл
        Символ = Сред(ИмяРеквизита, ъ, 1);
        ПредСимвол = Сред(ИмяРеквизита, ъ-1, 1);
        СледСимвол = Сред(ИмяРеквизита, ъ+1, 1);
        Прописная = Символ = ВРег(Символ);
        ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
        СледПрописная = СледСимвол = ВРег(СледСимвол);
        
        // Варианты:
        Если НЕ ПредПрописная И Прописная Тогда
            Синоним = Синоним + " " + НРег(Символ);
        ИначеЕсли Прописная И НЕ СледПрописная Тогда
            Синоним = Синоним + " " + НРег(Символ);
        Иначе
            Синоним = Синоним + Символ;
        Конецесли;
	КонецЦикла;
	Возврат Синоним;
КонецФункции

//процедура добавляет заголовки колонкам таблицы загрузки (нужно для корректной загрузки характеристик)
&НаСервере
Процедура ДобавитьЗаголовкиКолонок(КолонкиТаблицы)
	Для каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
		КолонкаТаблицы.Заголовок=ПолучитьСинонимРеквизита(КолонкаТаблицы.Имя);
	КонецЦикла;
КонецПроцедуры

//функция группирует и упорядочивает результат загрузки файлов от НПО Аврора, преобразует его в дерево
&НаСервере
Функция ОбработатьТаблицуЗагрузкиАврора()
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ТаблАврора.Проект КАК Проект,
	|	ТаблАврора.Заказ КАК Заказ,
	|	ТаблАврора.Изделие КАК Изделие,
	|	ТаблАврора.Наименование КАК Наименование,
	|	ТаблАврора.НаименованиеАнгл КАК НаименованиеАнгл,
	|	ТаблАврора.Обозначение КАК Обозначение,
	|	ТаблАврора.Описание КАК Описание,
	|	ТаблАврора.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	ТаблАврора.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблАврора.Размещение КАК Размещение,
	|	ТаблАврора.Количество КАК Количество,
	|	ТаблАврора.СнятоСПроизводства КАК СнятоСПроизводства,
	|	ТаблАврора.НомерКлассификацииНАТО КАК НомерКлассификацииНАТО,
	|	ТаблАврора.АналогРус КАК АналогРус,
	|	ТаблАврора.ПримечаниеКАналогуРус КАК ПримечаниеКАналогуРус,
	|	ТаблАврора.АналогАнгл КАК АналогАнгл,
	|	ТаблАврора.ПримечаниеКАналогуАнгл КАК ПримечаниеКАналогуАнгл,
	|	ТаблАврора.ОписаниеАнгл КАК ОписаниеАнгл,
	|	ТаблАврора.ЕдиницаИзмеренияАнгл КАК ЕдиницаИзмеренияАнгл,
	|	ТаблАврора.Масса КАК Масса,
	|	ТаблАврора.ГабаритныеРазмеры КАК ГабаритныеРазмеры,
	|	ТаблАврора.Ток КАК Ток,
	|	ТаблАврора.Напряжение КАК Напряжение,
	|	ТаблАврора.Подсветка КАК Подсветка,
	|	ТаблАврора.Цвет КАК Цвет,
	|	ТаблАврора.СпособПереключения КАК СпособПереключения,
	|	ТаблАврора.КонструктивноеИсполнение КАК КонструктивноеИсполнение,
	|	ТаблАврора.КоличествоПоложений КАК КоличествоПоложений,
	|	ТаблАврора.УстановкаНаПанели КАК УстановкаНаПанели,
	|	ТаблАврора.ТипКлюча КАК ТипКлюча,
	|	ТаблАврора.УголМеждуСоседнимиПоложениями КАК УголМеждуСоседнимиПоложениями,
	|	ТаблАврора.ПостоянныйТок КАК ПостоянныйТок,
	|	ТаблАврора.ПеременныйТок КАК ПеременныйТок,
	|	ТаблАврора.Заказчик КАК Заказчик,
	|	ТаблАврора.НомерСтрокиВФайле КАК НомерСтрокиВФайле,
	|	ТаблАврора.Файл КАК Файл,
	|	ТаблАврора.ПутьКФайлу КАК ПутьКФайлу
	|ПОМЕСТИТЬ втТаблАврора
	|ИЗ
	|	&ТаблАврора КАК ТаблАврора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблАврора.Проект КАК Проект,
	|	втТаблАврора.Заказ КАК Заказ,
	|	втТаблАврора.Изделие КАК Изделие,
	|	втТаблАврора.Наименование КАК Наименование,
	|	втТаблАврора.НаименованиеАнгл КАК НаименованиеАнгл,
	|	втТаблАврора.Обозначение КАК Обозначение,
	|	втТаблАврора.Описание КАК Описание,
	|	втТаблАврора.НаработкаНаОтказ КАК НаработкаНаОтказ,
	|	втТаблАврора.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втТаблАврора.Размещение КАК Размещение,
	|	ВЫБОР
	|		КОГДА втТаблАврора.Количество = """"
	|			ТОГДА 0
	|		ИНАЧЕ ВЫРАЗИТЬ(втТаблАврора.Количество КАК ЧИСЛО(5, 2))
	|	КОНЕЦ КАК Количество,
	|	втТаблАврора.СнятоСПроизводства КАК СнятоСПроизводства,
	|	втТаблАврора.НомерКлассификацииНАТО КАК НомерКлассификацииНАТО,
	|	втТаблАврора.АналогРус КАК АналогРус,
	|	втТаблАврора.ПримечаниеКАналогуРус КАК ПримечаниеКАналогуРус,
	|	втТаблАврора.АналогАнгл КАК АналогАнгл,
	|	втТаблАврора.ПримечаниеКАналогуАнгл КАК ПримечаниеКАналогуАнгл,
	|	втТаблАврора.ОписаниеАнгл КАК ОписаниеАнгл,
	|	втТаблАврора.ЕдиницаИзмеренияАнгл КАК ЕдиницаИзмеренияАнгл,
	|	втТаблАврора.Масса КАК Масса,
	|	втТаблАврора.ГабаритныеРазмеры КАК ГабаритныеРазмеры,
	|	втТаблАврора.Ток КАК Ток,
	|	втТаблАврора.Напряжение КАК Напряжение,
	|	втТаблАврора.Подсветка КАК Подсветка,
	|	втТаблАврора.Цвет КАК Цвет,
	|	втТаблАврора.СпособПереключения КАК СпособПереключения,
	|	втТаблАврора.КонструктивноеИсполнение КАК КонструктивноеИсполнение,
	|	втТаблАврора.КоличествоПоложений КАК КоличествоПоложений,
	|	втТаблАврора.УстановкаНаПанели КАК УстановкаНаПанели,
	|	втТаблАврора.ТипКлюча КАК ТипКлюча,
	|	втТаблАврора.УголМеждуСоседнимиПоложениями КАК УголМеждуСоседнимиПоложениями,
	|	втТаблАврора.ПостоянныйТок КАК ПостоянныйТок,
	|	втТаблАврора.ПеременныйТок КАК ПеременныйТок,
	|	втТаблАврора.Заказчик КАК Заказчик,
	|	втТаблАврора.НомерСтрокиВФайле КАК НомерСтрокиВФайле,
	|	втТаблАврора.Файл КАК Файл,
	|	втТаблАврора.ПутьКФайлу КАК ПутьКФайлу
	|ПОМЕСТИТЬ втАврораКоличество
	|ИЗ
	|	втТаблАврора КАК втТаблАврора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблАврора.Проект КАК Проект,
	|	втТаблАврора.Заказ КАК Заказ,
	|	втТаблАврора.Изделие КАК Изделие,
	|	втТаблАврора.Наименование КАК Наименование,
	|	МАКСИМУМ(втТаблАврора.НаименованиеАнгл) КАК НаименованиеАнгл,
	|	втТаблАврора.Обозначение КАК Обозначение,
	|	МАКСИМУМ(втТаблАврора.Описание) КАК Описание,
	|	МАКСИМУМ(втТаблАврора.НаработкаНаОтказ) КАК НаработкаНаОтказ,
	|	МАКСИМУМ(втТаблАврора.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(втТаблАврора.Размещение) КАК Размещение,
	|	СУММА(втТаблАврора.Количество) КАК Количество,
	|	МАКСИМУМ(втТаблАврора.СнятоСПроизводства) КАК СнятоСПроизводства,
	|	МАКСИМУМ(втТаблАврора.НомерКлассификацииНАТО) КАК НомерКлассификацииНАТО,
	|	МАКСИМУМ(втТаблАврора.АналогРус) КАК АналогРус,
	|	МАКСИМУМ(втТаблАврора.ПримечаниеКАналогуРус) КАК ПримечаниеКАналогуРус,
	|	МАКСИМУМ(втТаблАврора.АналогАнгл) КАК АналогАнгл,
	|	МАКСИМУМ(втТаблАврора.ПримечаниеКАналогуАнгл) КАК ПримечаниеКАналогуАнгл,
	|	МАКСИМУМ(втТаблАврора.ОписаниеАнгл) КАК ОписаниеАнгл,
	|	МАКСИМУМ(втТаблАврора.ЕдиницаИзмеренияАнгл) КАК ЕдиницаИзмеренияАнгл,
	|	МАКСИМУМ(втТаблАврора.Масса) КАК Масса,
	|	МАКСИМУМ(втТаблАврора.ГабаритныеРазмеры) КАК ГабаритныеРазмеры,
	|	МАКСИМУМ(втТаблАврора.Ток) КАК Ток,
	|	МАКСИМУМ(втТаблАврора.Напряжение) КАК Напряжение,
	|	МАКСИМУМ(втТаблАврора.Подсветка) КАК Подсветка,
	|	МАКСИМУМ(втТаблАврора.Цвет) КАК Цвет,
	|	МАКСИМУМ(втТаблАврора.СпособПереключения) КАК СпособПереключения,
	|	МАКСИМУМ(втТаблАврора.КонструктивноеИсполнение) КАК КонструктивноеИсполнение,
	|	МАКСИМУМ(втТаблАврора.КоличествоПоложений) КАК КоличествоПоложений,
	|	МАКСИМУМ(втТаблАврора.УстановкаНаПанели) КАК УстановкаНаПанели,
	|	МАКСИМУМ(втТаблАврора.ТипКлюча) КАК ТипКлюча,
	|	МАКСИМУМ(втТаблАврора.УголМеждуСоседнимиПоложениями) КАК УголМеждуСоседнимиПоложениями,
	|	МАКСИМУМ(втТаблАврора.ПостоянныйТок) КАК ПостоянныйТок,
	|	МАКСИМУМ(втТаблАврора.ПеременныйТок) КАК ПеременныйТок,
	|	МАКСИМУМ(втТаблАврора.Заказчик) КАК Заказчик,
	|	МАКСИМУМ(втТаблАврора.НомерСтрокиВФайле) КАК НомерСтрокиВФайле,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблАврора.Размещение = ""Борт""
	|				ТОГДА втТаблАврора.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВЗИПБорт,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблАврора.Размещение = ""База""
	|				ТОГДА втТаблАврора.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВЗИПБаза,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблАврора.Размещение = ""ДЭ""
	|				ТОГДА втТаблАврора.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВЗИПДЭ,
	|	СУММА(ВЫБОР
	|			КОГДА втТаблАврора.Размещение = ""Р""
	|				ТОГДА втТаблАврора.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоВЗИПР,
	|	МАКСИМУМ(втТаблАврора.Файл) КАК Файл,
	|	МАКСИМУМ(втТаблАврора.ПутьКФайлу) КАК ПутьКФайлу
	|ИЗ
	|	втАврораКоличество КАК втТаблАврора
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблАврора.Проект,
	|	втТаблАврора.Заказ,
	|	втТаблАврора.Изделие,
	|	втТаблАврора.Наименование,
	|	втТаблАврора.Обозначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проект,
	|	Заказ,
	|	Изделие,
	|	Наименование
	|ИТОГИ
	|	МАКСИМУМ(Заказчик),
	|	МАКСИМУМ(НомерСтрокиВФайле),
	|	МАКСИМУМ(Файл),
	|	МАКСИМУМ(ПутьКФайлу)
	|ПО
	|	Проект,
	|	Заказ,
	|	Изделие";
	Запрос.УстановитьПараметр("ТаблАврора",ТаблАврора.Выгрузить());
	Результат=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗагрузитьНаСервереАврора()
	//создаем таблицу значений для записи характеристик
	ТаблХарактеристик=Новый ТаблицаЗначений;
	ТаблХарактеристик.Колонки.Добавить("НаименованиеБД"); //заголовок в загрузочной таблице = наименование в справочнике характеристик
	ТаблХарактеристик.Колонки.Добавить("Значение"); //значение характеристики
	ТаблХарактеристик.Колонки.Добавить("ЕдиницаИзмерения"); //единица измерения характеристики
	//инициализируем соответствие имен характеристик и единиц измерения
	СоответствиеЕдиницИзмеренияХарактеристик=ПолучитьСоответствиеЕдиницИзмеренияХарактеристик();
	//упорядочиваем таблицу и инициализируем переменные, определяющие переход к новому значению упорядочиваемых атрибутов
	//чтобы не вызывать поиск проекта/заказа/изделия на каждом шаге цикла
	ДзАврора=ОбработатьТаблицуЗагрузкиАврора();
	КолонкиТаблицы=ДзАврора.Колонки;
	ДобавитьЗаголовкиКолонок(КолонкиТаблицы);
	СтруктураЗаказаПустаяСсылка=Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
	Для каждого СтрПроект Из ДзАврора.Строки Цикл //обходим проекты
		Проект=ПолучитьСсылкуНаПроект(СтрПроект.Проект,СтрПроект.НомерСтрокиВФайле);
		Для каждого СтрЗаказ Из СтрПроект.Строки Цикл //обходим заказы
			Заказ=ПолучитьСсылкуНаЗаказ(СтрЗаказ.Заказ,СтрЗаказ.Заказчик,СтрЗаказ.НомерСтрокиВФайле);
			Для каждого СтрИзделие Из СтрЗаказ.Строки Цикл //обходим изделия
				ТекИмяФайла = СтрИзделие.Файл;
				ТекПутьКФайлу = СтрИзделие.ПутьКФайлу;
				Изделие=ПолучитьЭлементСтруктурыЗаказа(СтрИзделие,Ложь,СтруктураЗаказаПустаяСсылка);
				Для каждого СтрЗИП Из СтрИзделие.Строки Цикл //обходим зипы
					ТекИмяФайла = СтрЗИП.Файл;
					ТекПутьКФайлу = СтрЗИП.ПутьКФайлу;
					ТаблХарактеристик.Очистить();
					ЗИП=ПолучитьЭлементСтруктурыЗаказа(СтрЗИП,Истина,Изделие,КолонкиТаблицы,СоответствиеЕдиницИзмеренияХарактеристик,ТаблХарактеристик);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		//обновляем данные о пройденных заказах/проектах/изделиях
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКаталог(ПолноеИмяФайла)
	иФайл=Новый Файл(ПолноеИмяФайла);
	Возврат иФайл;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеВЯчейке(ЛистЭксель,НомерСтроки,НомерСтолбца)
	
	ЗначениеЯч = ЛистЭксель.Cells(НомерСтроки,НомерСтолбца).Value;
	Если ТипЗнч(ЗначениеЯч) = Тип("Число") Тогда
		Возврат СокрЛП(Формат(ЗначениеЯч,"ЧГ=0"));
	Иначе
		Возврат СокрЛП(Строка(ЗначениеЯч));
	КонецЕсли;
	
КонецФункции

//функция удаляет из строки знаки препинания и пробелы по краям
&НаКлиенте
Функция УдалитьЗнакиПрепинания(СтрокаХарактеристики)
	Результат="";
	ВсегоСимволов=СтрДлина(СтрокаХарактеристики);
	Для Сч=1 По ВсегоСимволов Цикл
		ТекСимвол=Сред(СтрокаХарактеристики,Сч,1);
		Если Найти(",.:",ТекСимвол)=0 Тогда
			Результат=Результат+ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	Возврат СокрЛП(Результат);
КонецФункции

//функция задает список видов характеристик, встречающихся в файлах НПО Аврора (в поле Описание)
//список задается в виде соответствия, ключами которого являются все выявленные указания на наличие характеристики в описании
//значениями - наименования характеристик в таблице загрузки и базе данных в целом
&НаСервере
Функция ПолучитьСоответствиеВидовХарактеристик()
	СоответствиеВидовХарактеристик=Новый Соответствие;
	СоответствиеВидовХарактеристик.Вставить("Масса, г:","Масса");
	СоответствиеВидовХарактеристик.Вставить("Масса:","Масса");
	СоответствиеВидовХарактеристик.Вставить("Габаритные размеры (b x h x L), мм:","ГабаритныеРазмеры");
	СоответствиеВидовХарактеристик.Вставить("Габаритные размеры (b x h x L):","ГабаритныеРазмеры");
	СоответствиеВидовХарактеристик.Вставить("Габаритные размеры:","ГабаритныеРазмеры");
	СоответствиеВидовХарактеристик.Вставить("Габартные размеры:","ГабаритныеРазмеры");
	СоответствиеВидовХарактеристик.Вставить("Ток:","Ток");
	СоответствиеВидовХарактеристик.Вставить("Напряжение ","Напряжение");
	СоответствиеВидовХарактеристик.Вставить("напряжение ","Напряжение");
	СоответствиеВидовХарактеристик.Вставить("Напряжение:","Напряжение");
	СоответствиеВидовХарактеристик.Вставить("Напряжение на светодиоде","Напряжение");
	СоответствиеВидовХарактеристик.Вставить("Подсветка:","Подсветка");
	СоответствиеВидовХарактеристик.Вставить("подсветка","Подсветка");
	СоответствиеВидовХарактеристик.Вставить("Цвет :","Цвет");
	СоответствиеВидовХарактеристик.Вставить("Цвет:","Цвет");
	СоответствиеВидовХарактеристик.Вставить("цвет:","Цвет");
	СоответствиеВидовХарактеристик.Вставить("способ переключения:","СпособПереключения");
	СоответствиеВидовХарактеристик.Вставить("Способ переключения:","СпособПереключения");
	СоответствиеВидовХарактеристик.Вставить("Конструктивное исполнение:","КонструктивноеИсполнение");
	СоответствиеВидовХарактеристик.Вставить("Кол-во положений:","КоличествоПоложений");
	СоответствиеВидовХарактеристик.Вставить("тип ключа:","ТипКлюча");
	СоответствиеВидовХарактеристик.Вставить("Угол между соседними положениями:","УголМеждуСоседнимиПоложениями");
	СоответствиеВидовХарактеристик.Вставить("Установка на панели:","УстановкаНаПанели");
	СоответствиеВидовХарактеристик.Вставить("Установка на панели","УстановкаНаПанели");
	СоответствиеВидовХарактеристик.Вставить("постоянный ток через светодиод","ПостоянныйТок");
	СоответствиеВидовХарактеристик.Вставить("переменный ток через светодиод","ПеременныйТок");
	Возврат СоответствиеВидовХарактеристик;
КонецФункции

//функция задает единицы измерений для различных характеристик ЗИП НПО Аврора
&НаСервере
Функция ПолучитьСоответствиеЕдиницИзмеренияХарактеристик()
	СоответствиеЕдиницИзмеренияХарактеристик=Новый Соответствие;
	СоответствиеЕдиницИзмеренияХарактеристик.Вставить("Масса",Справочники.ОКЕИ.НайтиПоКоду("163"));
	СоответствиеЕдиницИзмеренияХарактеристик.Вставить("ГабаритныеРазмеры",Справочники.ОКЕИ.НайтиПоКоду("003"));
	СоответствиеЕдиницИзмеренияХарактеристик.Вставить("Напряжение",Справочники.ОКЕИ.НайтиПоКоду("222"));
	Возврат СоответствиеЕдиницИзмеренияХарактеристик; 
КонецФункции

//функция выделяет характеристики и их значения из поля Описание файлов от НПО Аврора и добавляет их в таблицу ТаблАврора
&НаКлиенте
Процедура ДобавитьХарактеристики(СтрАврора,ТекОписание,СоответствиеВидовХарактеристик,ТекВидХарактеристики=Неопределено,ОписаниеБезТекущейХарактеристики="")
	Для каждого ВидХарактеристик Из СоответствиеВидовХарактеристик Цикл
		ПозицияХарактеристики=Найти(ТекОписание,ВидХарактеристик.Ключ);
		Если ПозицияХарактеристики>0 Тогда
			ПозицияНачалаЗначения=ПозицияХарактеристики+СтрДлина(ВидХарактеристик.Ключ);
			//если уже было указание на характеристику и нашлось еще одно, 
			//то все содержимое строки до нового указания на характеристику является значением предыдущей характеристики
			Если ТекВидХарактеристики=Неопределено Тогда
				ТекВидХарактеристики=ВидХарактеристик.Значение;
				ПоследующееОписание="|"+Прав(ТекОписание,СтрДлина(ТекОписание)-ПозицияНачалаЗначения+1);
				ОписаниеБезТекущейХарактеристики=Лев(ТекОписание,ПозицияХарактеристики-1)+ПоследующееОписание;
				ТекОписание=ПоследующееОписание;
			Иначе
				ТекОписание=Лев(ТекОписание,ПозицияХарактеристики-1);
			КонецЕсли;
			ДобавитьХарактеристики(СтрАврора,ТекОписание,СоответствиеВидовХарактеристик,ТекВидХарактеристики,ОписаниеБезТекущейХарактеристики);
		КонецЕсли;
	КонецЦикла;
	//если в строке больше нет указаний на характеристики, 
	//то оставшая строка будет являться значением характеристики
	Если ТекВидХарактеристики<>Неопределено Тогда
		СтрАврора[ТекВидХарактеристики]=УдалитьЗнакиПрепинания(Прав(ТекОписание,СтрДлина(ТекОписание)-1));
	КонецЕсли;
	Если ЗначениеЗаполнено(ОписаниеБезТекущейХарактеристики) Тогда
		ПозицияТекущейХарактеристики=Найти(ОписаниеБезТекущейХарактеристики,ТекОписание);
		Если ПозицияТекущейХарактеристики>0 Тогда
			ПозицияОкончанияХарактеристики=ПозицияТекущейХарактеристики+СтрДлина(ТекОписание);
			ПоследующееОписание=Прав(ОписаниеБезТекущейХарактеристики,СтрДлина(ОписаниеБезТекущейХарактеристики)-ПозицияОкончанияХарактеристики+1);
			ОписаниеБезТекущейХарактеристики=Лев(ОписаниеБезТекущейХарактеристики,ПозицияТекущейХарактеристики-1)+ПоследующееОписание;
		КонецЕсли;
		ДобавитьХарактеристики(СтрАврора,ОписаниеБезТекущейХарактеристики,СоответствиеВидовХарактеристик);
	КонецЕсли;
КонецПроцедуры

//функция задает соответствие для анализа расположения ЗИП по имени файла от НПО Аврора
&НаКлиенте
Функция ПолучитьСоответствиеРасположений()
	СоответствиеРасположений=Новый Соответствие;
	СоответствиеРасположений.Вставить("ЗИП-О","Борт");
	СоответствиеРасположений.Вставить("ЗИП О","Борт");
	СоответствиеРасположений.Вставить("ЗипО","Борт");    
	СоответствиеРасположений.Вставить("борт","Борт");
	СоответствиеРасположений.Вставить("БОРТ","Борт");
	СоответствиеРасположений.Вставить("зип-о","Борт");
	СоответствиеРасположений.Вставить("зип- о","Борт");
	СоответствиеРасположений.Вставить("ЛАма О","Борт");
	СоответствиеРасположений.Вставить("Лама О","Борт");
	СоответствиеРасположений.Вставить("бор.","Борт");
	СоответствиеРасположений.Вставить("БАЗ","База");
	СоответствиеРасположений.Вставить("баз","База");
	СоответствиеРасположений.Вставить("ЗИП-Б","База");
	СоответствиеРасположений.Вставить("ДЭ","ДЭ");
	СоответствиеРасположений.Вставить("дэ","ДЭ");
	СоответствиеРасположений.Вставить("длительной эксплуатации","ДЭ");
	Возврат СоответствиеРасположений;
КонецФункции

//функция возвращает расположение ЗИП, основываясь на анализе имени файла от НПО Аврора
&НаКлиенте
Функция ПолучитьРасположениеЗИП(ИмяФайла,СоответствиеРасположений)
	Результат="Борт";
	Для каждого Расположение Из СоответствиеРасположений Цикл
		Если Найти(ИмяФайла,Расположение.Ключ)>0 Тогда
			Результат=Расположение.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАврора()
	ДатаНачалаЗагрузки=ТекущаяДата();
	Сообщить("Загрузка данных начата в "+Строка(ДатаНачалаЗагрузки));
	СоответствиеРасположений=ПолучитьСоответствиеРасположений();
	СоответствиеВидовХарактеристик=ПолучитьСоответствиеВидовХарактеристик();
	ТаблАврора.Очистить();
	Если Найти(ТекИмяФайла,".xls")>0 Тогда
		ФайлыЗИП=Новый Массив;
		ФайлыЗИП.Добавить(Новый Файл(ТекПутьКФайлу+"\"+ТекИмяФайла));
	Иначе
		ФайлыЗИП=НайтиФайлы(ТекПутьКФайлу+"\"+ТекИмяФайла,"*.xls",Истина);
	КонецЕсли;
	ТекНомерЭлементаФайлыЗИП=1;
	ВсегоЭлементовФайлыЗИП=ФайлыЗИП.Количество();
	Для каждого ФайлЗИП Из ФайлыЗИП Цикл
		Если Найти(ФайлЗип.Имя,"~")>0 Тогда
			УправлениеИнтерфейсом.ВывестиТекущееСостояние(ИмяФайла,ДатаНачалаЗагрузки,ТекНомерЭлементаФайлыЗИП,ВсегоЭлементовФайлыЗИП);
			ТекНомерЭлементаФайлыЗИП=ТекНомерЭлементаФайлыЗИП+1;
			Продолжить;
		КонецЕсли; 
		ИмяФайла=ФайлЗИП.ПолноеИмя;
		УправлениеИнтерфейсом.ВывестиТекущееСостояние(ИмяФайла,ДатаНачалаЗагрузки,ТекНомерЭлементаФайлыЗИП,ВсегоЭлементовФайлыЗИП);
		КаталогИзделия=ПолучитьКаталог(ФайлЗИП.Путь);
		НаименованиеИзделия=СокрЛП(КаталогИзделия.Имя);
		КаталогЗаказа=ПолучитьКаталог(КаталогИзделия.Путь);
		НаименованиеЗаказа=СокрЛП(КаталогЗаказа.Имя);
		НаименованиеЗаказа=Прав(НаименованиеЗаказа,СтрДлина(НаименованиеЗаказа)-6);
		КаталогПроекта=ПолучитьКаталог(КаталогЗаказа.Путь);
		НаименованиеПроекта=СокрЛП(КаталогПроекта.Имя);
		НаименованиеПроекта=Прав(НаименованиеПроекта,СтрДлина(НаименованиеПроекта)-7);
		НаименованиеЗаказчика=СокрЛП(ПолучитьКаталог(КаталогПроекта.Путь).Имя);
		РасположениеЗИП=ПолучитьРасположениеЗИП(ФайлЗИП.ИмяБезРасширения,СоответствиеРасположений);
		//++ чтение файла
		Эксель=ПодключитсяКЭксель();
		Если Эксель=Неопределено Тогда
			Сообщить("Не удалось открыть файл "+ИмяФайла,СтатусСообщения.ОченьВажное);
			УправлениеИнтерфейсом.ВывестиТекущееСостояние(ИмяФайла,ДатаНачалаЗагрузки,ТекНомерЭлементаФайлыЗИП,ВсегоЭлементовФайлыЗИП);
			ТекНомерЭлементаФайлыЗИП=ТекНомерЭлементаФайлыЗИП+1;
			Продолжить;
		КонецЕсли;
		КоличествоЛистов=Эксель.Sheets.Count();
		Для ТекЛист=1 По КоличествоЛистов Цикл
			ЛистЭксель = Эксель.WorkSheets(ТекЛист);
			Если ЗначениеЗаполнено(СокрЛП(Строка(ЛистЭксель.Cells(1,1).Value))) Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row;
		ЗначениеПервойЯчейки=ПолучитьЗначениеВЯчейке(ЛистЭксель,1,1);
		ПерваяСтрока=?(Найти(ЗначениеПервойЯчейки,"наименование")>0 Или Найти(ЗначениеПервойЯчейки,"name")>0,2,1);
		Для Сч=ПерваяСтрока По ВсегоСтрок Цикл
			ТекНаименование=ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,1); 
			Если Не ЗначениеЗаполнено(ТекНаименование) Тогда
				Продолжить;
			КонецЕсли; 
			СтрАврора=ТаблАврора.Добавить();
			СтрАврора.Проект=НаименованиеПроекта;
			СтрАврора.Заказ=НаименованиеЗаказа;
			СтрАврора.Изделие=НаименованиеИзделия;
			СтрАврора.Заказчик=НаименованиеЗаказчика;
			СтрАврора.НомерСтрокиВФайле=Строка(Сч);
			СтрАврора.Наименование=ТекНаименование;
			СтрАврора.НаименованиеАнгл=ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,2);
			СтрАврора.Обозначение=ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,3);
			СтрАврора.Описание=ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,4);
			Если ЗначениеЗаполнено(СтрАврора.Описание) Тогда
				ТекОписание=СтрАврора.Описание;
				ДобавитьХарактеристики(СтрАврора,ТекОписание,СоответствиеВидовХарактеристик);
			КонецЕсли; 
			СтрАврора.ОписаниеАнгл=ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,5);
			СтрАврора.НаработкаНаОтказ=ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,6);
			СтрАврора.Размещение=РасположениеЗИП;
			СтрАврора.Количество=ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,9);
			СтрАврора.НомерКлассификацииНато=ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,11);
			СтрАврора.Файл = ФайлЗИП.Имя;
			СтрАврора.ПутьКФайлу = ФайлЗИП.Путь;
		КонецЦикла;
		Эксель.Application.Quit();
		Эксель=Неопределено;
		//-- чтение файла
		ТекНомерЭлементаФайлыЗИП=ТекНомерЭлементаФайлыЗИП+1;
	КонецЦикла;
	Сообщить("Загрузка данных окончена в "+Строка(ТекущаяДата()));
	Состояние("Запись загруженных данных на сервере");
	ЗагрузитьНаСервереАврора();
	Сообщить("Запись загруженных данных окончена в "+Строка(ТекущаяДата()));
КонецПроцедуры

#КонецОбласти   
//-- 2017030701 05.07.17 Веденеев П. //импорт данных от НПО "Аврора"

//++ 2017030701 05.07.17 Веденеев П. //импорт данных Гепард
#Область ИмпортДанныхГепард

&НаСервере
Функция ВернутьГруппуПоИмениФайлаГепард(ФайлИмя = "")
	
	//ФайлИмя = СтрЗаменить(ФайлИмя, "W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-002_ЗИ-К_892\", "");
	//ФайлИмя = СтрЗаменить(ФайлИмя, ".doc", "");
	
	ФайлИмя = СокрЛП(ФайлИмя);    
	ИмяГруппы = "";
	ИмяПодГруппы = "";
	
	Если Найти(ФайлИмя, "661.360202.005 ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Штурманская часть";
	ИначеЕсли Найти(ФайлИмя, "661.360202.006ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Ракетно-артиллерийская часть";
	ИначеЕсли Найти(ФайлИмя, "661.360202.007ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Минное вооружение";
	ИначеЕсли Найти(ФайлИмя, "661.360202.008 ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Средства связи";
	ИначеЕсли Найти(ФайлИмя, "661.360202.009 ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Механическое оборудование";
		ИмяПодГруппы = "Главные и вспомогательные механизмы";
	ИначеЕсли Найти(ФайлИмя, "661.360202.009 ЗИ1-исправл") > 0 Тогда
		ИмяГруппы = "Механическое оборудование";
		ИмяПодГруппы = "Трубопроводы. общекорабельные и специальные системы";
	ИначеЕсли Найти(ФайлИмя, "661.360202.009 ЗИ2-исправл") > 0 Тогда
		ИмяГруппы = "Механическое оборудование";
		ИмяПодГруппы = "Корпус, устройства и бытовые системы";
	ИначеЕсли Найти(ФайлИмя, "661.360202.010 ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Силовая сеть";
	ИначеЕсли Найти(ФайлИмя, "661.360202.010 ЗИ1-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Распредустройства";
	ИначеЕсли Найти(ФайлИмя, "661.360202.010 ЗИ2-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Телефония и внутрисудовая связь";
	ИначеЕсли Найти(ФайлИмя, "661.360202.010 ЗИ3-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Освещение и сигнально-отличительные огни";
	ИначеЕсли Найти(ФайлИмя, "661.360202.010 ЗИ4-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Бытовые системы, оборудование";
	ИначеЕсли Найти(ФайлИмя, "661.360202.010 ЗИ5-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Автоматика";
	ИначеЕсли Найти(ФайлИмя, "661.360202.010 ЗИ6-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Размагничивающее устройство";
	ИначеЕсли Найти(ФайлИмя, "661.360202.011ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Авиационное оборудование";
	ИначеЕсли Найти(ФайлИмя, "661.360202.012 ЗИ1-исправл") > 0 Тогда
		ИмяГруппы = "Радиотехнические средства";
		ИмяПодГруппы = "Гидроакустика";
	ИначеЕсли Найти(ФайлИмя, "661.360202.012ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Радиотехнические средства";
		ИмяПодГруппы = "Радиолокация";
	ИначеЕсли Найти(ФайлИмя, "661.360202.013ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Химическая служба";
	ИначеЕсли Найти(ФайлИмя, "661.360202.035ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Штурманская часть";
	ИначеЕсли Найти(ФайлИмя, "661.360202.036 ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Ракетно-артиллерийское вооружение";
	ИначеЕсли Найти(ФайлИмя, "11661.360202.037ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Минно-торпедное вооружение";
	ИначеЕсли Найти(ФайлИмя, "661.360202.038ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Средства связи";
	ИначеЕсли Найти(ФайлИмя, "661.360202.039 ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Механическое оборудование";
		ИмяПодГруппы = "Главные и вспомогательные механизмы";
	ИначеЕсли Найти(ФайлИмя, "661.360202.039 ЗИ1-исправл") > 0 Тогда
		ИмяГруппы = "Механическое оборудование";
		ИмяПодГруппы = "Трубопроводы, общекорабельные и специальные системы";
	ИначеЕсли Найти(ФайлИмя, "661.360202.039 ЗИ2-исправл") > 0 Тогда
		ИмяГруппы = "Механическое оборудование";
		ИмяПодГруппы = "Корпус, устройства,бытовые системы и дельные вещи";
	ИначеЕсли Найти(ФайлИмя, "661.360202.040 ЗИ1-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Распредустройства";
	ИначеЕсли Найти(ФайлИмя, "661.360202.040 ЗИ5-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Автоматика";
	ИначеЕсли Найти(ФайлИмя, "661.360202.040ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Силовая сеть";
	ИначеЕсли Найти(ФайлИмя, "661.360202.040ЗИ2-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Телефония и внутрисудовая связь";
	ИначеЕсли Найти(ФайлИмя, "661.360202.040ЗИ3-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Освещение и сигнально-отличительные огни";
	ИначеЕсли Найти(ФайлИмя, "661.360202.040ЗИ4-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Бытовые системы, оборудование";
	ИначеЕсли Найти(ФайлИмя, "661.360202.040ЗИ6-исправл") > 0 Тогда
		ИмяГруппы = "Электрооборудование";
		ИмяПодГруппы = "Размагничивающее устройство";
	ИначеЕсли Найти(ФайлИмя, "11661.360202.041ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Авиационное оборудование";
	ИначеЕсли Найти(ФайлИмя, "661.360202.042 ЗИ-исправл") > 0 Тогда
		ИмяГруппы = "Радиотехнические средства";
		ИмяПодГруппы = "Радиолокация";
	ИначеЕсли Найти(ФайлИмя, "661.360202.042 ЗИ1-исправл") > 0 Тогда
		ИмяГруппы = "Радиотехнические средства";
		ИмяПодГруппы = "Гидроакустика";
	ИначеЕсли Найти(ФайлИмя, "661.360202.043 ЗИ-исправл") > 0 Тогда	
		ИмяГруппы = "Химическая служба";
	КонецЕсли;

	Стру= Новый Структура;
	Стру.Вставить("ИмяГруппы", ИмяГруппы);
	Стру.Вставить("ИмяПодГруппы", ИмяПодГруппы);
	
	Возврат Стру;
	
КонецФункции

&НаСервере
Функция ПолучитьИндексРодителя(ИндексЭлемента)
	ДлинаИндекса=СтрДлина(ИндексЭлемента);
	Сч=ДлинаИндекса;
	ПозицияРазделителя=0;
	Пока Сч>0 Цикл
		Если Сред(ИндексЭлемента,Сч,1)="." И Сч<ДлинаИндекса Тогда
			ПозицияРазделителя=Сч;
			Прервать;
		КонецЕсли;
		Сч=Сч-1;
	КонецЦикла;
	Результат=?(ПозицияРазделителя=0,"0",Лев(ИндексЭлемента,ПозицияРазделителя-1));
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеКораблейГепард()
	
	СоответствиеКораблейГепард = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.ЗаводскойНомер,
	|	Заказы.Ссылка
	|ИЗ
	|	Справочник.Заказы КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроектыКораблей КАК ПроектыКораблей
	|		ПО Заказы.Владелец = ПроектыКораблей.Ссылка
	|			И (ПроектыКораблей.Наименование = ""11661"")
	|ГДЕ
	|	Заказы.ЗаводскойНомер В (""954"", ""956"")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеКораблейГепард.Вставить(Выборка.ЗаводскойНомер,Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответствиеКораблейГепард;
	
КонецФункции

&НаСервере
Функция ЗагрузитьНаСервереГепард()
	
	СоответствиеКораблейГепард = ПолучитьСоответствиеКораблейГепард();
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;	
	
	видПозиции="";
	Стру = Новый Структура;
	ТекРодитель="";
	
		
	Для каждого Стр Из ТаблГепард Цикл
		
		//++веденеев 17.07.2017
		Если ЗначениеЗаполнено(Стр.ИмяФайла) Тогда
			
			ТекИмяФайла = Стр.ИмяФайла;
			ТекПутьКФайлу = Стр.ПутьКФайлу;
			
			Заказ = СоответствиеКораблейГепард.Получить(Стр.Корабль);
			
			СоответствиеРодителей = Новый Соответствие;
			
			Группы = ВернутьГруппуПоИмениФайлаГепард(Стр.ИмяФайла);
			
			Если Группы.Свойство("ИмяГруппы") Тогда
				Стру.Вставить("Наименование", Группы.ИмяГруппы);
				Стру.Вставить("ИдентификаторСтроки", "00001");
				Стру.Вставить("Родитель", СпрЗип.ПустаяСсылка());
				ТекРодитель=СоздатьГруппу(Стру);
				СоответствиеРодителей.Вставить("0",ТекРодитель);
			КонецЕсли; 
			Если Группы.Свойство("ИмяПодГруппы") Тогда
				Если НЕ Группы.ИмяПодГруппы = "" Тогда
					Стру.Вставить("Наименование", Группы.ИмяПодГруппы);
					Стру.Вставить("ИдентификаторСтроки", "00002");
					Стру.Вставить("Родитель", СоответствиеРодителей["0"]);
					ТекРодитель=СоздатьГруппу(Стру);
					СоответствиеРодителей.Вставить("0",ТекРодитель);
				КонецЕсли; 
			КонецЕсли;

		КонецЕсли;
		//--веденеев 17.07.2017
		
		ЭтоГруппа  = Ложь;
		ЭтоИзделие = Ложь;
		ЭтоЗИП 	   = Ложь;
		
		Если Не ЗначениеЗаполнено(Стр.Позиция) И ВРег(Стр.ТипИзделия)="Г" Тогда
			видПозиции = ВернутьВидПозиции(Стр.Наименование);
			Продолжить;
		КонецЕсли;
		
		Стр.Позиция=СтрЗаменить(Стр.Позиция," ","");
		Стр.Позиция=СтрЗаменить(Стр.Позиция,"..",".");
		
		Если Прав(Стр.Позиция,1)="." Тогда
			Стр.Позиция=Лев(Стр.Позиция,СтрДлина(Стр.Позиция)-1);
		КонецЕсли;
		
		//++веденеев 18.07.2017
		ИндексРодителя=ПолучитьИндексРодителя(Стр.Позиция);
		РодительГр=СоответствиеРодителей[ИндексРодителя];
		Если РодительГр=Неопределено Тогда
			РодительГр=ТекРодитель;
		КонецЕсли;
		//--веденеев 18.07.2017
				
		Стру = Новый Структура;
		Стру.Вставить("Количество",   Стр.Количество);
		Стру.Вставить("Наименование", Стр.Наименование);
		Стру.Вставить("Обозначение",   Стр.Обозначение);
		Стру.Вставить("МестоХранения", Стр.МестоХранения+" "+Стр.НомЯщика);
		Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
		Стру.Вставить("Родитель", РодительГр);
		
		//++веденеев 17.07.2017 - читаем вид изделия 
		//Если НЕ НРег(Стр.Примечание) = "" Тогда
		//	ЭтоИзделие = Истина;
		//ИначеЕсли НРег(Стр.Позиция) = "" И НРег(Стр.Обозначение) = "" И НРег(Стр.Примечание) = "" Тогда
		//	ЭтоГруппа  = Истина;
		//ИначеЕсли НЕ Стр.НомЯщика = "" Тогда 
		//	ЭтоЗИП = Истина;
		//ИначеЕсли НЕ НРег(Стр.Позиция) = "" И НРег(Стр.Примечание) = "" Тогда
		//	ЭтоИзделие = Истина;
		//	Стру.Вставить("Родитель", Родители[Поз-1])
		//КонецЕсли;
		Если ВРег(Стр.ТипИзделия)="И" Тогда
			ЭтоИзделие=Истина;
			Если ЗначениеЗаполнено(Стр.Примечание) Тогда
				Стру.Вставить("Поставщик",Стр.Примечание);
			КонецЕсли;
		ИначеЕсли ВРег(Стр.ТипИзделия)="Г" Тогда
			ЭтоГруппа=Истина;
		ИначеЕсли Стр.ЕдИзмерения="к-т" Тогда
			ЭтоИзделие=Истина;
		Иначе
			ЭтоЗИП=Истина;
		КонецЕсли;
		//--веденеев 17.07.2017 
		
		Если ЭтоИзделие Тогда
			ТекЭлемент = СоздатьЭлемент(Стру);
			ТекРодитель = ТекЭлемент;
		ИначеЕсли ЭтоГруппа Тогда 
			ТекЭлемент = СоздатьГруппу(Стру);
			ТекРодитель = ТекЭлемент;
		ИначеЕсли ЭтоЗИП Тогда
			Стру.Удалить("Количество");
			Стру.Вставить("ЕдиницаИзмерения", 	 Стр.ЕдИзмерения);
			//++ веденеев 14.08.17
			Если ЗначениеЗаполнено(Стр.МассаЕдиницы) Тогда
				Стру.Вставить("КодМассы", 	  	     "166"); // 166 - кг
				Стру.Вставить("МассаЕдиницы", 	  	 Стр.МассаЕдиницы);
			КонецЕсли;
			//-- веденеев 14.08.17
			Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
			Стру.Вставить("ЭтоЗИП", Истина);
			Стру.Вставить("КоличествоВЗИПБорт", Стр.Количество);
	//		Стру.Вставить("Поставщик", Стр.Примечание);
			Стру.Вставить("Вид", видПозиции);
			ТекЭлемент = СоздатьЭлемент(Стру);
		КонецЕсли;
		
		//++веденеев 18.07.2017
		СоответствиеРодителей.Вставить(Стр.Позиция,ТекЭлемент);
		//--веденеев 18.07.2017
		
	КонецЦикла; 
		
КонецФункции

&НаКлиенте
Процедура ЗагрузитьГепард()
	
	Эксель = ПодключитсяКЭксель();
	
	
	НачалоСтроки = 3;
	
	// Лист оборудование
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	
	номпп=0;
	ИмяФайлаЗаписано=Ложь;
	Для сч = НачалоСтроки По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,1);
		Стр2 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,2);
		Стр3 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,3);
		Стр4 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,4);
		Стр5 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,5);
		Стр6 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,6);
		Стр7 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,7);
		Стр8 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,8);
		Стр9 = ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,9);
		Стр10 =ПолучитьЗначениеВЯчейке(ЛистЭксель,Сч,10); //веденеев 17.07.2017
		
		//Если Стр1 = "" Тогда
		//	Продолжить;
		//КонецЕсли; 
		
		Если Стр2 = "" ИЛИ Стр2 = "2" Тогда
			Продолжить;
		КонецЕсли; 
		
		//Если Стр1 = "" И (СтрНайти(НРег(Стр2), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр2), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр2), "пакет") > 0
		//	ИЛИ СтрНайти(НРег(Стр2), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр2), "упаковка") > 0 ИЛИ СтрНайти(НРег(Стр2), "материал") > 0
		//	ИЛИ СтрНайти(НРег(Стр2), "запасные части") > 0 ИЛИ СтрНайти(НРег(Стр2), "инструмент") > 0 ИЛИ СтрНайти(НРег(Стр2), "принадлежности") > 0 
		//	ИЛИ СтрНайти(НРег(Стр2), "комплект зип к") > 0 ИЛИ СтрНайти(НРег(Стр2), "ключи") > 0 ИЛИ СтрНайти(НРег(Стр2), "комплект запасных частей") > 0
		//	ИЛИ СтрНайти(НРег(Стр2), "сигнализаторы давления") > 0)
		//	Тогда
		//	Продолжить;
		//КонецЕсли;         
		номпп = номпп+1;
		
		НовСтр = ТаблГепард.Добавить();
		НовСтр.НомПП		= номпп;
		НовСтр.Позиция		= Стр1;
		НовСтр.Наименование = СтрЗаменить(Стр2, Символы.ПС, "");
		НовСтр.Обозначение	= Стр3;
		НовСтр.ЕдИзмерения	= СтрЗаменить(Стр4, ".", "");
		НовСтр.МассаЕдиницы	= Стр5;
		НовСтр.Количество	= Стр6;
		НовСтр.МестоХранения= Стр7;
		НовСтр.НомЯщика		= Стр8;
		НовСтр.Примечание	= Стр9;
		//++веденеев 17.07.2017
		НовСтр.ТипИзделия = Стр10;
		Если Не ИмяФайлаЗаписано Тогда
			НовСтр.ИмяФайла = ТекИмяФайла;
			НовСтр.ПутьКФайлу = ТекПутьКФайлу;
			ИмяФайлаЗаписано=Истина;
		КонецЕсли;
		//--веденеев 17.07.2017
		//++веденеев 14.08.2017
		Если Найти(ТекПутьКФайлу,"954")>0 Тогда
			НовСтр.Корабль = "954";
		ИначеЕсли Найти(ТекПутьКФайлу,"956")>0 Тогда
			НовСтр.Корабль = "956";
		КонецЕсли;
		//--веденеев 14.08.2017
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГепард()
	
	//++ веденеев 14.08.2017 начало
	Если ТаблГепард.Количество() = 0 Или ЗагружатьВЗаполненныеТаблицы Тогда 
		
		//++ веденеев 17.07.2017
		ИмяФайла=ТекПутьКФайлу+"\"+ТекИмяФайла;
		ИмяФайла=СтрЗаменить(ИмяФайла,"\\","\");
		ТаблГепард.Очистить();
		Если Найти(ТекИмяФайла,".xls")>0 Тогда
			МассФайлов = Новый Массив;
			МассФайлов.Добавить(Новый Файл(ИмяФайла));
		Иначе
			МассФайлов = НайтиФайлы(ИмяФайла, "*.xls",Истина);
		КонецЕсли;
		ТекНомерЭлементаФайлыЗИП=1;
		ВсегоЭлементовФайлыЗИП=МассФайлов.Количество();
		ДатаНачалаЗагрузки=ТекущаяДата();
		Сообщить("Загрузка данных начата в "+Строка(ДатаНачалаЗагрузки));
		//-- веденеев 17.07.2017
		
		Для каждого Файл Из МассФайлов Цикл
			ИмяФайла=Файл.ПолноеИмя;
			ТекИмяФайла   = Файл.Имя;
			ТекПутьКФайлу = Файл.Путь;
			УправлениеИнтерфейсом.ВывестиТекущееСостояние(ИмяФайла,ДатаНачалаЗагрузки,ТекНомерЭлементаФайлыЗИП,ВсегоЭлементовФайлыЗИП);
			Если СтрНайти(ТекИмяФайла, "~") > 0 ИЛИ СтрНайти(ТекИмяФайла, "$") > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗагрузитьГепард();
			
			ТекНомерЭлементаФайлыЗИП=ТекНомерЭлементаФайлыЗИП+1;
			
		КонецЦикла;
		
		
		Сообщить("Загрузка данных окончена в "+Строка(ТекущаяДата()));
		
	Иначе
		
		Сообщить("Данные уже загружены. Повторная загрузка не требуется");
		
	КонецЕсли;
	//--веденеев 14.08.2017
	
	Состояние("Запись загруженных данных на сервере",,,БиблиотекаКартинок.ДлительнаяОперация48);
	
	//++ веденеев 17.07.2017
	ЗагрузитьНаСервереГепард();
	//-- веденеев 17.07.2017
	Сообщить("Запись загруженных данных окончена в "+Строка(ТекущаяДата()));
	
КонецПроцедуры
#КонецОбласти
//-- 2017030701 05.07.17 Веденеев П. //импорт данных Гепард

//веденеев 15.08.2017 - мурена
#Область ИмпортДанныхМурена

//Мурена new ++

&НаСервере
Функция ПолучитьСоответствиеЕдиницИзмерения()
	
	СоответствиеЕдиницИзмерения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОКЕИ.Код,
	|	ОКЕИ.Ссылка
	|ИЗ
	|	Справочник.ОКЕИ КАК ОКЕИ
	|ГДЕ
	|	НЕ ОКЕИ.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СоответствиеЕдиницИзмерения.Вставить(Выборка.Код,Выборка.Ссылка);
		
	КонецЦикла;
	
	СоответствиеЕдиницИзмерения.Вставить("Пустая",Справочники.ОКЕИ.ПустаяСсылка());
	
	Возврат СоответствиеЕдиницИзмерения;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьМурена()
	
	СоответствиеЕдиницИзмерения = ПолучитьСоответствиеЕдиницИзмерения();
	
	Сообщить("Загрузка данных начата в "+ТекущаяДата());
	
	ТаблМурена2.Очистить();
	
	СтрокаПодключения = "Provider=MSDASQL.1;Persist Security Info=False;Extended Properties=""DSN=Excel Files;DBQ=&Filename;DefaultDir=&Foldername;DriverId=1046;MaxBufferSize=2048;PageTimeout=5;""";
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения,"&Filename",ИмяФайла);
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения,"&Foldername",ТекПутьКФайлу);
	
	Соединение = Новый COMОбъект("ADODB.CONNECTION");
	
	Попытка
		Соединение.Open(СтрокаПодключения);
	Исключение
		ТекИнформацияОбОшибке = "Произошла ошибка: " + ОписаниеОшибки() + ", не подключиться к источнику. Обработка прервана!";
		Сообщить(ТекИнформацияОбОшибке,СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	БД = Новый COMОбъект("ADOX.Catalog");
	БД.ActiveConnection = Соединение;
	
	ТекстЗапроса =
	"select * 
    |from [kat_print_img$]";
	
	НаборЗаписей = Новый COMОбъект("ADODB.RecordSet");
	
	Попытка
		НаборЗаписей.CursorType = 3;
		НаборЗаписей.Open(ТекстЗапроса,Соединение);
	Исключение
		ТекИнформацияОбОшибке = "Не получены данные таблицы файла по причине "+ОписаниеОшибки();
		Сообщить(ТекИнформацияОбОшибке,СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	Сч = 1;
	ВсегоСтрок = НаборЗаписей.RecordCount;
	
	ДатаНачала = ТекущаяДата();
	
	Пока НаборЗаписей.EOF()=0 Цикл
		
		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Чтение данных Мурена",ДатаНачала,Сч,ВсегоСтрок);
		
		СтрокаМурена = ТаблМурена2.Добавить();
		СтрокаМурена.Наименование = СокрЛП(НаборЗаписей.Fields(5).Value);
		СтрокаМурена.Обозначение = СокрЛП(НаборЗаписей.Fields(3).Value);
		СтрокаМурена.Позиция = СокрЛП(НаборЗаписей.Fields(4).Value);
		СтрокаМурена.КодХарактеристики = СокрЛП(НаборЗаписей.Fields(6).Value);
		СтрокаМурена.ИмяХарактеристики = ПолучитьИмяХарактеристикиМурена(СтрокаМурена.КодХарактеристики,СокрЛП(НаборЗаписей.Fields(7).Value));
		СтрокаМурена.ЗначениеХарактеристики = ПолучитьЗначениеХарактеристикиМурена(СтрокаМурена.КодХарактеристики,СокрЛП(НаборЗаписей.Fields(8).Value),СоответствиеЕдиницИзмерения);
		СтрокаМурена.Тип = СокрЛП(НаборЗаписей.Fields(10).Value);
		
		Сч = Сч + 1;
		
		НаборЗаписей.MoveNext();
		
	КонецЦикла;
	
	Сообщить("Загрузка данных окончена в "+ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяХарактеристикиМурена(КодХарактеристики,ИмяХарактеристики)
	
	Если КодХарактеристики = 1 Тогда
		ИмяХарактеристики = "Цена";
	ИначеЕсли КодХарактеристики = 2 Тогда
		ИмяХарактеристики = "фнн"; 
	ИначеЕсли КодХарактеристики = 4 Тогда
		ИмяХарактеристики = "ЕдиницаИзмерения";
	ИначеЕсли КодХарактеристики = 5 Тогда
		ИмяХарактеристики = "КодCAGE";
	ИначеЕсли КодХарактеристики = 6 Тогда
		ИмяХарактеристики = "Поставщик";
	ИначеЕсли КодХарактеристики = 10 Тогда
		ИмяХарактеристики = "СрокВыполнения";
	ИначеЕсли КодХарактеристики = 12 Тогда
		ИмяХарактеристики = "СрокХранения";
	ИначеЕсли КодХарактеристики = 13 Тогда
		ИмяХарактеристики = "ПравилаУпаковкиТранспортировкиХранения";
	ИначеЕсли КодХарактеристики = 14 Тогда
		ИмяХарактеристики = "СрокГодности";
	ИначеЕсли КодХарактеристики = 15 Тогда
		ИмяХарактеристики = "Комментарий";
	ИначеЕсли КодХарактеристики = 21 Тогда
		ИмяХарактеристики = "КоличествоВЗИПБорт";
	ИначеЕсли КодХарактеристики = 22 Тогда
		ИмяХарактеристики = "КоличествоВЗИПБаза";
	ИначеЕсли КодХарактеристики = 23 Тогда
		ИмяХарактеристики = "КоличествоВЗИПДЭ";
	КонецЕсли;
	
	Возврат ИмяХарактеристики;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеХарактеристикиМурена(КодХарактеристики,ЗначениеХарактеристики,СоответствиеЕдиницИзмерения)
	
	Если КодХарактеристики = 4 Или КодХарактеристики = 21 Или КодХарактеристики = 22 Или КодХарактеристики = 23 Тогда
		
		Результат = "";
		
		ПозицияНачала = Найти(ЗначениеХарактеристики,"(")+1;
		ДлинаЗначения = СтрДлина(ЗначениеХарактеристики);
		
		Для Сч = ПозицияНачала По ДлинаЗначения Цикл
			
			ТекСимвол = Сред(ЗначениеХарактеристики,Сч,1);
			
			Если Найти("12345678902",ТекСимвол) > 0 Тогда
				Результат = Результат + ТекСимвол;
			ИначеЕсли ТекСимвол = ")" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
			ЗначениеХарактеристики = ?(КодХарактеристики = 4,СоответствиеЕдиницИзмерения.Получить(Результат),Число(Результат));
		Иначе
			ЗначениеХарактеристики = ?(КодХарактеристики = 4,СоответствиеЕдиницИзмерения.Получить("Пустая"),0);
		КонецЕсли;
		
	ИначеЕсли КодХарактеристики = 1 Тогда
		
		ЗначениеХарактеристики = Число(ЗначениеХарактеристики);
		
	ИначеЕсли КодХарактеристики = 2 Тогда
		
		ЗначениеХарактеристики = Лев(ЗначениеХарактеристики,11)+Прав(ЗначениеХарактеристики,4);
		
	ИначеЕсли КодХарактеристики = 10  Или КодХарактеристики = 12 Или КодХарактеристики = 14 Тогда
		
		ЗначениеХарактеристики = ?(ЗначениеЗаполнено(ЗначениеХарактеристики),Число(ЗначениеХарактеристики),0);
				
	КонецЕсли;
	
	Возврат ЗначениеХарактеристики;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоЛет(ИсходнаяСтрока)
	
	Если Найти(ИсходнаяСтрока,"Не") > 0 Или Найти(ИсходнаяСтрока,"В") > 0 Или Найти(ИсходнаяСтрока,")") > 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ИсходнаяСтрока = "2 года 6 месяцев" Тогда
		Возврат 2.5;
	КонецЕсли; 
	
	ИсходнаяСтрока = СокрЛП(СтрЗаменить(ИсходнаяСтрока,",","."));
	ИсходнаяСтрока = СокрЛП(СтрЗаменить(ИсходнаяСтрока,"года",""));
	ИсходнаяСтрока = СокрЛП(СтрЗаменить(ИсходнаяСтрока,"год",""));
	ИсходнаяСтрока = СокрЛП(СтрЗаменить(ИсходнаяСтрока,"лет",""));
	
	Попытка
		Результат = ?(ЗначениеЗаполнено(ИсходнаяСтрока),Число(ИсходнаяСтрока),0);
	Исключение
		ИсходнаяСтрока = СокрЛП(СтрЗаменить(ИсходнаяСтрока,"месяцев",""));
		ИсходнаяСтрока = СокрЛП(СтрЗаменить(ИсходнаяСтрока,"месяца",""));
		ИсходнаяСтрока = СокрЛП(СтрЗаменить(ИсходнаяСтрока,"месяц",""));
		Результат = ?(ЗначениеЗаполнено(ИсходнаяСтрока),Окр(Число(ИсходнаяСтрока)/12,2),0);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМурена()
	
	Если ТаблМурена.Количество() = 0 Или ЗагружатьВЗаполненныеТаблицы Тогда
		ЗагрузитьМурена();
	Иначе
		Сообщить("Данные уже есть в таблице. Повторная загрузка не требуется!");
	КонецЕсли;
	
	Состояние("Запись данных по мурене на сервере "+Строка(ТекущаяДата()),,,БиблиотекаКартинок.ДлительнаяОперация48);
    ЗагрузитьНаСервереМурена();
	Состояние("Запись данных окончена "+Строка(ТекущаяДата()));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервереМурена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблМурена.Наименование,
	|	ТаблМурена.Обозначение,
	|	ТаблМурена.Позиция,
	|	ТаблМурена.КодХарактеристики,
	|	ТаблМурена.ИмяХарактеристики,
	|	ТаблМурена.ЗначениеХарактеристики,
	|	ТаблМурена.Тип
	|ПОМЕСТИТЬ втМурена
	|ИЗ
	|	&ТаблМурена КАК ТаблМурена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМурена.Наименование КАК Наименование,
	|	втМурена.Обозначение КАК Обозначение,
	|	втМурена.Позиция КАК Позиция,
	|	втМурена.КодХарактеристики,
	|	втМурена.ИмяХарактеристики,
	|	втМурена.ЗначениеХарактеристики,
	|	втМурена.Тип КАК Тип
	|ИЗ
	|	втМурена КАК втМурена
	|
	|УПОРЯДОЧИТЬ ПО
	|	Позиция
	|ИТОГИ
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(Обозначение),
	|	МАКСИМУМ(Тип)
	|ПО
	|	Позиция";
	Запрос.УстановитьПараметр("ТаблМурена",РеквизитФормыВЗначение("ТаблМурена2",Тип("ТаблицаЗначений")));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеРодителей = Новый Соответствие;
	СоответствиеРодителей.Вставить("0",Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка());
	
	ДеревоЗапроса = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Сч = 1;
	
	//++ввод цен
	ТаблицаЦен = ПолучитьТаблицуЦен();
	Заказчик = Справочники.ИностранныеЗаказчики.НайтиПоКоду("010");
	Валюта = Справочники.ОКВ.НайтиПоНаименованию("USD");
	ПустаяЕдиницаИзмерения = Справочники.ОКЕИ.ПустаяСсылка();
	//--ввод цен
	
	Для каждого СтрокаИзделие Из ДеревоЗапроса.Строки Цикл
		
		//++временно для теста
		//Если Сч>=2046 Тогда
		//	Прервать;
		//КонецЕсли; 
		//--временно для теста
		
		ПозицияРодителя = ПолучитьПозициюРодителя(СтрокаИзделие.Позиция);
		Родитель = СоответствиеРодителей.Получить(ПозицияРодителя);
		
		Стру = Новый Структура;
		Стру.Вставить("Наименование",СтрокаИзделие.Наименование);
		Стру.Вставить("Родитель",Родитель);
		Стру.Вставить("ИдентификаторСтроки",Сч);
		Стру.Вставить("Обозначение",СтрокаИзделие.Обозначение);
		
		Для каждого СтрокаХарактеристика Из СтрокаИзделие.Строки Цикл
			
			Сч = Сч + 1;
			
			Если СтрокаХарактеристика.КодХарактеристики < 1 Тогда
				Продолжить;
			ИначеЕсли Не СокрЛП(СтрокаХарактеристика.ЗначениеХарактеристики) = "" И Не СтрокаХарактеристика.ЗначениеХарактеристики = 0 Тогда 
				Попытка
					Стру.Вставить(СтрокаХарактеристика.ИмяХарактеристики,СтрокаХарактеристика.ЗначениеХарактеристики);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НРег(СтрокаИзделие.Тип) = "г" Тогда
			ТекЭлемент = СоздатьГруппу(Стру);
		ИначеЕсли НРег(СтрокаИзделие.Тип) = "и" Тогда
			ТекЭлемент = СоздатьЭлемент(Стру);
		Иначе //зип (з)
			Стру.Вставить("ЭтоЗИП",Истина);
			ТекЭлемент = СоздатьЭлемент(Стру);
		КонецЕсли;
		
		Если Стру.Свойство("Цена") И Стру.Цена > 0 Тогда
			
			ЕдиницаИзмерения = ?(Стру.Свойство("ЕдиницаИзмерения"),Стру.ЕдиницаИзмерения,ПустаяЕдиницаИзмерения);
			
			ДобавитьЦенуВТаблицуЦен(ТаблицаЦен,ТекЭлемент.ПредметСнабжения,Заказчик,Стру.Цена,Валюта,ЕдиницаИзмерения);
			
		КонецЕсли; 
		
		СоответствиеРодителей.Вставить(СтрокаИзделие.Позиция,ТекЭлемент);
		
	КонецЦикла;
	
	ЗаписатьЦеныМурена(ТаблицаЦен);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПозициюРодителя(ПозицияЭлемента)
	
	ПозицияРазделителя = СтрНайти(ПозицияЭлемента,".",НаправлениеПоиска.СКонца);
	
	Если ПозицияРазделителя = 0 Тогда
		Возврат "0";
	Иначе
		Возврат Лев(ПозицияЭлемента,ПозицияРазделителя - 1);
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЦен()
	
	ТаблицаЦен = Новый ТаблицаЗначений;
	ТаблицаЦен.Колонки.Добавить("ПредметСнабжения",Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения"));
	ТаблицаЦен.Колонки.Добавить("ТипЦены",Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЦен"));
	ТаблицаЦен.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.ИностранныеЗаказчики"));
	ТаблицаЦен.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(14,2)));
	ТаблицаЦен.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(8,2)));
	ТаблицаЦен.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.ОКВ"));
	ТаблицаЦен.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ОКЕИ"));
	ТаблицаЦен.Колонки.Добавить("Статус",Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКонтрактов"));
	
	Возврат ТаблицаЦен;
	
КонецФункции

Процедура ДобавитьЦенуВТаблицуЦен(ТаблицаЦен,ПредметСнабжения,Заказчик,Цена,Валюта,ЕдиницаИзмерения)
	
	СтрокаТаблицыЦен = ТаблицаЦен.Добавить();
	СтрокаТаблицыЦен.ПредметСнабжения = ПредметСнабжения;
	СтрокаТаблицыЦен.ТипЦены = Перечисления.ТипыЦен.Внешняя;
	СтрокаТаблицыЦен.Контрагент = Заказчик;
	СтрокаТаблицыЦен.Цена = Цена;
	СтрокаТаблицыЦен.Количество = 0;
	СтрокаТаблицыЦен.Валюта = Валюта;
	СтрокаТаблицыЦен.ЕдиницаИзмерения = ЕдиницаИзмерения;
	СтрокаТаблицыЦен.Статус = Перечисления.СтатусыКонтрактов.Активен;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЦеныМурена(ТаблицаЦен)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЦен.ПредметСнабжения,
	|	ТаблицаЦен.ТипЦены,
	|	ТаблицаЦен.Контрагент,
	|	ТаблицаЦен.Цена,
	|	ТаблицаЦен.Количество,
	|	ТаблицаЦен.Валюта,
	|	ТаблицаЦен.ЕдиницаИзмерения,
	|	ТаблицаЦен.Статус
	|ПОМЕСТИТЬ втТаблицаЦена
	|ИЗ
	|	&ТаблицаЦен КАК ТаблицаЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаЦена.ПредметСнабжения КАК ПредметСнабжения,
	|	втТаблицаЦена.ТипЦены,
	|	втТаблицаЦена.Контрагент,
	|	втТаблицаЦена.Цена КАК Цена,
	|	втТаблицаЦена.Количество,
	|	втТаблицаЦена.Валюта,
	|	втТаблицаЦена.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втТаблицаЦена.Статус
	|ПОМЕСТИТЬ втТаблицаЦенРазличные
	|ИЗ
	|	втТаблицаЦена КАК втТаблицаЦена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	ЕдиницаИзмерения,
	|	Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаЦенРазличные.ПредметСнабжения,
	|	втТаблицаЦенРазличные.ТипЦены,
	|	втТаблицаЦенРазличные.Контрагент,
	|	втТаблицаЦенРазличные.Цена,
	|	втТаблицаЦенРазличные.Количество,
	|	втТаблицаЦенРазличные.Валюта,
	|	втТаблицаЦенРазличные.ЕдиницаИзмерения,
	|	втТаблицаЦенРазличные.Статус,
	|	КОЛИЧЕСТВО(Порядок.Цена) КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втТаблицаЦенСНумерацией
	|ИЗ
	|	втТаблицаЦенРазличные КАК втТаблицаЦенРазличные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаЦенРазличные КАК Порядок
	|		ПО втТаблицаЦенРазличные.ПредметСнабжения = Порядок.ПредметСнабжения
	|			И втТаблицаЦенРазличные.ЕдиницаИзмерения = Порядок.ЕдиницаИзмерения
	|			И втТаблицаЦенРазличные.Цена >= Порядок.Цена
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЦенРазличные.ПредметСнабжения,
	|	втТаблицаЦенРазличные.ТипЦены,
	|	втТаблицаЦенРазличные.Контрагент,
	|	втТаблицаЦенРазличные.Цена,
	|	втТаблицаЦенРазличные.Количество,
	|	втТаблицаЦенРазличные.Валюта,
	|	втТаблицаЦенРазличные.ЕдиницаИзмерения,
	|	втТаблицаЦенРазличные.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЦенСНумерацией.ПредметСнабжения,
	|	втТаблицаЦенСНумерацией.ТипЦены,
	|	втТаблицаЦенСНумерацией.Контрагент,
	|	втТаблицаЦенСНумерацией.Цена,
	|	втТаблицаЦенСНумерацией.Количество,
	|	втТаблицаЦенСНумерацией.Валюта,
	|	втТаблицаЦенСНумерацией.ЕдиницаИзмерения,
	|	втТаблицаЦенСНумерацией.Статус,
	|	втТаблицаЦенСНумерацией.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	втТаблицаЦенСНумерацией КАК втТаблицаЦенСНумерацией
	|ИТОГИ ПО
	|	ПорядковыйНомер";
	Запрос.УстановитьПараметр("ТаблицаЦен",ТаблицаЦен);
	
	ДеревоЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДатаЦен = Дата("20021231235959"); 
	
	Для каждого СтрокаПорядковыйНомер Из ДеревоЗапроса.Строки Цикл
		
		ВводНачальныхОстатковЦен = Документы.ВводНачальныхОстатковЦен.СоздатьДокумент();
		ВводНачальныхОстатковЦен.Дата = ДатаЦен;
		ВводНачальныхОстатковЦен.Комментарий = "Ввод цен по проекту Мурена. Осуществлен "+Строка(ТекущаяДата());
		
		Для каждого СтрокаЦены Из СтрокаПорядковыйНомер.Строки Цикл
			
			СтрокаЦеныДокумента = ВводНачальныхОстатковЦен.Цены.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЦеныДокумента,СтрокаЦены);
			
		КонецЦикла;
		
		ВводНачальныхОстатковЦен.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Создан документ "+Строка(ВводНачальныхОстатковЦен.Ссылка));
		
	КонецЦикла; 
	
КонецПроцедуры

//Мурена new --


// Мурена old+++

//&НаСервере
//Процедура ЗагрузитьНаСервереМурена()
//	
//	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
//	СпрЗипПустая = СпрЗип.ПустаяСсылка();
//	
//	Родители = Новый Массив;
//	Родители.Вставить(0, СпрЗипПустая);
//	
//	ОбновлятьПС = Истина;
//	
//	ТЗ_Цен = ВернутьТаблицуДляЦен();
//	ДолларСША = Справочники.ОКВ.НайтиПоКоду("840");
//	ИнЗаказчик = НайтиСоздатьИностранногоЗаказчика("Республика Корея");
//	
//	ВсегоКол = ТаблМурена.Количество()-1;
//	
//	Для каждого стр Из ТаблМурена Цикл
//		
//		ЭтоГруппа  = Ложь;
//		ЭтоИзделие = Ложь;
//		ЭтоЗИП 	   = Ложь;
//		Наименование = Стр.Наименование;
//		
//		Уровни = СтрРазделить(стр.Уровень, ".");
//		КолУровней = Уровни.Количество();
//		Если КолУровней = 1 Тогда
//			РодительГр = СпрЗипПустая;
//		Иначе
//			РодительГр = ?(Родители.Количество() = 1, Родители[0], Родители[Число(КолУровней)-1]); // Родители.ВГраница()-1
//		КонецЕсли;				
//		
//		Инд = ?(ТаблМурена.Индекс(Стр)+1 >= ВсегоКол, ВсегоКол, ТаблМурена.Индекс(Стр)+1);
//		СледСтрока = ТаблМурена[Инд];
//		СледУровни = СтрРазделить(СледСтрока.Уровень, ".");
//		Если СледУровни.Количество() > КолУровней Тогда
//			стр.ГрИзд = "-1";
//		КонецЕсли;
//		
//		
//		//++ веденеев 15.08.2017 - меняем алгоритм определения типа
//		
//		ЭтоГрИзд = Ложь;
//		
//		Если НРег(Стр.Тип) = "г" Тогда
//			ЭтоГруппа  = Истина;
//			ЭтоГрИзд = Истина;
//		ИначеЕсли НРег(Стр.Тип) = "и" Тогда
//			ЭтоИзделие = Истина;
//			ЭтоГрИзд = Истина;
//		Иначе
//			ЭтоЗИП = Истина;
//		КонецЕсли; 
//		
//		//Если НРег(стр.ГрИзд) = "-1" Тогда // Группа или изделие
//		//	Если стр.Обозначение = "" Тогда
//		//		ЭтоГруппа  = Истина;
//		//	Иначе 
//		//		ЭтоИзделие = Истина;
//		//	КонецЕсли; 
//		//	ЭтоГрИзд = Истина;
//		//Иначе
//		//	ЭтоЗИП = Истина;
//		//КонецЕсли;
//		
//		//-- веденеев 15.08.2017 - меняем алгоритм определения типа
//		
//		Стру = Новый Структура;
//		Стру.Вставить("Наименование", Наименование);
//		Стру.Вставить("Родитель", 	  РодительГр);
//		Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
//		Стру.Вставить("Обозначение",  	  Стр.Обозначение);
//		Стру.Вставить("ЕдиницаИзмерения", Стр.ЕдИзмерения);
//		Если ЗначениеЗаполнено(Стр.Поставщик) Тогда
//			Стру.Вставить("Поставщик",Стр.Поставщик);
//		КонецЕсли;
//		Если ЗначениеЗаполнено(Стр.фнн) Тогда
//			Стру.Вставить("фнн",Стр.фнн);
//		КонецЕсли;
//		Если ЗначениеЗаполнено(Стр.МестоХранения) Тогда
//			Стру.Вставить("МестоХранения",Стр.МестоХранения);
//		КонецЕсли;
//		Если ЗначениеЗаполнено(Стр.ТехОписание) Тогда
//			Стру.Вставить("ТехОписание",Стр.ТехОписание);
//		КонецЕсли;
//		Если ЗначениеЗаполнено(Стр.СрокГодности) Тогда
//			Стру.Вставить("СрокГодности",Стр.СрокГодности);
//		КонецЕсли;
//		Если ЗначениеЗаполнено(Стр.ТехОписание) Тогда
//			Стру.Вставить("ТехОписание",Стр.ТехОписание);
//		КонецЕсли;
//		Если ЗначениеЗаполнено(Стр.ТехОписание) Тогда
//			Стру.Вставить("ТехОписание",Стр.ТехОписание);
//		КонецЕсли;
//		Если ЗначениеЗаполнено(Стр.ТехОписание) Тогда
//			Стру.Вставить("ТехОписание",Стр.ТехОписание);
//		КонецЕсли;
//		Стру.Вставить("СрокХранения",  	  Стр.СрокХранения);
//		Стру.Вставить("СрокВыполнения",   Стр.СрокВыполнения);
//		Стру.Вставить("КодCAGE",  	  	  Стр.КодCAGE);
//		
//		Если ЭтоГруппа Тогда
//			Родитель1 = СоздатьГруппу(Стру);
//		ИначеЕсли ЭтоИзделие Тогда
//			Родитель1 = СоздатьЭлемент(Стру);
//			ЭлемСсылка = Родитель1;
//		Иначе
//			Стру.Вставить("ЭтоЗИП", Истина);
//			ЭлемСсылка = СоздатьЭлемент(Стру);
//		КонецЕсли; 
//		
//		Если ЭтоГрИзд Тогда
//			//Если КолУровней = 1 Тогда 
//			//	Попытка Родители.Установить(1, Родитель1);	Исключение Родители.Вставить(1, Родитель1); КонецПопытки;
//			//КонецЕсли;
//			//Если КолУровней = 2 Тогда 
//			//	Попытка Родители.Установить(2, Родитель1);	Исключение Родители.Вставить(2, Родитель1); КонецПопытки;
//			//КонецЕсли;
//			//Если КолУровней = 3 Тогда 
//			//	Попытка Родители.Установить(3, Родитель1);	Исключение Родители.Вставить(3, Родитель1); КонецПопытки;
//			//КонецЕсли;
//			//Если КолУровней = 4 Тогда 
//			//	Попытка Родители.Установить(4, Родитель1);	Исключение Родители.Вставить(4, Родитель1); КонецПопытки;
//			//КонецЕсли;
//			//Если КолУровней = 5 Тогда 
//			//	Попытка Родители.Установить(5, Родитель1);	Исключение Родители.Вставить(5, Родитель1); КонецПопытки;
//			//КонецЕсли;
//			//Если КолУровней = 6 Тогда 
//			//	Попытка Родители.Установить(6, Родитель1);	Исключение Родители.Вставить(6, Родитель1); КонецПопытки;
//			//КонецЕсли;
//			//Если КолУровней = 7 Тогда 
//			//	Попытка Родители.Установить(7, Родитель1);	Исключение Родители.Вставить(7, Родитель1); КонецПопытки;
//			//КонецЕсли;
//			Попытка
//				Родители.Установить(КолУровней,Родитель1);
//			Исключение
//			    Родители.Вставить(КолУровней,Родитель1);
//			КонецПопытки;
//			Для инд = КолУровней+1 По Родители.ВГраница() Цикл
//				ДелИнд = Родители.ВГраница();
//				Родители.Удалить(ДелИнд);
//				ДелИнд = ДелИнд - 1;
//			КонецЦикла; 
//		КонецЕсли; 
//		
//		ЭлемСсылка = СоздатьЭлемент(Стру);
//		ЭлемПС = ЭлемСсылка.ПредметСнабжения;
//		Если ТЗ_Цен.Найти(ЭлемПС, "ПредметСнабжения") = Неопределено Тогда
//			Если НЕ Стр.Цена = "" Тогда
//				НовСтр = ТЗ_Цен.Добавить();
//				НовСтр.ПредметСнабжения = ЭлемПС;
//				НовСтр.ТипЦены = Перечисления.ТипыЦен.Внешняя; 
//				НовСтр.Контрагент = ИнЗаказчик;
//				НовСтр.Цена = Стр.Цена;
//				НовСтр.Количество = 0;
//				НовСтр.Валюта = ДолларСША;
//				НовСтр.ЕдиницаИзмерения = "";
//				НовСтр.ДатаЦены = "2006"
//			КонецЕсли; 
//		Иначе 
//			//Сообщить("Дубль " + Строка(ЭлемПС));
//		КонецЕсли; 
//		
//	КонецЦикла; 
//	
//	ТЗ_Годов = ТЗ_Цен.Скопировать();
//	ТЗ_Годов.Свернуть("ДатаЦены");
//	
//	Для каждого Стр Из ТЗ_Годов Цикл
//		Если НЕ СтрДлина(Стр.ДатаЦены) = 4 Тогда
//			Продолжить;
//		КонецЕсли; 
//		НовТЗ = ТЗ_Цен.Скопировать(ТЗ_Цен.НайтиСтроки(Новый Структура("ДатаЦены", Стр.ДатаЦены)));
//		СоздатьВводЦен(НовТЗ, КонецГода(Дата(Стр.ДатаЦены, 11, 30)));
//	КонецЦикла; 
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗагрузитьМурена()
//	
//	ДатаНачала = ТекущаяДата();
//	
//	Эксель = ПодключитсяКЭксель();
//	
//	ТаблМурена.Очистить();
//	
//	НачалоСтроки = 2;
//	
//	// Лист оборудование
//	ЛистЭксель = Эксель.WorkSheets(1); 
//	
//	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
//	
//	номпп=0;
//	Для сч = НачалоСтроки По ВсегоСтрок Цикл // Самую первую пропускаем
//		
//		УправлениеИнтерфейсом.ВывестиТекущееСостояние("Загрузка данных Мурена",ДатаНачала,Сч,ВсегоСтрок);
//		
//		Стр1 = СокрЛП(ЛистЭксель.Cells(сч, 1).value);
//		Стр2 = СокрЛП(ЛистЭксель.Cells(сч, 2).value);
//		Стр3 = СокрЛП(ЛистЭксель.Cells(сч, 3).value);
//		Стр4 = СокрЛП(ЛистЭксель.Cells(сч, 4).value);
//		Стр5 = СокрЛП(ЛистЭксель.Cells(сч, 5).value);
//		Стр6 = СокрЛП(ЛистЭксель.Cells(сч, 6).value);
//		Стр7 = СокрЛП(ЛистЭксель.Cells(сч, 7).value);
//		Стр8 = СокрЛП(ЛистЭксель.Cells(сч, 8).value);
//		Стр9 = СокрЛП(ЛистЭксель.Cells(сч, 9).value);
//		Стр10 = СокрЛП(ЛистЭксель.Cells(сч, 10).value);
//		Стр11 = СокрЛП(ЛистЭксель.Cells(сч, 11).value); //веденеев 15.08.2017 - чтение типа		
//		Если Стр6 = "" ИЛИ Стр6 = "2" Тогда
//			Продолжить;
//		КонецЕсли; 
//		
//		//Если Стр1 = "" И (СтрНайти(НРег(Стр2), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр2), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр2), "пакет") > 0
//		//	ИЛИ СтрНайти(НРег(Стр2), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр2), "упаковка") > 0 ИЛИ СтрНайти(НРег(Стр2), "материал") > 0
//		//	ИЛИ СтрНайти(НРег(Стр2), "запасные части") > 0 ИЛИ СтрНайти(НРег(Стр2), "инструмент") > 0 ИЛИ СтрНайти(НРег(Стр2), "принадлежности") > 0 
//		//	ИЛИ СтрНайти(НРег(Стр2), "комплект зип к") > 0 ИЛИ СтрНайти(НРег(Стр2), "ключи") > 0 ИЛИ СтрНайти(НРег(Стр2), "комплект запасных частей") > 0
//		//	ИЛИ СтрНайти(НРег(Стр2), "сигнализаторы давления") > 0)
//		//	Тогда
//		//	Продолжить;
//		//КонецЕсли;         
//		номпп = номпп+1;
//		
//		Найд = ТаблМурена.НайтиСтроки(Новый Структура("Позиция", Стр1));
//		Если Найд.Количество() = 0 Тогда
//			НовСтр = ТаблМурена.Добавить();
//			НовСтр.НомПП			= номпп;
//			НовСтр.Позиция          = Стр1;
//			НовСтр.Уровень          = Стр5;
//			НовСтр.Наименование     = Стр6;
//			НовСтр.Обозначение      = Стр4;
//			НовСтр.ГрИзд            = Стр7;
//			НовСтр.цена				= Стр9;
//			НовСтр.Тип              = Стр11; //веденеев 15.08.2017 - чтение типа
//		Иначе
//			НовСтр = Найд[0];
//			Если Стр7 = "1" Тогда
//				НовСтр.цена = Стр9;
//			ИначеЕсли Стр7 = "2" Тогда
//				НовСтр.фнн = Стр9;
//			ИначеЕсли Стр7 = "4" Тогда
//				Поз = СтрНайти(Стр9, "(");
//				НовСтр.ЕдИзмерения = СокрЛП(СтрЗаменить(Лев(Стр9, поз-1), ".", ""));
//			ИначеЕсли Стр7 = "5" Тогда
//				НовСтр.КодCAGE = Стр9;
//			ИначеЕсли Стр7 = "6" Тогда
//				НовСтр.Поставщик = Стр9;
//			ИначеЕсли Стр7 = "10" Тогда
//				НовСтр.СрокВыполнения = СокрЛП(СтрЗаменить(Стр9, "дней", ""));
//			ИначеЕсли Стр7 = "12" Тогда
//				НовСтр.СрокХранения = СокрЛП(СтрЗаменить(Стр9, "лет", ""));
//			ИначеЕсли Стр7 = "13" Тогда
//				НовСтр.МестоХранения = Стр9;
//			ИначеЕсли Стр7 = "14" Тогда
//				НовСтр.СрокГодности = СокрЛП(СтрЗаменить(Стр9, "лет", ""));
//			ИначеЕсли Стр7 = "15" Тогда
//				НовСтр.ТехОписание = Стр9;
//			ИначеЕсли Стр7 = "21" Тогда
//				Продолжить;
//			ИначеЕсли Стр7 = "27" Тогда
//				Продолжить;
//			Иначе
//				Продолжить;
//			КонецЕсли; 
//		КонецЕсли; 
//		НовСтр.Количество = "";
////1	Цена
////2	ФНН
////4	Единица измерения (код)
////5	CAGE-код предприятия изготовителя
////6	Поставщик
////10	Срок выполнения заявки
////12	Срок хранения
////13	Условия хранения
////14	Срок годности
////15	Краткое техническое описание
////21	Ведомость бортового ЗИП - 12061Э-902-202ЗИ (кол-во)
////27	Ведомость берегового оборудования - 12061Э-810-103 (кол-во)
//		
//	КонецЦикла;
//	
//	Эксель.Application.Quit();
//	Эксель    = Неопределено;
//	

//			
//КонецПроцедуры

//&НаКлиенте
//Процедура ЗаполнитьМурена()
//	
//	//Файл = Новый Файл(ИмяФайла);
//	//ТекИмяФайла   = Файл.Имя;
//	//ТекПутьКФайлу = Файл.Путь;
//	
//	//Каталог = "W:\КТ\зип-Э\Зеленодольское ПКБ\Новые данные май от ОСК\UnPack\";
//	//
//	//МассФайлов = НайтиФайлы(Каталог, "*.xls");
//	//
//	//Для каждого Файл Из МассФайлов Цикл
//		//ТекИмяФайла   = Файл.Имя;
//		//ТекПутьКФайлу = Файл.Путь;
//		//Если СтрНайти(ТекИмяФайла, "~") > 0 ИЛИ СтрНайти(ТекИмяФайла, "$") > 0 Тогда
//		//	Продолжить;
//		//КонецЕсли;
//	Если ТаблМурена.Количество() = 0 Или ЗагружатьВЗаполненныеТаблицы Тогда
//		ЗагрузитьМурена();
//	Иначе
//		Сообщить("Данные уже есть в таблице. Повторная загрузка не требуется!");
//	КонецЕсли;
//	
//	Состояние("Запись данных по мурене на сервере",,,БиблиотекаКартинок.ДлительнаяОперация48);
//	ЗагрузитьНаСервереМурена();
//		
//	//КонецЦикла; 
//	
//КонецПроцедуры


// Мурена old ---
 
#КонецОбласти 


//++ 1241РЭ


&НаСервере
Функция ЗагрузитьНаСервере1241РЭ()
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	РодительВерх = СпрЗипПустая;	
	
	//НовСтр.Реквизит01 = Стр1;  // 1 "№ п/п"	
	//НовСтр.Реквизит02 = Стр2;  // 2 Наименование и краткая техническая характеристика
	//НовСтр.Реквизит03 = Стр3;  // 3 "Тип, индекс или параметры"
	//НовСтр.Реквизит04 = Стр4;  // 4 "Код оборудования"	
	//НовСтр.Реквизит05 = Стр5;  // 5 "Обозначение документа на поставку (ТУ, чертежа, стандарта, нормали  или каталога)"	
	//НовСтр.Реквизит06 = Стр6;  // 6 "Код вида документа"	
	//НовСтр.Реквизит07 = Стр7;  // 7 Количество	"единица измерения"
	//НовСтр.Реквизит08 = Стр8;  // 8 "код единицы измерения"
	//НовСтр.Реквизит09 = Стр9;  // 9 "количество на объект"
	//НовСтр.Реквизит10 = Стр10; // 10 Масса	"единица измерения"
	//НовСтр.Реквизит11 = Стр11; // 11 "код единицы измерения"
	//НовСтр.Реквизит12 = Стр12; // 12 единицы
	//НовСтр.Реквизит13 = Стр13; // 13 Условное наименование	поставщика
	//НовСтр.Реквизит14 = Стр14; // 14 "держатель подлинника"
	//НовСтр.Реквизит15 = Стр15; // 15 Оптовая цена ед., руб.	Себестоимость ед., руб.
	//НовСтр.Реквизит16 = Стр16; // 16 "% тех. готовности к моменту поставки"	
	//НовСтр.Реквизит17 = Стр17; // 17 Примечание	
	
	СоответствиеРодителей = Новый Соответствие;
	ТекРодитель="";
	
	Для каждого Стр Из ТаблУниверсальная Цикл
		
		ЭтоГруппа  = Ложь;
		ЭтоИзделие = Ложь;
		ЭтоЗИП 	   = Ложь;
		
		//Если Не ЗначениеЗаполнено(Стр.Позиция) И ВРег(Стр.ТипИзделия)="Г" Тогда
		//	видПозиции = ВернутьВидПозиции(Стр.Наименование);
		//	Продолжить;
		//КонецЕсли;

		Стр.Позиция = СтрЗаменить(Стр.Позиция," ","");
		Стр.Позиция = СтрЗаменить(Стр.Позиция,"..",".");
		
		Если Прав(Стр.Позиция,1)="." Тогда
			Стр.Позиция=Лев(Стр.Позиция,СтрДлина(Стр.Позиция)-1);
		КонецЕсли;
		
		ИндексРодителя=ПолучитьИндексРодителя(Стр.Позиция);
		РодительГр=СоответствиеРодителей[ИндексРодителя];
		Если РодительГр = Неопределено Тогда
			РодительГр = ТекРодитель;
		КонецЕсли;
				
		Стру = Новый Структура;
		Стру.Вставить("Количество",   Стр.Количество);
		Стру.Вставить("Наименование", Стр.Наименование);
		Стру.Вставить("Обозначение",   Стр.Обозначение);
		Стру.Вставить("МестоХранения", Стр.МестоХранения+" "+Стр.НомЯщика);
		Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
		Стру.Вставить("Родитель", РодительГр);
		
		Если ВРег(Стр.ТипИзделия)="И" Тогда
			ЭтоИзделие=Истина;
		ИначеЕсли ВРег(Стр.ТипИзделия)="Г" Тогда
			ЭтоГруппа=Истина;
		ИначеЕсли Стр.ЕдИзмерения="к-т" Тогда
			ЭтоИзделие=Истина;
		Иначе
			ЭтоЗИП=Истина;
		КонецЕсли;
		
		Если ЭтоИзделие Тогда
			ТекЭлемент = СоздатьЭлемент(Стру);
			ТекРодитель = ТекЭлемент;
		ИначеЕсли ЭтоГруппа Тогда 
			ТекЭлемент = СоздатьГруппу(Стру);
			ТекРодитель = ТекЭлемент;
		ИначеЕсли ЭтоЗИП Тогда
			Стру.Удалить("Количество");
			Стру.Вставить("ЕдиницаИзмерения", 	 Стр.ЕдИзмерения);
			Стру.Вставить("КодМассы", 	  	     "166"); // 166 - кг
			Стру.Вставить("МассаЕдиницы", 	  	 Стр.МассаЕдиницы); 
			Стру.Вставить("ИдентификаторСтроки", Стр.НомПП);
			Стру.Вставить("ЭтоЗИП", Истина);
			Стру.Вставить("КоличествоВЗИПБорт",  Стр.Количество);
			Стру.Вставить("Поставщик", Стр.Примечание);
			ТекЭлемент = СоздатьЭлемент(Стру);
		КонецЕсли;
		
		СоответствиеРодителей.Вставить(Стр.Позиция,ТекЭлемент);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура Загрузить1241РЭ_1()
	
	Эксель = ПодключитсяКЭксель();
	
	ТаблУниверсальная.Очистить();
	
	// Лист оборудование
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	номпп=0;
	
	Для сч = 5 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1  = СокрЛП(ЛистЭксель.Cells(сч, 1).value);
		Стр2  = СокрЛП(ЛистЭксель.Cells(сч, 2).value);
		Стр3  = СокрЛП(ЛистЭксель.Cells(сч, 3).value);
		Стр4  = СокрЛП(ЛистЭксель.Cells(сч, 4).value);
		Стр5  = СокрЛП(ЛистЭксель.Cells(сч, 5).value);
		Стр6  = СокрЛП(ЛистЭксель.Cells(сч, 6).value);
		Стр7  = СокрЛП(ЛистЭксель.Cells(сч, 7).value);
		Стр8  = СокрЛП(ЛистЭксель.Cells(сч, 8).value);
		Стр9  = СокрЛП(ЛистЭксель.Cells(сч, 9).value);
		Стр10 = СокрЛП(ЛистЭксель.Cells(сч, 10).value);
		Стр11 = СокрЛП(ЛистЭксель.Cells(сч, 11).value);
		Стр12 = СокрЛП(ЛистЭксель.Cells(сч, 12).value);
		Стр13 = СокрЛП(ЛистЭксель.Cells(сч, 13).value);
		Стр14 = СокрЛП(ЛистЭксель.Cells(сч, 14).value);
		Стр15 = СокрЛП(ЛистЭксель.Cells(сч, 15).value);
		Стр16 = СокрЛП(ЛистЭксель.Cells(сч, 16).value);
		Стр17 = СокрЛП(ЛистЭксель.Cells(сч, 17).value);
		
		Если Стр5 = "" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрНайти(НРег(Стр5), "ящик") > 0 ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 Тогда
			Продолжить;
		КонецЕсли;         
		
		номпп  = номпп+1;
		НовСтр = ТаблУниверсальная.Добавить();
		НовСтр.Реквизит01 = Стр1;  // 1 "№ п/п"	
		НовСтр.Реквизит02 = Стр2;  // 2 Наименование и краткая техническая характеристика
		НовСтр.Реквизит03 = Стр3;  // 3 "Тип, индекс или параметры"
		НовСтр.Реквизит04 = Стр4;  // 4 "Код оборудования"	
		НовСтр.Реквизит05 = Стр5;  // 5 "Обозначение документа на поставку (ТУ, чертежа, стандарта, нормали  или каталога)"	
		НовСтр.Реквизит06 = Стр6;  // 6 "Код вида документа"	
		НовСтр.Реквизит07 = Стр7;  // 7 Количество	"единица измерения"
		НовСтр.Реквизит08 = Стр8;  // 8 "код единицы измерения"
		НовСтр.Реквизит09 = Стр9;  // 9 "количество на объект"
		НовСтр.Реквизит10 = Стр10; // 10 Масса	"единица измерения"
		НовСтр.Реквизит11 = Стр11; // 11 "код единицы измерения"
		НовСтр.Реквизит12 = Стр12; // 12 единицы
		НовСтр.Реквизит13 = Стр13; // 13 Условное наименование	поставщика
		НовСтр.Реквизит14 = Стр14; // 14 "держатель подлинника"
		НовСтр.Реквизит15 = Стр15; // 15 Оптовая цена ед., руб.	Себестоимость ед., руб.
		НовСтр.Реквизит16 = Стр16; // 16 "% тех. готовности к моменту поставки"	
		НовСтр.Реквизит17 = Стр17; // 17 Примечание	
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
	
	ЗагрузитьНаСервере1241РЭ();
			
КонецПроцедуры

&НаКлиенте
Процедура Заполнить1241РЭ()
	
	Файл = Новый Файл(ИмяФайла);
	ТекИмяФайла   = Файл.Имя;
	ТекПутьКФайлу = Файл.Путь;
	                               
	//Если СтрНайти(НРег(ИмяФайла), "взизд_1241РЭ") > 0 Тогда
		Загрузить1241РЭ_1();                   
	//ИначеЕсли СтрНайти(НРег(ИмяФайла), "копия спчв проект-1241РЭ") > 0 Тогда
	//	Загрузить1241РЭ_2();
	//КонецЕсли; 
	
КонецПроцедуры

//-- 1241РЭ


//++ Общая


&НаСервере
Функция ЗагрузитьНаСервереОбщая()
	
	СпрЗип = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП;
	СпрЗипПустая = СпрЗип.ПустаяСсылка();
	РодительВерх = СпрЗипПустая;	
	
	//НовСтр.Реквизит01 = Стр1;  // 1 Уровень	
	//НовСтр.Реквизит02 = Стр2;  // 2 Тип
	//НовСтр.Реквизит03 = Стр3;  // 3 НомПП
	//НовСтр.Реквизит04 = Стр4;  // 4 Наименование	
	//НовСтр.Реквизит05 = Стр5;  // 5 ДопНаименование	
	//НовСтр.Реквизит06 = Стр6;  // 6 Обозначение	
	//НовСтр.Реквизит07 = Стр7;  // 7 "единица измерения"
	//НовСтр.Реквизит08 = Стр8;  // 8 количество
	
	СоответствиеРодителей = Новый Соответствие;
	
	Родители = Новый Массив;
	Родители.Вставить(0, СпрЗипПустая);
	
	Для каждого Стр Из ТаблУниверсальная Цикл
		
		ТекИмяФайла = Стр.ТекИмяФайла;
		ТекПутьКФайлу = Стр.ТекПутьКФайлу;
		
		ЭтоГруппа  = Ложь;
		ЭтоИзделие = Ложь;
		ЭтоЗИП 	   = Ложь;
		
		ПозицияРодителя = ПолучитьПозициюРодителя(Стр.Реквизит01);
		Если ПозицияРодителя <> "0" Тогда
			ПозицияРодителя = Стр.ИмяФайла + "|" + ПозицияРодителя;
		КонецЕсли; 
		Родитель = СоответствиеРодителей.Получить(ПозицияРодителя);
		
		Наименование = ?(Стр.Реквизит05 = "", "", Стр.Реквизит05 + ". ") + Стр.Реквизит04;
		
		Стру = Новый Структура;
		Стру.Вставить("Количество",   Стр.Реквизит08);
		Стру.Вставить("Наименование", Наименование);
		Если Стр.Это956 Тогда
			Стру.Вставить("Обозначение",   Стр.Реквизит06);
		Иначе
			Стру.Вставить("ДокНаПоставку", Стр.Реквизит06);
		КонецЕсли; 
		Стру.Вставить("ИдентификаторСтроки", Стр.Реквизит03);
		Стру.Вставить("ЕдиницаИзмерения", 	 Стр.Реквизит07);
		Стру.Вставить("Родитель", Родитель);
		
		Если ВРег(Стр.Реквизит02)="И" Тогда
			ЭтоИзделие = Истина;
			//++веденеев 14.08.2017 - добавлено чтение поставщика
			Если ЗначениеЗаполнено(Стр.Реквизит16) Тогда
				Стру.Вставить("Поставщик",Стр.Реквизит16);
			КонецЕсли;
			//--веденеев 14.08.2017 - добавлено чтение поставщика
		ИначеЕсли ВРег(Стр.Реквизит02)="Г" Тогда
			ЭтоГруппа = Истина;
		ИначеЕсли ВРег(Стр.Реквизит02)="З" Тогда
			ЭтоЗИП = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭтоИзделие Тогда
			ТекЭлемент = СоздатьЭлемент(Стру);
		ИначеЕсли ЭтоГруппа Тогда 
			ТекЭлемент = СоздатьГруппу(Стру);
		ИначеЕсли ЭтоЗИП Тогда
			Стру.Удалить("Количество");
			Стру.Вставить("ЭтоЗИП", Истина);
			Стру.Вставить("КоличествоВЗИПБорт",  Стр.Реквизит08);
			ТекЭлемент = СоздатьЭлемент(Стру,);
		КонецЕсли;
		
		СоответствиеРодителей.Вставить(Стр.ИмяФайла + "|" + Стр.Реквизит01,ТекЭлемент);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеВЯчейкеОбщая(Лист, Строка, Колонка)
	
	ЗначениеВЯчейке = СокрЛП(Лист.Cells(Строка, Колонка).value);
	
	Если ТипЗнч(ЗначениеВЯчейке) = Тип("Строка") Тогда
		ЗначениеВЯчейке = СокрЛП(СтрЗаменить(ЗначениеВЯчейке, "/-/", ""));
		Возврат СтрЗаменить(ЗначениеВЯчейке,Символы.ПС," ");
	Иначе
		Возврат ЗначениеВЯчейке;
	КонецЕсли;
	
КонецФункции
 
&НаКлиенте
Процедура ЗагрузитьОбщая()
	
	Эксель = ПодключитсяКЭксель();
	
	// Лист оборудование
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	номпп=0;
	
	Для сч = 4 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,1);
		Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,2);
		Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,3);
		Стр4  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,4);
		Стр5  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,5);
		Стр6  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,6);
		Стр7  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,7);
		Стр8  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,8);
		Стр16 = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,16); //веденеев 14.08.2017 - добавлено чтение поставщика
		
		Если Стр2 = "" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрНайти(НРег(Стр4), "ящик") > 0 И НРег(Стр2) = "г" 
			//ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			//СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 
			Тогда
			Продолжить;
		КонецЕсли;         
		
		Если Прав(Стр1, 1) = "." Тогда
			Стр1 = Лев(Стр1, СтрДлина(Стр1)-1);
		КонецЕсли; 
		
		номпп  = номпп+1;
		НовСтр = ТаблУниверсальная.Добавить();
		НовСтр.Реквизит01 = Стр1;  // 1 Уровень	
		НовСтр.Реквизит02 = Стр2;  // 2 Тип
		НовСтр.Реквизит03 = Стр3;  // 3 НомПП
		НовСтр.Реквизит04 = Лев(Стр4, 150);  // 4 Наименование	
		НовСтр.Реквизит05 = Стр5;  // 5 ДопНаименование	
		НовСтр.Реквизит06 = Стр6;  // 6 Обозначение	
		НовСтр.Реквизит07 = Стр7;  // 7 "единица измерения"
		НовСтр.Реквизит08 = Стр8;  // 8 количество
		НовСтр.Реквизит16 = Стр16; //веденеев 14.08.2017 - 16 поставщик
		НовСтр.Это956 = (Найти(ИмяФайла,"956Э")>0);
		НовСтр.ИмяФайла = ИмяФайла;
		НовСтр.ТекИмяФайла = ТекИмяФайла;
		НовСтр.ТекПутьКФайлу = ТекПутьКФайлу;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель    = Неопределено;
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбщая()
	
	Если ТаблУниверсальная.Количество() = 0 Или ЗагружатьВЗаполненныеТаблицы Тогда //веденеев 14.08.2017 - возможность не загружать данные, если они уже загружались
		
		ТаблУниверсальная.Очистить();
		
		Файл = Новый Файл(ИмяФайла);
		ТекИмяФайла   = Файл.Имя;
		ТекПутьКФайлу = Файл.Путь;
		
		МассФайлов = НайтиФайлы(ИмяФайла, "*.xls");
		
		ДатаНачалаЗагрузки=ТекущаяДата();
		Сообщить("Загрузка данных начата в "+Строка(ДатаНачалаЗагрузки));
		
		ТекНомерЭлементаФайлыЗИП = 1;
		ВсегоЭлементовФайлыЗИП   = МассФайлов.Количество();
		
		Для каждого Файл Из МассФайлов Цикл
			
			ИмяФайла = Файл.ПолноеИмя;
			ТекИмяФайла   = Файл.Имя;
			ТекПутьКФайлу = Файл.Путь;
			
			УправлениеИнтерфейсом.ВывестиТекущееСостояние(ИмяФайла, ДатаНачалаЗагрузки, ТекНомерЭлементаФайлыЗИП, ВсегоЭлементовФайлыЗИП);
			
			Если СтрНайти(ТекИмяФайла, "$") > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗагрузитьОбщая();
			
			ТекНомерЭлементаФайлыЗИП=ТекНомерЭлементаФайлыЗИП+1;
			
		КонецЦикла;
		
		Сообщить("Запись загруженных данных окончена в "+Строка(ТекущаяДата()));
		
		ЗагрузитьНаСервереОбщая();
		
	Иначе
		
		ЗагрузитьНаСервереОбщая();
		
		Сообщить("Данные уже загружены. Повторная загрузка не требуется");
		
	КонецЕсли;
	
КонецПроцедуры

//-- Общая

// ++ ОБновление цен

&НаСервере
Процедура ОбновитьЦеныСервер()
	
	//НовСтр.Реквизит01 = Стр1;  // 1 Уровень	
	//НовСтр.Реквизит02 = Стр2;  // 2 Обозначение
	//НовСтр.Реквизит03 = Лев(Стр3, 150);  // 3 Наименование
	//НовСтр.Реквизит04 = Стр4;  // 4 ЕдИзм
	//НовСтр.Реквизит05 = Стр5;  // 5 Поставщик
	//НовСтр.Реквизит06 = Стр6;  // 6 Цена внеш
	//НовСтр.Реквизит07 = Стр7;  // 7 Год цены контракт
	//НовСтр.Реквизит08 = Стр8;  // 8 Пред цена
	//НовСтр.Реквизит09 = Стр9;  // 9 Год цены
	//НовСтр.Реквизит10 = Стр10;  // 10 Страна, валюта, усл.
	//НовСтр.Реквизит11 = Стр11;  // 11 Примечание
	ДолларСША = Справочники.ОКВ.НайтиПоКоду("840");
	ИнЗаказчик = НайтиСоздатьИностранногоЗаказчика("Индия");
	
	ТЗ_Цен = ВернутьТаблицуДляЦен(); сч=0;

	Для каждого Стр Из ТаблУниверсальная Цикл
		
		//ТЗ_Цен.Колонки.Добавить("ПредметСнабжения");
		//ТЗ_Цен.Колонки.Добавить("ТипЦены");
		//ТЗ_Цен.Колонки.Добавить("Контрагент");
		//ТЗ_Цен.Колонки.Добавить("Цена");
		//ТЗ_Цен.Колонки.Добавить("Количество");
		//ТЗ_Цен.Колонки.Добавить("Валюта");
		//ТЗ_Цен.Колонки.Добавить("ЕдиницаИзмерения");
		//ТЗ_Цен.Колонки.Добавить("Статус");
		//ТЗ_Цен.Колонки.Добавить("ДатаЦены");
		
		Стру = Новый Структура;
		Стру.Вставить("ИдентификаторСтроки", Стр.Реквизит01);
		Стру.Вставить("Обозначение",   		 Стр.Реквизит02);
		Стру.Вставить("Наименование",  		 Стр.Реквизит03);
		Стру.Вставить("ЕдиницаИзмерения", 	 Стр.Реквизит04);
		Стру.Вставить("Поставщик", 			 Стр.Реквизит05);
		ЭлемПС = НайтиПС(Стру);
		//ЭлемПС = НайтиПСДляОБновленияЦен(Стр.Реквизит02, Стр.Реквизит03);
		
		Если ЭлемПС.Пустая() Тогда
			сч=сч+1;
		Иначе
			// Добавляем поставщика если его нет
			Если НЕ Стр.Реквизит05 = "" Тогда
				Поставщик = НайтиСоздатьПоставщика(Стр.Реквизит05);
				Если ЭлемПС.ИзготовителиИПоставщики.Найти(Поставщик) = Неопределено Тогда
					СпрОБ = ЭлемПС.ПолучитьОбъект();
					НовСтр = СпрОБ.ИзготовителиИПоставщики.Добавить();
					НовСтр.Поставщик = Истина;
					НовСтр.Контрагент = Поставщик;
					СпрОБ.Записать();
					ЗаписатьВЛог(СпрОБ.Ссылка.УникальныйИдентификатор(), СпрОБ.Ссылка, Стр.Реквизит01, "Записан поставщик "+ Строка(Поставщик)+" для : " + Строка(СпрОБ.Ссылка));
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		Если ТЗ_Цен.Найти(ЭлемПС, "ПредметСнабжения") = Неопределено Тогда
			НовСтр = ТЗ_Цен.Добавить();
			НовСтр.ПредметСнабжения = ЭлемПС;
			НовСтр.ТипЦены = Перечисления.ТипыЦен.Внешняя; 
			НовСтр.Контрагент = ИнЗаказчик;
			НовСтр.Цена = Стр.Реквизит06;
			НовСтр.Количество = 0;
			НовСтр.Валюта = ДолларСША;
			НовСтр.ЕдиницаИзмерения = ВернутьЕдИзм(Стр.Реквизит04);
			НовСтр.ДатаЦены = Стр.Реквизит07;
			НовСтр.Примечание = "Страна, валюта, усл. пост: " + Стр.Реквизит10 + ", Источник цены: " + Стр.Реквизит11;
		Иначе 
			Сообщить("Дубль " + Строка(ЭлемПС));
		КонецЕсли; 
		
	КонецЦикла; 
	
	ТЗ_Годов = ТЗ_Цен.Скопировать();
	ТЗ_Годов.Свернуть("ДатаЦены");
	
	Для каждого Стр Из ТЗ_Годов Цикл
		Если НЕ СтрДлина(Стр.ДатаЦены) = 5 Тогда
			Продолжить;
		КонецЕсли; 
		НовТЗ = ТЗ_Цен.Скопировать(ТЗ_Цен.НайтиСтроки(Новый Структура("ДатаЦены", Стр.ДатаЦены)));
		СоздатьВводЦен(НовТЗ, КонецГода(Дата(Стр.ДатаЦены, 12, 31)), "Импорт информации по ценам комплектующего оборудования (ЗИП) из файла База ЗИП и ПВН Звездочка 01-03-17");
	КонецЦикла; 
	
	Сообщить("Не нашли: " + Строка(сч));
	
КонецПроцедуры

&НаСервере
Функция ВернутьЕдИзм(ЕдИзм)
	
	Если НРег(ЕдИзм) = "шт" ИЛИ ЕдИзм = "796" Тогда
		Возврат Справочники.ОКЕИ.НайтиПоКоду(796);
	ИначеЕсли НРег(ЕдИзм) = "кг" Тогда
		Возврат Справочники.ОКЕИ.НайтиПоКоду(166);
	ИначеЕсли НРег(ЕдИзм) = "компл" Или НРег(ЕдИзм) = "к-т" Тогда
		Возврат Справочники.ОКЕИ.НайтиПоКоду(839);
	ИначеЕсли НРег(ЕдИзм) = "м" Тогда
		Возврат Справочники.ОКЕИ.НайтиПоКоду(006);
	Иначе
		Возврат Справочники.ОКЕИ.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОбновитьЦены()
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	ТаблУниверсальная.Очистить();
	
	номпп=0;
	
	Для сч = 5 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,1);
		Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,2);
		Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,3);
		Стр4  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,4);
		Стр5  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,5);
		Стр6  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,6);
		Стр7  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,7);
		Стр8  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,8);
		Стр9  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,9);
		Стр10  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,10);
		Стр11  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель,Сч,11);
		
		Если СтрНайти(НРег(Стр3), "ящик") > 0  
			//ИЛИ СтрНайти(НРег(Стр5), "сундук") > 0 ИЛИ СтрНайти(НРег(Стр5), "пакет") > 0 ИЛИ 
			//СтрНайти(НРег(Стр5), "футляр") > 0 ИЛИ СтрНайти(НРег(Стр5), "упаковка") > 0 
			Тогда
			Продолжить;
		КонецЕсли;         
		
		номпп  = номпп+1;
		НовСтр = ТаблУниверсальная.Добавить();
		НовСтр.Реквизит01 = Стр1;  // 1 Уровень	
		НовСтр.Реквизит02 = Стр2;  // 2 Обозначение
		НовСтр.Реквизит03 = Лев(Стр3, 150);  // 3 Наименование
		НовСтр.Реквизит04 = Стр4;  // 4 ЕдИзм
		НовСтр.Реквизит05 = Стр5;  // 5 Поставщик
		НовСтр.Реквизит06 = Стр6;  // 6 Цена внеш
		НовСтр.Реквизит07 = Стр7;  // 7 Год цены контракт
		НовСтр.Реквизит08 = Стр8;  // 8 Пред цена
		НовСтр.Реквизит09 = Стр9;  // 9 Год цены
		НовСтр.Реквизит10 = Стр10;  // 10 Страна, валюта, усл.
		НовСтр.Реквизит11 = Стр11;  // 11 Примечание

		НовСтр.ИмяФайла = ИмяФайла;
		НовСтр.ТекИмяФайла = ТекИмяФайла;
		НовСтр.ТекПутьКФайлу = ТекПутьКФайлу;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель = Неопределено;
	
	ОбновитьЦеныСервер();
	
КонецФункции

// -- ОБновление цен

// ++ ОбновитьПоставщиков1159

&НаСервере
Функция НайтиЭлементВСтруктуреКорабля(Наименование, Обозначение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец = &Владелец
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.Наименование = &Наименование
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения.Обозначение = &ОбозначениеДоп";
	Запрос.УстановитьПараметр("Владелец", Заказ);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("ОбозначениеДоп", Обозначение);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат РезультатЗапроса.Ссылка;
	Иначе
		Возврат Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка();
	КонецЕсли;  
	
КонецФункции

&НаСервере
Функция ОбновитьПоставщиков1159Сервер()
	
	//НовСтр.Реквизит01 = Стр1;  // 1 Уровень	
	//НовСтр.Реквизит02 = Стр2;  // 2 Иерархия
	//НовСтр.Реквизит03 = Лев(Стр3, 150); // 3 Наименование
	//НовСтр.Реквизит04 = Стр4;  // 4 Обозначение
	//НовСтр.Реквизит05 = Стр5;  // 5 Ед изм
	//НовСтр.Реквизит06 = Стр6;  // 6 Колво
	//НовСтр.Реквизит07 = Стр7;  // 7 Поставщик
	
	сч_ненайденных=0;
	
	Для каждого Стр Из ТаблУниверсальная Цикл
		
		Найд = НайтиЭлементВСтруктуреКорабля(Стр.Реквизит03, Стр.Реквизит04);
		Если Найд.Пустая() Тогда
			сч_ненайденных=сч_ненайденных+1;
			Сообщить("Наим: " +Стр.Реквизит03 +", обозн: "+Стр.Реквизит04);
		КонецЕсли; 
		
		Продолжить;
		
		Если Стр.Реквизит04 = "" Тогда
			Продолжить;
		КонецЕсли; 
		
		Стру = Новый Структура;
		Стру.Вставить("ИдентификаторСтроки", Стр.Реквизит01);
		Стру.Вставить("Наименование",  		 Стр.Реквизит03);
		Стру.Вставить("Обозначение",   		 Стр.Реквизит04);
		Стру.Вставить("ЕдиницаИзмерения", 	 Стр.Реквизит05);
		Стру.Вставить("Поставщик", 			 Стр.Реквизит07);
		
		ЭлемПС = НайтиПС(Стру);
		//ЭлемПС = НайтиПСДляОБновленияЦен(Стр.Реквизит02, Стр.Реквизит03);
		
		Если ЭлемПС.Пустая() Тогда
			сч=сч+1;
		Иначе
			// Добавляем поставщика если его нет
			Если НЕ Стр.Реквизит07 = "" Тогда
				Поставщик = НайтиСоздатьПоставщика(Стр.Реквизит07);
				Если ЭлемПС.ИзготовителиИПоставщики.Найти(Поставщик) = Неопределено Тогда
					СпрОБ = ЭлемПС.ПолучитьОбъект();
					НовСтр = СпрОБ.ИзготовителиИПоставщики.Добавить();
					НовСтр.Поставщик = Истина;
					НовСтр.Контрагент = Поставщик;
					СпрОБ.Записать();
					ЗаписатьВЛог(СпрОБ.Ссылка.УникальныйИдентификатор(), СпрОБ.Ссылка, Стр.Реквизит01, "(1159ТМ)Записан поставщик "+ Строка(Поставщик)+" для : " + Строка(СпрОБ.Ссылка));
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	//Сообщить("Не найденных: " + Строка(сч_ненайденных));
	
КонецФункции

&НаКлиенте
Функция НайтиПоставщикаВСтруктуре(Стру, Уровень)
	
	Пост  = "";
	Длина = СтрДлина(Уровень);
	
	Пока Длина >= 4 Цикл
		Если Уровень = "" Тогда
			Прервать;
		КонецЕсли; 
		Если Стру.Свойство(Уровень) Тогда
			Пост = Стру[Уровень];
			Прервать;
		Иначе
			ПозНП = СтрНайти(Уровень, "_", НаправлениеПоиска.СКонца);
			Уровень = Сред(Уровень, 0, ПозНП-1);
		КонецЕсли;
		Длина = СтрДлина(Уровень);
	КонецЦикла; 
	
	Возврат Пост;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПоставщиков1159()
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	ТаблУниверсальная.Очистить();
	
	номпп=0; ТекИндекс = 0; ТекУровень=""; Стру = Новый Структура;
	
	Для сч = 14 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Если НЕ сч%2=0 Тогда
			Продолжить;
		КонецЕсли;
  
  		Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 1);
		Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 2);
		Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 3);
		Стр4  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 4);
		Стр5  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 5);
		Стр6  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 6);
		Стр7  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 7);
		
		Если СтрНайти(НРег(Стр7), "снято с производства") > 0 Тогда
			Стр7="";
		КонецЕсли;         
		
		Уровни = СтрРазделить(Стр2, ".");
		
		ТекУровень = "_"+СтрЗаменить(Стр2, ".", "_");
		
		МассВерхнего=новый Массив;
		МассВерхнего = Уровни;
		МассВерхнего.Удалить(МассВерхнего.ВГраница());
		ПредУровень = СтрСоединить(МассВерхнего, "_");
		ПредУровень = ?(ПредУровень="", "_999", "_"+ПредУровень);
		
		номпп  = номпп+1;
		НовСтр = ТаблУниверсальная.Добавить();
		НовСтр.Реквизит01 = номпп;  // 1 Уровень	
		НовСтр.Реквизит02 = Стр2;  // 2 Иерархия
		НовСтр.Реквизит03 = Лев(Стр3, 150); // 3 Наименование
		НовСтр.Реквизит04 = Стр4;  // 4 Обозначение
		НовСтр.Реквизит05 = Стр5;  // 5 Ед изм
		НовСтр.Реквизит06 = Стр6;  // 6 Колво
		Если Стр7 = "" И ТаблУниверсальная.Количество() > 1 Тогда
			Пост = НайтиПоставщикаВСтруктуре(Стру, ПредУровень);
			Если НЕ Пост = "" Тогда
				НовСтр.Реквизит07 = Пост;
			КонецЕсли; 
		Иначе
			НовСтр.Реквизит07 = Стр7;  // 7 Поставщик
			Стру.Вставить(ТекУровень, Стр7);
		КонецЕсли; 

		НовСтр.ИмяФайла = ИмяФайла;
		НовСтр.ТекИмяФайла = ТекИмяФайла;
		НовСтр.ТекПутьКФайлу = ТекПутьКФайлу;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель = Неопределено;
	
	ОбновитьПоставщиков1159Сервер();
	
КонецПроцедуры
 
// -- ОбновитьПоставщиков1159



// ++ Буревестник

&НаСервере
// Обновляет наименование в ПС найденном по обозначению
//
Функция НайтиПС_ПоОбозначению_Буревестник(Стру)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	КаталогПредметовСнабжения.Обозначение = &Обозначение
	|	И НЕ КаталогПредметовСнабжения.Обозначение = """"";
	Запрос.УстановитьПараметр("Обозначение", Стру.Обозначение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Стру.Вставить("Наименование",  		 Стр.Реквизит02);
	//Стру.Вставить("Обозначение",   		 Стр.Реквизит03+?(Стр.Реквизит04="", ""," ("+Стр.Реквизит04+")"));
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Ссылка.Наименование = Стру.Наименование Тогда
			СпрОб = Выборка.Ссылка.ПолучитьОбъект();
			СпрОб.Комментарий = СпрОб.Комментарий + Символы.ПС + СпрОб.Наименование;
			СпрОб.Наименование = Стру.Наименование;
			СпрОб.Записать();
		КонецЕсли; 
	//	Возврат Выборка.Ссылка;
	//Иначе
	//	Возврат Справочники.КаталогПредметовСнабжения.ПустаяСсылка();
	КонецЦикла; 
	
КонецФункции
 

&НаСервере
Функция ЗагрузитьБуревестникСервер()
	
	//НовСтр.Реквизит01 = Стр1;  // 1 нпп	
	//НовСтр.Реквизит02 = Стр2;  // 2 Наименование
	//НовСтр.Реквизит03 = Лев(Стр3, 150); // 3 Обозначение
	//НовСтр.Реквизит04 = Стр4;  // 4 Обозначение стар
	//НовСтр.Реквизит05 = Стр5;  // 5 ду
	//НовСтр.Реквизит06 = Стр6;  // 6 ру
	//НовСтр.Реквизит07 = Стр7;  // 7 проводимая среда
	//НовСтр.Реквизит08 = Стр8;  // 8 масса, кг
	//НовСтр.Реквизит09 = Стр9;  // 9 материал
	//НовСтр.Реквизит10 = Стр10;  // 10 датчик
	//НовСтр.Реквизит11 = Стр11;  // 11 присоединение
	ТаблицаХарактеристик = Новый ТаблицаЗначений;
	ТаблицаХарактеристик.Колонки.Добавить("НаименованиеБД");
	ТаблицаХарактеристик.Колонки.Добавить("Значение");
	ТаблицаХарактеристик.Колонки.Добавить("ЕдиницаИзмерения");
	
	ЕдИз_мм  = Справочники.ОКЕИ.НайтиПоКоду("003");
	ЕдИз_кгс = Справочники.ОКЕИ.НайтиПоКоду("317");
	Поставщик = Справочники.Организации.НайтиПоКоду("000000957"); // ОАО "Завод "Буревестник"
	
	Для каждого Стр Из ТаблУниверсальная Цикл
		
		ТаблицаХарактеристик.Очистить();
		
		Стру = Новый Структура;
		Стру.Вставить("ИдентификаторСтроки", Стр.Реквизит01);
		Стру.Вставить("Наименование",  		 Стр.Реквизит02);
		Стру.Вставить("Обозначение",   		 Стр.Реквизит03+?(Стр.Реквизит04="", ""," ("+Стр.Реквизит04+")"));
		Стру.Вставить("Поставщик", 			 Поставщик);
		Если НЕ Стр.Реквизит08 = "" Тогда
			Стру.Вставить("МассаЕдиницы", 	 	 Стр.Реквизит08);
			Стру.Вставить("КодМассы", 		 	 "166");
		КонецЕсли;
		Если НЕ Стр.Реквизит12 = "" Тогда
			Стру.Вставить("ДокНаПоставку", Стр.Реквизит12);
		КонецЕсли;
		Если НЕ Стр.Реквизит05 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Ду";
			НовСтр.Значение = Стр.Реквизит05;
			НовСтр.ЕдиницаИзмерения = ЕдИз_мм;
		КонецЕсли; 
		Если НЕ Стр.Реквизит06 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Ру";
			НовСтр.Значение = Стр.Реквизит06;
			НовСтр.ЕдиницаИзмерения = ЕдИз_кгс;
		КонецЕсли; 
		Если НЕ Стр.Реквизит07 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Проводимая среда";
			НовСтр.Значение = Стр.Реквизит07;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит09 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Материал";
			НовСтр.Значение = Стр.Реквизит09;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит10 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Датчик";
			НовСтр.Значение = Стр.Реквизит10;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит11 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Присоединение";
			НовСтр.Значение = Стр.Реквизит11;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		
		НайтиПС_ПоОбозначению_Буревестник(Стру);
		
		ЭлемПС = НайтиПС(Стру, ТаблицаХарактеристик);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьБуревестник()
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	ТаблУниверсальная.Очистить();
	
	номпп=0;
	
	Если СтрНайти(ИмяФайла, "СудАрм 2014 Буревестник") > 0 Тогда
		ТипЗагр = 1;
	ИначеЕсли СтрНайти(ИмяФайла, "Изделия машиностроения 2014 Буревесник") > 0 Тогда 
		ТипЗагр = 3;
	Иначе
		ТипЗагр = 2;
	КонецЕсли; 
	
	Для сч = 4 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Если ТипЗагр = 1 Тогда // СудАрм 2014 Буревестник 
			Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 1);
			Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 2);
			Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 3);
			Стр4  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 4);
			Стр5  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 5);
			Стр6  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 6);
			Стр7  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 7);
			Стр8  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 8);
			Стр9  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 9);
			Стр10  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 10);
			Стр11  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 11);
		ИначеЕсли ТипЗагр = 2 Тогда                // ШТС 2014 Буревестник
			Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 1);
			Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 2);
			Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 3);
			Стр4  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 4);
			Стр5  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 5);
			Стр6  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 6);
			Стр7  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 7);
			Стр8  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 10);
			Стр9  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 8);
			Стр10  = ""; // ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 10);
			Стр11  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 9);
		ИначеЕсли ТипЗагр = 3 Тогда
			Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 1);
			Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 2);
			Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 3);
			Стр4  = СтрЗаменить(ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 4), "−", "");
			Если Стр3 = "" И НЕ Стр4 = "" Тогда
				Стр3 = Стр4;
				Стр4 = "";
			КонецЕсли; 
			Стр12  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 5);
		КонецЕсли; 
		
		Если СтрНайти(НРег(Стр7), "снято с производства") > 0 Тогда
			Стр7="";
		КонецЕсли;         
		
		номпп  = номпп+1;
		НовСтр = ТаблУниверсальная.Добавить();
		НовСтр.Реквизит01 = Стр1;  // 1 нпп	
		НовСтр.Реквизит02 = Стр2;  // 2 Наименование
		НовСтр.Реквизит03 = Лев(Стр3, 150); // 3 Обозначение
		НовСтр.Реквизит04 = Стр4;  // 4 Обозначение стар
		НовСтр.Реквизит05 = Стр5;  // 5 ду
		НовСтр.Реквизит06 = Стр6;  // 6 ру
		НовСтр.Реквизит07 = Стр7;  // 7 проводимая среда
		НовСтр.Реквизит08 = Стр8;  // 8 масса, кг
		НовСтр.Реквизит09 = Стр9;  // 9 материал
		НовСтр.Реквизит10 = СтрЗаменить(Стр10, "_", "");  // 10 датчик
		НовСтр.Реквизит11 = Стр11;  // 11 присоединение
		НовСтр.Реквизит12 = Стр12;   // док на поставку

		НовСтр.ИмяФайла = ИмяФайла;
		НовСтр.ТекИмяФайла = ТекИмяФайла;
		НовСтр.ТекПутьКФайлу = ТекПутьКФайлу;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель = Неопределено;
	
	ЗагрузитьБуревестникСервер();
	
КонецПроцедуры

// -- Буревестник


// ++ Аскольд

// Обновляет наименование в ПС найденном по обозначению
//
Функция НайтиПС_ПоОбозначению_Аскольд(Обозначение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	КаталогПредметовСнабжения.Обозначение = &Обозначение
	|	И НЕ КаталогПредметовСнабжения.Обозначение = """"";
	Запрос.УстановитьПараметр("Обозначение", Обозначение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		возврат Выборка.Ссылка;
	Иначе
		возврат Справочники.КаталогПредметовСнабжения.ПустаяСсылка()
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ЗагрузитьАскольдСервер1()
	
	//НовСтр.Реквизит01 = номпп;  // 1 нпп	
	//НовСтр.Реквизит02 = Лев(Стр1, 150);  // 2 Наименование
	//НовСтр.Реквизит03 = Стр2 + " " + ?(Стр3="", "", "("+Стр3+")"); // Обозначение
	//НовСтр.Реквизит04 = ""; //Стр3; // Доп
	//НовСтр.Реквизит05 = Стр4; // масса
	//НовСтр.Реквизит06 = Стр5 + ?(Стр5=Стр6, "", "; " +Стр6); // НТД - хар
	//НовСтр.Реквизит07 = "";
	//НовСтр.Реквизит08 = Стр7; // ОКП
	//НовСтр.Реквизит09 = Стр8; // ДопИнф провод.среда и допхар
	//НовСтр.Реквизит10 = Стр9;  // материал
	//НовСтр.Реквизит11 = Стр10;   // покрытие
	//НовСтр.Реквизит12 = Стр11;   // метод форм. обр
	//НовСтр.Реквизит13 = Стр12;   // маркировка
	//НовСтр.Реквизит14 = Стр13;  // условие поставки
	//НовСтр.Реквизит15 = Стр14;  // допуск. замена
	//НовСтр.Реквизит16 = "";  // 
	//НовСтр.Реквизит17 = Стр16;  // Разработчик 
	//НовСтр.Реквизит18 = "";  // 
	//НовСтр.Реквизит19 = Стр18;  // Хар. посл изменение
	//НовСтр.Реквизит20 = "";  // 
	ТаблицаХарактеристик = Новый ТаблицаЗначений;
	ТаблицаХарактеристик.Колонки.Добавить("НаименованиеБД");
	ТаблицаХарактеристик.Колонки.Добавить("Значение");
	ТаблицаХарактеристик.Колонки.Добавить("ЕдиницаИзмерения");
	
	ЕдИз_мм  = Справочники.ОКЕИ.НайтиПоКоду("003");
	ЕдИз_кгс = Справочники.ОКЕИ.НайтиПоКоду("317");
	Поставщик = Справочники.Организации.НайтиПоКоду("000001126"); // ОАО "Аскольд"
	
	Для каждого Стр Из ТаблУниверсальная Цикл
		
		ТаблицаХарактеристик.Очистить();
		
		Стру = Новый Структура;
		Стру.Вставить("ИдентификаторСтроки", Стр.Реквизит01);
		Стру.Вставить("Наименование",  		 Стр.Реквизит02);
		Стру.Вставить("Обозначение",   		 Стр.Реквизит03);
		Стру.Вставить("Поставщик", 			 Поставщик);
		Стру.Вставить("ДокНаПоставку",  	 Стр.Реквизит06);
		Если НЕ Стр.Реквизит08 = "" Тогда
			Стру.Вставить("окп",  	 			 Стр.Реквизит08);
		КонецЕсли;
		Если НЕ Стр.Реквизит14 = "" Тогда
			Стру.Вставить("ПравилаУпаковкиТранспортировкиХранения", Стр.Реквизит14);
		КонецЕсли;
		Если НЕ Стр.Реквизит05 = "" Тогда
			Стру.Вставить("МассаЕдиницы", Стр.Реквизит05);
			Стру.Вставить("КодМассы",     "166");
		КонецЕсли;
		Если НЕ Стр.Реквизит17 = "" Тогда
			Стру.Вставить("Разработчик", Стр.Реквизит17);
		КонецЕсли;
		Если НЕ Стр.Реквизит09 = "" Тогда
			Стру.Вставить("ДопИнф",      Стр.Реквизит09);
		КонецЕсли;
		Если НЕ Стр.Реквизит10 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Материал";
			НовСтр.Значение = Стр.Реквизит10;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит11 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Покрытие";
			НовСтр.Значение = Стр.Реквизит11;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит12 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Метод формообразования";
			НовСтр.Значение = Стр.Реквизит12;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит13 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Маркировка";
			НовСтр.Значение = Стр.Реквизит13;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит15 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Допускаемая замена";
			НовСтр.Значение = Стр.Реквизит15;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		//НовСтр.Реквизит09 = Стр8; // ДопИнф провод.среда и допхар
		//НовСтр.Реквизит10 = Стр9;  // материал
		//НовСтр.Реквизит11 = Стр10;   // покрытие
		//НовСтр.Реквизит12 = Стр11;   // метод форм. обр
		//НовСтр.Реквизит13 = Стр12;   // маркировка
		//НовСтр.Реквизит14 = Стр13;  // условие поставки
		//НовСтр.Реквизит15 = Стр14;  // допуск. замена
		//НовСтр.Реквизит16 = "";  // 
		//НовСтр.Реквизит17 = Стр16;  // Разработчик 
		//НовСтр.Реквизит18 = "";  // 
		//НовСтр.Реквизит19 = Стр18;  // Хар. посл изменение
		//НовСтр.Реквизит20 = "";  // 
		
		//НайтиПС_ПоОбозначению_Аскольд(Стру);
		
		ЭлемПС = НайтиПС(Стру, ТаблицаХарактеристик);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьАскольд1()
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	ТаблУниверсальная.Очистить();
	
	номпп=0;
	
	Для сч = 2 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Стр1   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 1);
		Стр2   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 2);
		Стр3   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 3);
		Стр4   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 4);
		Стр5   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 5);
		Стр6   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 6);
		Стр7   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 7);
		Стр8   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 8);
		Стр9   = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 9);
		Стр10  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 10);
		Стр11  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 11);
		Стр12  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 12);
		Стр13  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 13);
		Стр14  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 14);
		Стр15  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 15);
		Стр16  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 16);
		Стр17  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 17);
		Стр18  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 18);
		Стр19  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 19);
		Стр20  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 20);
		
		Если Стр1 = "" И Стр2 = "" И Стр3 = "" Тогда
			Прервать;
		КонецЕсли;
		Если Стр3="" Тогда
			Стр3=Стр2;
			Стр2="";
		КонецЕсли; 
		
		номпп  = номпп+1;
		НовСтр = ТаблУниверсальная.Добавить();
		НовСтр.Реквизит01 = номпп;  // 1 нпп	
		НовСтр.Реквизит02 = Лев(Стр1, 150);  // 2 Наименование
		НовСтр.Реквизит03 = Стр3 + ?(Стр2="", "", " ("+Стр2+")"); // Обозначение
		НовСтр.Реквизит04 = ""; //Стр3; // Доп
		НовСтр.Реквизит05 = Стр4; // масса
		НовСтр.Реквизит06 = Стр5; // НТД - хар
		НовСтр.Реквизит07 = "";
		НовСтр.Реквизит08 = Стр7; // ОКП
		НовСтр.Реквизит09 = Стр8; // ДопИнф провод.среда и допхар
		НовСтр.Реквизит10 = Стр9;  // материал
		НовСтр.Реквизит11 = Стр10; // покрытие
		НовСтр.Реквизит12 = Стр11; // метод форм. обр
		НовСтр.Реквизит13 = Стр12; // маркировка
		НовСтр.Реквизит14 = Стр13; // условие поставки
		НовСтр.Реквизит15 = Стр14; // допуск. замена
		НовСтр.Реквизит16 = "";  // 
		НовСтр.Реквизит17 = Стр16; // Разработчик 
		НовСтр.Реквизит18 = "";  // 
		НовСтр.Реквизит19 = Стр18; // Хар. посл изменение
		НовСтр.Реквизит20 = "";  // 

		НовСтр.ИмяФайла = ИмяФайла;
		НовСтр.ТекИмяФайла = ТекИмяФайла;
		НовСтр.ТекПутьКФайлу = ТекПутьКФайлу;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель = Неопределено;
	
	ЗагрузитьАскольдСервер1();
	
КонецПроцедуры


&НаСервере
Функция ЗагрузитьАскольдСервер()
	
	//НовСтр.Реквизит01 = номпп;  // 1 нпп	
	//НовСтр.Реквизит02 = Лев(Стр1, 150);  // 2 Наименование
	//НовСтр.Реквизит03 = Стр2; // Обозначение
	//НовСтр.Реквизит04 = Стр3; // шифр
	//НовСтр.Реквизит05 = Стр4; // ду
	//НовСтр.Реквизит06 = Стр5; // ру
	//НовСтр.Реквизит07 = Стр15; // проводимая среда
	//НовСтр.Реквизит08 = Стр8;  // масса, кг
	//НовСтр.Реквизит09 = Стр10; // материал
	//НовСтр.Реквизит10 = Стр12;  // Условия поставки
	//НовСтр.Реквизит11 = Стр6;   // док на поставку
	//НовСтр.Реквизит12 = Стр7;   // ОКП
	//НовСтр.Реквизит13 = Стр9;   // составная часть
	//НовСтр.Реквизит14 = Стр13;  // аналог
	//НовСтр.Реквизит15 = Стр14;  // тнвэд
	//НовСтр.Реквизит16 = Стр17;  // ктг
	ТаблицаХарактеристик = Новый ТаблицаЗначений;
	ТаблицаХарактеристик.Колонки.Добавить("НаименованиеБД");
	ТаблицаХарактеристик.Колонки.Добавить("Значение");
	ТаблицаХарактеристик.Колонки.Добавить("ЕдиницаИзмерения");
	
	ЕдИз_мм  = Справочники.ОКЕИ.НайтиПоКоду("003");
	ЕдИз_кгс = Справочники.ОКЕИ.НайтиПоКоду("317");
	Поставщик = Справочники.Организации.НайтиПоКоду("000001126"); // ОАО "Аскольд"
	
	Для каждого Стр Из ТаблУниверсальная Цикл
		
		ТаблицаХарактеристик.Очистить();        
		
		Стру = Новый Структура;
		Стру.Вставить("ИдентификаторСтроки", Стр.Реквизит01);
		Стру.Вставить("Наименование",  		 Стр.Реквизит02);
		Стру.Вставить("Обозначение",   		 Стр.Реквизит03 + ?(Стр.Реквизит04="", "", " ("+Стр.Реквизит04+")"));
		Стру.Вставить("Поставщик", 			 Поставщик);
		Стру.Вставить("ДокНаПоставку",  	 Стр.Реквизит11);
		Если НЕ Стр.Реквизит12 = "" Тогда
			Стру.Вставить("окп",  	 			 Стр.Реквизит12);
		КонецЕсли;
		Если НЕ Стр.Реквизит10 = "" Тогда
			Стру.Вставить("ПравилаУпаковкиТранспортировкиХранения", Стр.Реквизит10);
		КонецЕсли;
		Если НЕ Стр.Реквизит13 = "" Тогда
			Стру.Вставить("ДопИнф", Стр.Реквизит13);
		КонецЕсли;
		Если НЕ Стр.Реквизит08 = "" Тогда
			Стру.Вставить("МассаЕдиницы", Стр.Реквизит08);
			Стру.Вставить("КодМассы", 	  "166");
		КонецЕсли;
		Если НЕ Стр.Реквизит15 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "ТНВЭД";
			НовСтр.Значение = СтрЗаменить(Стр.Реквизит15, " ", "");
		КонецЕсли; 
		Если НЕ Стр.Реквизит05 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Ду";
			НовСтр.Значение = Стр.Реквизит05;
			НовСтр.ЕдиницаИзмерения = ЕдИз_мм;
		КонецЕсли; 
		Если НЕ Стр.Реквизит06 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Ру";
			НовСтр.Значение = Стр.Реквизит06;
			НовСтр.ЕдиницаИзмерения = ЕдИз_кгс;
		КонецЕсли; 
		Если НЕ Стр.Реквизит07 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Проводимая среда";
			НовСтр.Значение = Стр.Реквизит07;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит09 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Материал";
			НовСтр.Значение = Стр.Реквизит09;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит17 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "КТГ";
			НовСтр.Значение = Стр.Реквизит17;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли;
		Если НЕ Стр.Реквизит16 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Сроки службы";
			НовСтр.Значение = Стр.Реквизит16;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		Если НЕ Стр.Реквизит14 = "" Тогда
			НовСтр = ТаблицаХарактеристик.Добавить();
			НовСтр.НаименованиеБД = "Замена";
			НовСтр.Значение = Стр.Реквизит14;
			НовСтр.ЕдиницаИзмерения = "";
		КонецЕсли; 
		//НовСтр.Реквизит01 = номпп;  // 1 нпп	                 +
		//НовСтр.Реквизит02 = Лев(Стр1, 150);  // 2 Наименование +
		//НовСтр.Реквизит03 = Стр2; // Обозначение       +
		//НовСтр.Реквизит04 = Стр3; // шифр              +
		//НовСтр.Реквизит05 = Стр4; // ду                +
		//НовСтр.Реквизит06 = Стр5; // ру                +
		//НовСтр.Реквизит07 = Стр15; // проводимая среда +
		//НовСтр.Реквизит08 = Стр8;  // масса, кг +
		//НовСтр.Реквизит09 = Стр10; // материал  +
		//НовСтр.Реквизит10 = Стр12;  // Условия поставки --
		//НовСтр.Реквизит11 = Стр6;   // док на поставку  +
		//НовСтр.Реквизит12 = Стр7;   // ОКП +
		//НовСтр.Реквизит13 = Стр9;   // составная часть
		//НовСтр.Реквизит14 = Стр13;  // аналог +
		//НовСтр.Реквизит15 = Стр14;  // тнвэд +
		//НовСтр.Реквизит16 = Стр17;  // ктг   +
		//НовСтр.Реквизит17 = Стр17;  // нтд
		//НовСтр.Реквизит18 = Стр18;  // покрытие
		//НовСтр.Реквизит19 = Стр19;  // Метод формообразования
		//НовСтр.Реквизит20 = Стр17;  // нтд
		
		//НайтиПС_ПоОбозначению_Аскольд(Стру);
		
	ЭлемПС = НайтиПС(Стру, ТаблицаХарактеристик);
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьАскольд()
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	ТаблУниверсальная.Очистить();
	
	номпп=0;
	
	Если СтрНайти(ИмяФайла, "НОМЕНКЛАТУРА  ИЗДЕЛИЙ  ОАО АСКОЛЬД") > 0 Тогда
		ТипЗагр = 1;
	ИначеЕсли СтрНайти(ИмяФайла, "НОМЕНКЛАТУРА ШТС И ДЕТАЛЕЙ СОЕДИНЕНИЯ ТРУБОПРОВОДОВ АСКОЛЬД") > 0 Тогда 
		ТипЗагр = 2;
	КонецЕсли; 
	
	сч_пустых = 0;
	
	Для сч = 2 По ВсегоСтрок Цикл // Самую первую пропускаем
		
		Если ТипЗагр = 1 Тогда // НОМЕНКЛАТУРА  ИЗДЕЛИЙ  ОАО АСКОЛЬД 
			Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 1);
			Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 2);
			Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 3);
			Стр4  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 4);
			Стр5  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 5);
			Стр6  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 6);
			Стр7  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 7);
			Стр8  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 8);
			Стр9  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 9);
			Стр10  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 10);
			Стр11  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 11);
			Стр12  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 12);
			Стр13  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 13);
			Стр14  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 14);
			Стр15  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 15);
			Стр16  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 16);
			Стр17  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 17);
			Стр18  = ""; // ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 17);
			Стр19  = ""; // ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 17);
			Стр20  = ""; // ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 17);
		Иначе
			Возврат;
		КонецЕсли; 
		
		Если Стр1 = "" И Стр2 = "" И Стр3 = "" Тогда
			Прервать;
		КонецЕсли; 
		Если Стр3="" Тогда
			Стр3=Стр2;
			Стр2="";
		КонецЕсли;   // Стру.Вставить("Обозначение",   		 Стр.Реквизит03 + ?(Стр.Реквизит04="", "", " ("+Стр.Реквизит04+")"));
		
		номпп  = номпп+1;
		НовСтр = ТаблУниверсальная.Добавить();
		НовСтр.Реквизит01 = номпп;  // 1 нпп	
		НовСтр.Реквизит02 = Лев(Стр1, 150);  // 2 Наименование
		НовСтр.Реквизит03 = Стр3; // Обозначение
		НовСтр.Реквизит04 = Стр2; // шифр
		НовСтр.Реквизит05 = Стр4; // ду
		НовСтр.Реквизит06 = Стр5; // ру
		НовСтр.Реквизит07 = Стр15; // проводимая среда
		НовСтр.Реквизит08 = Стр8;  // масса, кг
		НовСтр.Реквизит09 = Стр10; // материал
		НовСтр.Реквизит10 = Стр12;  // Условия поставки
		НовСтр.Реквизит11 = Стр6;   // док на поставку
		НовСтр.Реквизит12 = Стр7;   // ОКП
		НовСтр.Реквизит13 = Стр9;   // составная часть
		НовСтр.Реквизит14 = Стр13;  // аналог
		НовСтр.Реквизит15 = Стр14;  // тнвэд
		НовСтр.Реквизит16 = СокрЛП(СтрЗаменить(Стр16, "—", ""));  // эксплуат
		НовСтр.Реквизит17 = Стр17;  // ктг
		НовСтр.Реквизит18 = Стр18;  // покрытие
		НовСтр.Реквизит19 = Стр19;  // Метод формообразования
		НовСтр.Реквизит20 = Стр20;  // нтд

		НовСтр.ИмяФайла = ИмяФайла;
		НовСтр.ТекИмяФайла = ТекИмяФайла;
		НовСтр.ТекПутьКФайлу = ТекПутьКФайлу;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель = Неопределено;
	
	ЗагрузитьАскольдСервер();
	
КонецПроцедуры


// ++ Аскольд


// ++ Арктика

&НаСервере
Функция ЗагрузитьАрктикаСервер()
	
	//НовСтр.Реквизит01 = Стр1;  // 1 нпп	
	//НовСтр.Реквизит02 = Лев(Стр3, 150);  // 2 Наименование
	//НовСтр.Реквизит03 = Стр2; // Обозначение
	//НовСтр.Реквизит04 = Стр4; // Тип
	//НовСтр.Реквизит05 = Стр5; // ТУ на поставку
	//НовСтр.Реквизит06 = Стр6; // Чертеж
	//НовСтр.Реквизит07 = Стр7; // кол
	//НовСтр.Реквизит08 = Стр8; // Имя зип

	ЕдИз_мм  = Справочники.ОКЕИ.НайтиПоКоду("003");
	Поставщик = Справочники.Организации.НайтиПоКоду("000003867"); // АО СПО "АРКТИКА"
	
	Родитель = Неопределено;
	Родитель1 = Неопределено;
	
	РодительВерх = НайтиСоздатьГруппуВерхУровня("Изделия Арктики");
	
	Для каждого Стр Из ТаблУниверсальная Цикл
		Стру = Новый Структура;
		Стру.Вставить("ИдентификаторСтроки", Стр.Реквизит01);
		Стру.Вставить("Наименование",  		 Стр.Реквизит02 + ?(СтрНайти(Стр.Реквизит02, Стр.Реквизит04) > 0, "", " "+Стр.Реквизит04));
		Стру.Вставить("Обозначение",   		 Стр.Реквизит03);
		Стру.Вставить("Родитель", 			 ?(Родитель1=Неопределено, РодительВерх, Родитель1));
		Стру.Вставить("Поставщик", 			 Поставщик);
		Стру.Вставить("ДокНаПоставку",  	 Стр.Реквизит05);
		
		ЭлемПС = СоздатьЭлемент(Стру);
		
		Если НЕ Родитель = ЭлемПС Тогда
			Родитель = ЭлемПС;
		КонецЕсли; 
		Если Стр.Реквизит09 = "222" Тогда
			Родитель1 = ЭлемПС;
		КонецЕсли; 
		Если Стр.Реквизит09 = "333" Тогда
			Родитель1 = Неопределено;
		КонецЕсли; 
		
		Стру = Новый Структура;
		Стру.Вставить("ИдентификаторСтроки", Стр.Реквизит01);
		Стру.Вставить("Наименование",  		 Стр.Реквизит08);
		Стру.Вставить("Обозначение",   		 Стр.Реквизит06);
		Стру.Вставить("Родитель", 			 Родитель);
		Стру.Вставить("Поставщик", 			 Поставщик);
		Стру.Вставить("ЭтоЗИП", 			 Истина);
		//Стру.Вставить("ДокНаПоставку",  	 Стр.Реквизит05);
		Стру.Вставить("КоличествоВЗИПБорт",  Стр.Реквизит07);
		Если НЕ Стр.Реквизит08 = "" Тогда
			СоздатьЭлемент(Стру);
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьАрктика()
	
	Эксель = ПодключитсяКЭксель();
	
	ЛистЭксель = Эксель.WorkSheets(1); 
	
	ВсегоСтрок = ЛистЭксель.Cells.SpecialCells(11).Row; 
	ВсегоКолонок = ЛистЭксель.Cells.SpecialCells(11).Column;
	
	ТаблУниверсальная.Очистить();
	
	номпп=0;
	
	Если СтрНайти(ИмяФайла, "ЗИП полный отправка") > 0 Тогда
		Тип=1;
	ИначеЕсли СтрНайти(ИмяФайла, "ЗИП 877ЭКМ 313") > 0 Тогда
		Тип=2;
	КонецЕсли; 
	
	Для сч = 2 По ВсегоСтрок Цикл // Самую первую пропускаем
		Если тип=1 Тогда
			Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 1);
			Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 2);
			Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 3);
			Стр4  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 4);
			Стр5  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 5);
			Стр6  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 6);
			Стр7  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 7);
			Стр8  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 8);
		Иначе
			Стр1  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 3);
			Стр2  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 4);
			Стр3  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 5);
			Стр4  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 6);
			Стр5  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 7);
			Стр6  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 8);
			Стр7  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 9);
			Стр8  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 10);
			Стр9  = ПолучитьЗначениеВЯчейкеОбщая(ЛистЭксель, Сч, 11);
		КонецЕсли; 
		
		Если Стр1="" И Стр2="" И Стр3="" Тогда
			Продолжить;
		КонецЕсли; 
		
		номпп  = номпп+1;
		НовСтр = ТаблУниверсальная.Добавить();
		НовСтр.Реквизит01 = Стр1;  // 1 нпп	
		НовСтр.Реквизит02 = Лев(Стр3, 150);  // 2 Наименование
		НовСтр.Реквизит03 = Стр2; // Обозначение
		НовСтр.Реквизит04 = Стр4; // Тип
		НовСтр.Реквизит05 = Стр5; // ТУ на поставку
		НовСтр.Реквизит06 = Стр6; // Чертеж
		НовСтр.Реквизит07 = Стр7; // кол
		НовСтр.Реквизит08 = Стр8; // Имя зип
		НовСтр.Реквизит09 = Стр9; // Имя зип

		НовСтр.ИмяФайла = ИмяФайла;
		НовСтр.ТекИмяФайла = ТекИмяФайла;
		НовСтр.ТекПутьКФайлу = ТекПутьКФайлу;
		
	КонецЦикла;
	
	Эксель.Application.Quit();
	Эксель = Неопределено;
	
	ЗагрузитьАрктикаСервер();
	
КонецПроцедуры

// -- Арктика

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДелНаСервере()
	
	//Рег = РегистрыСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.СоздатьНаборЗаписей();
	//Рег.Отбор.
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	Если Прав(КаталогВременныхФайлов,1) <> "\" Тогда
		КаталогВременныхФайлов = КаталогВременныхФайлов + "\";
	КонецЕсли;
	
	//877
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-э\ОСК\пр.877 для ОСК\приложение 1 Сводный  перечень ЗИП в объеме ведомостей ЗИП-О пр.877 (отработано).xlsx";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("877ЭКМ (базовый вариант)");
	НовСтр.Тип = 1;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-э\ОСК\пр.877 для ОСК\приложение 2 Сводный перечень оборудования и  изделий в объеме ведом остей заказа.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("877ЭКМ (базовый вариант)");
	НовСтр.Тип = 1;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-э\ОСК\пр.877 для ОСК\приложение 3 Сводный перечень спецификаций оборудования и изделий  в объеме.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("877ЭКМ (базовый вариант)");
	НовСтр.Тип = 1;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\ОСК\По вх. 23-4575\База ЗИП к ПВН Звездочка 01.03.17.xlsx\База ЗИП к ПВН Звездочка 01.03.17.xlsx";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("877ЭКМ (базовый вариант)");
	НовСтр.Тип = 1;
	//956
	Массив = Новый Массив;	
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-001_ЗИ-К_892\Exc_956ЭМ-059-001_ЗИ-К_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-002_ЗИ-К_892\Exc_956ЭМ-059-002_ЗИ-К_01_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-003_ЗИ-К_892\Exc_956ЭМ-059-003_ЗИ-К_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-004_ЗИ-К_892\Exc_956ЭМ-059-004_ЗИ-К_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-005_ЗИ-К_часть_1_892\Exc_956ЭМ-059-005_ЗИ-К_часть_1_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-005_ЗИ-К_часть_2_892\Exc_956ЭМ-059-005_ЗИ-К_часть_2_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-005_ЗИ-К_часть_3_892\Exc_956ЭМ-059-005_ЗИ-К_часть_3_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-005_ЗИ-К_часть_4_892\Exc_956ЭМ-059-005_ЗИ-К_часть_4_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-005_ЗИ-К_часть_5_892\Exc_956ЭМ-059-005_ЗИ-К_часть_5_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-005_ЗИ-К_часть_6_892\Exc_956ЭМ-059-005_ЗИ-К_часть_6_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-005_ЗИ-К_часть_7_892\Exc_956ЭМ-059-005_ЗИ-К_часть_7_892  .xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-006_ЗИ-К_892\Exc_956ЭМ-059-006_ЗИ-К_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-007_ЗИ-К_892\Exc_956ЭМ-059-007_ЗИ-К_892.xlsx");
	Массив.Добавить("W:\КТ\зип-Э\Северная верфь\Апрель 2017\КОРАБЛЬ-ЗИП 956ЭМ\956ЭМ-059-008_ЗИ-К_892\Exc_956ЭМ-059-008_ЗИ-К_892.xlsx");
	Для каждого Стр Из Массив Цикл
		НовСтр = СписокЗагрузки.Добавить();
		НовСтр.Файл    = Стр;
		НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("956 корабль");
		НовСтр.Тип = 2;
	КонецЦикла;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\для ОСК ВЕДОМОСТИ ЗИП ДЭ 956ЭМ";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("138");
	НовСтр.Тип = 5;
	
	//1159	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\Перечень 1159ТМ (902).doc";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1159 корабль");
	НовСтр.Тип = 3;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\Перечень 1159ТМ (902)-2.doc";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1159 корабль");
	НовСтр.Тип = 3;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\Приложение 6 Перечень ЗИП к 1159ТМ(903).xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1159 корабль");
	НовСтр.Тип = 3;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\1159.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1159 корабль");
	НовСтр.Тип = 3;
	//1234
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\Перечень 1234ЭМ (803).doc";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1234Э корабль");
	НовСтр.Тип = 4;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\Перечень 1234ЭМ (803)-2.doc";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1234Э корабль");
	НовСтр.Тип = 4;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\Приложение 7 Перечень ЗИП к 1234ЭМ(802).xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1234Э корабль");
	НовСтр.Тип = 4;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Северная верфь\Апрель 2017\1234.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1234Э корабль");
	НовСтр.Тип = 4;
	// 11661
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Зеленодольское ПКБ\Заказные ведомости\11661 -(956,957) последние версии";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("11661 корабль");
	НовСтр.Тип = 6;
	// 11356
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Янтарь\Ведомости 11356";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("Teg");
	НовСтр.Тип = 7;
	// 06360
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Севмаш\ВЗИзд_06360.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("01701");
	НовСтр.Тип = 8;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Севмаш\Копия СПЧВ проект-06360.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("01701");
	НовСтр.Тип = 8;
	//++ 2017030701 05.07.17 Веденеев П. //импорт данных от НПО "Аврора"
	// аврора (все корабли)
	ЕдиницыИзмеренияПустаяСсылка=Справочники.ОКЕИ.ПустаяСсылка();
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Аврора\";
	НовСтр.Тип = 9;
	//-- 2017030701 05.07.17 Веденеев П. //импорт данных от НПО "Аврора"
	//++ 2017030701 17.07.17 Веденеев П. //импорт данных Гепард
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл = "W:\КТ\зип-э\Гепард\"; 
	НовСтр.Тип = 10;
	//-- 2017030701 17.07.17 Веденеев П. //импорт данных Гепард
	
	//++веденеев 15.08.2017 Мурена
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\Murena\kat_print_img.xlsx";
	//НовСтр.Файл    = "W:\КТ\зип-Э\Murena\kat_print_img_min.xlsx";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("12061Э");
	НовСтр.Тип = 11;
	//++временно - тест изменений
	//ОбновлятьСуществующиеДанные = Истина;
	ЗагружатьВЗаполненныеТаблицы = Истина;
	//--временно
	//--веденеев 15.08.2017 Мурена
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\956Э"; //веденеев 14.08.2017
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("956Э");
	НовСтр.Тип = 99;
	

	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\1241ПЭ\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1241ПЭ");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\10412\Заказная док\10412-вед. зак., з.040,041\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("HQ-261");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\10412\Заказная док\10412-вед. зак., з.043\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("Триглав");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\12260\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("12260");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\14310\14310-З.02501\Зак. докум\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("14310");
	НовСтр.Тип = 99;

	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\14310\14310-З.02502\Зак. док\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("14310");
	НовСтр.Тип = 99;

	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\14310\14310-зак. докум. З.02500\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("14310");
	НовСтр.Тип = 99;
	//
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\1241РЭ\Заказная документация\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1241РЭ");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\12421\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("12421");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\12322\Заказная док\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("12322");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\10412\Заказная док\10412-вед. зак.,з.044,420\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("HQ-264");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\10412\Заказная док\10412-вед. зак.,з.044,420\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("HQ-264");
	НовСтр.Тип = 99;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\Клиенты\ОСК\Проекты\ЗИП-Э\Производство\Рабочие документы\Дароватый\+На обработку\1234Э\"; 
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("1234Э");
	НовСтр.Тип = 99;
	
	// Базунов, обновление цен
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Звездочка\База ЗИП к ПВН Звездочка 01.03.17.xlsx\База ЗИП к ПВН Звездочка 01.03.17.xlsx";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("");
	НовСтр.Тип = 12;
	
	// Базунов, обновление поставщиков	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Перечень ЗИП к 1159ТМ(903).xlsx";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("Rais Kellich");
	НовСтр.Тип = 13;

	// Базунов, буревестник	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Спецкомплектресурс\СудАрм 2014 Буревестник.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("321");
	НовСтр.Тип = 14;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Спецкомплектресурс\ШТС 2014 Буревестник.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("321");
	НовСтр.Тип = 14;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Спецкомплектресурс\Изделия машиностроения 2014 Буревесник.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("321");
	НовСтр.Тип = 14;
	
	// аскольд
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Спецкомплектресурс\НОМЕНКЛАТУРА  ИЗДЕЛИЙ  ОАО АСКОЛЬД .xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("321");
	НовСтр.Тип = 15;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Спецкомплектресурс\НОМЕНКЛАТУРА ШТС И ДЕТАЛЕЙ СОЕДИНЕНИЯ ТРУБОПРОВОДОВ АСКОЛЬД.xls";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("321");
	НовСтр.Тип = 16;
	
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Арктика\ЗИП полный отправка.xlsx";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("Sindhukesari");
	НовСтр.Тип = 17;
	НовСтр = СписокЗагрузки.Добавить();
	НовСтр.Файл    = "W:\КТ\зип-Э\29-08-2017\Арктика\ЗИП 877ЭКМ 313.xlsx";
	НовСтр.Корабль = Справочники.Заказы.НайтиПоНаименованию("Sindhukesari");
	НовСтр.Тип = 17;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВсе(Команда)
	
	Для каждого Стр Из СписокЗагрузки Цикл
		
		Если Стр.Пометка Тогда
			
			Попытка
				НовФайл = Новый Файл(Стр.Файл);
				ТекИмяФайла   = НовФайл.Имя;
				ТекПутьКФайлу = НовФайл.Путь;
			Исключение
				//ОписаниеОшибки()
			КонецПопытки;
			
			ИмяФайла = Стр.Файл;
			Заказ    = Стр.Корабль;
			Если Стр.Тип = 1 Тогда
				Заполнить877();
			ИначеЕсли Стр.Тип = 2 Тогда
				Заполнить956();
			ИначеЕсли Стр.Тип = 5 Тогда
				Заполнить956_ДЭ();
			ИначеЕсли Стр.Тип = 3 Тогда
				Заполнить1159();
			ИначеЕсли Стр.Тип = 4 Тогда
				Заполнить1234();
			ИначеЕсли Стр.Тип = 6 Тогда
				Заполнить11661();
			ИначеЕсли Стр.Тип = 7 Тогда
				Заполнить11356();
			ИначеЕсли Стр.Тип = 8 Тогда
				Заполнить06360();
				//++ 2017030701 05.07.17 Веденеев П. //импорт данных от НПО "Аврора"
			ИначеЕсли Стр.Тип = 9 Тогда
				ЗаполнитьАврора();
				//-- 2017030701 05.07.17 Веденеев П. //импорт данных от НПО "Аврора"
				//++ 2017030701 17.07.17 Веденеев П. //импорт данных Гепард
			ИначеЕсли Стр.Тип = 10 Тогда
				ЗаполнитьГепард();
			ИначеЕсли Стр.Тип = 11 Тогда // мурена
				ЗаполнитьМурена();
			ИначеЕсли Стр.Тип = 99 Тогда // 99 универсальная
				ЗаполнитьОбщая();
			ИначеЕсли Стр.Тип = 12 Тогда // ОбновитьЦены
				ОбновитьЦены();
			ИначеЕсли Стр.Тип = 13 Тогда // ОбновитьПоставщиков 1159
				ОбновитьПоставщиков1159();
			ИначеЕсли Стр.Тип = 14 Тогда // Буревестник
				ОбновлятьСуществующиеДанные = Истина;
				ЗагрузитьБуревестник();
			ИначеЕсли Стр.Тип = 15 Тогда // Аскольд
				ОбновлятьСуществующиеДанные = Истина;
				ЗагрузитьАскольд();
			ИначеЕсли Стр.Тип = 16 Тогда // Аскольд
				ОбновлятьСуществующиеДанные = Истина;
				ЗагрузитьАскольд1();
			ИначеЕсли Стр.Тип = 17 Тогда // Арктика
				//ОбновлятьСуществующиеДанные = Истина;
				ЗагрузитьАрктика();
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьФлаги(Выделить = Истина)
	
	Для каждого Стр Из СписокЗагрузки Цикл
		Стр.Пометка = Выделить;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	ПроставитьФлаги(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	ПроставитьФлаги(Ложь);
КонецПроцедуры

//веденеев 11.08.2017 начало - импорт/экспорт таблиц формы в xml (чтобы не загружать каждый раз при тестах)

//функция возвращает строку, содеражащую сериализованную в XML таблицу
&НаСервере
Функция СериализоватьТаблицуВXML(ИмяТаблицы)
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ТаблицаЗначений = РеквизитФормыВЗначение(ИмяТаблицы,Тип("ТаблицаЗначений")); 
	Сериализатор.ЗаписатьXML(ЗаписьXML,ТаблицаЗначений);
	       
	СтрокаXML = ЗаписьXML.Закрыть();
	
	Возврат СтрокаXML;
	
КонецФункции

//процедура загружает таблицу из строки, содержащей текст XML
&НаСервере
Процедура ПолучитьТаблицуИзXML(СтрокаXML,ИмяТаблицы)
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ТаблицаЗначений = Сериализатор.ПрочитатьXML(ЧтениеXML,Тип("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ТаблицаЗначений,ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТаблицы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействиеСохраненияЗагрузкиТаблиц",ЭтаФорма,Истина);
	
	ПоказатьВопрос(ОписаниеОповещения,"Предыдущее сохранение будет заменено. Продолжить?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТаблицы(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьДействиеСохраненияЗагрузкиТаблиц",ЭтаФорма,Ложь);
	
	ПоказатьВопрос(ОписаниеОповещения,"Данные таблиц будут изменены. Продолжить?",РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСохраненияЗагрузкиТаблиц(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекстСообщения = ?(ДополнительныеПараметры,"Сохранение начато в ","Загрузка начата в ");
		Сообщить(ТекстСообщения+Строка(ТекущаяДата()));
		СохранитьЗагрузитьТаблицыНаСервере(ДополнительныеПараметры);
		ТекстСообщения = ?(ДополнительныеПараметры,"Сохранение окончено в ","Загрузка окончена в ");
		Сообщить(ТекстСообщения+Строка(ТекущаяДата()));
	Иначе
		Сообщить("Прервано пользователем!");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗагрузитьТаблицыНаСервере(ЭтоСохранение)
	
	Текст = Новый ТекстовыйДокумент;
	
	МассивТаблиц = Новый Массив;
	
	МассивРеквизитов = ПолучитьРеквизиты();
	
	Для каждого РеквизитФормы Из МассивРеквизитов Цикл
		
		Если Строка(РеквизитФормы.ТипЗначения) = "Таблица значений" И РеквизитФормы.Имя <> "СписокЗагрузки" Тогда
			
			ПолноеИмяФайла = КаталогВременныхФайлов+РеквизитФормы.Имя+".xml";
			
			Если ЭтоСохранение И ЭтаФорма[РеквизитФормы.Имя].Количество()>0 Тогда
				
				СтрокаXML = СериализоватьТаблицуВXML(РеквизитФормы.Имя);
				Текст.ДобавитьСтроку(СтрокаXML);
				Текст.Записать(ПолноеИмяФайла);
				Текст.Очистить();
				Сообщить("Файл "+ПолноеИмяФайла+" сохранен в "+ТекущаяДата());
				
			ИначеЕсли Не ЭтоСохранение Тогда
				
				Попытка
					Текст.Прочитать(ПолноеИмяФайла);
					СтрокаXML = Текст.ПолучитьТекст();
					ПолучитьТаблицуИзXML(СтрокаXML,РеквизитФормы.Имя);
					Сообщить("Таблица "+РеквизитФормы.Имя+" загружена в "+ТекущаяДата());
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры;
		

//веденеев 11.08.2017 окончание

//2017030701 05.07.17 Веденеев П. //импорт данных от НПО "Аврора" //добавлен флаг ОбновлятьСуществующиеДанные
//позволяет включить перезапись информации по уже имеющимся объектам БД при загрузке

