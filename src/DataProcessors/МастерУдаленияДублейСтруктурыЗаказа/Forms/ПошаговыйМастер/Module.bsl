
//////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыОбработки = Неопределено;
	СценарийОбработки  = Новый Массив;

	Если Параметры.Свойство("ПараметрыОбработки", ПараметрыОбработки) Тогда
		ОбработатьПодтверждениеУдаления					= Неопределено;
		ОбработатьОбъединениеСпецификаций       		= Неопределено;
		ОбработатьСохранениеДанныхПоСвязаннымЭлементам 	= Неопределено;
		ОбработатьЗапросУдаленияИзСпецификации      	= Неопределено;
		Оригинал = ПараметрыОбработки.Оригинал;
		
		Если ПараметрыОбработки.СценарийОбработкиМастераКлиент.Свойство("ПодтверждениеУдаленияКлиент", ОбработатьПодтверждениеУдаления) Тогда
			
			ПриСозданииНаСервереШагПодтверждениеУдаления(ОбработатьПодтверждениеУдаления, СценарийОбработки);
			
		КонецЕсли;	

		Если ПараметрыОбработки.СценарийОбработкиМастераКлиент.Свойство("ОбработатьОбъединениеСпецификацийКлиент", ОбработатьОбъединениеСпецификаций) Тогда
			
			ПриСозданииНаСервереШагОбъединениеСпецификаций(ОбработатьОбъединениеСпецификаций, СценарийОбработки);
			
		КонецЕсли;	
		
		Если ПараметрыОбработки.СценарийОбработкиМастераКлиент.Свойство("ОбработатьСохранениеДанныхПоСвязаннымЭлементамКлиент", ОбработатьСохранениеДанныхПоСвязаннымЭлементам) Тогда
			
			ПриСозданииНаСервереШагРедактированиеЭлементовСтруктурыКлиент(ОбработатьСохранениеДанныхПоСвязаннымЭлементам, Оригинал, СценарийОбработки);
									
		КонецЕсли; 
		
		Если ПараметрыОбработки.СценарийОбработкиМастераКлиент.Свойство("ОбработатьЗапросУдаленияИзСпецификацииКлиент", ОбработатьЗапросУдаленияИзСпецификации ) Тогда

			ПриСозданииНаСервереШагЗапросНаУдалениеИзСпецификации(ПараметрыОбработки, ОбработатьЗапросУдаленияИзСпецификации, СценарийОбработки);
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
	ИнициализироватьНастройкиПошаговогоМастера(СценарийОбработки);
	
	Если НастройкиМастера.Шаги.Количество() = 0 Тогда
		Отказ = Истина;	
	    Возврат;		
	КонецЕсли;
	НастройкиМастера.ТекущийШаг = НастройкиМастера.Шаги[0];
	ВидимостьДоступность(ЭтотОбъект);   
		
КонецПроцедуры // ПриСозданииНаСервере

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриАктивацииШагаМастера();
КонецПроцедуры // ПриОткрытии 


///////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СформироватьРезультатИЗакрыть()
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ОбработатьНаСервере",  						Истина);
	ПараметрыЗакрытия.Вставить("ЭлементыСтруктурыДляОбновления", 			ПолучитьЭлементыСтруктурыДляОбновления());
	ПараметрыЗакрытия.Вставить("ЭлементыСтруктурыДляУдаления", 				ПолучитьЭлементыСтруктурыДляУдаления());
	ПараметрыЗакрытия.Вставить("ЭлементыСтруктурыДляОбновленияПодчиненные", ПолучитьЭлементыСтруктурыДляОбновленияПоПодчиненным());
	ПараметрыЗакрытия.Вставить("СпецификацияПредметаСнабжения",  			СпецификацияПредметаСнабжения());
	
	Закрыть(ПараметрыЗакрытия);

КонецПроцедуры //СформироватьРезультатИЗакрыть

#Область ПроцедурыИФункцииШаговМастера

#Область ШагПодтверждениеУдаления

#Область Инициализация

&НаСервере
Процедура ПриСозданииНаСервереШагПодтверждениеУдаления(ПараметрыОбработки, СценарийОбработки)	
	ИнформацияШагПодтверждениеУдаления = СтрШаблон(НСтр("ru = 'Внимание! Дубликаты имеют разные предметы снабжения. Подтвердите объединение дублей предметов снабжения в оригинал ""%1"".'"), ПараметрыОбработки.ПредметСнабженияОригинал);
	НоваяСтрока = ТаблицаДубликаты.Добавить();
	НоваяСтрока.ПризнакОригинала = Истина;
	НоваяСтрока.ПредметСнабжения = ПараметрыОбработки.ПредметСнабженияОригинал;
	
	Для каждого Дубликат Из ПараметрыОбработки.ПредметСнабженияДубликаты Цикл
		НоваяСтрока = ТаблицаДубликаты.Добавить();
		НоваяСтрока.ПризнакОригинала = Ложь;
		НоваяСтрока.ПредметСнабжения = Дубликат; 		
	КонецЦикла; 

	СценарийОбработки.Добавить("ПодтверждениеУдаления");
	ТаблицаПрименямости.Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", Справочники.КаталогПредметовСнабжения.ПустаяСсылка());
КонецПроцедуры // ПриСозданииНаСервереШагПодтверждениеУдаления

#КонецОбласти 

&НаКлиенте
Процедура ДубликатыПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ТаблицаДубликаты.ТекущиеДанные;
	Если НЕ ТекущаяСтрока = Неопределено Тогда		
		ОбновитьПрименяемостьИСпецификациюПредметаСнабжения(ТекущаяСтрока.ПредметСнабжения);	
	КонецЕсли; 
КонецПроцедуры // ДубликатыПриАктивизацииСтроки

&НаКлиенте
Процедура ОбновитьПрименяемостьИСпецификациюПредметаСнабжения(ПредметСнабженияСсылка)
	ТаблицаПрименямости.Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", ПредметСнабженияСсылка);
КонецПроцедуры // ОбновитьПрименяемостьПредметаСнабжения

&НаКлиенте
Процедура ТаблицаПрименямостиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаПрименямости.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ЭлементСтруктурыЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекущиеДанные.ЭлементСтруктурыЗаказа);
КонецПроцедуры // ТаблицаПрименямостиВыбор

#КонецОбласти 

#Область ШагОбъединениеСпецификаций

#Область Инициализация

&НаСервере
Процедура ПриСозданииНаСервереШагОбъединениеСпецификаций(ПараметрыДействия, СценарийОбработки)

	ПараметрыПоискаСпецификаций = ПолучитьПараметрыПоискаСпецификаций(ПараметрыДействия);
	
	ПоискСпецификаций(ПараметрыПоискаСпецификаций);
	
	ПредметСнабженияОригинал = ПараметрыПоискаСпецификаций.ПредметСнабженияОригинал;
	ИнформацияШагОбъединениеСпецификаций = СтрШаблон("Обработка спецификации для ""%1"":", Строка(ПредметСнабженияОригинал));
	
	Если ДеревоСпецификация.ПолучитьЭлементы().Количество() > 0 Тогда
		СценарийОбработки.Добавить("ОбъединениеСпецификаций");		
	КонецЕсли;	
	
	УсловноеОформление();

КонецПроцедуры // ПриСозданииНаСервереШагОбъединениеСпецификаций

&НаСервере
Функция ПолучитьПараметрыПоискаСпецификаций(ПараметрыДействия)

	ПараметрыПоискаСпецификаций = Новый Структура("ПредметСнабженияОригинал, ПредметСнабженияДубликаты");
	ЗаполнитьЗначенияСвойств(ПараметрыПоискаСпецификаций, ПараметрыДействия);	

	Возврат ПараметрыПоискаСпецификаций;
	
КонецФункции // ПолучитьПараметрыПоискаСпецификаций 
	
#КонецОбласти 

#Область ОбработчикиКомандДеревоСпецификация

&НаКлиенте
Процедура РазвернутьГруппы(Команда)
	
	ВсеСтроки = Элементы.ДеревоСпецификация;
	Для Каждого ДанныеСтроки Из ДеревоСпецификация.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Развернуть(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;

КонецПроцедуры // РазвернутьГруппы

&НаКлиенте
Процедура СвернутьГруппы(Команда)
	
	ВсеСтроки = Элементы.ДеревоСпецификация;
	Для Каждого ДанныеСтроки Из ДеревоСпецификация.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Свернуть(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры // СвернутьГруппы

&НаКлиенте
Процедура ВыбратьСпецификациюОригинала(Команда)
	
	ВыбратьСпецификациюПоИсточнику("Оригинал");
	
КонецПроцедуры // ВыбратьСпецификациюОригинала

&НаКлиенте
Процедура ВыбратьСпецификациюДубликата(Команда)
	
	ВыбратьСпецификациюПоИсточнику("Дубликат");	

КонецПроцедуры // ВыбратьСпецификациюДубликата

&НаКлиенте
Процедура ВыбратьСПриоритетомДубликата(Команда)
	
	ВыбратьСПриоритетом("Дубликат");
	
КонецПроцедуры // ВыбратьСПриоритетомДубликата

&НаКлиенте
Процедура ВыбратьСПриоритетомОригинала(Команда)
	
	ВыбратьСПриоритетом("Оригинал");

КонецПроцедуры  // ВыбратьСПриоритетомОригинала

&НаКлиенте
Процедура ДеревоСпецификацияВключитьВИтогПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ДеревоСпецификация.ТекущиеДанные;

	Если ДанныеСтроки.Уровень = 1 Тогда
		
		Если НЕ ДанныеСтроки.ВключитьВИтог Тогда
		
			ИнформацияОПрименяемости = ПолучитьИнформациюОПрименяемости(ПредметСнабженияОригинал, ДанныеСтроки.СоставляющаяЧасть);
			Если ЗначениеЗаполнено(ИнформацияОПрименяемости) Тогда
			
				Элементы.ИнформацияОПрименяемости.Видимость = Истина;
				ДанныеСтроки.ВключитьВИтог = Истина;
			    Возврат;
				
			КонецЕсли; 
					
		КонецЕсли; 
		
		Кандидаты = ДанныеСтроки.ПолучитьЭлементы();
		Если Кандидаты.Количество() = 1 Тогда
		
			Кандидаты[0].ВключитьВИтог = ДанныеСтроки.ВключитьВИтог;
			
		ИначеЕсли ДанныеСтроки.ВключитьВИтог Тогда
			Кандидаты[0].ВключитьВИтог = Истина;
			Кандидаты[1].ВключитьВИтог = Ложь;
		Иначе
			Кандидаты[0].ВключитьВИтог = Ложь;
			Кандидаты[1].ВключитьВИтог = Ложь;

		КонецЕсли; 
		
	Иначе	
		
		Родитель = ДанныеСтроки.ПолучитьРодителя();
		Кандидаты = Родитель.ПолучитьЭлементы();
		Если Кандидаты.Количество() = 1 Тогда
		
			Если НЕ ДанныеСтроки.ВключитьВИтог Тогда
				
				ИнформацияОПрименяемости = ПолучитьИнформациюОПрименяемости(ПредметСнабженияОригинал, ДанныеСтроки.СоставляющаяЧасть);
				Если ЗначениеЗаполнено(ИнформацияОПрименяемости) Тогда
					
					Элементы.ИнформацияОПрименяемости.Видимость = Истина;
					ДанныеСтроки.ВключитьВИтог = Истина;
					Возврат;
				КонецЕсли; 
				
			КонецЕсли;
			
			Родитель.ВключитьВИтог = ДанныеСтроки.ВключитьВИтог;
			
		Иначе
			Для каждого Кандидат Из Кандидаты Цикл
				
				Если НЕ Кандидат = ДанныеСтроки Тогда
					
					Кандидат.ВключитьВИтог = НЕ ДанныеСтроки.ВключитьВИтог;	
				
				КонецЕсли;
				
				Если Кандидат.ВключитьВИтог Тогда
					
					ЗаполнитьЗначенияСвойств(Родитель, Кандидат,,"Уровень"); 	
					
				КонецЕсли; 

			КонецЦикла; 
		
		КонецЕсли; 
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацияПриАктивизацииСтроки(Элемент)	
	ДанныеСтроки = Элементы.ДеревоСпецификация.ТекущиеДанные;
	Если НЕ ДанныеСтроки = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСоставляющаяЧасть) И НЕ ТекущаяСоставляющаяЧасть = ДанныеСтроки.СоставляющаяЧасть Тогда
			
			ИнформацияОПрименяемости = "";
			Элементы.ИнформацияОПрименяемости.Видимость = Ложь;
			
		КонецЕсли;
		ТекущаяСоставляющаяЧасть = ДанныеСтроки.СоставляющаяЧасть; 	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УсловноеОформление()
	
	ЭлементыУсловногоОформления = УсловноеОформление.Элементы;
	ЭлементыУсловногоОформления.Очистить();
	
	// 1
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификация.ВключитьВИтог");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияВключитьВИтог");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияСоставляющаяЧасть");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияИсточник");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияГруппировка");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияЗИП");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличество");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПБорт");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПБаза");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПДЭ");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПР");

	// 2
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификация.Уровень");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = 1;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияСоставляющаяЧасть");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияИсточник");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияГруппировка");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияЗИП");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличество");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПБорт");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПБаза");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПДЭ");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПР");

	// 3
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификация.Уровень");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = 1;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияСоставляющаяЧасть");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияИсточник");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();

	// 4
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификация.Уровень");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = 1;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый  Шрифт(WindowsШрифты.ШрифтДиалоговИМеню,,,Истина));
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияСоставляющаяЧасть");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияИсточник");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияГруппировка");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияЗИП");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличество");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПБорт");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПБаза");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПДЭ");
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацияКоличествоВЗИПР");
	
КонецПроцедуры //УсловноеОформление

&НаКлиенте
Функция ПолучитьИнформациюОПрименяемости(ПредметСнабжения, СоставляющаяЧасть)

	Результат = Новый Массив;
	МассивЭлементовСтруктуры = ПолучитьИнформациюОПрименяемостиНаСервере(ПредметСнабжения, СоставляющаяЧасть);
	
	Если МассивЭлементовСтруктуры.Количество() > 0 Тогда
		
		Результат.Добавить(СтрШаблон(НСтр("ru = 'Обнаружены ненулевые элементы структуры, входящие в иерархию спецификации предмета снабжения ""%1"":'"), ПредметСнабжения));
		Для каждого ЭлементСтруктуры Из МассивЭлементовСтруктуры Цикл
			
			Результат.Добавить(Новый ФорматированнаяСтрока(Строка(ЭлементСтруктуры.Ссылка) + "(" + ЭлементСтруктуры.Владелец + ")",,Новый Цвет(0, 0, 255),,ПолучитьНавигационнуюСсылку(ЭлементСтруктуры.Ссылка)));
			Результат.Добавить(",");
			
		КонецЦикла;	
		
		Результат.Удалить(Результат.Количество() - 1);
		
	КонецЕсли; 
		
	Возврат Новый ФорматированнаяСтрока(Результат);	

КонецФункции // ПолучитьИнформациюОПрименяемости

&НаСервере
Функция ПолучитьИнформациюОПрименяемостиНаСервере(ПредметСнабжения, СоставляющаяЧасть)
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СтруктураЗаказа
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.ПредметСнабжения = &ПредметСнабжения
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	(НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР = 0)
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВТ_СтруктураЗаказа.Ссылка
	|			ИЗ
	|				ВТ_СтруктураЗаказа)";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	Запрос.УстановитьПараметр("СоставнаяЧасть", СоставляющаяЧасть);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Добавить(Новый Структура("Ссылка, Владелец", Выборка.Ссылка, Выборка.Владелец));	
	
	КонецЦикла;  
	
	Возврат Результат;	

КонецФункции // ПолучитьИнформациюОПрименяемости

&НаКлиенте
Процедура ВыбратьСпецификациюПоИсточнику(Источник)
	
	Для Каждого ГруппаСЧ Из ДеревоСпецификация.ПолучитьЭлементы() Цикл		
		
		ЭлементыГруппыСЧ = ГруппаСЧ.ПолучитьЭлементы();
		Если ЭлементыГруппыСЧ.Количество() = 1 
			И ГруппаСЧ.Источник = "Оригинал"
			И Источник = "Дубликат" Тогда
		
			ИнформацияОПрименяемости = ПолучитьИнформациюОПрименяемости(ПредметСнабженияОригинал, ГруппаСЧ.СоставляющаяЧасть);
			Если ЗначениеЗаполнено(ИнформацияОПрименяемости) Тогда
				
				Элементы.ИнформацияОПрименяемости.Видимость = Истина;
				Продолжить;
				
			КонецЕсли;    
		
		КонецЕсли;   		
		
		Если НЕ ГруппаСЧ.Источник = Источник Тогда 		
			ГруппаСЧ.ВключитьВИтог = Ложь; 		
		КонецЕсли; 
		
		Для Каждого Кандидат Из ГруппаСЧ.ПолучитьЭлементы() Цикл 			
			Если Кандидат.Источник = Источник Тогда
				Кандидат.ВключитьВИтог = Истина; 
				ЗаполнитьЗначенияСвойств(ГруппаСЧ, Кандидат,,"Уровень");
			Иначе
				Кандидат.ВключитьВИтог = Ложь;				
			КонецЕсли;  						
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры // ВыбратьСпецификациюПоИсточнику

&НаКлиенте
Процедура ВыбратьСПриоритетом(Источник)
	
	Для Каждого ГруппаСЧ Из ДеревоСпецификация.ПолучитьЭлементы() Цикл		
		Для Каждого Кандидат Из ГруппаСЧ.ПолучитьЭлементы() Цикл 			
			Если Кандидат.Источник = Источник Тогда
				Кандидат.ВключитьВИтог = Истина; 
				ЗаполнитьЗначенияСвойств(ГруппаСЧ, Кандидат,,"Уровень");
			Иначе
				Кандидат.ВключитьВИтог = Ложь; 				
			КонецЕсли;						
		КонецЦикла;
	КонецЦикла;	
	
	Для Каждого ГруппаСЧ Из ДеревоСпецификация.ПолучитьЭлементы() Цикл 		
		Для Каждого Кандидат Из ГруппаСЧ.ПолучитьЭлементы() Цикл 			
			Если ГруппаСЧ.Источник = Кандидат.Источник Тогда
				Кандидат.ВключитьВИтог = ГруппаСЧ.ВключитьВИтог; 							
			КонецЕсли; 						
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ВыбратьСПриоритетом

&НаСервере
Процедура ПоискСпецификаций(ПараметрыПоискаСпецификаций)
	
	ДеревоСпецификацияСервер = ДанныеФормыВЗначение(ДеревоСпецификация, Тип("ДеревоЗначений"));
	ДеревоСпецификацияСервер.Строки.Очистить();
	
	ЗаполнитьДеревоСпецификации(ПараметрыПоискаСпецификаций, ДеревоСпецификацияСервер);
	
	ЗначениеВДанныеФормы(ДеревоСпецификацияСервер, ДеревоСпецификация);
	
КонецПроцедуры // ПоискСпецификаций

&НаСервере
Процедура ЗаполнитьДеревоСпецификации(ПараметрыПоискаСпецификаций, ДеревоСпецификацияСервер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапроса();
	
	Запрос.УстановитьПараметр("ПредметСнабженияДубликаты", ПараметрыПоискаСпецификаций.ПредметСнабженияДубликаты);
	Запрос.УстановитьПараметр("ПредметСнабженияОригинал",  ПараметрыПоискаСпецификаций.ПредметСнабженияОригинал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСоставляющаяЧасть = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСоставляющаяЧасть.Следующий() Цикл
		
		НоваяСтрока = ДеревоСпецификацияСервер.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСоставляющаяЧасть); 
		НоваяСтрока.Уровень = 1;
		
		ВыборкаДетальныеЗаписи = ВыборкаСоставляющаяЧасть.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрокаДетали = НоваяСтрока.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДетали, ВыборкаДетальныеЗаписи); 
			
			Если ВыборкаДетальныеЗаписи.ВключитьВИтог Тогда    			
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);			
			КонецЕсли; 
		
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ДеревоСпецификацияСервер, ДеревоСпецификация);
	
КонецПроцедуры // ЗаполнитьДеревоСпецификации

&НаСервере
Функция ПолучитьТекстЗапроса()

	Возврат "ВЫБРАТЬ
	        |	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть,
	        |	""Оригинал"" КАК Источник,
	        |	СпецификацииПС.ЗИП КАК ЗИП,
	        |	СпецификацииПС.Количество КАК Количество,
	        |	СпецификацииПС.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	        |	СпецификацииПС.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	        |	СпецификацииПС.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	        |	СпецификацииПС.КоличествоВЗИПР КАК КоличествоВЗИПР,
	        |	СпецификацииПС.Тип КАК Группировка,
	        |	СпецификацииПС.ПричинаВыбораДляЗИП КАК ПричинаВыбораДляЗИП,
	        |	СпецификацииПС.НомерПозиции КАК НомерПозиции,
	        |	СпецификацииПС.СоставляющаяЧасть.Наименование КАК СоставляющаяЧастьНаименование
	        |ПОМЕСТИТЬ ВТ_ОбъединеннаяСпецификация
	        |ИЗ
	        |	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	        |ГДЕ
	        |	СпецификацииПС.ПредметСнабжения = &ПредметСнабженияОригинал
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	СпецификацииПС.СоставляющаяЧасть,
	        |	""Дубликат"",
	        |	СпецификацииПС.ЗИП,
	        |	СпецификацииПС.Количество,
	        |	СпецификацииПС.КоличествоВЗИПБорт,
	        |	СпецификацииПС.КоличествоВЗИПБаза,
	        |	СпецификацииПС.КоличествоВЗИПДЭ,
	        |	СпецификацииПС.КоличествоВЗИПР,
	        |	СпецификацииПС.Тип,
	        |	СпецификацииПС.ПричинаВыбораДляЗИП,
	        |	СпецификацииПС.НомерПозиции,
	        |	СпецификацииПС.СоставляющаяЧасть.Наименование
	        |ИЗ
	        |	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	        |ГДЕ
	        |	СпецификацииПС.ПредметСнабжения В(&ПредметСнабженияДубликаты)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ОбъединеннаяСпецификация.СоставляющаяЧасть КАК СоставляющаяЧасть
	        |ПОМЕСТИТЬ ВТ_ДублиСоставляющихЧастей
	        |ИЗ
	        |	ВТ_ОбъединеннаяСпецификация КАК ВТ_ОбъединеннаяСпецификация
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ_ОбъединеннаяСпецификация.СоставляющаяЧасть
	        |
	        |ИМЕЮЩИЕ
	        |	КОЛИЧЕСТВО(ВТ_ОбъединеннаяСпецификация.Источник) > 1
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ОбъединеннаяСпецификация.СоставляющаяЧасть КАК СоставляющаяЧасть,
	        |	ВТ_ОбъединеннаяСпецификация.Источник КАК Источник,
	        |	ВТ_ОбъединеннаяСпецификация.ЗИП КАК ЗИП,
	        |	ВТ_ОбъединеннаяСпецификация.Количество КАК Количество,
	        |	ВТ_ОбъединеннаяСпецификация.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	        |	ВТ_ОбъединеннаяСпецификация.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	        |	ВТ_ОбъединеннаяСпецификация.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	        |	ВТ_ОбъединеннаяСпецификация.КоличествоВЗИПР КАК КоличествоВЗИПР,
	        |	ВТ_ОбъединеннаяСпецификация.Группировка КАК Группировка,
	        |	ВЫБОР
	        |		КОГДА НЕ ВТ_ДублиСоставляющихЧастей.СоставляющаяЧасть ЕСТЬ NULL
	        |				И ВТ_ОбъединеннаяСпецификация.Источник = ""Дубликат""
	        |			ТОГДА ЛОЖЬ
	        |		ИНАЧЕ ИСТИНА
	        |	КОНЕЦ КАК ВключитьВИтог,
	        |	ВТ_ОбъединеннаяСпецификация.НомерПозиции КАК НомерПозиции,
	        |	ВТ_ОбъединеннаяСпецификация.ПричинаВыбораДляЗИП КАК ПричинаВыбораДляЗИП
	        |ИЗ
	        |	ВТ_ОбъединеннаяСпецификация КАК ВТ_ОбъединеннаяСпецификация
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДублиСоставляющихЧастей КАК ВТ_ДублиСоставляющихЧастей
	        |		ПО ВТ_ОбъединеннаяСпецификация.СоставляющаяЧасть = ВТ_ДублиСоставляющихЧастей.СоставляющаяЧасть
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ВТ_ОбъединеннаяСпецификация.СоставляющаяЧастьНаименование,
	        |	Источник УБЫВ
	        |ИТОГИ ПО
	        |	СоставляющаяЧасть"; 	

КонецФункции // ПолучитьТекстЗапроса()  

&НаКлиенте
Процедура СформироватьИтоговуюСпецификацию()
	
	ИнформацияШагРезультатОбъединенияСпецификаций = СтрШаблон("Итоговая спецификация предмета снабжения ""%1"":", Строка(ПредметСнабженияОригинал));
	
	ИтоговаяСпецификация.Очистить();
	
	Для Каждого ГруппаСЧ Из ДеревоСпецификация.ПолучитьЭлементы() Цикл		
		
		Если ГруппаСЧ.ВключитьВИтог Тогда
		
			НоваяСтрока = ИтоговаяСпецификация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ГруппаСЧ);
		    НоваяСтрока.ПредметСнабжения = ПредметСнабженияОригинал;
			
		КонецЕсли; 
				
	КонецЦикла;	
	
КонецПроцедуры // СформироватьИтоговуюСпецификацию

&НаСервере
Функция ПоместитьИтоговуюСпецификациюВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ИтоговаяСпецификация.Выгрузить());
	
КонецФункции

&НаСервере
Функция СпецификацияПредметаСнабжения()

	Возврат Новый Структура("ПредметСнабжения, АдресСпецификации", ПредметСнабженияОригинал, ПоместитьИтоговуюСпецификациюВХранилище());
	
КонецФункции // СпецификацияПредметаСнабжения  

#КонецОбласти

#КонецОбласти 

#Область ШагРедактированиеЭлементовСтруктурыКлиент

#Область Инициализация

&НаСервере
Процедура ПриСозданииНаСервереШагРедактированиеЭлементовСтруктурыКлиент(ПараметрыДействия, Оригинал, СценарийОбработки)

	ДобавитьКомандуЗаполнитьОригиналПоДубликату();
	НомерБлока = 0;
	
	Для каждого ПараметрыЦепочки Из ПараметрыДействия Цикл
		
		НоваяСтраница = СоздатьСтраницу(ПараметрыЦепочки.ЗаголовокСтраницы);
		СоздатьТаблицыДляОбработки(ПараметрыЦепочки.ДанныеПоЗаказам, НоваяСтраница);
		
	КонецЦикла; 		
	
	ИнформацияШагРедактированиеЭлементовСтруктуры = СтрШаблон(НСтр("ru = 'Перенос информации по предмету снабжения ""%1"" в структурах кораблей'"), Оригинал);
			
	Если ПараметрыДействия.Количество() > 0 Тогда
		СценарийОбработки.Добавить("РедактированиеЭлементовСтруктуры");		
	КонецЕсли; 
	
КонецПроцедуры // ПриСозданииНаСервереШагРедактированиеЭлементовСтруктурыКлиент
	
#КонецОбласти

#Область СозданиеФормы

&НаСервере
Процедура СоздатьТаблицыДляОбработки(ДанныеПоЗаказам, ТекущаяСтраница)

	ОписаниеКолонок = ОписаниеКолонок();	
	
	Для каждого ДанныеПоЗаказу Из ДанныеПоЗаказам Цикл
			
		СоздатьРеквизитыИЭлементыФормы("Блок" + НомерБлока, 
										СтрШаблон(НСтр("ru = '%1'"), ДанныеПоЗаказу.Владелец), 
										ОписаниеКолонок, 
										ГруппаФормыРодитель(ДанныеПоЗаказу.Порядок, ТекущаяСтраница));  
		
		ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(ДанныеПоЗаказу.АдресТаблицыЗаказа), "Блок" + НомерБлока);
				
		НомерБлока = НомерБлока + 1;

	КонецЦикла; 

КонецПроцедуры // СоздатьТаблицыДляОбработки  

Функция СоздатьСтраницу(Заголовок)

	КоличествоСтраниц 							= Элементы.Страницы.ПодчиненныеЭлементы.Количество();
	ЭлементФормыСтраница 						= Элементы.Добавить("Страница" + КоличествоСтраниц, Тип("ГруппаФормы"), Элементы.Страницы);
	ЭлементФормыСтраница.Вид  					= ВидГруппыФормы.Страница;
	ЭлементФормыСтраница.Заголовок          	= Заголовок;
	//ЭлементФормыСтраница.РастягиватьПоВертикали = Ложь;
	Если КоличествоСтраниц > 0 Тогда
	    Элементы.Страницы.ОтображениеСтраниц 	= ОтображениеСтраницФормы.ЗакладкиСверху;	
	КонецЕсли; 
	
	ЭлементФормыГруппа	 						= Элементы.Добавить("Страница" + КоличествоСтраниц + "ТекущийКорабль", Тип("ГруппаФормы"), ЭлементФормыСтраница);
	ЭлементФормыГруппа.Вид  					= ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементФормыГруппа.Отображение 				= ОтображениеОбычнойГруппы.Нет;
	ЭлементФормыГруппа.ОтображатьЗаголовок		= Ложь;
	ЭлементФормыГруппа.Заголовок 				= НСтр("ru='Текущий корабль'");
	ЭлементФормыГруппа.Группировка				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементФормыГруппа	 						= Элементы.Добавить("Страница" + КоличествоСтраниц + "ПрочиеКорабли", Тип("ГруппаФормы"), ЭлементФормыСтраница);
	ЭлементФормыГруппа.Вид  					= ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементФормыГруппа.Отображение 				= ОтображениеОбычнойГруппы.Нет;
	ЭлементФормыГруппа.Заголовок 				= НСтр("ru='Корабли, включающие иерархию предметов снабжения'");
	ЭлементФормыГруппа.Группировка				= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ЭлементФормыГруппа.РастягиватьПоГоризонтали = Истина;
	
	Возврат ЭлементФормыСтраница;
	
КонецФункции // СоздатьСтраницу

#КонецОбласти 

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ДействиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	СтандартнаяОбработка = Ложь;
	Если НЕ Колонка = Неопределено Тогда
		
		Если ЭтаФорма[Элемент.Имя][Строка].ПризнакОригинала = Истина Тогда
		
			КолонкаИмя = СтрЗаменить(Колонка.Имя, Элемент.Имя, "");
			ЭтаФорма[Элемент.Имя][Строка][КолонкаИмя] = Элемент.ТекущиеДанные[КолонкаИмя];	
		
		КонецЕсли;   		
	
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОригиналПоДубликату(Команда)
	
	Для НомерТаблицы = 0 ПО НомерБлока - 1 Цикл
			
		ТаблицаЗначенийЗаказ = ЭтаФорма["Блок" + НомерТаблицы];
		Для каждого Строка Из ТаблицаЗначенийЗаказ Цикл
			
			Если Строка.ПризнакОригинала Тогда
				
				Для каждого СтрокаДубль Из ТаблицаЗначенийЗаказ Цикл
					
					Если НЕ СтрокаДубль.ПризнакОригинала И Строка.ПоследнийРодитель = СтрокаДубль.ПоследнийРодитель Тогда
						
						Строка.ЗИП 					= Макс(Строка.ЗИП, 					СтрокаДубль.ЗИП);	
						Строка.Количество 			= Макс(Строка.Количество, 			СтрокаДубль.Количество);
						Строка.КоличествоВЗИПБорт 	= Макс(Строка.КоличествоВЗИПБорт, 	СтрокаДубль.КоличествоВЗИПБорт);
						Строка.КоличествоВЗИПБаза 	= Макс(Строка.КоличествоВЗИПБаза,	СтрокаДубль.КоличествоВЗИПБаза);
						Строка.КоличествоВЗИПДЭ 	= Макс(Строка.КоличествоВЗИПДЭ, 	СтрокаДубль.КоличествоВЗИПДЭ);
						Строка.КоличествоВЗИПР 		= Макс(Строка.КоличествоВЗИПР, 		СтрокаДубль.КоличествоВЗИПР);
						
					КонецЕсли; 				
				КонецЦикла;		
			КонецЕсли;     	
		КонецЦикла;
		
	КонецЦикла; 
	
	Элементы.ШагМастераДалее.Доступность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ГруппаФормыРодитель(Порядок, ТекущаяСтраница)

	Возврат ?(Порядок = 1, Элементы[ТекущаяСтраница.Имя + "ТекущийКорабль"], Элементы[ТекущаяСтраница.Имя + "ПрочиеКорабли"]);

КонецФункции // ГруппаФормыРодитель

&НаСервере
Функция ОписаниеКолонок()

	ОписаниеКолонок = Новый Структура();
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОписаниеКолонок.Вставить("ОписаниеПостоянныхКолонок", ОбработкаОбъект.ПолучитьОписаниеПостоянныхКолонок());
	ОписаниеКолонок.Вставить("ОписаниеПеременныхКолонок", ОбработкаОбъект.ПолучитьОписаниеПеременныхКолонок());

	Возврат ОписаниеКолонок;

КонецФункции // ОписаниеКолонок

&НаСервере
Функция ПолучитьЭлементыСтруктурыДляОбновления()

	Результат = Новый Соответствие;
	
	Для Н = 0 ПО НомерБлока - 1 Цикл
		
		ТаблицаЗаказа 	= РеквизитФормыВЗначение("Блок" + Н, Тип("ТаблицаЗначений"));
		НайденныеСтроки = ТаблицаЗаказа.НайтиСтроки(Новый Структура("ПризнакОригинала", Истина));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			СтруктураРеквизитов = Новый Структура("ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР");
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, НайденнаяСтрока);
			Результат.Вставить(НайденнаяСтрока.Ссылка, СтруктураРеквизитов);	
		
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ПолучитьЭлементыСтруктурыДляОбновления

&НаСервере
Функция ПолучитьЭлементыСтруктурыДляУдаления()

	Результат = Новый Массив;
	
	Для Н = 0 ПО НомерБлока - 1 Цикл
		
		ТаблицаЗаказа 	= РеквизитФормыВЗначение("Блок" + Н, Тип("ТаблицаЗначений"));
		НайденныеСтроки = ТаблицаЗаказа.НайтиСтроки(Новый Структура("ПризнакОригинала", Ложь));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Результат.Добавить(НайденнаяСтрока.Ссылка);	
		
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ПолучитьДанныеДляОбработкиПереносаРеквизитов  

&НаСервере
Функция ПолучитьЭлементыСтруктурыДляОбновленияПоПодчиненным()
	
	Результат = Новый Массив;
	
	Для НомерТаблицы = 0 ПО НомерБлока - 1 Цикл
			
		ТаблицаЗначенийЗаказ = РеквизитФормыВЗначение("Блок" + НомерТаблицы, Тип("ТаблицаЗначений"));
		Для каждого Строка Из ТаблицаЗначенийЗаказ Цикл
			
			Если Строка.ПризнакОригинала Тогда
				
				
				МассивДубликатов = Новый Массив;
				ТаблицаПоПоследнемуРодителю = ТаблицаЗначенийЗаказ.Скопировать(Новый Структура("ПризнакОригинала, ПоследнийРодитель", Ложь, Строка.ПоследнийРодитель));					
				Для каждого СтрокаТаблицыПоПоследнемуРодителю Из ТаблицаПоПоследнемуРодителю Цикл
					
					МассивДубликатов.Добавить(СтрокаТаблицыПоПоследнемуРодителю.Ссылка);	
					
				КонецЦикла;
				
				Стр = Новый Структура("Оригинал, Дубликаты", Строка.Ссылка, МассивДубликатов);
							
				Результат.Добавить(Стр);
				
			КонецЕсли;     	
		КонецЦикла;
		
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции
	
#КонецОбласти 

#Область Интерфейс

&НаСервере
Процедура ДобавитьКомандуЗаполнитьОригиналПоДубликату()

	ЗаполнитьОригиналПоДубликатуКомандаФормы 			 = Команды.Добавить("ЗаполнитьОригиналПоДубликату");      
	ЗаполнитьОригиналПоДубликатуКомандаФормы.Действие    = "ЗаполнитьОригиналПоДубликату";
	ЗаполнитьОригиналПоДубликатуКомандаФормы.Картинка    = БиблиотекаКартинок.СохранитьЗначения;
	ЗаполнитьОригиналПоДубликатуКомандаФормы.Отображение = ОтображениеКнопки.Текст;

	ЭлементФормы 							= Элементы.Вставить("ЗаполнитьОригиналПоДубликату", Тип("КнопкаФормы"), Элементы.ШагРедактированиеЭлементовСтруктуры);
	ЭлементФормы.Заголовок               	= НСтр("ru='Заполнить оригинал максимальными значениями'");
	ЭлементФормы.ИмяКоманды              	= "ЗаполнитьОригиналПоДубликату"; 
	
	Элементы.Переместить(ЭлементФормы, Элементы.ШагРедактированиеЭлементовСтруктуры, Элементы.ИнформацияШагРедактированиеЭлементовСтруктуры); 
	
КонецПроцедуры //ДобавитьКомандуЗаполнитьОригиналПоДубликату

&НаСервере
Процедура СоздатьРеквизитыИЭлементыФормы(ИмяТаблицы, Заголовок, ОписаниеКолонок, ГруппаФормыРодитель)

	СоздатьРеквизитыФормы(ИмяТаблицы, ОписаниеКолонок);
										
	СоздатьЭлементыФормы(ИмяТаблицы, ОписаниеКолонок, Заголовок, ГруппаФормыРодитель);	
	
	СоздатьУсловноеОформление(ИмяТаблицы, ОписаниеКолонок);
	
КонецПроцедуры //СоздатьРеквизитыИЭлементыФормы

&НаСервере
Процедура СоздатьРеквизитыФормы(ИмяТаблицы, Колонки)

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипаТЗ = Новый ОписаниеТипов(МассивТипов);
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Флажок" + ИмяТаблицы, Новый ОписаниеТипов("Булево"), ,	, Ложь));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, ОписаниеТипаТЗ, , , Ложь));
	
	Для каждого Колонка Из Колонки.ОписаниеПостоянныхКолонок Цикл
	    МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы, Колонка.Представление, Ложь));
	КонецЦикла; 
	
	Для каждого Колонка Из Колонки.ОписаниеПеременныхКолонок Цикл
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения), ИмяТаблицы, Колонка.Представление, Ложь));
	КонецЦикла; 

	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов); 

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы(ИмяТаблицы, ОписаниеКолонок, Заголовок, ГруппаФормыРодитель)

	ГруппаТаблицы = СоздатьГруппу(ИмяТаблицы, Заголовок, ГруппаФормыРодитель);
	СоздатьТаблицу(ИмяТаблицы, ОписаниеКолонок, ГруппаТаблицы);
	
КонецПроцедуры // СоздатьЭлементыФормы

&НаСервере
Функция СоздатьГруппу(ИмяТаблицы, Заголовок, ГруппаФормыРодитель)
	
	ЭлементФормыГруппаБлока 							= Элементы.Добавить("ГруппаШапка" + ИмяТаблицы, Тип("ГруппаФормы"), ГруппаФормыРодитель);
	ЭлементФормыГруппаБлока.Вид  						= ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементФормыГруппаБлока.Отображение 				= ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ЭлементФормыГруппаБлока.Заголовок			 		= Заголовок;
	ЭлементФормыГруппаБлока.ШрифтЗаголовка 				= Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,, Истина);
	ЭлементФормыГруппаБлока.Поведение					= ПоведениеОбычнойГруппы.Свертываемая;
	ЭлементФормыГруппаБлока.ОтображениеУправления		= ОтображениеУправленияОбычнойГруппы.Картинка;
	
	Возврат ЭлементФормыГруппаБлока;
	
КонецФункции // СоздатьГруппу

&НаСервере
Процедура СоздатьТаблицу(ИмяТаблицы, Колонки, ГруппаФормыРодитель)

	ЭлементФормы 							= Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ГруппаФормыРодитель);
	ЭлементФормы.ПутьКДанным 				= ИмяТаблицы;
	ЭлементФормы.ПоложениеКоманднойПанели 	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементФормы.Высота 					= 3;
	ЭлементФормы.ИзменятьСоставСтрок 		= Ложь;
	ЭлементФормы.УстановитьДействие("Перетаскивание", "ДействиеПеретаскивание");
	
	Для каждого Колонка Из Колонки.ОписаниеПостоянныхКолонок Цикл
		ДобавитьКолонку(ИмяТаблицы, Колонка.Имя, Колонка.Вид, Колонка.Ширина);
	КонецЦикла; 
	
	Для каждого Колонка Из Колонки.ОписаниеПеременныхКолонок Цикл
		ДобавитьКолонку(ИмяТаблицы, Колонка.Имя, Колонка.Вид, Колонка.Ширина);
	КонецЦикла; 

КонецПроцедуры // СоздатьТаблицу

&НаСервере
Процедура ДобавитьКолонку(ИмяТаблицы, ИмяКолонки, Вид, Ширина = 10)

	НоваяКолонка 				= Элементы.Добавить(ИмяТаблицы + ИмяКолонки, Тип("ПолеФормы"), Элементы[ИмяТаблицы]);
	НоваяКолонка.Ширина 		= Ширина;
	НоваяКолонка.Вид 			= Вид;
	НоваяКолонка.ПутьКДанным 	= ИмяТаблицы + "." + ИмяКолонки;
		
КонецПроцедуры  // ДобавитьКолонку

&НаСервере
Процедура СоздатьУсловноеОформление(ИмяТаблицы, Колонки)

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	Для каждого Колонка Из Колонки.ОписаниеПостоянныхКолонок Цикл
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + Колонка.Имя);		
	КонецЦикла; 
	
	Для каждого Колонка Из Колонки.ОписаниеПеременныхКолонок Цикл
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + Колонка.Имя);		
	КонецЦикла; 
		
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ПризнакОригинала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента.Использование = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Использование = Истина;
	
	/////////////////////////////////////////////////////////////////////////
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Для каждого Колонка Из Колонки.ОписаниеПостоянныхКолонок Цикл
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + Колонка.Имя);		
	КонецЦикла; 
	
	Для каждого Колонка Из Колонки.ОписаниеПеременныхКолонок Цикл
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + Колонка.Имя);		
	КонецЦикла; 
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ПризнакОригинала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,, Истина));
	ЭлементУсловногоОформления.Использование = Истина;
	
	/////////////////////////////////////////////////////////////////////////

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПризнакОригинала");
		
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ПризнакОригинала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Использование = Истина;  

КонецПроцедуры // СоздатьУсловноеОформление
	
#КонецОбласти

#КонецОбласти

#Область ШагЗапросНаУдалениеИзСпецификации

#Область Инициализация

&НаСервере
Процедура ПриСозданииНаСервереШагЗапросНаУдалениеИзСпецификации(ПараметрыОбработки, ПараметрыДействия, СценарийОбработки)

	Дубликаты = ПараметрыОбработки.Дубликаты;
	
	Если ТипЗнч(ПараметрыДействия) = Тип("Массив") И ПараметрыДействия.Количество() > 0 Тогда
		
		НомерБлокаЗП = 0;
		Для каждого ПараПСДубликатаПСРодителя Из ПараметрыДействия Цикл
			
			ТекстНадписи = СтрШаблон(НСтр("ru = 'Подтверждаю удаление составляющей части ""%1"" из спецификации предмета снабжения ""%2"" с потерей данных'"), 
														ПараПСДубликатаПСРодителя.ПредметСнабжения, 
														ПараПСДубликатаПСРодителя.ПредметСнабженияРодителя);
			ЗаголовокТаблицы = СтрШаблон(НСтр("ru = 'Применяемость ""%1"" в составе ""%2""'"), 
														ПараПСДубликатаПСРодителя.ПредметСнабжения, 
														ПараПСДубликатаПСРодителя.ПредметСнабженияРодителя);

			СоздатьРеквизитыИЭлементыФормыСДС("ЗапросПодтверждения" + НомерБлокаЗП, 
										ТекстНадписи,
										ЗаголовокТаблицы,
										Новый Структура("ПредметСнабжения, СоставляющаяЧасть, Дубликаты", ПараПСДубликатаПСРодителя.ПредметСнабженияРодителя, ПараПСДубликатаПСРодителя.ПредметСнабжения, Дубликаты),
										Элементы.ШагЗапросНаУдалениеИзСпецификации);
			
			НомерБлокаЗП = НомерБлокаЗП + 1;
			
		КонецЦикла; 
		
		ИнформацияШагЗапросНаУдалениеИзСпецификации = СтрШаблон(НСтр("ru = 'Удаление составляющей части ""%1"" из спецификаций'"), ПараметрыДействия[0].ПредметСнабжения);
		
		СценарийОбработки.Добавить("ЗапросУдалениеИзСпецификации");
		
	КонецЕсли; 

КонецПроцедуры // ПриСозданииНаСервереШагЗапросНаУдалениеИзСпецификации
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЭлементЗапросПодтвержденияФлажокПриИзменении(Элемент)

	ВсеПодтвержденияПолучены = Истина;
	
	Для каждого Элемент Из Элементы Цикл
		
		Если Элемент.Родитель = Элементы.ШагЗапросНаУдалениеИзСпецификации
			И СтрНайти(Элемент.Имя, "ФлажокЗапросПодтверждения") > 0 
			И НЕ ЭтаФорма[СтрЗаменить(Элемент.Имя, "Элемент", "")] = Истина
			Тогда
		
			ВсеПодтвержденияПолучены = Ложь;
		
		КонецЕсли; 		
	
	КонецЦикла; 	

	Элементы.ШагМастераДалее.Доступность = ВсеПодтвержденияПолучены; 
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДинамическийСписок()

	Возврат
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Заказ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК ЭлементСтруктурыЗаказаРодитель,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктурыЗаказа,
	|	ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии КАК ОписаниеИерархии,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|		ПО (ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка)
	|ГДЕ
	|   НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В (&Дубликаты)
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.ПредметСнабжения = &ПредметСнабжения
	|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &СоставляющаяЧасть
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Группа)
	|	И (НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР = 0)";  	

КонецФункции // ПолучитьТекстЗапроса

&НаСервере
Процедура СоздатьРеквизитыИЭлементыФормыСДС(ИмяТаблицы, Заголовок, ЗаголовокТаблицы, ПараметрыДинамическогоСписка, ГруппаФормыРодитель)

	СоздатьРеквизитыФормыСДС(ИмяТаблицы);
										
	СоздатьЭлементыФормыСДС(ИмяТаблицы, ПараметрыДинамическогоСписка, Заголовок, ЗаголовокТаблицы, ГруппаФормыРодитель);	
	
	СоздатьУсловноеОформлениеСДС(ИмяТаблицы);
	
КонецПроцедуры //СоздатьРеквизитыИЭлементыФормыСДС

&НаСервере
Процедура СоздатьРеквизитыФормыСДС(ИмяТаблицы)

	РеквизитФормыЗапросПодтверждения = Новый РеквизитФормы("Флажок" + ИмяТаблицы, 
															Новый ОписаниеТипов("Булево"),
															,
															, 
															Ложь);
															
	РеквизитФормыЗапросПодтвержденияДинамическийСписок = Новый РеквизитФормы(ИмяТаблицы,
															Новый Описаниетипов("ДинамическийСписок"),
															,
															НСтр("ru='Применяемость'"),
															Ложь);
	
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(РеквизитФормыЗапросПодтверждения);
	МассивДобавляемыхРеквизитов.Добавить(РеквизитФормыЗапросПодтвержденияДинамическийСписок);
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);      

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыСДС(ИмяТаблицы, ПараметрыДинамическогоСписка, Заголовок, ЗаголовокТаблицы, ГруппаФормыРодитель)

	СоздатьШапкуСДС(ИмяТаблицы, Заголовок, ГруппаФормыРодитель);
	СоздатьТаблицуСДС(ИмяТаблицы, ПараметрыДинамическогоСписка, ЗаголовокТаблицы, ГруппаФормыРодитель);
	
КонецПроцедуры // СоздатьЭлементыФормы

&НаСервере
Процедура СоздатьШапкуСДС(ИмяТаблицы, Заголовок, ГруппаФормыРодитель)
	
	ЭлементФормы 					= Элементы.Добавить("ЭлементФлажок" + ИмяТаблицы, Тип("ПолеФормы"), ГруппаФормыРодитель);
	ЭлементФормы.Вид 				= ВидПоляФормы.ПолеФлажка;
	ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	ЭлементФормы.ШрифтЗаголовка 	= Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,, Истина);
	ЭлементФормы.ПутьКДанным 		= "Флажок" + ИмяТаблицы;
	ЭлементФормы.Заголовок 			= Заголовок;
	ЭлементФормы.УстановитьДействие("ПриИзменении",  "ЭлементЗапросПодтвержденияФлажокПриИзменении");   
		
КонецПроцедуры // СоздатьШапку

&НаСервере
Процедура СоздатьТаблицуСДС(ИмяТаблицы, ПараметрыДинамическогоСписка, ЗаголовокТаблицы, ГруппаФормыРодитель)

	ЭтаФорма[ИмяТаблицы].ПроизвольныйЗапрос = Истина;
	ЭтаФорма[ИмяТаблицы].ТекстЗапроса 		= ПолучитьТекстЗапросаДинамическийСписок();
	ЭтаФорма[ИмяТаблицы].Параметры.УстановитьЗначениеПараметра("ПредметСнабжения", 	ПараметрыДинамическогоСписка.ПредметСнабжения);
	ЭтаФорма[ИмяТаблицы].Параметры.УстановитьЗначениеПараметра("СоставляющаяЧасть", ПараметрыДинамическогоСписка.СоставляющаяЧасть);
	ЭтаФорма[ИмяТаблицы].Параметры.УстановитьЗначениеПараметра("Дубликаты", 		ПараметрыДинамическогоСписка.Дубликаты);
	
	ЭлементФормы 							= Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ГруппаФормыРодитель);
	ЭлементФормы.ПутьКДанным 				= ИмяТаблицы;
	ЭлементФормы.Отображение 				= ОтображениеТаблицы.Список;
	ЭлементФормы.ПоложениеКоманднойПанели 	= ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ЭлементФормы.ПоложениеЗаголовка 		= ПоложениеЗаголовкаЭлементаФормы.Верх;
	ЭлементФормы.Заголовок 					= ЗаголовокТаблицы;
	ЭлементФормы.Высота 					= 3;

	ДобавитьКолонку(ИмяТаблицы, "Заказ", ВидПоляФормы.ПолеНадписи);
	ДобавитьКолонку(ИмяТаблицы, "ОписаниеИерархии", ВидПоляФормы.ПолеНадписи);
	ДобавитьКолонку(ИмяТаблицы, "Количество", ВидПоляФормы.ПолеНадписи);
	ДобавитьКолонку(ИмяТаблицы, "КоличествоВЗИПБорт", ВидПоляФормы.ПолеНадписи);
	ДобавитьКолонку(ИмяТаблицы, "КоличествоВЗИПБаза", ВидПоляФормы.ПолеНадписи);
	ДобавитьКолонку(ИмяТаблицы, "КоличествоВЗИПДЭ", ВидПоляФормы.ПолеНадписи);
	ДобавитьКолонку(ИмяТаблицы, "КоличествоВЗИПР", ВидПоляФормы.ПолеНадписи);

	
КонецПроцедуры // СоздатьТаблицу

&НаСервере
Процедура СоздатьУсловноеОформлениеСДС(ИмяТаблицы)

	ДобавитьУсловноеОформлениеКолонки(ИмяТаблицы, "Количество");
	ДобавитьУсловноеОформлениеКолонки(ИмяТаблицы, "КоличествоВЗИПБорт");
	ДобавитьУсловноеОформлениеКолонки(ИмяТаблицы, "КоличествоВЗИПБаза");
	ДобавитьУсловноеОформлениеКолонки(ИмяТаблицы, "КоличествоВЗИПДЭ");
	ДобавитьУсловноеОформлениеКолонки(ИмяТаблицы, "КоличествоВЗИПР");
	
КонецПроцедуры // СоздатьУсловноеОформление

&НаСервере
Процедура ДобавитьУсловноеОформлениеКолонки(ИмяТаблицы, ИмяКолонки)

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение);

КонецПроцедуры // ДобавитьУсловноеОформлениеКолонки  

#КонецОбласти

#КонецОбласти

#КонецОбласти 

////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс мастера

#Область ПрограммныйИнтерфейсМастера

// Инициализирует структуры мастера.
// В реквизит формы НастройкиПошаговогоМастера записывается следующее значение:
//   Структура - Описание настроек мастера.
//     Общедоступные настройки мастера:
//       * Шаги - Массив - Описание шагов мастера. Только для чтения.
//           Для добавления шагов следует использовать функцию ДобавитьШагМастера.
//       * ТекущийШаг - Структура - Текущий шаг мастера. Только для чтения.
//       * ПоказатьДиалогПередЗакрытием - Булево - Если Истина, то перед закрытием формы будет показано предупреждение.
//           Для изменения.
//     Служебные настройки мастера:
//       * ГруппаСтраниц - Строка - Имя элемента формы, переданного в параметре ГруппаСтраниц.
//       * КнопкаДалее - Строка - Имя элемента формы, переданного в параметре КнопкаДалее.
//       * КнопкаНазад - Строка - Имя элемента формы, переданного в параметре КнопкаНазад.
//       * КнопкаОтмена - Строка - Имя элемента формы, переданного в параметре КнопкаОтмена.
//
&НаСервере
Процедура ИнициализироватьНастройкиПошаговогоМастера(СценарийОбработки)
	НастройкиМастера = Новый Структура;
	НастройкиМастера.Вставить("Шаги", Новый Массив);
	НастройкиМастера.Вставить("ТекущийШаг", Неопределено);
	
	// Идентификаторы частей интерфейса.
	НастройкиМастера.Вставить("ГруппаСтраниц", Элементы.ШагиМастера.Имя);
	НастройкиМастера.Вставить("КнопкаДалее",   Элементы.ШагМастераДалее.Имя);
	НастройкиМастера.Вставить("КнопкаНазад",   Элементы.ШагМастераНазад.Имя);
	НастройкиМастера.Вставить("КнопкаОтмена",  Элементы.ШагМастераОтмена.Имя);
	
	// Для обработки длительных операций.
	НастройкиМастера.Вставить("ПоказатьДиалогПередЗакрытием", Ложь);
	
	// По умолчанию все отключено.
	Элементы.ШагМастераДалее.Видимость  = Ложь;
	Элементы.ШагМастераНазад.Видимость  = Ложь;
	Элементы.ШагМастераОтмена.Видимость = Ложь;
	
	Шаг = Неопределено;
	ВидимостьНазад = Ложь;
	
	Если НЕ СценарийОбработки.Найти("ПодтверждениеУдаления") = Неопределено Тогда
	
		// 0. 
		Шаг = ДобавитьШагМастера(Элементы.ШагПодтверждениеУдаления);
		Шаг.КнопкаНазад.Видимость = ВидимостьНазад;
		Шаг.КнопкаДалее.Заголовок = НСтр("ru = 'Подтверждаю >'");
		Шаг.КнопкаДалее.Подсказка = НСтр("ru = 'Продолжить'");
		Шаг.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		Шаг.КнопкаОтмена.Подсказка = НСтр("ru = 'Отказаться от удаления дубликатов'");
		
	    ВидимостьНазад = Истина;
	КонецЕсли; 

	Если НЕ СценарийОбработки.Найти("ОбъединениеСпецификаций") = Неопределено Тогда
	
		// 1. 
		Шаг = ДобавитьШагМастера(Элементы.ШагОбъединениеСпецификаций);
		Шаг.КнопкаНазад.Видимость = ВидимостьНазад;
		Шаг.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
		Шаг.КнопкаДалее.Подсказка = НСтр("ru = 'Показать объединенную спецификацию'");
		Шаг.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		Шаг.КнопкаОтмена.Подсказка = НСтр("ru = 'Отказаться от удаления дубликатов'");
		
		// 2. 
		Шаг = ДобавитьШагМастера(Элементы.ШагРезультатОбъединенияСпецификации);
		Шаг.КнопкаНазад.Видимость = Истина;
		Шаг.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
		Шаг.КнопкаДалее.Подсказка = НСтр("ru = 'Перейти на следующий шаг'");
		Шаг.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		Шаг.КнопкаОтмена.Подсказка = НСтр("ru = 'Отказаться от удаления дубликатов'");

	    ВидимостьНазад = Истина;
	КонецЕсли; 
	
	Если НЕ СценарийОбработки.Найти("РедактированиеЭлементовСтруктуры") = Неопределено Тогда
	
		// 3. 
		Шаг = ДобавитьШагМастера(Элементы.ШагРедактированиеЭлементовСтруктуры);
		Шаг.КнопкаНазад.Видимость = ВидимостьНазад;
		Шаг.КнопкаДалее.Доступность = Ложь;
		Шаг.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
		Шаг.КнопкаДалее.Подсказка = НСтр("ru = 'Продолжить'");
		Шаг.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		Шаг.КнопкаОтмена.Подсказка = НСтр("ru = 'Отказаться от удаления дубликатов'");
		
		ВидимостьНазад = Истина;
		
	КонецЕсли;    

	Если НЕ СценарийОбработки.Найти("ЗапросУдалениеИзСпецификации") = Неопределено Тогда
	
		// 4. 
		Шаг = ДобавитьШагМастера(Элементы.ШагЗапросНаУдалениеИзСпецификации);
		Шаг.КнопкаНазад.Видимость = ВидимостьНазад;
		Шаг.КнопкаДалее.Доступность = Ложь;
		Шаг.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
		Шаг.КнопкаДалее.Подсказка = НСтр("ru = 'Продолжить'");
		Шаг.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
		Шаг.КнопкаОтмена.Подсказка = НСтр("ru = 'Отказаться от удаления дубликатов'");
		
	КонецЕсли; 
	
	Если НЕ Шаг = Неопределено Тогда
	
		Шаг.КнопкаДалее.Заголовок = НСтр("ru = 'Готово'");
	
	КонецЕсли; 
	
КонецПроцедуры

// Добавляет шаг мастера. Переходы между страницами будут происходить согласно порядку добавления.
//
// Параметры:
//   Страница - ГруппаФормы - Страница, содержащая элементы шага.
//
// Возвращаемое значение:
//   Структура - Описание настроек страницы.
//       * ИмяСтраницы - Строка - Имя страницы.
//       * КнопкаДалее - Структура - Описание кнопки "Далее".
//           ** Заголовок - Строка - Заголовок кнопки. По умолчанию: "Далее >".
//           ** Подсказка - Строка - Подсказка для кнопки. По умолчанию соответствует заголовку кнопки.
//           ** Видимость - Булево - Когда Истина то кнопка видна. По умолчанию: Истина.
//           ** Доступность - Булево - Когда Истина то кнопку можно нажимать. По умолчанию: Истина.
//           ** КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. По умолчанию: Истина.
//       * КнопкаНазад - Структура - Описание кнопки "Назад".
//           ** Заголовок - Строка - Заголовок кнопки. По умолчанию: "< Назад".
//           ** Подсказка - Строка - Подсказка для кнопки. По умолчанию соответствует заголовку кнопки.
//           ** Видимость - Булево - Когда Истина то кнопка видна. По умолчанию: Истина.
//           ** Доступность - Булево - Когда Истина то кнопку можно нажимать. По умолчанию: Истина.
//           ** КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. По умолчанию: Ложь.
//       * КнопкаОтмена - Структура - Описание кнопки "Отмена".
//           ** Заголовок - Строка - Заголовок кнопки. По умолчанию: "Отмена".
//           ** Подсказка - Строка - Подсказка для кнопки. По умолчанию соответствует заголовку кнопки.
//           ** Видимость - Булево - Когда Истина то кнопка видна. По умолчанию: Истина.
//           ** Доступность - Булево - Когда Истина то кнопку можно нажимать. По умолчанию: Истина.
//           ** КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. По умолчанию: Ложь.
//
&НаСервере
Функция ДобавитьШагМастера(Знач Страница)
	ОписаниеШага = Новый Структура("Индекс, ИмяСтраницы, КнопкаНазад, КнопкаДалее, КнопкаОтмена");
	ОписаниеШага.ИмяСтраницы = Страница.Имя;
	ОписаниеШага.КнопкаНазад = КнопкаМастера();
	ОписаниеШага.КнопкаНазад.Заголовок = НСтр("ru='< Назад'");
	ОписаниеШага.КнопкаДалее = КнопкаМастера();
	ОписаниеШага.КнопкаДалее.КнопкаПоУмолчанию = Истина;
	ОписаниеШага.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
	ОписаниеШага.КнопкаОтмена = КнопкаМастера();
	ОписаниеШага.КнопкаОтмена.Заголовок = НСтр("ru = 'Отмена'");
	
	НастройкиМастера.Шаги.Добавить(ОписаниеШага);
	
	ОписаниеШага.Индекс = НастройкиМастера.Шаги.ВГраница();
	Возврат ОписаниеШага;
КонецФункции

// Обновляет видимость и доступность элементов формы в соответствии с текущим шагом мастера.
&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьДоступность(Форма)
	
	Элементы = Форма.Элементы;
	НастройкиМастера = Форма.НастройкиМастера;
	ТекущийШаг = НастройкиМастера.ТекущийШаг;
	
	// Переключение страницы.
	Элементы[НастройкиМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ТекущийШаг.ИмяСтраницы];
	
	// Обновление кнопок.
	ОбновитьСвойстваКнопкиМастера(Элементы[НастройкиМастера.КнопкаДалее],  ТекущийШаг.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(Элементы[НастройкиМастера.КнопкаНазад],  ТекущийШаг.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(Элементы[НастройкиМастера.КнопкаОтмена], ТекущийШаг.КнопкаОтмена);
	
КонецПроцедуры

// Выполняет переход мастера на указанную страницу.
//
// Параметры:
//   ШагИлиИндексИлиГруппаФормы - Структура, Число, ГруппаФормы - Страницу, на которую необходимо перейти.
//
&НаКлиенте
Процедура ПерейтиНаШагМастера(Знач ШагИлиИндексИлиГруппаФормы)
	
	// Поиск шага.
	Тип = ТипЗнч(ШагИлиИндексИлиГруппаФормы);
	Если Тип = Тип("Структура") Тогда
		ОписаниеШага = ШагИлиИндексИлиГруппаФормы;
	ИначеЕсли Тип = Тип("Число") Тогда
		ИндексШага = ШагИлиИндексИлиГруппаФормы;
		Если ИндексШага < 0 Тогда
			ВызватьИсключение НСтр("ru='Попытка выхода назад из первого шага мастера'");
		ИначеЕсли ИндексШага > НастройкиМастера.Шаги.ВГраница() Тогда
			ВызватьИсключение НСтр("ru='Попытка выхода за последний шаг мастера'");
		КонецЕсли;
		ОписаниеШага = НастройкиМастера.Шаги[ИндексШага];
	Иначе
		ШагНайден = Ложь;
		ИмяИскомойСтраницы = ШагИлиИндексИлиГруппаФормы.Имя;
		Для Каждого ОписаниеШага Из НастройкиМастера.Шаги Цикл
			Если ОписаниеШага.ИмяСтраницы = ИмяИскомойСтраницы Тогда
				ШагНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ШагНайден Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден шаг ""%1"".'"),
				ИмяИскомойСтраницы);
		КонецЕсли;
	КонецЕсли;
	
	// Переключение шага.
	НастройкиМастера.ТекущийШаг = ОписаниеШага;
	
	// Обновление видимости.
	ВидимостьДоступность(ЭтотОбъект);
	ПриАктивацииШагаМастера();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// События мастера

&НаКлиенте
Процедура ПриАктивацииШагаМастера()
	
	ТекущаяСтраница = Элементы.ШагиМастера.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ШагОбъединениеСпецификаций Тогда
		
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераДалее()
	
	ТекущаяСтраница = Элементы.ШагиМастера.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ШагПодтверждениеУдаления Тогда
		
		Если НастройкиМастера.Шаги.Количество() > НастройкиМастера.ТекущийШаг.Индекс + 1 Тогда
			ПерейтиНаШагМастера(НастройкиМастера.ТекущийШаг.Индекс + 1);
		Иначе
			СформироватьРезультатИЗакрыть();
		КонецЕсли; 

	ИначеЕсли ТекущаяСтраница = Элементы.ШагОбъединениеСпецификаций Тогда
		
		СформироватьИтоговуюСпецификацию();
		
		ПерейтиНаШагМастера(НастройкиМастера.ТекущийШаг.Индекс + 1);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ШагРезультатОбъединенияСпецификации Тогда
		
		Если НастройкиМастера.Шаги.Количество() > НастройкиМастера.ТекущийШаг.Индекс + 1 Тогда		
			ПерейтиНаШагМастера(НастройкиМастера.ТекущийШаг.Индекс + 1);   			
		Иначе       			
			СформироватьРезультатИЗакрыть(); 
		КонецЕсли; 
		
	ИначеЕсли ТекущаяСтраница = Элементы.ШагРедактированиеЭлементовСтруктуры Тогда
		
		Если НастройкиМастера.Шаги.Количество() > НастройкиМастера.ТекущийШаг.Индекс + 1 Тогда
		
			ПерейтиНаШагМастера(НастройкиМастера.ТекущийШаг.Индекс + 1);
			
		Иначе
			
			СформироватьРезультатИЗакрыть();

		КонецЕсли; 

	ИначеЕсли ТекущаяСтраница = Элементы.ШагЗапросНаУдалениеИзСпецификации Тогда

		СформироватьРезультатИЗакрыть();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераНазад()
	
	ТекущаяСтраница = Элементы.ШагиМастера.ТекущаяСтраница;
	
	Если НастройкиМастера.ТекущийШаг.Индекс > 0 Тогда
						
		ПерейтиНаШагМастера(НастройкиМастера.ТекущийШаг.Индекс - 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераОтмена()
	
	ТекущаяСтраница = Элементы.ШагиМастера.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.ШагОбъединениеСпецификаций Тогда
		
		НастройкиМастера.ПоказатьДиалогПередЗакрытием = Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции мастера

&НаКлиентеНаСервереБезКонтекста
Функция КнопкаМастера()
	// Описание настроек кнопки мастера.
	//
	// Возвращаемое значение:
	//   Структура - Настройки кнопки формы.
	//       * Заголовок         - Строка - Заголовок кнопки.
	//       * Подсказка         - Строка - Подсказка для кнопки.
	//       * Видимость         - Булево - Когда Истина то кнопка видна. Значение по умолчанию: Истина.
	//       * Доступность       - Булево - Когда Истина то кнопку можно нажимать. Значение по умолчанию: Истина.
	//       * КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. Значение по умолчанию:
	//                                      Ложь.
	//
	// См. также:
	//   "КнопкаФормы" в синтакс-помощнике.
	//
	Результат = Новый Структура;
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Подсказка", "");
	
	Результат.Вставить("Доступность", Истина);
	Результат.Вставить("Видимость", Истина);
	Результат.Вставить("КнопкаПоУмолчанию", Ложь);
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСвойстваКнопкиМастера(КнопкаМастера, Описание)
	
	ЗаполнитьЗначенияСвойств(КнопкаМастера, Описание);
	КнопкаМастера.РасширеннаяПодсказка.Заголовок = Описание.Подсказка;
	
КонецПроцедуры

#КонецОбласти 