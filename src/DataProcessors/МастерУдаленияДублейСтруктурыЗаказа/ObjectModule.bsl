#Область Схемы
	
//////////////////////////////////////////////////////////////////
//   Схема 1
//   ОД_ПС_Р_          		О|  | |
//                     		-|ПС|Р|- 
//                     		Д|  | |
//
//   Схема 2
//   ОД_ПС_Р_ПСР       		О|  | |
//                     		-|ПС|Р|ПСР 
//                     		Д|  | |
//
//   Схема 3 - не обрабатывается, не имеет смысла
//   ОД_ПС_Р1Р2_ПСР    		О|  |Р1|
//                     		-|ПС|  |ПСР 
//                     		Д|  |Р2|
//
//   Схема 4
//   ОД_ПС_Р1Р2_ПСР1   		О|  |Р1|ПСР1
//                     		-|ПС|  | 
//                    		Д|  |Р2|
//
//   Схема 5
//   ОД_ПС_Р1Р2_ПСР2   		О|  |Р1|
//                     		-|ПС|  | 
//                     		Д|  |Р2|ПСР2
//
//   Схема 6
//   ОД_ПС_Р1Р2_ПСР1ПСР2   	О|  |Р1|ПСР1
//                         	-|ПС|  | 
//                        	Д|  |Р2|ПСР2
//
//
//
//	 Схема 7
//   ОД_ПС1ПС2_Р__         		О|ПС1|  |
//                         		-|   |Р |- 
//                         		Д|ПС2|  |
//
//	 Схема 8
//   ОД_ПС1ПС2_Р_ПСР       		О|ПС1|  |
//                         		-|   |Р |ПСР 
//                         		Д|ПС2|  |
//
//	 Схема 9
//   ОД_ПС1ПС2_Р1Р2_ПСР    		О|ПС1|Р1|
//                         		-|   |  |ПСР 
//                         		Д|ПС2|Р2|
//
//	 Схема 10
//   ОД_ПС1ПС2_Р1Р2_ПСР1   		О|ПС1|Р1|ПСР1
//                         		-|   |  | 
//                         		Д|ПС2|Р2|
//
//	 Схема 11
//   ОД_ПС1ПС2_Р1Р2_ПСР2   		О|ПС1|Р1|
//                         		-|   |  | 
//                         		Д|ПС2|Р2|ПСР2
//
//	 Схема 12
//   ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2   	О|ПС1|Р1|ПСР1
//                             	-|   |  | 
//                             	Д|ПС2|Р2|ПСР2
//
///////////////////////////////////////////////////////////////////

#КонецОбласти

///////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПодготовкаДействий

Функция СформироватьВспомогательныеПараметрыОбработки(Параметры, РезультатОбработки)

	ВспомогательныеПараметрыОбработки = ИнициализироватьВспомогательныеПараметрыОбработки();
	ТаблицыРезультаты = ВспомогательныеТаблицы(Параметры.Оригинал, Параметры.Дубликаты);
	ПроверитьКорректностьВходящихДанных(ТаблицыРезультаты, РезультатОбработки);
		
	Если НЕ РезультатОбработки.Отказ Тогда
	
		ЗаполнитьИПроверитьСхемы(ТаблицыРезультаты, РезультатОбработки);
	
	КонецЕсли;
	
	Если НЕ РезультатОбработки.Отказ Тогда
	
		ЗаполнитьВспомогательныеПараметрыОбработки(ВспомогательныеПараметрыОбработки, ТаблицыРезультаты);	
	
	КонецЕсли; 	
	
	Возврат ВспомогательныеПараметрыОбработки;
	
КонецФункции // СформироватьВспомогательныеПараметрыОбработки

Функция ИнициализироватьВспомогательныеПараметрыОбработки()

	Результат = Новый Структура;
	Результат.Вставить("Схема", "");
	Результат.Вставить("ДанныеДубликатов", Новый Соответствие);
	Результат.Вставить("ПараметрыСохраненияДанныхПоСвязаннымЭлементам");
	Результат.Вставить("ПараметрыЗапросаУдаленияИзСпецификаций");
	Результат.Вставить("ПараметрыУдаленияИзСпецификаций");
	Результат.Вставить("МассивДубликатовДляУдаления");
	Результат.Вставить("СтруктураПредметовСнабжения");
	Результат.Вставить("МассивПСДляОбновленияСтруктурыЗаказов");
	Результат.Вставить("ПараметрыУдаленияДублейПредметовСнабжения");
	
	Возврат Результат;
	
КонецФункции // ИнициализироватьВспомогательныеПараметрыОбработки 

Функция ВспомогательныеТаблицы(Оригинал, Дубликаты)

	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаПараметрыОбработки();	
	
	Запрос.УстановитьПараметр("Дубликаты", Дубликаты);
	Запрос.УстановитьПараметр("Оригинал", Оригинал);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицыРезультат = Новый Структура;
	ТаблицыРезультат.Вставить("СтруктураЗаказаОригинал",	РезультатЗапроса[0].Выгрузить());
	ТаблицыРезультат.Вставить("СтруктураЗаказаДубликаты",	РезультатЗапроса[1].Выгрузить());
	
	Возврат ТаблицыРезультат;
	
КонецФункции // СформироватьВспомогательныеПараметрыОбработки

Функция ПолучитьТекстЗапросаПараметрыОбработки()

	Возврат
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип КАК Тип,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.ПредметСнабжения КАК ПредметСнабженияРодителя
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Оригинал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Родитель,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Тип КАК Тип,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.ПредметСнабжения КАК ПредметСнабженияРодителя,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК Схема,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ПодмножествоСхем,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В(&Дубликаты)";

КонецФункции // ПолучитьТекстЗапросаПараметрыОбработки

Процедура ПроверитьКорректностьВходящихДанных(Таблицы, РезультатОбработки)
	
	ТаблицаСтруктураЗаказаОригинал 	= Таблицы.СтруктураЗаказаОригинал;
	ТаблицаСтруктураЗаказаДубликаты	= Таблицы.СтруктураЗаказаДубликаты;
	
	Если ТаблицаСтруктураЗаказаДубликаты.Количество() = 0 Тогда  		
		
		РезультатОбработки.Отказ 		  = Истина;
		РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Недостаточно входных параметров! Возможно данные уже удалены.'");
		Возврат;
		
	КонецЕсли; 
	
	Если НЕ ТаблицаСтруктураЗаказаОригинал.Количество() = 1 Тогда  		
		
		РезультатОбработки.Отказ 		  = Истина;
		РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Недостаточно входных параметров! Оригинал не определен!'");
		Возврат;
		
	КонецЕсли; 
	
	ТаблицаДубликатыВладельцы = ТаблицаСтруктураЗаказаДубликаты.Скопировать(,"Владелец");
	ТаблицаДубликатыВладельцы.Свернуть("Владелец");
	Если ТаблицаДубликатыВладельцы.Количество() > 1 ИЛИ
		НЕ ТаблицаСтруктураЗаказаОригинал[0].Владелец = ТаблицаДубликатыВладельцы[0].Владелец Тогда  		
		
		РезультатОбработки.Отказ 		  = Истина;
		РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Выделенные элементы принадлежат разным кораблям!'");
		Возврат;
 		
	КонецЕсли;

	Если НЕ ТаблицаСтруктураЗаказаОригинал.Найти(СтруктураЗаказаСерверПовтИсп.ТипГруппа(), "Тип") = Неопределено
		ИЛИ НЕ ТаблицаСтруктураЗаказаДубликаты.Найти(СтруктураЗаказаСерверПовтИсп.ТипГруппа(), "Тип") = Неопределено Тогда 		
		
		РезультатОбработки.Отказ 		  = Истина;
		РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Среди выделенных элементов есть группы!'"); 
		Возврат;

	КонецЕсли;
	
	Если НЕ ТаблицаСтруктураЗаказаОригинал.Найти(Справочники.КаталогПредметовСнабжения.ПустаяСсылка(), "ПредметСнабжения") = Неопределено
		ИЛИ НЕ ТаблицаСтруктураЗаказаДубликаты.Найти(Справочники.КаталогПредметовСнабжения.ПустаяСсылка(), "ПредметСнабжения") = Неопределено Тогда 		
		
		РезультатОбработки.Отказ 		  = Истина;
		РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Среди выделенных есть элементы с незаполненным предметом снабжения!'");
		Возврат;

	КонецЕсли; 	
	
КонецПроцедуры // ПроверитьКорректностьВходящихДанных

Процедура ЗаполнитьВспомогательныеПараметрыОбработки(Параметры, ТаблицыРезультаты)

	Параметры.Схема 									= ПолучитьОсновнуюСхему(ТаблицыРезультаты);
	Параметры.ДанныеДубликатов 							= ПолучитьДанныеДубликатовДляСохранения(ТаблицыРезультаты);
	Параметры.МассивДубликатовДляУдаления 				= ПолучитьМассивДубликатовДляУдаления(ТаблицыРезультаты);
	Параметры.МассивПСДляОбновленияСтруктурыЗаказов 	= ПолучитьМассивПредметовСнабженияДляОбновленияСтруктурыЗаказов(Параметры.Схема, ТаблицыРезультаты);
	Параметры.ПараметрыУдаленияИзСпецификаций			= ПолучитьПараметрыУдаленияИзСпецификаций(ТаблицыРезультаты);

	Параметры.ПараметрыУдаленияДублейПредметовСнабжения = ПолучитьПараметрыУдаленияДублейПредметовСнабжения(ТаблицыРезультаты);
	
	ЗаполнитьПараметрыОбработкиНаКлиенте(Параметры, ТаблицыРезультаты);	
		
КонецПроцедуры

Функция ЗаполнитьИПроверитьСхемы(ТаблицыРезультаты, РезультатОбработки)

	ЗаполнитьСхемы(ТаблицыРезультаты);
	ПроверитьСхемы(ТаблицыРезультаты, РезультатОбработки);
	
КонецФункции // ЗаполнитьИПроверитьСхемы
 
Функция ЗаполнитьСхемы(ТаблицыРезультаты)

	СтрокаОригинал = ТаблицыРезультаты.СтруктураЗаказаОригинал[0];
	
	Для каждого СтрокаДубликат Из ТаблицыРезультаты.СтруктураЗаказаДубликаты Цикл
		
		Если СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения // ОД_ПС
			И (
					(НЕ ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя) И НЕ ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя))  // Р1Р2
			ИЛИ 
					(ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя) И ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя) 
								И СтрокаОригинал.ПредметСнабженияРодителя = СтрокаДубликат.ПредметСнабженияРодителя)                                 // Р_ПСР

			ИЛИ 
					(ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя) И НЕ ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя))     // Р1Р2_ПСР1
			) Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС_Р";
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС_Р // ОД_ПС_Р1Р2 // ОД_ПС_Р_ПСР // ОД_ПС_Р1Р2_ПСР1";
			
		ИначеЕсли СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя) Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС_Р_ПСР";
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС_Р // ОД_ПС_Р1Р2 // ОД_ПС_Р_ПСР // ОД_ПС_Р1Р2_ПСР1";
			
		ИначеЕсли СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И НЕ СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя) 
			И СтрокаОригинал.ПредметСнабженияРодителя = СтрокаДубликат.ПредметСнабженияРодителя Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС_Р1Р2_ПСР";

		ИначеЕсли СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И НЕ СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя)
			И НЕ ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя)Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС_Р1Р2_ПСР1";
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС_Р // ОД_ПС_Р1Р2 // ОД_ПС_Р_ПСР // ОД_ПС_Р1Р2_ПСР1";
			
		ИначеЕсли СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И НЕ СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И НЕ ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя)
			И ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя)Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС_Р1Р2_ПСР2";
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС_Р1Р2_ПСР2 // ОД_ПС_Р1Р2_ПСР1ПСР2";
			
		ИначеЕсли СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И НЕ СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя)
			И ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя) 
			И НЕ СтрокаОригинал.ПредметСнабженияРодителя = СтрокаДубликат.ПредметСнабженияРодителя Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС_Р1Р2_ПСР1ПСР2"; // 6
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС_Р1Р2_ПСР2 // ОД_ПС_Р1Р2_ПСР1ПСР2";

		ИначеЕсли НЕ СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			//И СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И НЕ ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя) 
			И НЕ ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя) Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС1ПС2_Р";   // 7
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС1ПС2_Р // ОД_ПС1ПС2_Р1Р2_ПСР1";
			
		ИначеЕсли НЕ СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя) Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС1ПС2_Р_ПСР"; // 8
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС1ПС2_Р_ПСР // ОД_ПС1ПС2_Р1Р2_ПСР";
			
		ИначеЕсли НЕ СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И НЕ СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя) 
			И СтрокаОригинал.ПредметСнабженияРодителя = СтрокаДубликат.ПредметСнабженияРодителя Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС1ПС2_Р1Р2_ПСР"; // 9
			//СтрокаДубликат.ПодмножествоСхем = "ОД_ПС1ПС2_Р_ПСР // ОД_ПС1ПС2_Р1Р2_ПСР";
			
		ИначеЕсли НЕ СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И НЕ СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя)
			И НЕ ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя)Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС1ПС2_Р1Р2_ПСР1"; // 10
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС1ПС2_Р // ОД_ПС1ПС2_Р1Р2_ПСР1";
			
		ИначеЕсли НЕ СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И НЕ СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И НЕ ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя)
			И ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя)Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС1ПС2_Р1Р2_ПСР2"; // 11
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС1ПС2_Р1Р2_ПСР2 // ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2";
			
		ИначеЕсли НЕ СтрокаОригинал.ПредметСнабжения = СтрокаДубликат.ПредметСнабжения
			И НЕ СтрокаОригинал.Родитель = СтрокаДубликат.Родитель 
			И ЗначениеЗаполнено(СтрокаОригинал.ПредметСнабженияРодителя)
			И ЗначениеЗаполнено(СтрокаДубликат.ПредметСнабженияРодителя) 
			И НЕ СтрокаОригинал.ПредметСнабженияРодителя = СтрокаДубликат.ПредметСнабженияРодителя Тогда
		
			СтрокаДубликат.Схема = "ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2"; // 12
			СтрокаДубликат.ПодмножествоСхем = "ОД_ПС1ПС2_Р1Р2_ПСР2 // ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2";

		КонецЕсли; 		
	
	КонецЦикла; 

КонецФункции // ЗаполнитьСхемы

Процедура ПроверитьСхемы(ТаблицыРезультаты, РезультатОбработки)

	ТаблицаСхем = ТаблицыРезультаты.СтруктураЗаказаДубликаты.Скопировать(,"ПодмножествоСхем");
	ТаблицаСхем.Свернуть("ПодмножествоСхем");
	
	Если ТаблицаСхем.Количество() > 1 Тогда
	
		РезультатОбработки.Отказ = Истина;
		РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Пересечение множества разнотипных действий. Пожалуйста упростите запрос.'");
	
	КонецЕсли; 
	
	Если НЕ ТаблицыРезультаты.СтруктураЗаказаДубликаты.Найти("ОД_ПС_Р1Р2_ПСР", "Схема") = Неопределено Тогда
	
		РезультатОбработки.Отказ 		  = Истина;
		РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Разные родители принадлежат одному предмету снабжения!'");
	
	КонецЕсли;
	
	Если НЕ ТаблицыРезультаты.СтруктураЗаказаДубликаты.Найти("ОД_ПС1ПС2_Р1Р2_ПСР", "Схема") = Неопределено Тогда
	
		РезультатОбработки.Отказ 		  = Истина;
		РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Выбранные для объединения ПС входят 
														|в спецификацию одного изделия, но относятся к его разным экземплярам.
														|Проведите их объединение в рамках одного экземпляра изделия.'");
	
	КонецЕсли;
	
	Если НЕ ТаблицыРезультаты.СтруктураЗаказаДубликаты.Найти("ОД_ПС1ПС2_Р1Р2_ПСР2 // ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2", "ПодмножествоСхем") = Неопределено Тогда
		
		ПредметСнабженияОригинал = ТаблицыРезультаты.СтруктураЗаказаОригинал[0].ПредметСнабжения;
		ПредметСнабженияРодителяОригинала = ТаблицыРезультаты.СтруктураЗаказаОригинал[0].ПредметСнабженияРодителя;

		Для каждого СтрокаТаблицаДубликаты Из ТаблицыРезультаты.СтруктураЗаказаДубликаты Цикл
			ПредметСнабженияРодителяДубликата = СтрокаТаблицаДубликаты.ПредметСнабженияРодителя;
			Если СпецификацииПредметовСнабжения.СоставляющаяЧастьВходитВСпецификацию(ПредметСнабженияРодителяДубликата, ПредметСнабженияОригинал) Тогда
				
				РезультатОбработки.Отказ 		  = Истина;
				РезультатОбработки.ОписаниеОтказа = СтрШаблон(НСтр("ru = 'В составе предмета снабжения ""%1"" есть предмет снабжения оригинала ""%2""! Удаление возможно в два действия.'"), ПредметСнабженияРодителяДубликата, ПредметСнабженияОригинал); 		
			    Возврат;
			КонецЕсли;
			
			Если ПредметСнабженияОригинал = ПредметСнабженияРодителяДубликата Тогда
				
				РезультатОбработки.Отказ 		  = Истина;
				РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Обнаружено зацикливание'"); 		
			    Возврат;

			КонецЕсли;
			
			Если ПредметСнабженияРодителяОригинала = СтрокаТаблицаДубликаты.ПредметСнабжения Тогда
				
				РезультатОбработки.Отказ 		  = Истина;
				РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Обнаружено зацикливание'"); 		
			    Возврат;

			КонецЕсли;

		КонецЦикла;		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьСхемы

#Область Параметры
//Схема
Функция ПолучитьОсновнуюСхему(ТаблицыРезультаты)

	Возврат ТаблицыРезультаты.СтруктураЗаказаДубликаты[0].ПодмножествоСхем;	
	
КонецФункции // ПолучитьОсновнуюСхему

//ДанныеДубликатов
Функция ПолучитьДанныеДубликатовДляСохранения(ТаблицыРезультаты)

	Результат = Новый Соответствие;
	
	МассивОригиналы = Новый Массив;
	МассивОригиналы.Добавить(ТаблицыРезультаты.СтруктураЗаказаОригинал[0].Ссылка);
	
	Для каждого СтрокаДубликат Из ТаблицыРезультаты.СтруктураЗаказаДубликаты Цикл
		
		СтруктураПараметров = Новый Структура("ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, 		СтрокаДубликат);
		СтруктураПараметров.Вставить("Наименование", 		СтрокаДубликат.ПредметСнабжения.Наименование);
		СтруктураПараметров.Вставить("Обозначение", 		СтрокаДубликат.ПредметСнабжения.Обозначение);
		СтруктураПараметров.Вставить("ДокументНаПоставку", 	СтрокаДубликат.ПредметСнабжения.ДокументНаПоставку);
		СтруктураПараметров.Вставить("ИсторияДубликатов", 	ПолучитьИсториюДубликатовДляСохранения(СтрокаДубликат.Ссылка));
		
		СтруктураПараметров.Вставить("ЭлементСтруктуры", ТаблицыРезультаты.СтруктураЗаказаОригинал[0].Ссылка);
		Результат.Вставить(Новый УникальныйИдентификатор(), СтруктураПараметров);
		
	КонецЦикла;
	
	ДобавитьДанныеДубликатовДляСохранения(Результат, МассивОригиналы, ТаблицыРезультаты.СтруктураЗаказаДубликаты.ВыгрузитьКолонку("Ссылка"));
		
	Возврат Результат;	

КонецФункции // ПолучитьДанныеДубликатовДляСохранения

Функция ПолучитьИсториюДубликатовДляСохранения(Дубликат)
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДублейСтруктурыЗаказа.UID КАК UID,
	|	ДанныеДублейСтруктурыЗаказа.ЗИП КАК ЗИП,
	|	ДанныеДублейСтруктурыЗаказа.Количество КАК Количество,
	|	ДанныеДублейСтруктурыЗаказа.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	ДанныеДублейСтруктурыЗаказа.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	ДанныеДублейСтруктурыЗаказа.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	ДанныеДублейСтруктурыЗаказа.КоличествоВЗИПР КАК КоличествоВЗИПР,
	|	ДанныеДублейСтруктурыЗаказа.Наименование КАК Наименование,
	|	ДанныеДублейСтруктурыЗаказа.Обозначение КАК Обозначение,
	|	ДанныеДублейСтруктурыЗаказа.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ДанныеДублейСтруктурыЗаказа.ДатаЗаписи КАК ДатаЗаписи,
	|	ДанныеДублейСтруктурыЗаказа.Автор КАК Автор
	|ИЗ
	|	РегистрСведений.ДанныеДублейСтруктурыЗаказа КАК ДанныеДублейСтруктурыЗаказа
	|ГДЕ
	|	ДанныеДублейСтруктурыЗаказа.ЭлементСтруктуры = &Дубликат";
	Запрос.УстановитьПараметр("Дубликат", Дубликат);
	ТаблицаИсторияДубликатов = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаИсторияДубликата Из ТаблицаИсторияДубликатов Цикл
		СтруктураПараметров = Новый Структура("UID, ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР,
											|Наименование, Обозначение, ДокументНаПоставку, ДатаЗаписи, Автор");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаИсторияДубликата);
	    Результат.Добавить(СтруктураПараметров);
	КонецЦикла;  
	Возврат Результат;
КонецФункции // ПолучитьИсториюДубликатовДляСохранения

Функция ПолучитьДанныеДубликатовДляСохраненияПоПараметрам(Параметры)
	
	Результат = Новый Соответствие;
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		
		МассивОригиналы = Новый Массив;
		МассивОригиналы.Добавить(Параметры.Оригинал);
		
		Для каждого Дубликат Из Параметры.Дубликаты Цикл
			
			СтруктураПараметров = Новый Структура("ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР");
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, Дубликат);
			СтруктураПараметров.Вставить("ЭлементСтруктуры", Параметры.Оригинал);
			Результат.Вставить(Новый УникальныйИдентификатор(), СтруктураПараметров);
			
		КонецЦикла;
		
		ДобавитьДанныеДубликатовДляСохранения(Результат, МассивОригиналы, Параметры.Дубликаты);
		
	Иначе
		
		Для каждого Стр Из Параметры Цикл
			
			МассивОригиналы = Новый Массив;
			МассивОригиналы.Добавить(Стр.Оригинал);
			
			Для каждого Дубликат Из Стр.Дубликаты Цикл
				
				СтруктураПараметров = Новый Структура("ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР");
				ЗаполнитьЗначенияСвойств(СтруктураПараметров, Дубликат);
				СтруктураПараметров.Вставить("ЭлементСтруктуры", Стр.Оригинал);
				Результат.Вставить(Новый УникальныйИдентификатор(), СтруктураПараметров);
				
			КонецЦикла;
			
			ДобавитьДанныеДубликатовДляСохранения(Результат, МассивОригиналы, Стр.Дубликаты);			
			
		КонецЦикла; 
		
	КонецЕсли;  	
	
	Возврат Результат;	
	
КонецФункции // ПолучитьДанныеДубликатовДляСохранения

Процедура ДобавитьДанныеДубликатовДляСохранения(Результат, МассивОригиналы, МассивДубликаты)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаОриг.Ссылка КАК ЭлементСтруктуры,
	|	СтруктураЗаказаДубл.Ссылка КАК ЭлементСтруктурыДубликат,
	|	СтруктураЗаказаДубл.ЗИП КАК ЗИП,
	|	СтруктураЗаказаДубл.Количество КАК Количество,
	|	СтруктураЗаказаДубл.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаДубл.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаДубл.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаДубл.КоличествоВЗИПР КАК КоличествоВЗИПР,
	|	СтруктураЗаказаДубл.ПредметСнабжения.Наименование КАК Наименование,
	|	СтруктураЗаказаДубл.ПредметСнабжения.Обозначение КАК Обозначение,
	|	СтруктураЗаказаДубл.ПредметСнабжения.ДокументНаПоставку КАК ДокументНаПоставку
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаОриг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаДубл
	|		ПО СтруктураЗаказаОриг.ПредметСнабжения = СтруктураЗаказаДубл.ПредметСнабжения
	|ГДЕ
	|	СтруктураЗаказаОриг.Родитель В(&Оригиналы)
	|	И СтруктураЗаказаДубл.Родитель В(&Дубликаты)";
	
	Запрос.УстановитьПараметр("Дубликаты", МассивДубликаты);
	Запрос.УстановитьПараметр("Оригиналы", МассивОригиналы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли; 
	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаДетальныеЗаписи Из ТаблицаДетальныеЗаписи  Цикл
		
		СтруктураПараметров = Новый Структура("Наименование, Обозначение, ДокументНаПоставку, ЭлементСтруктуры, ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаДетальныеЗаписи);
		СтруктураПараметров.Вставить("ИсторияДубликатов", 	ПолучитьИсториюДубликатовДляСохранения(СтрокаДетальныеЗаписи.ЭлементСтруктурыДубликат));

		Результат.Вставить(Новый УникальныйИдентификатор(), СтруктураПараметров);
		
	КонецЦикла;		
	
	ДобавитьДанныеДубликатовДляСохранения(Результат, ТаблицаДетальныеЗаписи.ВыгрузитьКолонку("ЭлементСтруктуры"), ТаблицаДетальныеЗаписи.ВыгрузитьКолонку("ЭлементСтруктурыДубликат"));
		
КонецПроцедуры // ДобавитьДанныеДубликатовДляСохранения

//МассивДубликатовДляУдаления
Функция ПолучитьМассивДубликатовДляУдаления(ТаблицыРезультаты)

	Возврат ТаблицыРезультаты.СтруктураЗаказаДубликаты.ВыгрузитьКолонку("Ссылка");	

КонецФункции // ПолучитьМассивДубликатовДляУдаления

//МассивПредметовСнабженияДляОбновленияСтруктурыЗаказов
Функция ПолучитьМассивПредметовСнабженияДляОбновленияСтруктурыЗаказов(Схема, ТаблицыРезультаты)

	Результат = Новый Массив;
	
	Если Схема = "ОД_ПС_Р1Р2_ПСР2 // ОД_ПС_Р1Р2_ПСР1ПСР2" Тогда  // 5, 6
		
		Результат =  ТаблицыРезультаты.СтруктураЗаказаДубликаты.ВыгрузитьКолонку("ПредметСнабженияРодителя");	
		
	ИначеЕсли Схема = "ОД_ПС1ПС2_Р // ОД_ПС1ПС2_Р1Р2_ПСР1" Тогда  // 7, 10
		
		Результат.Добавить(ТаблицыРезультаты.СтруктураЗаказаОригинал[0].ПредметСнабжения);
		
	ИначеЕсли Схема = "ОД_ПС1ПС2_Р_ПСР // ОД_ПС1ПС2_Р1Р2_ПСР"  // 8, 9
		ИЛИ Схема = "ОД_ПС1ПС2_Р1Р2_ПСР2 // ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2" // 11, 12
		Тогда
		
		Результат =  ТаблицыРезультаты.СтруктураЗаказаДубликаты.ВыгрузитьКолонку("ПредметСнабженияРодителя");	
	    Результат.Добавить(ТаблицыРезультаты.СтруктураЗаказаОригинал[0].ПредметСнабжения);
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ПолучитьМассивПредметовСнабженияДляОбновленияСтруктурыЗаказов

//ПараметрыУдаленияИзСпецификаций
Функция ПолучитьПараметрыУдаленияИзСпецификаций(ТаблицыРезультаты)

	Результат = Новый Массив;
	
	Для каждого СтрокаТаблицаДубликаты Из ТаблицыРезультаты.СтруктураЗаказаДубликаты Цикл
	
		Пара = Новый Структура("ПредметСнабжения, ПредметСнабженияРодителя");
		Если СтрокаТаблицаДубликаты.ПодмножествоСхем = "ОД_ПС1ПС2_Р1Р2_ПСР2 // ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2"  Тогда
			
			Пара.ПредметСнабжения = ТаблицыРезультаты.СтруктураЗаказаОригинал[0].ПредметСнабжения;
			Пара.ПредметСнабженияРодителя = СтрокаТаблицаДубликаты.ПредметСнабженияРодителя;
			
		Иначе
			
		    ЗаполнитьЗначенияСвойств(Пара, СтрокаТаблицаДубликаты);
			
		КонецЕсли; 
		
		
		Результат.Добавить(Пара); 		
	
	КонецЦикла; 
		
	Возврат Результат;
	
КонецФункции // ПолучитьМассивПредметовСнабженияДляОбновленияСтруктурыЗаказов

//ПолучитьПараметрыУдаленияДублейПредметовСнабжения
Функция ПолучитьПараметрыУдаленияДублейПредметовСнабжения(ТаблицыРезультаты)

	Результат = Новый Структура;
	Результат.Вставить("СпособУдаления", "Пометка");
	Результат.Вставить("ПарыЗамен", ПарыЗаменДублей(ТаблицыРезультаты));
	Результат.Вставить("УчитыватьПрикладныеПравила", Истина);
	Результат.Вставить("ПараметрыОбновленияСпецификации", ПараметрыОбновленияСпецификации(ТаблицыРезультаты));
	
	Возврат Результат;

КонецФункции // ПолучитьПараметрыУдаленияДублейПредметовСнабжения

Функция ПарыЗаменДублей(ТаблицыРезультаты)
	
	ПарыЗамен = Новый Соответствие;
	
	ОригиналПредметСнабжения = ТаблицыРезультаты.СтруктураЗаказаОригинал[0].ПредметСнабжения;
		
	Для Каждого СтрокаДубликат Из ТаблицыРезультаты.СтруктураЗаказаДубликаты Цикл
		
		ПарыЗамен.Вставить(СтрокаДубликат.ПредметСнабжения, ОригиналПредметСнабжения);
		
	КонецЦикла;
	
	ПарыЗамен.Вставить(ОригиналПредметСнабжения, ОригиналПредметСнабжения);
	Возврат ПарыЗамен;
	
КонецФункции  // ПарыЗаменДублей

Функция ПараметрыОбновленияСпецификации(ТаблицыРезультаты)
	
	ОригиналИСпецификация 		= Новый Соответствие;
	
	ОригиналПредметСнабжения 	= ТаблицыРезультаты.СтруктураЗаказаОригинал[0].ПредметСнабжения;
	МассивДублей 				= ТаблицыРезультаты.СтруктураЗаказаДубликаты.ВыгрузитьКолонку("ПредметСнабжения");
	ОригиналИСпецификация.Вставить(ОригиналПредметСнабжения, ПолучитьСпецификациюИПоместитьВХранилище(ОригиналПредметСнабжения, МассивДублей)); 
		
	Возврат ОригиналИСпецификация;
	
КонецФункции // ПараметрыОбновленияСпецификации

Функция ПолучитьСпецификацию(Оригинал, МассивДублей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацииПС.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПС.ЗИП КАК ЗИП,
	|	СпецификацииПС.Количество КАК Количество,
	|	СпецификацииПС.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СпецификацииПС.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СпецификацииПС.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СпецификацииПС.КоличествоВЗИПР КАК КоличествоВЗИПР,
	|	СпецификацииПС.НомерПозиции КАК НомерПозиции,
	|	СпецификацииПС.Тип КАК Тип,
	|	СпецификацииПС.ПричинаВыбораДляЗИП КАК ПричинаВыбораДляЗИП
	|ПОМЕСТИТЬ ВТ_СпецификацияОригинала
	|ИЗ
	|	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	|ГДЕ
	|	СпецификацииПС.ПредметСнабжения = &ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпецификацииПС.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПС.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	МАКСИМУМ(СпецификацииПС.ЗИП) КАК ЗИП,
	|	МАКСИМУМ(СпецификацииПС.Количество) КАК Количество,
	|	МАКСИМУМ(СпецификацииПС.КоличествоВЗИПБорт) КАК КоличествоВЗИПБорт,
	|	МАКСИМУМ(СпецификацииПС.КоличествоВЗИПБаза) КАК КоличествоВЗИПБаза,
	|	МАКСИМУМ(СпецификацииПС.КоличествоВЗИПДЭ) КАК КоличествоВЗИПДЭ,
	|	МАКСИМУМ(СпецификацииПС.КоличествоВЗИПР) КАК КоличествоВЗИПР,
	|	МАКСИМУМ(СпецификацииПС.НомерПозиции) КАК НомерПозиции,
	|	МАКСИМУМ(СпецификацииПС.Тип) КАК Тип,
	|	МАКСИМУМ(СпецификацииПС.ПричинаВыбораДляЗИП) КАК ПричинаВыбораДляЗИП
	|ПОМЕСТИТЬ ВТ_СпецификацияДубликата
	|ИЗ
	|	РегистрСведений.СпецификацииПС КАК СпецификацииПС
	|ГДЕ
	|	СпецификацииПС.ПредметСнабжения В (&ПредметСнабженияДубликаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииПС.ПредметСнабжения,
	|	СпецификацииПС.СоставляющаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПредметСнабжения КАК ПредметСнабжения,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.СоставляющаяЧасть, ВТ_СпецификацияДубликата.СоставляющаяЧасть) КАК СоставляющаяЧасть,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.ЗИП, ВТ_СпецификацияДубликата.ЗИП) КАК ЗИП,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.Количество, ВТ_СпецификацияДубликата.Количество) КАК Количество,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.КоличествоВЗИПБорт, ВТ_СпецификацияДубликата.КоличествоВЗИПБорт) КАК КоличествоВЗИПБорт,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.КоличествоВЗИПБаза, ВТ_СпецификацияДубликата.КоличествоВЗИПБаза) КАК КоличествоВЗИПБаза,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.КоличествоВЗИПДЭ, ВТ_СпецификацияДубликата.КоличествоВЗИПДЭ) КАК КоличествоВЗИПДЭ,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.КоличествоВЗИПР, ВТ_СпецификацияДубликата.КоличествоВЗИПР) КАК КоличествоВЗИПР,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.НомерПозиции, ВТ_СпецификацияДубликата.НомерПозиции) КАК НомерПозиции,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.Тип, ВТ_СпецификацияДубликата.Тип) КАК Тип,
	|	ЕСТЬNULL(ВТ_СпецификацияОригинала.ПричинаВыбораДляЗИП, ВТ_СпецификацияДубликата.ПричинаВыбораДляЗИП) КАК ПричинаВыбораДляЗИП
	|ИЗ
	|	ВТ_СпецификацияОригинала КАК ВТ_СпецификацияОригинала
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_СпецификацияДубликата КАК ВТ_СпецификацияДубликата
	|		ПО ВТ_СпецификацияОригинала.СоставляющаяЧасть = ВТ_СпецификацияДубликата.СоставляющаяЧасть";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", Оригинал);
	Запрос.УстановитьПараметр("ПредметСнабженияДубликаты", МассивДублей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСпецификацию

Функция ПолучитьСпецификациюИПоместитьВХранилище(Оригинал, МассивДублей)

	Возврат ПоместитьВоВременноеХранилище(ПолучитьСпецификацию(Оригинал, МассивДублей), Новый УникальныйИдентификатор());

КонецФункции // ПолучитьСпецификациюИПоместитьВХранилище

//Обработка на клиенте 
Процедура ЗаполнитьПараметрыОбработкиНаКлиенте(Параметры, ТаблицыРезультаты)

	Параметры.СтруктураПредметовСнабжения 			= ПолучитьПредметыСнабженияОригиналаИДубликатов(ТаблицыРезультаты);

	Если Параметры.Схема = "ОД_ПС_Р1Р2_ПСР2 // ОД_ПС_Р1Р2_ПСР1ПСР2"
		ИЛИ Параметры.Схема = "ОД_ПС1ПС2_Р_ПСР // ОД_ПС1ПС2_Р1Р2_ПСР"
		ИЛИ Параметры.Схема = "ОД_ПС1ПС2_Р1Р2_ПСР2 // ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2"
		Тогда
	
		ЗаполнитьЗначенияСвойств(Параметры, ПолучитьСтруктуруПараметровДляОбработкиНаКлиенте(ТаблицыРезультаты));
	    
	КонецЕсли;   	

КонецПроцедуры

//СтруктураПредметовСнабжения
Функция ПолучитьПредметыСнабженияОригиналаИДубликатов(ТаблицыРезультаты)

	Результат 							= Новый Структура("ПредметСнабженияОригинал, ПредметСнабженияДубликаты");
	
	Результат.ПредметСнабженияОригинал 	= ТаблицыРезультаты.СтруктураЗаказаОригинал[0].ПредметСнабжения;
	Результат.ПредметСнабженияДубликаты = ТаблицыРезультаты.СтруктураЗаказаДубликаты.ВыгрузитьКолонку("ПредметСнабжения");
	
	Возврат Результат;
	
КонецФункции // ПолучитьПредметыСнабженияОригиналаИДубликатов

Функция ПолучитьСтруктуруПараметровДляОбработкиНаКлиенте(ТаблицыРезультаты)
	
	Результат = Новый Структура("ПараметрыСохраненияДанныхПоСвязаннымЭлементам, ПараметрыЗапросаУдаленияИзСпецификаций");
	
	ТаблицаПС = ПолучитьТаблицуПарПССПараметрамиОбработки(ТаблицыРезультаты);
	
	Результат.ПараметрыСохраненияДанныхПоСвязаннымЭлементам = ПолучитьПараметрыСохраненияДанныхПоСвязаннымЭлементам(ТаблицаПС);
	Результат.ПараметрыЗапросаУдаленияИзСпецификаций		= ПолучитьПараметрыЗапросаУдаленияИзСпецификаций(ТаблицаПС, ТаблицыРезультаты.СтруктураЗаказаДубликаты.ВыгрузитьКолонку("Ссылка"));
	
	Возврат Результат;
			
КонецФункции // ПолучитьСтруктуруПараметровДляОбработкиНаКлиенте

Функция ПолучитьТаблицуПарПССПараметрамиОбработки(ТаблицыРезультаты)
	
	ТаблицаПС = ТаблицыРезультаты.СтруктураЗаказаДубликаты.Скопировать(,"ПредметСнабжения, ПредметСнабженияРодителя");
	ТаблицаПС.Свернуть("ПредметСнабжения, ПредметСнабженияРодителя");
	
	ТаблицаПС.Колонки.Добавить("НайденШаблон", Новый ОписаниеТипов("Булево"));
	ТаблицаПС.Колонки.Добавить("ПараметрыДействия");

	ОригиналСтрока	= ТаблицыРезультаты.СтруктураЗаказаОригинал[0];
	
	Для каждого СтрокаТаблицыПС Из ТаблицаПС Цикл
	
		ДубликатыСтроки	= ТаблицыРезультаты.СтруктураЗаказаДубликаты.НайтиСтроки(Новый Структура("ПредметСнабжения, ПредметСнабженияРодителя", 
																				 СтрокаТаблицыПС.ПредметСнабжения, СтрокаТаблицыПС.ПредметСнабженияРодителя));	
		ДанныеПоЗаказам = Новый Массив;																		 
		Для каждого ДубликатСтрока Из ДубликатыСтроки Цикл
			
			ШаблонСвязи = ПолучитьШаблонСтруктуры(ОригиналСтрока.Ссылка, ДубликатСтрока.Ссылка);
			
			Если НЕ ШаблонСвязи = Неопределено Тогда
				
				ТаблицыДанныеПоЗаказам =  ПолучитьТаблицыЗначенийДанныеПоЗаказам(ШаблонСвязи);
				Для каждого КлючИЗначение Из ТаблицыДанныеПоЗаказам Цикл
					
					Результат = Новый Структура;
					
					Результат.Вставить("Владелец", КлючИЗначение.Ключ);
					Результат.Вставить("Порядок", ?(ОригиналСтрока.Владелец = КлючИЗначение.Ключ, 1, 2));
					Результат.Вставить("АдресТаблицыЗаказа", ПоместитьВоВременноеХранилище(КлючИЗначение.Значение, Новый УникальныйИдентификатор()));
					ДанныеПоЗаказам.Добавить(Результат);
					
				КонецЦикла;			
				
			КонецЕсли;
						
		КонецЦикла;
		
		Если ДанныеПоЗаказам.Количество() > 0 Тогда
		
			СтрокаТаблицыПС.НайденШаблон = Истина;
			
			ПараметрыЦепочки = Новый Структура;
			ПараметрыЦепочки.Вставить("ЗаголовокСтраницы", "");
			ПараметрыЦепочки.Вставить("ДанныеПоЗаказам",   ДанныеПоЗаказам);
			
			СтрокаТаблицыПС.ПараметрыДействия = ПараметрыЦепочки;
		
		КонецЕсли; 

	КонецЦикла; 
	
	Возврат ТаблицаПС;
	
КонецФункции // ПолучитьТаблицуПарПССПараметрамиОбработки

Функция ПолучитьПараметрыСохраненияДанныхПоСвязаннымЭлементам(ТаблицаПС)
	
	ТаблицаПССШаблоном = ТаблицаПС.Скопировать(Новый Структура("НайденШаблон", Истина), "ПараметрыДействия");
	Возврат ТаблицаПССШаблоном.ВыгрузитьКолонку("ПараметрыДействия");
		
КонецФункции // ПолучитьПараметрыСохраненияДанныхПоСвязаннымЭлементам

Функция ПолучитьПараметрыЗапросаУдаленияИзСпецификаций(ТаблицаПС, МассивИсключений)
	
	Возврат ПолучитьНенулевуюПрименяемостьПС2ВПСР2(ТаблицаПС.Скопировать(Новый Структура("НайденШаблон", Ложь), "ПредметСнабжения, ПредметСнабженияРодителя"), МассивИсключений);
		
КонецФункции // ПолучитьПараметрыЗапросаУдаленияИзСпецификаций

#Область ДанныеДляОбработки

&НаСервере
Функция ПолучитьТаблицыЗначенийДанныеПоЗаказам(Шаблон)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	СформироватьТекстЗапросаИУстановитьПараметрыПоЦепочке(Запрос, Шаблон.ЦепочкаОригинала, "Оригинал");
	СформироватьТекстЗапросаИУстановитьПараметрыПоЦепочке(Запрос, Шаблон.ЦепочкаДубликата, "Дубликат");
	Запрос.Текст = Запрос.Текст + ТекстЗапросаПоВнутреннимТаблицам();
		
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоЗаказам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаказам.Следующий() Цикл
		
		Результат.Вставить(ВыборкаПоЗаказам.Владелец, ИнициализироватьТаблицуЗначений());
		
		ВыборкаДетальныеЗаписи = ВыборкаПоЗаказам.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НоваяСтрока = Результат[ВыборкаПоЗаказам.Владелец].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
		КонецЦикла;
		
	КонецЦикла; 

	Возврат Результат;
	
КонецФункции // ПолучитьТаблицыЗначений 

&НаСервере
Процедура СформироватьТекстЗапросаИУстановитьПараметрыПоЦепочке(Запрос, Цепочка, СтрокаОригиналДубликат)

	ТекстЗапроса = "";
	
	ПорядковыйНомерВЦепочке = Цепочка.Количество() - 1;
	Пока ПорядковыйНомерВЦепочке >= 0 Цикл
		
		ПостФикс = СтрокаОригиналДубликат  + ПорядковыйНомерВЦепочке;
		
		Если ПорядковыйНомерВЦепочке < (Цепочка.Количество() - 1) Тогда
						
			ТекстГоловнойРодитель = "ВТ_УровеньРодителя.УровеньN КАК УровеньN,";
			ТекстСоединение		  = "ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Уровень" + СтрокаОригиналДубликат + (ПорядковыйНомерВЦепочке + 1) + " КАК ВТ_УровеньРодителя
									|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = ВТ_УровеньРодителя.Ссылка";
			
		Иначе
			
			ТекстГоловнойРодитель = "СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК УровеньN,";
			ТекстСоединение		  = "";
			
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|   " + ТекстГоловнойРодитель + "
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Уровень" + ПостФикс + "
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|   " + ТекстСоединение + "
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения" + ПостФикс + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

		
		Запрос.УстановитьПараметр("ПредметСнабжения" + ПостФикс, Цепочка[ПорядковыйНомерВЦепочке]);
		
		ПорядковыйНомерВЦепочке = ПорядковыйНомерВЦепочке - 1;
		
	КонецЦикла;	
	
КонецПроцедуры // СформироватьТекстЗапросаИУстановитьПараметрыПоЦепочке 

&НаСервере
Функция ТекстЗапросаПоВнутреннимТаблицам()

	Возврат 	
	"ВЫБРАТЬ
	|	ВТ_УровеньОригинал0.Владелец КАК Владелец,
	|	ВТ_УровеньОригинал0.УровеньN КАК Родитель,
	|	ВТ_УровеньОригинал0.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ПризнакОригинала
	|ПОМЕСТИТЬ ВТ_Уровень0
	|ИЗ
	|	ВТ_УровеньОригинал0 КАК ВТ_УровеньОригинал0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_УровеньДубликат0.Владелец,
	|	ВТ_УровеньДубликат0.УровеньN,
	|	ВТ_УровеньДубликат0.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	ВТ_УровеньДубликат0 КАК ВТ_УровеньДубликат0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Уровень0.Владелец КАК Владелец,
	|	ВТ_Уровень0.Родитель КАК ПоследнийРодитель,
	|	ВТ_Уровень0.Ссылка КАК Ссылка,
	|	ВТ_Уровень0.ПризнакОригинала КАК ПризнакОригинала,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.*,
	|	ВЫРАЗИТЬ(ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии КАК СТРОКА(1000)) КАК ОписаниеИерархии
	|ИЗ
	|	ВТ_Уровень0 КАК ВТ_Уровень0
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ПО ВТ_Уровень0.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|		ПО ВТ_Уровень0.Ссылка = ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоследнийРодитель,
	|   ПризнакОригинала УБЫВ
	|ИТОГИ ПО
	|	Владелец";

КонецФункции // ТекстЗапросаПоВнутреннимТаблицам

&НаСервере
Функция ИнициализироватьТаблицуЗначений()

	Таблица = Новый ТаблицаЗначений;
	
	Для каждого Колонка Из ПолучитьОписаниеПостоянныхКолонок() Цикл
	   Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла; 
	
	Для каждого Колонка Из ПолучитьОписаниеПеременныхКолонок() Цикл
		Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла; 

	Возврат Таблица;
	
КонецФункции // ИнициализироватьТалицуЗначений

Функция СформироватьЗаголовокСтраницы(Шаблон)

	Возврат СтрСоединить(Шаблон.ЦепочкаДубликата, ",");	

КонецФункции // СформироватьЗаголовокСтраницы

#КонецОбласти

Функция ПолучитьНенулевуюПрименяемостьПС2ВПСР2(ТаблицаПС, МассивИсключений)

	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Спецификация.ПредметСнабженияРодителя КАК ПредметСнабженияРодителя,
	|	ВТ_Спецификация.ПредметСнабжения КАК ПредметСнабжения
	|ПОМЕСТИТЬ ВТ_Спец
	|ИЗ
	|	&СпецификацияДубликатов КАК ВТ_Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Спец.ПредметСнабжения 			КАК ПредметСнабжения,
	|	ВТ_Спец.ПредметСнабженияРодителя 	КАК ПредметСнабженияРодителя
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Спец КАК ВТ_Спец
	|		ПО СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = ВТ_Спец.ПредметСнабжения
	|			И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.ПредметСнабжения = ВТ_Спец.ПредметСнабженияРодителя
	|ГДЕ
	|	НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В (&МассивИсключений)
	|	И (НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ = 0
	|			ИЛИ НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР = 0)";
	
	Запрос.УстановитьПараметр("СпецификацияДубликатов", ТаблицаПС);
	Запрос.УстановитьПараметр("МассивИсключений", 		МассивИсключений);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Пара = Новый Структура("ПредметСнабжения, ПредметСнабженияРодителя");
		ЗаполнитьЗначенияСвойств(Пара, Выборка);
		Результат.Добавить(Пара); 		
	
	КонецЦикла; 
	
	Возврат Результат;
		
КонецФункции // ЕстьНенулевыеПСР2ПСВЗаказах

Функция ПолучитьШаблонСтруктуры(Оригинал, Дубликат)

	Шаблон = Неопределено;
	
	ЦепочкаОригинала = ПолучитьЦепочкуПСЭлементаСтруктуры(Оригинал);
	ЦепочкаДубликата = ПолучитьЦепочкуПСЭлементаСтруктуры(Дубликат);
	
	Если ЦепочкаОригинала[ЦепочкаОригинала.Количество()-1] = ЦепочкаДубликата[ЦепочкаДубликата.Количество()-1] Тогда
	
		Шаблон = ПолучитьШаблонСтруктурыПоЦепочкам(ЦепочкаОригинала, ЦепочкаДубликата);		
	
	КонецЕсли; 
	
	Возврат Шаблон;

КонецФункции // ПолучитьШаблонСтруктуры

Функция ПолучитьЦепочкуПСЭлементаСтруктуры(ЭлементСтруктурыЗаказа)
	
	Цепочка = Новый Массив;
	Ссылка 	= ЭлементСтруктурыЗаказа;
	Цепочка.Добавить(Ссылка.ПредметСнабжения);
	
	Запрос = Новый Запрос;
	
	Для НомЦикла = 1 По Константы.МаксимальноеКоличествоУровнейВложенностиСпецификации.Получить() Цикл
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.ПредметСнабжения КАК РодительПредметСнабжения
		|ИЗ
		|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|ГДЕ
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка = &Ссылка
		|	И СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель.Тип = ЗНАЧЕНИЕ(Справочник.ТипыУзловЭлектроннойСтруктурыКомплектующихИзделийИЗИПКорабля.Изделие)";

	    Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
	    Если Выборка.Следующий() Тогда
		    Ссылка = Выборка.Ссылка;
			Цепочка.Добавить(Выборка.РодительПредметСнабжения);
		Иначе
			Прервать;		
		КонецЕсли; 
	
	КонецЦикла; 
	
	Возврат Цепочка;
	
КонецФункции // ПолучитьЦепочкуЭлементаСтруктуры

Функция ПолучитьШаблонСтруктурыПоЦепочкам(ЦепочкаОригинала, ЦепочкаДубликата)
	
	Шаблон = Новый Структура("ЦепочкаОригинала, ЦепочкаДубликата");
	Индекс1 = ЦепочкаОригинала.Количество() - 1;
	Индекс2 = ЦепочкаДубликата.Количество() - 1;
	Пока ЦепочкаОригинала.Количество() > 1 
		И ЦепочкаДубликата.Количество() > 1 
		И ЦепочкаОригинала[Индекс1 - 1] = ЦепочкаДубликата[Индекс2 - 1] Цикл
		
		ЦепочкаОригинала.Удалить(Индекс1);
		ЦепочкаДубликата.Удалить(Индекс2);
		
		Индекс1 = Индекс1 - 1;
		Индекс2 = Индекс2 - 1;
		
	КонецЦикла; 
	
	Шаблон.ЦепочкаОригинала = ЦепочкаОригинала;
	Шаблон.ЦепочкаДубликата = ЦепочкаДубликата;
	
	Возврат Шаблон;
	
КонецФункции // ПолучитьШаблонСтруктурыПоЦепочкам

#КонецОбласти 

Процедура ЗаполнитьДополнительныеПараметрыОбработки(ПараметрыОбработки, ВспомогательныеПараметрыОбработки)
	
	Если ЗначениеЗаполнено(ВспомогательныеПараметрыОбработки.ПараметрыСохраненияДанныхПоСвязаннымЭлементам) Тогда
		
		МассивТаблиц = Новый Массив;
		
		Для каждого ПараметрыСохраненияДанных Из ВспомогательныеПараметрыОбработки.ПараметрыСохраненияДанныхПоСвязаннымЭлементам Цикл
			
			Для каждого ДанныеПоЗаказу Из ПараметрыСохраненияДанных.ДанныеПоЗаказам Цикл
				
				МассивТаблиц.Добавить(ПолучитьИзВременногоХранилища(ДанныеПоЗаказу.АдресТаблицыЗаказа));	
				
			КонецЦикла;			
			
		КонецЦикла; 
		
		ПараметрыПоПодчиненным = ПолучитьСтруктуруДополнительныхПараметровПоПодчиненным(МассивТаблиц);
		ПараметрыОбработки.ДополнительныеПараметры.Вставить("ЭлементыСтрукутрыДляЗаменыРодителя", 	ПараметрыПоПодчиненным.ЭлементыСтрукутрыДляЗаменыРодителя);
		ПараметрыОбработки.ДополнительныеПараметры.Вставить("ДанныеДубликатовПодчиненные", 			ПараметрыПоПодчиненным.ДанныеДубликатовПодчиненные);
		
	Иначе
		
		ПараметрыПоПодчиненным = ПолучитьСтруктуруДополнительныхПараметровПоПодчиненнымБезСвязей(ПараметрыОбработки);
		ПараметрыОбработки.ДополнительныеПараметры.Вставить("ЭлементыСтрукутрыДляЗаменыРодителя", 	ПараметрыПоПодчиненным.ЭлементыСтрукутрыДляЗаменыРодителя);
		ПараметрыОбработки.ДополнительныеПараметры.Вставить("ДанныеДубликатовПодчиненные", 			ПараметрыПоПодчиненным.ДанныеДубликатовПодчиненные);
		
	КонецЕсли;	
	

КонецПроцедуры //ЗаполнитьДополнительныеПараметрыОбработки

Функция ПолучитьСтруктуруДополнительныхПараметровПоПодчиненным(МассивТаблиц)
	
	ЭлементыСтрукутрыДляЗаменыРодителя = Новый Массив;
	ДанныеДубликатовПодчиненные		   = Новый Соответствие;
	
	Запрос = Новый Запрос;
	СформироватьТекстЗапросаИУстановитьПараметры(Запрос, МассивТаблиц);
	РезультатЗапроса = Запрос.Выполнить();
	ДеревоПоРодителям = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаРодитель Из ДеревоПоРодителям.Строки Цикл

		ВсеПодчиненные 			= СтрокаРодитель.Строки;
		
		ПерваяСтрокаОригинала 	= ВсеПодчиненные.Найти(Истина, "ПризнакОригинала");
		НовыйРодитель 			= ПерваяСтрокаОригинала.СсылкаРодитель;
		
		
		Для каждого СтрокаПодчиненныйЭлемент Из ВсеПодчиненные Цикл
			
			Если НЕ СтрокаПодчиненныйЭлемент.ПризнакОригинала Тогда
				
				НайденныеСтроки = ВсеПодчиненные.НайтиСтроки(Новый Структура("ПризнакОригинала, ПредметСнабжения", Истина, СтрокаПодчиненныйЭлемент.ПредметСнабжения));
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						СтруктураПараметров = Новый Структура("ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР");
						ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаПодчиненныйЭлемент);
						СтруктураПараметров.Вставить("ЭлементСтруктуры", НайденнаяСтрока.Ссылка);
						ДанныеДубликатовПодчиненные.Вставить(Новый УникальныйИдентификатор(), СтруктураПараметров);
											
					КонецЦикла;					
					
				Иначе
					
					СтруктураДубликата = Новый Структура;
					СтруктураДубликата.Вставить("ЭлементСтрукутры", СтрокаПодчиненныйЭлемент.Ссылка);
					СтруктураДубликата.Вставить("ПредметСнабжения", СтрокаПодчиненныйЭлемент.ПредметСнабжения);
					СтруктураДубликата.Вставить("НовыйРодитель", 	НовыйРодитель);
					
					ЭлементыСтрукутрыДляЗаменыРодителя.Добавить(СтруктураДубликата);

				КонецЕсли;			
				
			КонецЕсли;		
			
		КонецЦикла; 
	
	КонецЦикла;   	
	
	Возврат Новый Структура("ЭлементыСтрукутрыДляЗаменыРодителя, ДанныеДубликатовПодчиненные", ЭлементыСтрукутрыДляЗаменыРодителя, ДанныеДубликатовПодчиненные);	
	
КонецФункции //СформироватьТаблицуПодчиненных

Функция СформироватьТекстЗапросаИУстановитьПараметры(Запрос, МассивТаблиц)

	Для НомерТаблицы = 0 По МассивТаблиц.Количество() - 1 Цикл
		
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), ";", "") + "
		|
		|ВЫБРАТЬ
		|	ВТ_ТаблицаЗаказа.Ссылка КАК Ссылка,
		|	ВТ_ТаблицаЗаказа.ПоследнийРодитель КАК ПоследнийРодитель,
		|	ВТ_ТаблицаЗаказа.ПризнакОригинала КАК ПризнакОригинала
		|ПОМЕСТИТЬ ВТ_ТаблицаЗаказа" + НомерТаблицы + "
		|ИЗ
		|	&ТаблицаЗаказа" + НомерТаблицы + " КАК ВТ_ТаблицаЗаказа
		|";
		
		Запрос.УстановитьПараметр("ТаблицаЗаказа" + НомерТаблицы, МассивТаблиц[НомерТаблицы]);

	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ
		|	ВТ_ТаблицаЗаказа.Ссылка КАК Ссылка,
		|	ВТ_ТаблицаЗаказа.ПоследнийРодитель КАК ПоследнийРодитель,
		|	ВТ_ТаблицаЗаказа.ПризнакОригинала КАК ПризнакОригинала
		|ПОМЕСТИТЬ ВТ_ДанныеПоЗаказам
		|ИЗ
		|	ВТ_ТаблицаЗаказа0 КАК ВТ_ТаблицаЗаказа
		|";

	
	Для НомерТаблицы = 1 По МассивТаблиц.Количество() - 1 Цикл
		
		Запрос.Текст = Запрос.Текст + "
		| ОБЪЕДИНИТЬ ВСЕ 
		|ВЫБРАТЬ
		|	ВТ_ТаблицаЗаказа.Ссылка КАК Ссылка,
		|	ВТ_ТаблицаЗаказа.ПоследнийРодитель КАК ПоследнийРодитель,
		|	ВТ_ТаблицаЗаказа.ПризнакОригинала КАК ПризнакОригинала
		|ИЗ
		|	ВТ_ТаблицаЗаказа" + НомерТаблицы + " КАК ВТ_ТаблицаЗаказа
		|";
		
		Запрос.УстановитьПараметр("ТаблицаЗаказа" + НомерТаблицы, МассивТаблиц[НомерТаблицы]);

	КонецЦикла;	 
	
	Запрос.Текст = Запрос.Текст + "
		|;
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеПоЗаказам.Ссылка			 							КАК СсылкаРодитель,
		|	ВТ_ДанныеПоЗаказам.ПоследнийРодитель 							КАК ПоследнийРодитель,
		|	ВТ_ДанныеПоЗаказам.ПризнакОригинала 							КАК ПризнакОригинала,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка 				КАК Ссылка,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения 	КАК ПредметСнабжения,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП  				КАК ЗИП,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество 		 	КАК Количество,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт 	КАК КоличествоВЗИПБорт,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза 	КАК КоличествоВЗИПБаза,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ 	КАК КоличествоВЗИПДЭ,
		|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР 		КАК КоличествоВЗИПР		
		|ИЗ
		|	ВТ_ДанныеПоЗаказам КАК ВТ_ДанныеПоЗаказам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
		|		ПО ВТ_ДанныеПоЗаказам.Ссылка = СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель
		|ИТОГИ ПО
		|	ПоследнийРодитель";
	

КонецФункции // СформироватьТекстЗапросаИУстановитьПараметры

Функция ПолучитьСтруктуруДополнительныхПараметровПоПодчиненнымБезСвязей(ПараметрыОбработки)
	
	ЭлементыСтрукутрыДляЗаменыРодителя = Новый Массив;
	ДанныеДубликатовПодчиненные		   = Новый Соответствие;
	
	Запрос = Новый Запрос;
	СформироватьТекстЗапросаИУстановитьПараметрыБезСвязей(Запрос, ПараметрыОбработки);
	РезультатЗапроса = Запрос.Выполнить();
	ДеревоПоРодителям = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаРодитель Из ДеревоПоРодителям.Строки Цикл

		ВсеПодчиненные 			= СтрокаРодитель.Строки;
		
		ПерваяСтрокаОригинала 	= ВсеПодчиненные.Найти(Истина, "ПризнакОригинала");
		Если ПерваяСтрокаОригинала = Неопределено Тогда  		
			Продолжить;			
		КонецЕсли; 
		НовыйРодитель 			= ПерваяСтрокаОригинала.СсылкаРодитель;
		
		
		Для каждого СтрокаПодчиненныйЭлемент Из ВсеПодчиненные Цикл
			
			Если НЕ СтрокаПодчиненныйЭлемент.ПризнакОригинала Тогда
				
				НайденныеСтроки = ВсеПодчиненные.НайтиСтроки(Новый Структура("ПризнакОригинала, ПредметСнабжения", Истина, СтрокаПодчиненныйЭлемент.ПредметСнабжения));
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						
						СтруктураПараметров = Новый Структура("ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР");
						ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаПодчиненныйЭлемент);
						СтруктураПараметров.Вставить("ЭлементСтруктуры", НайденнаяСтрока.Ссылка);
						ДанныеДубликатовПодчиненные.Вставить(Новый УникальныйИдентификатор(), СтруктураПараметров);
											
					КонецЦикла;					
					
				Иначе
					
					СтруктураДубликата = Новый Структура;
					СтруктураДубликата.Вставить("ЭлементСтрукутры", СтрокаПодчиненныйЭлемент.Ссылка);
					СтруктураДубликата.Вставить("ПредметСнабжения", СтрокаПодчиненныйЭлемент.ПредметСнабжения);
					СтруктураДубликата.Вставить("НовыйРодитель", 	НовыйРодитель);
					
					ЭлементыСтрукутрыДляЗаменыРодителя.Добавить(СтруктураДубликата);

				КонецЕсли;			
				
			КонецЕсли;		
			
		КонецЦикла; 
	
	КонецЦикла;   	
	
	Возврат Новый Структура("ЭлементыСтрукутрыДляЗаменыРодителя, ДанныеДубликатовПодчиненные", ЭлементыСтрукутрыДляЗаменыРодителя, ДанныеДубликатовПодчиненные);	
	
КонецФункции //СформироватьТаблицуПодчиненных

Функция СформироватьТекстЗапросаИУстановитьПараметрыБезСвязей(Запрос, ПараметрыОбработки)

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель КАК СсылкаРодитель,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка) КАК ПоследнийРодитель,
	|	ИСТИНА КАК ПризнакОригинала,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Оригинал
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПустаяСсылка),
	|	ЛОЖЬ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель В(&Дубликаты)
	|ИТОГИ ПО
	|	ПоследнийРодитель";
	
	Запрос.УстановитьПараметр("Оригинал", ПараметрыОбработки.Оригинал);
	Запрос.УстановитьПараметр("Дубликаты", ПараметрыОбработки.Дубликаты);


КонецФункции // СформироватьТекстЗапросаИУстановитьПараметрыБезСвязей

#КонецОбласти

#Область Действия

Процедура ВыполнитьСценарий(ПараметрыОбработки)

	Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("СохранитьИнформациюОДубликатахСервер") Тогда
	
		СохранитьИнформациюОДубликатах(ПараметрыОбработки.СценарийОбработкиСервер.СохранитьИнформациюОДубликатахСервер);	
	
	КонецЕсли;
	
	Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("УдалитьДублиПредметовСнабженияСервер") Тогда
	
		УдалитьДублиПредметовСнабжения(ПараметрыОбработки.СценарийОбработкиСервер.УдалитьДублиПредметовСнабженияСервер);		
	
	КонецЕсли;
	
	Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("ОбработатьПереносЗначенийРеквизитовЭлементовСтруктурыСервер") Тогда
		
		Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("ОбновитьДанныеДубликатовСервер") Тогда
			
			ПеренестиРеквизиты(ПолучитьДанныеДубликатовДляСохраненияПоПараметрам(ПараметрыОбработки.СценарийОбработкиСервер.ОбновитьДанныеДубликатовСервер));
			
		Иначе
			
			ПеренестиРеквизиты(ПараметрыОбработки.СценарийОбработкиСервер.ОбработатьПереносЗначенийРеквизитовЭлементовСтруктурыСервер);
			
		КонецЕсли;			
	
	КонецЕсли;

	Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("ОбработатьСохранениеДанныхПоСвязаннымЭлементамСервер") Тогда
	
		СкопироватьДанныеВЭлементыСтруктуры(ПараметрыОбработки.СценарийОбработкиСервер.ОбработатьСохранениеДанныхПоСвязаннымЭлементамСервер);	
	
	КонецЕсли;
	
	Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("ОбработатьУдалениеИзСпецификацииСервер") Тогда
	
		ОбработатьУдалениеИзСпецификации(ПараметрыОбработки.СценарийОбработкиСервер.ОбработатьУдалениеИзСпецификацииСервер);	
	
	КонецЕсли;

		
	Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("ОбработатьОбъединениеСпецификацийСервер") Тогда
		
		ПараметрыОбработкиСКлиента = ПараметрыОбработки.СценарийОбработкиСервер.ОбработатьОбъединениеСпецификацийСервер;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПредметСнабжения", 						ПараметрыОбработкиСКлиента.ПредметСнабжения);
		СтруктураПараметров.Вставить("АдресСпецификации",   					ПараметрыОбработкиСКлиента.АдресСпецификации);
		СтруктураПараметров.Вставить("ПараметрыОбновленияЭлементовСтруктуры", 	ПараметрыОбновленияЭлементовСтруктуры(ПараметрыОбработки.ДополнительныеПараметры));
		СтруктураПараметров.Вставить("ДанныеДубликатовПодчиненные", 			ПараметрыДанныеДубликатовПодчиненные(ПараметрыОбработки.ДополнительныеПараметры));
																	
		СохранитьСпецификацию(СтруктураПараметров);	
	
	КонецЕсли;
	
	Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("ОбработатьУдалениеЭлементовСтруктурыСервер") Тогда
	
		УдалитьЭлементыСтруктуры(ПараметрыОбработки.СценарийОбработкиСервер.ОбработатьУдалениеЭлементовСтруктурыСервер);	
	
	КонецЕсли;
	
	Если ПараметрыОбработки.СценарийОбработкиСервер.Свойство("ОбновитьЭлементыСтруктурыСервер") Тогда
	
		ОбновитьЭлементыСтруктуры(ПараметрыОбработки.СценарийОбработкиСервер.ОбновитьЭлементыСтруктурыСервер);	
	
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьСценарий  

#Область Спецификация

Процедура ОбработатьУдалениеИзСпецификации(МассивСтрукутрПСДубликатаПСРодителя)

	Для каждого ПараПСДубликатаПСРодителя Из МассивСтрукутрПСДубликатаПСРодителя Цикл
	
		СпецификацииПредметовСнабжения.УдалитьСоставляющуюЧастьИзСпецификации(ПараПСДубликатаПСРодителя.ПредметСнабженияРодителя, ПараПСДубликатаПСРодителя.ПредметСнабжения);
	
	КонецЦикла; 
	
КонецПроцедуры 	

Функция ПараметрыОбновленияЭлементовСтруктуры(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Свойство("ЭлементыСтрукутрыДляЗаменыРодителя") Тогда
	
		Возврат ДополнительныеПараметры.ЭлементыСтрукутрыДляЗаменыРодителя;	
	
	КонецЕсли; 	

	Возврат Новый Массив;
	
КонецФункции // ПараметрыОбновленияЭлементовСтруктуры

Функция ПараметрыДанныеДубликатовПодчиненные(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Свойство("ДанныеДубликатовПодчиненные") Тогда
	
		Возврат ДополнительныеПараметры.ДанныеДубликатовПодчиненные;	
	
	КонецЕсли; 	

	Возврат Новый Соответствие;
	
КонецФункции // ПараметрыОбновленияЭлементовСтруктуры

Процедура СохранитьСпецификацию(Параметры)

	ТаблицаСпецификация = ПолучитьИзВременногоХранилища(Параметры.АдресСпецификации);
	
	ИзменитьРодителяЭлементовСтруктуры(ТаблицаСпецификация, Параметры.ПараметрыОбновленияЭлементовСтруктуры);
	//СохранитьИнформациюОДубликатах(Параметры.ДанныеДубликатовПодчиненные);
	
	СпецификацииПредметовСнабжения.ОбновитьСпецификациюПредметаСнабжения(Параметры.ПредметСнабжения, ТаблицаСпецификация);
	
КонецПроцедуры 

Процедура ИзменитьРодителяЭлементовСтруктуры(ТаблицаСпецификация, ЭлементыСтруктуры)

	Для каждого Элемент Из ЭлементыСтруктуры Цикл
	
		Если НЕ ТаблицаСпецификация.Найти(Элемент.ПредметСнабжения, "СоставляющаяЧасть") = Неопределено Тогда
			
			ЭлементСтрукутрыОбъект = Элемент.ЭлементСтрукутры.ПолучитьОбъект();
			ЭлементСтрукутрыОбъект.Родитель = Элемент.НовыйРодитель;
			ЭлементСтрукутрыОбъект.Записать();
		
		КонецЕсли;		
	
	КонецЦикла; 	
	
КонецПроцедуры 

#КонецОбласти

#Область КопированиеРеквизитов

Процедура СкопироватьДанныеВЭлементыСтруктуры(ДанныеДляОбработкиПереносаРеквизитов)

	Для каждого КлючИЗначение Из ДанныеДляОбработкиПереносаРеквизитов Цикл
	
		СкопироватьРеквизитыВЭлементЗаказаИзСтруктуры(КлючИЗначение.Ключ, КлючИЗначение.Значение);	
		
	КонецЦикла; 
	
КонецПроцедуры 

Процедура СкопироватьРеквизитыВЭлементЗаказаИзСтруктуры(ЭлементСтруктурыЗаказа, СтруктураРеквизитов)

	ЭлементСтруктурыЗаказаОбъект = ЭлементСтруктурыЗаказа.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ЭлементСтруктурыЗаказаОбъект, СтруктураРеквизитов);
	
	ЭлементСтруктурыЗаказаОбъект.Записать();		
	
КонецПроцедуры 

Процедура ПеренестиРеквизиты(ДанныеДубликатов)

	ДанныеДляОбработкиПереносаРеквизитов = ПолучитьДанныеДляПереносаРеквизитов(ДанныеДубликатов);
	СкопироватьДанныеВЭлементыСтруктуры(ДанныеДляОбработкиПереносаРеквизитов);	
	
КонецПроцедуры  

Функция ПолучитьДанныеДляПереносаРеквизитов(ДанныеДубликатов)

	Результат = Новый Соответствие;
	
	Для каждого ДанныеДубликата Из ДанныеДубликатов Цикл
		
		СтруктураРеквизитов = Новый Структура("ЗИП, Количество, КоличествоВЗИПБорт, КоличествоВЗИПБаза, КоличествоВЗИПДЭ, КоличествоВЗИПР");

		ЭлементСтруктуры = ДанныеДубликата.Значение.ЭлементСтруктуры;
		Если Результат.Получить(ЭлементСтруктуры) = Неопределено Тогда
					
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ЭлементСтруктуры);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Результат[ЭлементСтруктуры]);
			
		КонецЕсли; 
		
		Для каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			
			Если (НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) ИЛИ КлючИЗначение.Значение = Ложь) И ЗначениеЗаполнено(ДанныеДубликата.Значение[КлючИЗначение.Ключ]) Тогда
			
				СтруктураРеквизитов[КлючИЗначение.Ключ] = ДанныеДубликата.Значение[КлючИЗначение.Ключ];		
			
			КонецЕсли; 		
		
		КонецЦикла;  		
		
		Результат.Вставить(ЭлементСтруктуры, СтруктураРеквизитов);
		
	КонецЦикла; 	

	Возврат Результат;

КонецФункции // ПолучитьДанныеДляПереносаРеквизитов

Процедура СохранитьИнформациюОДубликатах(ДанныеОДубликатах)
	
	НаборЗаписей = РегистрыСведений.ДанныеДублейСтруктурыЗаказа.СоздатьНаборЗаписей();
		
	Для каждого КлючИЗначение Из ДанныеОДубликатах Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.UID 			 = КлючИЗначение.Ключ;
		ЗаполнитьЗначенияСвойств(НоваяЗапись, КлючИЗначение.Значение);
		
		Для каждого ИсторияДубликатов Из КлючИЗначение.Значение.ИсторияДубликатов Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ЭлементСтруктуры	 = КлючИЗначение.Значение.ЭлементСтруктуры;
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ИсторияДубликатов);
		    НоваяЗапись.UID 			 	 = Новый УникальныйИдентификатор;  
		КонецЦикла; 		
	КонецЦикла;	

	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры // СохранитьИнформациюОДубликатах  

#КонецОбласти

#Область Удаление

Процедура УдалитьЭлементыСтруктуры(Дубликаты)

	Для каждого Дубликат Из Дубликаты Цикл
	
		 СтруктураЗаказа.УдалитьЭлементИПодчиненные(Дубликат);
	
	КонецЦикла; 		

КонецПроцедуры 
	
#КонецОбласти

#Область ОбновлениеЭлементовСтруктуры

Процедура ОбновитьЭлементыСтруктуры(МассивПредметовСнабжения)

	Для каждого ПредметСнабжения Из МассивПредметовСнабжения Цикл
	
		СтруктураЗаказа.ОбработатьСтруктуруЗаказов(ПредметСнабжения);
	
	КонецЦикла; 
	
КонецПроцедуры 
	
#КонецОбласти

#Область УдалениеДублейПредметовСнабжения

Процедура УдалитьДублиПредметовСнабжения(Параметры)

	ОбработкаУдаления 	= Обработки.УдалениеДублейПредметовСнабжения.Создать();
	РезультатУдаления 	= ОбработкаУдаления.УдалитьДубликаты(Параметры);
	
	Если РезультатУдаления.Отказ Тогда
		
		ВызватьИсключение РезультатУдаления.КраткоеПредставлениеОшибки;	
	
	КонецЕсли; 

КонецПроцедуры // УдалитьДублиПредметовСнабжения
 
#КонецОбласти

#КонецОбласти 

&НаСервере
Функция НоваяТаблицаОписанияКолонок()

	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("Имя");
	ТаблицаКолонок.Колонки.Добавить("ТипЗначения");
	ТаблицаКолонок.Колонки.Добавить("Представление"); 	
	ТаблицаКолонок.Колонки.Добавить("Вид");
	ТаблицаКолонок.Колонки.Добавить("Ширина");
	
	Возврат ТаблицаКолонок;
	
КонецФункции // НоваяТаблицаОписанияКолонок

///////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьОписаниеПостоянныхКолонок() Экспорт

	ТаблицаКолонок 				= НоваяТаблицаОписанияКолонок();
	
	НоваяКолонка 				= ТаблицаКолонок.Добавить();
	НоваяКолонка.Имя 			= "Ссылка";
	НоваяКолонка.Представление 	= НСтр("ru='Элемент структуры заказа'");
	НоваяКолонка.ТипЗначения 	= Новый ОписаниеТипов("СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
	НоваяКолонка.Вид			= ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.Ширина 		= 2;
	
	НоваяКолонка 				= ТаблицаКолонок.Добавить();
	НоваяКолонка.Имя 			= "ПризнакОригинала";
	НоваяКолонка.Представление 	= НСтр("ru='Оригинал'");
	НоваяКолонка.ТипЗначения 	= Новый ОписаниеТипов("Булево");
	НоваяКолонка.Вид			= ВидПоляФормы.ПолеФлажка;
	НоваяКолонка.Ширина 		= 8;

	НоваяКолонка 				= ТаблицаКолонок.Добавить();
	НоваяКолонка.Имя 			= "ПоследнийРодитель";
	НоваяКолонка.Представление 	= НСтр("ru='Головное изделие'");
	НоваяКолонка.ТипЗначения 	= Новый ОписаниеТипов("СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
	НоваяКолонка.Вид			= ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.Ширина 		= 2;
	
	НоваяКолонка 				= ТаблицаКолонок.Добавить();
	НоваяКолонка.Имя 			= "ОписаниеИерархии";
	НоваяКолонка.Представление 	= НСтр("ru='Описание иерархии'");
	НоваяКолонка.ТипЗначения 	= Новый ОписаниеТипов("Строка");
	НоваяКолонка.Вид			= ВидПоляФормы.ПолеНадписи;
	НоваяКолонка.Ширина 		= 50;

		
	Возврат ТаблицаКолонок;

КонецФункции // ПолучитьОписаниеПостоянныхКолонок

Функция ПолучитьОписаниеПеременныхКолонок() Экспорт

	ТаблицаКолонок = НоваяТаблицаОписанияКолонок();
	СписокСохраняемыхРеквизитов = ПолучитьСписокСохраняемыхРеквизитов("СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
	
	Для каждого Реквизит Из СписокСохраняемыхРеквизитов Цикл
	
		НоваяКолонка 				= ТаблицаКолонок.Добавить();
		НоваяКолонка.Имя 			= Реквизит.Значение;
		НоваяКолонка.Представление 	= Реквизит.Представление;
		НоваяКолонка.ТипЗначения 	= Метаданные.Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Реквизиты[Реквизит.Значение].Тип; 
	    НоваяКолонка.Вид			= ?(НоваяКолонка.ТипЗначения = Новый ОписаниеТипов("Булево"), ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		НоваяКолонка.Ширина 		= 8;
		
	КонецЦикла; 	

	Возврат ТаблицаКолонок;

КонецФункции // ПолучитьОписаниеПеременныхКолонок

Функция ПолучитьСписокСохраняемыхРеквизитов(ИмяОбъекта) Экспорт
	
	СписокСохраняемыхРеквизитов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСохраненияРеквизитовПриОбъединенииДублейРеквизиты.Имя КАК Имя,
	|	НастройкиСохраненияРеквизитовПриОбъединенииДублейРеквизиты.Представление КАК Представление
	|ИЗ
	|	Справочник.НастройкиСохраненияРеквизитовПриОбъединенииДублей.Реквизиты КАК НастройкиСохраненияРеквизитовПриОбъединенииДублейРеквизиты
	|ГДЕ
	|	НастройкиСохраненияРеквизитовПриОбъединенииДублейРеквизиты.Ссылка.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СписокСохраняемыхРеквизитов.Добавить(Выборка.Имя, Выборка.Представление);		
	
	КонецЦикла; 
	
	Возврат СписокСохраняемыхРеквизитов;
	
КонецФункции 

Процедура ВыполнитьПроверкуИПодготовкуСценарияДействий(ПараметрыОбработки, РезультатОбработки) Экспорт

	ВспомогательныеПараметрыОбработки = СформироватьВспомогательныеПараметрыОбработки(ПараметрыОбработки, РезультатОбработки);
	
	Если РезультатОбработки.Отказ Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ЗаполнитьДополнительныеПараметрыОбработки(ПараметрыОбработки, ВспомогательныеПараметрыОбработки);
	
	ПараметрыОбработки.СценарийОбработкиСервер.Вставить("СохранитьИнформациюОДубликатахСервер", ВспомогательныеПараметрыОбработки.ДанныеДубликатов);

	Если ВспомогательныеПараметрыОбработки.Схема = "ОД_ПС_Р // ОД_ПС_Р1Р2 // ОД_ПС_Р_ПСР // ОД_ПС_Р1Р2_ПСР1" Тогда // 1,2,4
	
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьПереносЗначенийРеквизитовЭлементовСтруктурыСервер",  ВспомогательныеПараметрыОбработки.ДанныеДубликатов);
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьУдалениеЭлементовСтруктурыСервер", 					ВспомогательныеПараметрыОбработки.МассивДубликатовДляУдаления);
		
	ИначеЕсли ВспомогательныеПараметрыОбработки.Схема = "ОД_ПС_Р1Р2_ПСР2 // ОД_ПС_Р1Р2_ПСР1ПСР2" Тогда // 5, 6
		
		Если ВспомогательныеПараметрыОбработки.ПараметрыСохраненияДанныхПоСвязаннымЭлементам.Количество() > 0 Тогда
		    ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ОбработатьСохранениеДанныхПоСвязаннымЭлементамКлиент", ВспомогательныеПараметрыОбработки.ПараметрыСохраненияДанныхПоСвязаннымЭлементам);	
		Иначе
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьПереносЗначенийРеквизитовЭлементовСтруктурыСервер", ВспомогательныеПараметрыОбработки.ДанныеДубликатов);
		КонецЕсли; 

		ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ОбработатьЗапросУдаленияИзСпецификацииКлиент", 			ВспомогательныеПараметрыОбработки.ПараметрыЗапросаУдаленияИзСпецификаций);	
		
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьУдалениеИзСпецификацииСервер", 						ВспомогательныеПараметрыОбработки.ПараметрыУдаленияИзСпецификаций);
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбновитьЭлементыСтруктурыСервер", 								ВспомогательныеПараметрыОбработки.МассивПСДляОбновленияСтруктурыЗаказов);
		
	ИначеЕсли ВспомогательныеПараметрыОбработки.Схема = "ОД_ПС1ПС2_Р // ОД_ПС1ПС2_Р1Р2_ПСР1" Тогда  //7, 10
		
		ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ПодтверждениеУдаленияКлиент", 							ВспомогательныеПараметрыОбработки.СтруктураПредметовСнабжения);	

		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("УдалитьДублиПредметовСнабженияСервер", 						ВспомогательныеПараметрыОбработки.ПараметрыУдаленияДублейПредметовСнабжения);
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбновитьДанныеДубликатовСервер", 								Новый Структура("Оригинал, Дубликаты", ПараметрыОбработки.Оригинал, ПараметрыОбработки.Дубликаты));
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьПереносЗначенийРеквизитовЭлементовСтруктурыСервер", 	ВспомогательныеПараметрыОбработки.ДанныеДубликатов);
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьУдалениеЭлементовСтруктурыСервер", 					ВспомогательныеПараметрыОбработки.МассивДубликатовДляУдаления);
		
	ИначеЕсли ВспомогательныеПараметрыОбработки.Схема = "ОД_ПС1ПС2_Р_ПСР // ОД_ПС1ПС2_Р1Р2_ПСР" Тогда  //8, 9
		ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ПодтверждениеУдаленияКлиент", 							ВспомогательныеПараметрыОбработки.СтруктураПредметовСнабжения);	

		ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ОбработатьСохранениеДанныхПоСвязаннымЭлементамКлиент", 	ВспомогательныеПараметрыОбработки.ПараметрыСохраненияДанныхПоСвязаннымЭлементам);
		
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("УдалитьДублиПредметовСнабженияСервер", 						ВспомогательныеПараметрыОбработки.ПараметрыУдаленияДублейПредметовСнабжения);
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбновитьДанныеДубликатовСервер", 								Новый Структура("Оригинал, Дубликаты", ПараметрыОбработки.Оригинал, ПараметрыОбработки.Дубликаты));
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьПереносЗначенийРеквизитовЭлементовСтруктурыСервер", 	ВспомогательныеПараметрыОбработки.ДанныеДубликатов);
		ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьУдалениеЭлементовСтруктурыСервер", 					ВспомогательныеПараметрыОбработки.МассивДубликатовДляУдаления);		
		
	ИначеЕсли ВспомогательныеПараметрыОбработки.Схема = "ОД_ПС1ПС2_Р1Р2_ПСР2 // ОД_ПС1ПС2_Р1Р2_ПСР1ПСР2" Тогда  //11, 12
		
		Если ВспомогательныеПараметрыОбработки.ПараметрыСохраненияДанныхПоСвязаннымЭлементам.Количество() > 0
			И ВспомогательныеПараметрыОбработки.ПараметрыЗапросаУдаленияИзСпецификаций.Количество() = 0 Тогда
		
			ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ПодтверждениеУдаленияКлиент", 							ВспомогательныеПараметрыОбработки.СтруктураПредметовСнабжения);	
			ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ОбработатьСохранениеДанныхПоСвязаннымЭлементамКлиент", 	ВспомогательныеПараметрыОбработки.ПараметрыСохраненияДанныхПоСвязаннымЭлементам);
			
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("УдалитьДублиПредметовСнабженияСервер", 						ВспомогательныеПараметрыОбработки.ПараметрыУдаленияДублейПредметовСнабжения);
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбновитьДанныеДубликатовСервер", 								Новый Структура("Оригинал, Дубликаты", ПараметрыОбработки.Оригинал, ПараметрыОбработки.Дубликаты));
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьПереносЗначенийРеквизитовЭлементовСтруктурыСервер", 	ВспомогательныеПараметрыОбработки.ДанныеДубликатов);
			
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьУдалениеИзСпецификацииСервер", 						ВспомогательныеПараметрыОбработки.ПараметрыУдаленияИзСпецификаций);
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбновитьЭлементыСтруктурыСервер", 								ВспомогательныеПараметрыОбработки.МассивПСДляОбновленияСтруктурыЗаказов);	
		
			
		ИначеЕсли ВспомогательныеПараметрыОбработки.ПараметрыСохраненияДанныхПоСвязаннымЭлементам.Количество() = 0 Тогда
		
			ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ПодтверждениеУдаленияКлиент", 							ВспомогательныеПараметрыОбработки.СтруктураПредметовСнабжения);	
			ПараметрыОбработки.СценарийОбработкиМастераКлиент.Вставить("ОбработатьЗапросУдаленияИзСпецификацииКлиент", 			ВспомогательныеПараметрыОбработки.ПараметрыЗапросаУдаленияИзСпецификаций);	
			
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("УдалитьДублиПредметовСнабженияСервер", 						ВспомогательныеПараметрыОбработки.ПараметрыУдаленияДублейПредметовСнабжения);
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбновитьДанныеДубликатовСервер", 								Новый Структура("Оригинал, Дубликаты", ПараметрыОбработки.Оригинал, ПараметрыОбработки.Дубликаты));
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьПереносЗначенийРеквизитовЭлементовСтруктурыСервер", 	ВспомогательныеПараметрыОбработки.ДанныеДубликатов);
			
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбработатьУдалениеИзСпецификацииСервер", 						ВспомогательныеПараметрыОбработки.ПараметрыУдаленияИзСпецификаций);
			ПараметрыОбработки.СценарийОбработкиСервер.Вставить("ОбновитьЭлементыСтруктурыСервер", 								ВспомогательныеПараметрыОбработки.МассивПСДляОбновленияСтруктурыЗаказов);	
		
		Иначе
			
			РезультатОбработки.Отказ = Истина;
			РезультатОбработки.ОписаниеОтказа = НСтр("ru = 'Пересечение множества разнотипных действий. Пожалуйста упростите запрос.'");
		
		КонецЕсли; 		
		
	КонецЕсли; 

КонецПроцедуры // ВыполнитьПроверкуИПодготовкуСценарияДействий

Процедура ВыполнитьОбработку(ПараметрыОбработки, РезультатОбработки) Экспорт

	НачатьТранзакцию();
	
	Попытка
		
		ВыполнитьСценарий(ПараметрыОбработки);	
		
		ЗафиксироватьТранзакцию();
		
	Исключение 		
		
		Если ТранзакцияАктивна() Тогда
		
			ОтменитьТранзакцию();	
		
		КонецЕсли; 
		
		РезультатОбработки.Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		РезультатОбработки.ОписаниеОтказа = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;    	
	
КонецПроцедуры // ВыполнитьОбработку
