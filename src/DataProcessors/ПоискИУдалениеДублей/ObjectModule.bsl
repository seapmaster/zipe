#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Определение менеджера объекта для вызова прикладных правил.
//
// Параметры:
//   ИмяОбластиПоискаДанных - Строка - Имя области (полное имя метаданных).
//
// Возвращаемое значение:
//   СправочникиМенеджер, ПланыВидовХарактеристикМенеджер,
//   ПланыСчетовМенеджер, ПланыВидовРасчетаМенеджер - Менеджер объекта.
//
Функция МенеджерОбластиПоискаДублей(Знач ИмяОбластиПоискаДанных) Экспорт
	Мета = Метаданные.НайтиПоПолномуИмени(ИмяОбластиПоискаДанных);
	
	Если Метаданные.Справочники.Содержит(Мета) Тогда
		Возврат Справочники[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(Мета) Тогда
		Возврат ПланыВидовХарактеристик[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(Мета) Тогда
		Возврат ПланыСчетов[Мета.Имя];
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(Мета) Тогда
		Возврат ПланыВидовРасчета[Мета.Имя];
		
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неизвестный тип объекта метаданных ""%1""'"), ИмяОбластиПоискаДанных);
КонецФункции

// Обработчик фонового поиска дублей.
//
// Параметры:
//     Параметры       - Структура - Данные для анализа.
//     АдресРезультата - Строка    - Адрес во временном хранилище для сохранения результата.
//
Процедура ФоновыйПоискДублей(Знач Параметры, Знач АдресРезультата) Экспорт
	
	//++ 19.10.2017 Веденеев П. //нестандартный поиск дублей отключен
	
	//+ 04.04.2017 15:08:03 Савинов Александр Задача: ОПЗ 2
	
	Если Параметры.Свойство("HighPerfomance") Тогда
		
		ФоновыйПоискДублейКастом(Параметры, АдресРезультата);	
		
	Иначе
		
	//- 04.04.2017 15:08:04 Савинов Александр Задача: ОПЗ 2	
	
	// Собираем компоновщик повторно через схему и настройки.
	КомпоновщикПредварительногоОтбора = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикПредварительногоОтбора.Инициализировать( Новый ИсточникДоступныхНастроекКомпоновкиДанных(Параметры.СхемаКомпоновки) );
	КомпоновщикПредварительногоОтбора.ЗагрузитьНастройки(Параметры.НастройкиКомпоновщикаПредварительногоОтбора);
	
	Параметры.Вставить("КомпоновщикПредварительногоОтбора", КомпоновщикПредварительногоОтбора);
	
	// Преобразуем правила поиска в таблицу значений с индексом.
	ПравилаПоиска = Новый ТаблицаЗначений;
	ПравилаПоиска.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка") );
	ПравилаПоиска.Колонки.Добавить("Правило",  Новый ОписаниеТипов("Строка") );
	ПравилаПоиска.Индексы.Добавить("Реквизит");
	
	Для Каждого Правило Из Параметры.ПравилаПоиска Цикл
		
		ЗаполнитьЗначенияСвойств(ПравилаПоиска.Добавить(), Правило);
		
	КонецЦикла;
	Параметры.Вставить("ПравилаПоиска", ПравилаПоиска);
	
	Параметры.Вставить("РассчитыватьМестаИспользования", Истина);
	
	// Запускаем поиск
	ПоместитьВоВременноеХранилище(ГруппыДублей(Параметры), АдресРезультата);	
	
	//+ 04.04.2017 15:08:03 Савинов Александр Задача: ОПЗ 2	
		
	КонецЕсли;
	
	//- 04.04.2017 15:08:04 Савинов Александр Задача: ОПЗ 2
	
КонецПроцедуры

// Обработчик фонового удаления дублей.
//
// Параметры:
//     Параметры       - Структура - Данные для анализа.
//     АдресРезультата - Строка    - Адрес во временном хранилище для сохранения результата.
//
Процедура ФоновоеУдалениеДублей(Знач Параметры, Знач АдресРезультата) Экспорт
	
	////++ 29.11.2017 Веденеев П. //проверка активности фоновых заданй во избежание возникновения взаимоблокировок
	//Если СтрНайти(Параметры.ОбластьПоискаДублей, "КаталогПредметовСнабжения") > 0 Тогда
	//	
	//	Если ОбщиеФункцииСервер.ПроверитьАктивностьФоновыхЗаданий("ИзменениеСпецификацииЭталонныхЭлементов,ОбработкаИзмененияСпецификацийПредметовСнабжения") Тогда
	//		
	//		Возврат;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	////-- 29.11.2017 Веденеев П. //проверка активности фоновых заданй во избежание возникновения взаимоблокировок
		
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("СпособУдаления",       Параметры.СпособУдаления);
	ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Истина);
	ПараметрыЗамены.Вставить("УчитыватьПрикладныеПравила", Параметры.УчитыватьПрикладныеПравила);
	
	//++2017092201 22.09.2017 Веденеев П. //сохранение данных из дубликатов при удалении дублей из справочника
	//Если Параметры.Свойство("HighPerfomance") И Параметры.ОбластьПоискаДублей = "Справочник.КаталогПредметовСнабжения" Тогда //каталог предметов снабжения
	//	
	//	Если Не СохранитьДанныеДубликатовКаталогПредметовСнабжения(Параметры.ПарыЗамен) Тогда
	//		
	//		Возврат;
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли
	НачатьТранзакцию();
	
	Если СтрНайти(Параметры.ОбластьПоискаДублей, "Справочник") > 0 И Параметры.Свойство("СписокСохраняемыхРеквизитов") И Параметры.СписокСохраняемыхРеквизитов.Количество() > 0 Тогда
		
		Если Не СохранитьДанныеДубликатов(Параметры.ПарыЗамен, Параметры.СписокСохраняемыхРеквизитов, Параметры.ОбластьПоискаДублей) Тогда
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//++ 20.10.2017 Веденеев П. //заполнение очереди на изменение спецификации для элементов каталога предметов снабжения
	
	Если СтрНайти(Параметры.ОбластьПоискаДублей, "КаталогПредметовСнабжения") > 0 Тогда
		
		//++ 28.06.2018 Веденеев П. //сохранение информации об элементах структуры кораблей, ссылающихся на дубликаты
		Попытка
			
			ЗаписатьИнформациюОДубликатахВРегистрСвертки(Параметры.ПарыЗамен);	
			
		Исключение
			
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		//-- 28.06.2018 Веденеев П. //сохранение информации об элементах структуры кораблей, ссылающихся на дубликаты
		
		
		// ++ 06.09.2018 14:52:30 Базунов Д.А. Задача: 
		
		Если НЕ ОбъединитьКодыINCAT(Параметры.ПарыЗамен) Тогда
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли; 
		
		// -- 06.09.2018 14:52:30 Базунов Д.А. Задача:
		
		
		//Для каждого ПараЗамен Из Параметры.ПарыЗамен Цикл
		//	
		//	СоставляющаяЧасть = ПараЗамен.Значение;
		//	Прервать;
		//	
		//КонецЦикла;
		
	//	РезультатЗапроса = ПолучитьИзмененияСпецификаций(Параметры.ПарыЗамен, Параметры.ОбластьПоискаДублей, Параметры.ТаблицаРодителейУдаляемыхСпецификаций);
	//	
	//	Если Не РезультатЗапроса.Пустой() Тогда
	//		
	//		Если Не ЗаполнитьОчередьИзмененияСпецификаций(РезультатЗапроса) Тогда
	//			
	//			ОтменитьТранзакцию();
	//			Возврат;
	//			
	//		КонецЕсли;
	//		
	//		ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	//		ТаблицаЗапроса.Свернуть("ПредметСнабжения");
	//		
	//		ПредметыСнабжения = ТаблицаЗапроса.ВыгрузитьКолонку("ПредметСнабжения");
	//					
			Попытка
	//			
				УдалитьДубликатыИзСпецификаций(Параметры.ТаблицаРодителейУдаляемыхСпецификаций);
	//		
	//			СтруктураЗаказаСервер.ОбработатьИзмененияСпецификацийПредметовСнабжения(Ложь, ПредметыСнабжения);
	//			СтруктураЗаказаСервер.ОбработатьИзмененияСпецификацийПредметовСнабжения(Истина, ПредметыСнабжения);
	//			
			Исключение
	//			
				Сообщить(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат;
				
			КонецПопытки;
	//		
	//	КонецЕсли;
	//	
	КонецЕсли;
	
	//-- 20.10.2017 Веденеев П. //заполнение очереди на изменение спецификации для элементов каталога предметов снабжения
	
	//--2017092201 22.09.2017 Веденеев П. //сохранение данных из дубликатов при удалении дублей из справочника
	
	ЗаменитьСсылки(Параметры.ПарыЗамен, ПараметрыЗамены, АдресРезультата);
	
	//++ 24.10.2017 Веденеев П. //обработка удаления дубликатов предметов снабжения	
	
	Если СтрНайти(Параметры.ОбластьПоискаДублей, "КаталогПредметовСнабжения") > 0 Тогда
		
		//ВидУдалениеДубликатов = Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.УдалениеДубликатов;
		ДатаИзменения = ТекущаяДата();
		
		//ТаблицаРодителейУдаляемыхСпецификаций = Параметры.ТаблицаРодителейУдаляемыхСпецификаций;
		
		//вызываем удаление интерактивно удаленных
		
		//Если ТаблицаРодителейУдаляемыхСпецификаций.Количество() > 0 Тогда 
		//	
		//	ТаблицаРодителейУдаляемыхСпецификаций.Свернуть("ПредметСнабжения");
		//	
		//	Массив = ТаблицаРодителейУдаляемыхСпецификаций.ВыгрузитьКолонку("ПредметСнабжения");
		//	
		//	СпецификацииИзменения = РегистрыСведений.СпецификацииПредметовСнабженияИзменения.СоздатьМенеджерЗаписи();
		//	
		//	Для каждого ЭлементМассива Из Массив Цикл
		//		
		//		СпецификацииИзменения.Период = ДатаИзменения;
		//		СпецификацииИзменения.ПредметСнабжения = ЭлементМассива;
		//		СпецификацииИзменения.СоставляющаяЧасть = СоставляющаяЧасть;
		//		СпецификацииИзменения.ЗИП = Параметры.ПризнакЗИПОригинала;
		//		СпецификацииИзменения.ВидИзменения = ВидУдалениеДубликатов;
		//		
		//		Попытка
		//			
		//			СпецификацииИзменения.Записать();
		//			
		//		Исключение
		//			
		//			Сообщить(ОписаниеОшибки());
		//			ОтменитьТранзакцию();
		//			Возврат;
		//			
		//		КонецПопытки;
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		//вызываем удаление дубликатов
		МассивОтправленныхВОчередь = Новый Массив;
		
		СпецификацииОчередьМенеджер = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений;
		
		Для каждого ПараЗамен Из Параметры.ПарыЗамен Цикл
			
			СоставляющаяЧасть = ПараЗамен.Значение;
			
			Если МассивОтправленныхВОчередь.Найти(СоставляющаяЧасть) = Неопределено Тогда
				
				//ЭталоныМенеджерЗаписи = РегистрыСведений.ЭталонныеИзделияВСтруктуреЗаказов.СоздатьМенеджерЗаписи();
				//ЭталоныМенеджерЗаписи.ПредметСнабжения = СоставляющаяЧасть;
				//ЭталоныМенеджерЗаписи.Прочитать();
				//
				//Если ЭталоныМенеджерЗаписи.Выбран() Тогда
				//	
				//	СпецификацииИзменения = РегистрыСведений.СпецификацииПредметовСнабженияИзменения.СоздатьМенеджерЗаписи();
				//	СпецификацииИзменения.Период = ДатаИзменения;
				//	СпецификацииИзменения.ПредметСнабжения = СоставляющаяЧасть;
				//	СпецификацииИзменения.ЗИП = Параметры.ПризнакЗИПОригинала;
				//	СпецификацииИзменения.ВидИзменения = ВидУдалениеДубликатов;
				//	
				//	Попытка
				//		
				//		СпецификацииИзменения.Записать();
				//		
				//	Исключение
				//		
				//		Сообщить(ОписаниеОшибки());
				//		ОтменитьТранзакцию();
				//		Возврат;
				//		
				//	КонецПопытки;
				//	
				//КонецЕсли;
				СпецификацииОчередьИзменений = СпецификацииОчередьМенеджер.СоздатьМенеджерЗаписи();
				СпецификацииОчередьИзменений.Период = ДатаИзменения;
				СпецификацииОчередьИзменений.ПредметСнабжения = СоставляющаяЧасть;
				
				МассивОтправленныхВОчередь.Добавить(СоставляющаяЧасть);
				
				Попытка
					
					СпецификацииОчередьИзменений.Записать();
					
				Исключение
					
					Сообщить(ОписаниеОшибки());
					ОтменитьТранзакцию();
					Возврат;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//вызываем сворачивание элементов у родителей
		Если Не ПоместитьРодителейВОчередьНаСворачивание(МассивОтправленныхВОчередь) Тогда
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
		//интерактивно удаляем элементы структуры, входящие в группы
		Если Не ОбъединитьЭлементыСтруктурыЗаказа(Параметры.СписокОбъединяемыхЭлементовСтруктуры) Тогда
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//-- 24.10.2017 Веденеев П. //обработка удаления дубликатов предметов снабжения
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Непосредственный поиск дублей.
//
// Параметры:
//     ПараметрыПоиска - Структура - Описывает параметры поиска.
//     ЭталонныйОбъект - Произвольный - Объект для сравнения при поиски похожих элементов.
//
// Возвращаемое значение:
//   Структура - Результаты поиска дублей.
//       * ТаблицаДублей - ТаблицаЗначений - Найденные дубли (в интерфейс выводятся в 2 уровня: Родители и Элементы).
//           ** Ссылка       - Произвольный - Ссылка элемента.
//           ** Код          - Произвольный - Код элемента.
//           ** Наименование - Произвольный - Наименование элемента.
//           ** Родитель     - Произвольный - Родитель группы дублей. Если Родитель пустой, то элемент является родителем группы дублей.
//           ** <Другие поля> - Произвольный - Значение соответствующего полей отборов и критериев сравнения дублей.
//       * ОписаниеОшибки - Неопределено - Ошибки не возникло.
//                        - Строка - Описание ошибки, возникшей в процессе поиска дублей.
//       * МестаИспользования - Неопределено, ТаблицаЗначений - Заполняется если 
//           ПараметрыПоиска.РассчитыватьМестаИспользования = Истина.
//           Описание колонок таблицы см. в ОбщегоНазначения.МестаИспользования().
//
Функция ГруппыДублей(Знач ПараметрыПоиска, Знач ЭталонныйОбъект = Неопределено) Экспорт
	ПолноеИмяОМ = ПараметрыПоиска.ОбластьПоискаДублей;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОМ);
	ЧитатьТаблицу1ИзСУБД = (ЭталонныйОбъект = Неопределено);
	
	// 1. Определяем параметры с учетом прикладного кода.
	РазмерВозвращаемойПорции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПоиска, "МаксимальноеЧислоДублей");
	Если Не ЗначениеЗаполнено(РазмерВозвращаемойПорции) Тогда
		РазмерВозвращаемойПорции = 0; // Без ограничения.
	КонецЕсли;
	
	РассчитыватьМестаИспользования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПоиска, "РассчитыватьМестаИспользования");
	Если ТипЗнч(РассчитыватьМестаИспользования) <> Тип("Булево") Тогда
		РассчитыватьМестаИспользования = Ложь;
	КонецЕсли;
	
	// Для передачи в прикладной код.
	ДополнительныеПараметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыПоиска, "ДополнительныеПараметры");
	
	// Вызываем прикладной код
	ИспользоватьПрикладныеПравила = ПараметрыПоиска.УчитыватьПрикладныеПравила
		И ЕстьПрикладныеПравилаОбластиПоискаДублей(ПолноеИмяОМ);
	
	ПоляСравненияНаРавенство = ""; // Имена реквизитов, по которым сравниваем по равенству.
	ПоляСравненияНаПодобие   = ""; // Имена реквизитов, по которым будем нечетко сравнивать.
	ПоляДополнительныхДанных = ""; // Имена реквизитов, дополнительно заказанные прикладными правилами.
	РазмерПрикладнойПорции   = 0;  // Сколько отдавать в прикладные правила для расчета.
	
	Если ИспользоватьПрикладныеПравила Тогда
		ПрикладныеПараметры = Новый Структура;
		ПрикладныеПараметры.Вставить("ПравилаПоиска",        ПараметрыПоиска.ПравилаПоиска);
		ПрикладныеПараметры.Вставить("ОграниченияСравнения", Новый Массив);
		ПрикладныеПараметры.Вставить("КомпоновщикОтбора",    ПараметрыПоиска.КомпоновщикПредварительногоОтбора);
		ПрикладныеПараметры.Вставить("КоличествоЭлементовДляСравнения", 1000);
		
		МенеджерОбластиПоиска = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОМ);
		МенеджерОбластиПоиска.ПараметрыПоискаДублей(ПрикладныеПараметры, ДополнительныеПараметры);
		
		ВсеДополнительныеПоля = Новый Соответствие;
		Для Каждого Ограничение Из ПрикладныеПараметры.ОграниченияСравнения Цикл
			Для Каждого КлючЗначение Из Новый Структура(Ограничение.ДополнительныеПоля) Цикл
				ИмяПоля = КлючЗначение.Ключ;
				Если ВсеДополнительныеПоля[ИмяПоля] = Неопределено Тогда
					ПоляДополнительныхДанных = ПоляДополнительныхДанных + ", " + ИмяПоля;
					ВсеДополнительныеПоля[ИмяПоля] = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ПоляДополнительныхДанных = Сред(ПоляДополнительныхДанных, 2);
		
		// Сколько отдавать в прикладные правила для расчета.
		РазмерПрикладнойПорции = ПрикладныеПараметры.КоличествоЭлементовДляСравнения;
	КонецЕсли;
	
	// Списки полей, возможно измененные прикладным кодом.
	Для Каждого Строка Из ПараметрыПоиска.ПравилаПоиска Цикл
		Если Строка.Правило = "Равно" Тогда
			ПоляСравненияНаРавенство = ПоляСравненияНаРавенство + ", " + Строка.Реквизит;
		ИначеЕсли Строка.Правило = "Подобно" Тогда
			ПоляСравненияНаПодобие = ПоляСравненияНаПодобие + ", " + Строка.Реквизит;
		КонецЕсли
	КонецЦикла;
	ПоляСравненияНаРавенство = Сред(ПоляСравненияНаРавенство, 2);
	ПоляСравненияНаПодобие   = Сред(ПоляСравненияНаПодобие, 2);
	
	СтруктураПолейИдентичности   = Новый Структура(ПоляСравненияНаРавенство);
	СтруктураПолейПодобия        = Новый Структура(ПоляСравненияНаПодобие);
	СтруктураДополнительныхПолей = Новый Структура(ПоляДополнительныхДанных);
	
	// 2. Конструируем по возможно измененному компоновщику условия отбора.
	Характеристики = Новый Структура("ДлинаКода, ДлинаНаименования, Иерархический, ВидИерархии", 0, 0, Ложь);
	ЗаполнитьЗначенияСвойств(Характеристики, ОбъектМетаданных);
	
	ЕстьНаименование = Характеристики.ДлинаНаименования > 0;
	ЕстьКод          = Характеристики.ДлинаКода > 0;
	
	// Дополнительные поля могут пересекаться с остальными, им надо дать псевдонимы.
	ТаблицаКандидатов = Новый ТаблицаЗначений;
	КолонкиКандидатов = ТаблицаКандидатов.Колонки;
	КолонкиКандидатов.Добавить("Ссылка1");
	КолонкиКандидатов.Добавить("Поля1");
	КолонкиКандидатов.Добавить("Ссылка2");
	КолонкиКандидатов.Добавить("Поля2");
	КолонкиКандидатов.Добавить("ЭтоДубли", Новый ОписаниеТипов("Булево"));
	ТаблицаКандидатов.Индексы.Добавить("ЭтоДубли");
	
	ИменаПолейВЗапросе = ДоступныеРеквизитыОтбора(ОбъектМетаданных);
	Если Не ЕстьКод Тогда
		ИменаПолейВЗапросе = ИменаПолейВЗапросе + ", НЕОПРЕДЕЛЕНО КАК Код";
	КонецЕсли;
	Если Не ЕстьНаименование Тогда
		ИменаПолейВЗапросе = ИменаПолейВЗапросе + ", НЕОПРЕДЕЛЕНО КАК Наименование";
	КонецЕсли;
	ИменаПолейВВыборе  = СтрРазделить(ПоляСравненияНаРавенство + "," + ПоляСравненияНаПодобие, ",", Ложь);
	
	РасшифровкаДополнительныхПолей = Новый Соответствие;
	ПорядковыйНомер = 0;
	Для Каждого КлючЗначение Из СтруктураДополнительныхПолей Цикл
		ИмяПоля   = КлючЗначение.Ключ;
		Псевдоним = "Доп" + Формат(ПорядковыйНомер, "ЧН=; ЧГ=") + "_" + ИмяПоля;
		РасшифровкаДополнительныхПолей.Вставить(Псевдоним, ИмяПоля);
		
		ИменаПолейВЗапросе = ИменаПолейВЗапросе + "," + ИмяПоля + " КАК " + Псевдоним;
		ИменаПолейВВыборе.Добавить(Псевдоним);
		ПорядковыйНомер = ПорядковыйНомер + 1;
	КонецЦикла;
	
	// Наполнение схемы.
	СхемаКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанныхСхемыКД = СхемаКД.ИсточникиДанных.Добавить();
	ИсточникДанныхСхемыКД.Имя = "ИсточникДанных1";
	ИсточникДанныхСхемыКД.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.Запрос = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ИменаПолейВЗапросе + " ИЗ " + ПолноеИмяОМ;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	// Инициализация компоновщика.
	КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКД));
	КомпоновщикНастроекКД.ЗагрузитьНастройки(ПараметрыПоиска.КомпоновщикПредварительногоОтбора.Настройки);
	НастройкиКД = КомпоновщикНастроекКД.Настройки;
	
	// Поля.
	НастройкиКД.Выбор.Элементы.Очистить();
	Для Каждого ИмяПоля Из ИменаПолейВВыборе Цикл
		ПолеКД = Новый ПолеКомпоновкиДанных(СокрЛП(ИмяПоля));
		ДоступноеПолеКД = НастройкиКД.ДоступныеПоляВыбора.НайтиПоле(ПолеКД);
		Если ДоступноеПолеКД = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				ПоискИУдалениеДублей.НаименованиеПодсистемы(Ложь),
				УровеньЖурналаРегистрации.Предупреждение,
				ОбъектМетаданных,
				ЭталонныйОбъект,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поле ""%1"" не найдено.'"), Строка(ПолеКД)));
			Продолжить;
		КонецЕсли;
		ВыбранноеПолеКД = НастройкиКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПолеКД.Поле = ПолеКД;
	КонецЦикла;
	ВыбранноеПолеКД = НастройкиКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ВыбранноеПолеКД = НастройкиКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = Новый ПолеКомпоновкиДанных("Код");
	ВыбранноеПолеКД = НастройкиКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	// Сортировки.
	НастройкиКД.Порядок.Элементы.Очистить();
	ЭлементПорядкаКД = НастройкиКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядкаКД.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	// Отборы.
	Если Характеристики.Иерархический
		И Характеристики.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		ЭлементОтбораКД = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораКД.ПравоеЗначение = Ложь;
	КонецЕсли;
	
	// Структура.
	НастройкиКД.Структура.Очистить();
	ГруппировкаКД = НастройкиКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКД.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	// Чтение данных оригиналов.
	Если ЧитатьТаблицу1ИзСУБД Тогда
		Выборка1 = ИнициализироватьВыборкуКД(СхемаКД, КомпоновщикНастроекКД.ПолучитьНастройки());
	Иначе
		ТаблицаЗначений = ОбъектВТаблицуЗначений(ЭталонныйОбъект, РасшифровкаДополнительныхПолей);
		Если Не ЕстьКод Тогда
			ТаблицаЗначений.Колонки.Добавить("Код", Новый ОписаниеТипов("Неопределено"));
		КонецЕсли;
		Если Не ЕстьНаименование Тогда
			ТаблицаЗначений.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Неопределено"));
		КонецЕсли;
		Выборка1 = ИнициализироватьВыборкуТЗ(ТаблицаЗначений);
	КонецЕсли;
	
	// Подготовка СКД к чтению данных дублей.
	ОтборыКандидатов = Новый Соответствие;
	ИменаПолей = СтрРазделить(ПоляСравненияНаРавенство, ",", Ложь);
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		ИмяПоля = СокрЛП(ИмяПоля);
		ЭлементОтбораКД = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборыКандидатов.Вставить(ИмяПоля, ЭлементОтбораКД);
	КонецЦикла;
	ЭлементОтбораКД = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	Если ЧитатьТаблицу1ИзСУБД Тогда
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	Иначе
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	КонецЕсли;
	ОтборыКандидатов.Вставить("Ссылка", ЭлементОтбораКД);
	
	// Результат и цикл поиска
	ТаблицаДублей = Новый ТаблицаЗначений;
	КолонкиРезультата = ТаблицаДублей.Колонки;
	КолонкиРезультата.Добавить("Ссылка");
	Для Каждого КлючЗначение Из СтруктураПолейИдентичности Цикл
		Если КолонкиРезультата.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			КолонкиРезультата.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючЗначение Из СтруктураПолейПодобия Цикл
		Если КолонкиРезультата.Найти(КлючЗначение.Ключ) = Неопределено Тогда
			КолонкиРезультата.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Если КолонкиРезультата.Найти("Код") = Неопределено Тогда
		КолонкиРезультата.Добавить("Код");
	КонецЕсли;
	Если КолонкиРезультата.Найти("Наименование") = Неопределено Тогда
		КолонкиРезультата.Добавить("Наименование");
	КонецЕсли;
	Если КолонкиРезультата.Найти("Родитель") = Неопределено Тогда
		КолонкиРезультата.Добавить("Родитель");
	КонецЕсли;
	
	ТаблицаДублей.Индексы.Добавить("Ссылка");
	ТаблицаДублей.Индексы.Добавить("Родитель");
	ТаблицаДублей.Индексы.Добавить("Ссылка, Родитель");
	
	Результат = Новый Структура("ТаблицаДублей, ОписаниеОшибки, МестаИспользования", ТаблицаДублей);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("РасшифровкаДополнительныхПолей", РасшифровкаДополнительныхПолей);
	СтруктураПолей.Вставить("СтруктураПолейИдентичности",     СтруктураПолейИдентичности);
	СтруктураПолей.Вставить("СтруктураПолейПодобия",          СтруктураПолейПодобия);
	СтруктураПолей.Вставить("СписокПолейИдентичности",        ПоляСравненияНаРавенство);
	СтруктураПолей.Вставить("СписокПолейПодобия",             ПоляСравненияНаПодобие);
	
	Пока СледующийЭлементВыборки(Выборка1) Цикл
		СтрокаТаблицы1 = Выборка1.ТекущийЭлемент;
		
		// Установка отборов для выбора кандидатов.
		Для Каждого КлючИЗначение Из ОтборыКандидатов Цикл
			ЭлементОтбораКД = КлючИЗначение.Значение;
			ЭлементОтбораКД.ПравоеЗначение = СтрокаТаблицы1[КлючИЗначение.Ключ];
		КонецЦикла;
		
		// Выборка кандидатов данных из СУБД.
		Выборка2 = ИнициализироватьВыборкуКД(СхемаКД, НастройкиКД);
		Таблица2 = Выборка2.ПроцессорВыводаКД.Вывести(Выборка2.ПроцессорКД);
		Если СтруктураПолейПодобия.Количество() > 0 Тогда
			ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПоискаСтрок", "FuzzySearch", ТипВнешнейКомпоненты.Native);
			FuzzySearch = Новый("AddIn.FuzzySearch.FuzzyStringMatchExtension");
			Для Каждого КлючЗначение Из СтруктураПолейПодобия Цикл
				ИмяПоля = КлючЗначение.Ключ;
				МассивСтрок = Таблица2.ВыгрузитьКолонку(ИмяПоля);
				СтрокаМассивом = СтрСоединить(МассивСтрок,"~");
				СтрокаДляПоиска = СтрокаТаблицы1[ИмяПоля];
				МассивИндексовСтрокой = FuzzySearch.StringSearch(НРег(СтрокаДляПоиска), НРег(СтрокаМассивом), "~", 10, 80, 90);
				Если ПустаяСтрока(МассивИндексовСтрокой) Тогда
					Продолжить;
				КонецЕсли;
				МассивИндексов = СтрРазделить(МассивИндексовСтрокой, ",");
				Если МассивИндексов.Количество() > 0 Тогда
					Для Каждого ИндексСтроки Из МассивИндексов Цикл
						Если ПустаяСтрока(ИндексСтроки) Тогда
							Продолжить;
						КонецЕсли;
						СтрокаТаблицы2 = Таблица2.Получить(ИндексСтроки);
						Если ТаблицаДублей.Найти(СтрокаТаблицы2.Ссылка, "Ссылка") <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ИспользоватьПрикладныеПравила Тогда
							// Наполняем таблицу для прикладных правил, вызываем их, если пора.
							ДобавитьСтрокуКандидатов(ТаблицаКандидатов, СтрокаТаблицы1, СтрокаТаблицы2, СтруктураПолей);
							Если ТаблицаКандидатов.Количество() = РазмерПрикладнойПорции Тогда
								ДобавитьДублиПоПрикладнымПравилам(ТаблицаДублей, МенеджерОбластиПоиска, СтрокаТаблицы1, ТаблицаКандидатов, СтруктураПолей, ДополнительныеПараметры);
								ТаблицаКандидатов.Очистить();
							КонецЕсли;
						Иначе
							ДобавитьДубльВРезультат(ТаблицаДублей, СтрокаТаблицы1, СтрокаТаблицы2, СтруктураПолей);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы2 Из Таблица2 Цикл
				// Если мы его уже посчитали дублем в какой-то группе, то не трогаем.
				Если ТаблицаДублей.Найти(СтрокаТаблицы2.Ссылка, "Ссылка") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// Проигрываем правила подобия для строк.
				Если ИспользоватьПрикладныеПравила Тогда
					// Наполняем таблицу для прикладных правил, вызываем их, если пора.
					ДобавитьСтрокуКандидатов(ТаблицаКандидатов, СтрокаТаблицы1, СтрокаТаблицы2, СтруктураПолей);
					Если ТаблицаКандидатов.Количество() = РазмерПрикладнойПорции Тогда
						ДобавитьДублиПоПрикладнымПравилам(ТаблицаДублей, МенеджерОбластиПоиска, СтрокаТаблицы1, ТаблицаКандидатов, СтруктураПолей, ДополнительныеПараметры);
						ТаблицаКандидатов.Очистить();
					КонецЕсли;
				Иначе
					ДобавитьДубльВРезультат(ТаблицаДублей, СтрокаТаблицы1, СтрокаТаблицы2, СтруктураПолей);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Обрабатываем остаток таблицы для прикладных правил.
		Если ИспользоватьПрикладныеПравила Тогда
			ДобавитьДублиПоПрикладнымПравилам(ТаблицаДублей, МенеджерОбластиПоиска, СтрокаТаблицы1, ТаблицаКандидатов, СтруктураПолей, ДополнительныеПараметры);
			ТаблицаКандидатов.Очистить();
		КонецЕсли;
		
		// Завершен анализ группы, смотрим на количество. Много клиенту не отдаем.
		Если РазмерВозвращаемойПорции > 0 И (ТаблицаДублей.Количество() > РазмерВозвращаемойПорции) Тогда
			// Откатываем последнюю группу.
			Для Каждого Строка Из ТаблицаДублей.НайтиСтроки( Новый Структура("Родитель ", СтрокаТаблицы1.Ссылка) ) Цикл
				ТаблицаДублей.Удалить(Строка);
			КонецЦикла;
			Для Каждого Строка Из ТаблицаДублей.НайтиСтроки( Новый Структура("Ссылка", СтрокаТаблицы1.Ссылка) ) Цикл
				ТаблицаДублей.Удалить(Строка);
			КонецЦикла;
			// Если это была последняя группа, то сообщаем об ошибке.
			Если ТаблицаДублей.Количество() = 0 Тогда
				Результат.ОписаниеОшибки = НСтр("ru = 'Найдено слишком много элементов, определены не все группы дублей.'");
			Иначе
				Результат.ОписаниеОшибки = НСтр("ru = 'Найдено слишком много элементов. Уточните критерии поиска дублей.'");
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.ОписаниеОшибки <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Расчет мест использования
	Если РассчитыватьМестаИспользования Тогда
		НаборСсылок = Новый Массив;
		Для Каждого СтрокаДублей Из ТаблицаДублей Цикл
			Если ЗначениеЗаполнено(СтрокаДублей.Ссылка) Тогда
				НаборСсылок.Добавить(СтрокаДублей.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		МестаИспользования = МестаИспользованияСсылок(НаборСсылок);
		МестаИспользования = МестаИспользования.Скопировать(
			МестаИспользования.НайтиСтроки(Новый Структура("ВспомогательныеДанные", Ложь)));
		МестаИспользования.Индексы.Добавить("Ссылка");
		
		Результат.Вставить("МестаИспользования", МестаИспользования);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Определение наличия прикладных правил у объекта.
//
// Параметры:
//     МенеджерОбласти - СправочникМенеджер - Менеджер проверяемого объекта.
//
// Возвращаемое значение:
//     Булево - Истина, если прикладные правила определены.
//
Функция ЕстьПрикладныеПравилаОбластиПоискаДублей(Знач ИмяОбъекта) Экспорт
	
	СписокОбъектов = Новый Соответствие;
	ПоискИУдалениеДублейПереопределяемый.ПриОпределенииОбъектовСПоискомДублей(СписокОбъектов);
	
	СведенияОбОбъекте = СписокОбъектов[ИмяОбъекта];
	Возврат СведенияОбОбъекте <> Неопределено И (СведенияОбОбъекте = "" Или СтрНайти(СведенияОбОбъекте, "ПараметрыПоискаДублей") > 0);
	
КонецФункции

// Интерфейс для выполнения команд обработки.
Процедура ВыполнитьКоманду(ПараметрыВыполнения, АдресРезультата) Экспорт
	
	Если ПараметрыВыполнения.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
		
		ФоновыйПоискДублей(ПараметрыВыполнения, АдресРезультата);
		
	ИначеЕсли ПараметрыВыполнения.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
		
		ФоновоеУдалениеДублей(ПараметрыВыполнения, АдресРезультата);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Поиск и удаление дублей: Команда ""%1"" не поддерживается.'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Преобразуем объект в таблицу для помещения в запрос.
Функция ОбъектВТаблицуЗначений(Знач ОбъектДанных, Знач РасшифровкаДополнительныхПолей)
	Результат = Новый ТаблицаЗначений;
	СтрокаДанных = Результат.Добавить();
	
	МетаОбъект = ОбъектДанных.Метаданные();
	
	Для Каждого МетаРеквизит Из МетаОбъект.СтандартныеРеквизиты  Цикл
		Имя = МетаРеквизит.Имя;
		Результат.Колонки.Добавить(Имя, МетаРеквизит.Тип);
		СтрокаДанных[Имя] = ОбъектДанных[Имя];
	КонецЦикла;
	
	Для Каждого МетаРеквизит Из МетаОбъект.Реквизиты Цикл
		Имя = МетаРеквизит.Имя;
		Результат.Колонки.Добавить(Имя, МетаРеквизит.Тип);
		СтрокаДанных[Имя] = ОбъектДанных[Имя];
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из РасшифровкаДополнительныхПолей Цикл
		Имя1 = КлючИЗначение.Ключ;
		Имя2 = КлючИЗначение.Значение;
		Результат.Колонки.Добавить(Имя1, Результат.Колонки[Имя2].ТипЗначения);
		СтрокаДанных[Имя1] = СтрокаДанных[Имя2];
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Дополнительный анализ кандидатов в дубли прикладном методом.
//
Процедура ДобавитьДублиПоПрикладнымПравилам(СтрокиДереваРезультата, Знач МенеджерОбластиПоиска, Знач ОсновныеДанные, Знач ТаблицаКандидатов, Знач СтруктураПолей, Знач ДополнительныеПараметры)
	Если ТаблицаКандидатов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбластиПоиска.ПриПоискеДублей(ТаблицаКандидатов, ДополнительныеПараметры);
	
	Данные1 = Новый Структура;
	Данные2 = Новый Структура;
	
	Для Каждого ПараКандидатов Из ТаблицаКандидатов.НайтиСтроки(Новый Структура("ЭтоДубли", Истина)) Цикл
		Данные1.Вставить("Ссылка",       ПараКандидатов.Ссылка1);
		Данные1.Вставить("Код",          ПараКандидатов.Поля1.Код);
		Данные1.Вставить("Наименование", ПараКандидатов.Поля1.Наименование);
		
		Данные2.Вставить("Ссылка",       ПараКандидатов.Ссылка2);
		Данные2.Вставить("Код",          ПараКандидатов.Поля2.Код);
		Данные2.Вставить("Наименование", ПараКандидатов.Поля2.Наименование);
		
		Для Каждого КлючЗначение Из СтруктураПолей.СтруктураПолейИдентичности Цикл
			ИмяПоля = КлючЗначение.Ключ;
			Данные1.Вставить(ИмяПоля, ПараКандидатов.Поля1[ИмяПоля]);
			Данные2.Вставить(ИмяПоля, ПараКандидатов.Поля2[ИмяПоля]);
		КонецЦикла;
		Для Каждого КлючЗначение Из СтруктураПолей.СтруктураПолейПодобия Цикл
			ИмяПоля = КлючЗначение.Ключ;
			Данные1.Вставить(ИмяПоля, ПараКандидатов.Поля1[ИмяПоля]);
			Данные2.Вставить(ИмяПоля, ПараКандидатов.Поля2[ИмяПоля]);
		КонецЦикла;
		
		ДобавитьДубльВРезультат(СтрокиДереваРезультата, Данные1, Данные2, СтруктураПолей);
	КонецЦикла;
КонецПроцедуры

// Добавляем строку в таблицу кандидатов для прикладного метода.
//
Функция ДобавитьСтрокуКандидатов(ТаблицаКандидатов, Знач ДанныеОсновногоЭлемента, Знач ДанныеКандидата, Знач СтруктураПолей)
	
	Строка = ТаблицаКандидатов.Добавить();
	Строка.ЭтоДубли = Ложь;
	Строка.Ссылка1  = ДанныеОсновногоЭлемента.Ссылка;
	Строка.Ссылка2  = ДанныеКандидата.Ссылка;
	
	Строка.Поля1 = Новый Структура("Код, Наименование", ДанныеОсновногоЭлемента.Код, ДанныеОсновногоЭлемента.Наименование);
	Строка.Поля2 = Новый Структура("Код, Наименование", ДанныеКандидата.Код, ДанныеКандидата.Наименование);
	
	Для Каждого КлючЗначение Из СтруктураПолей.СтруктураПолейИдентичности Цикл
		ИмяПоля = КлючЗначение.Ключ;
		Строка.Поля1.Вставить(ИмяПоля, ДанныеОсновногоЭлемента[ИмяПоля]);
		Строка.Поля2.Вставить(ИмяПоля, ДанныеКандидата[ИмяПоля]);
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СтруктураПолей.СтруктураПолейПодобия Цикл
		ИмяПоля = КлючЗначение.Ключ;
		Строка.Поля1.Вставить(ИмяПоля, ДанныеОсновногоЭлемента[ИмяПоля]);
		Строка.Поля2.Вставить(ИмяПоля, ДанныеКандидата[ИмяПоля]);
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СтруктураПолей.РасшифровкаДополнительныхПолей Цикл
		ИмяКолонки = КлючЗначение.Значение;
		ИмяПоля    = КлючЗначение.Ключ;
		
		Строка.Поля1.Вставить(ИмяКолонки, ДанныеОсновногоЭлемента[ИмяПоля]);
		Строка.Поля2.Вставить(ИмяКолонки, ДанныеКандидата[ИмяПоля]);
	КонецЦикла;
	
	Возврат Строка;
КонецФункции

// Добавляем в дерево результатов найденный вариант.
//
Процедура ДобавитьДубльВРезультат(Результат, Знач ДанныеОсновногоЭлемента, Знач ДанныеКандидата, Знач СтруктураПолей)
	
	ФильтрГруппы = Новый Структура("Ссылка, Родитель", ДанныеОсновногоЭлемента.Ссылка);
	ГруппаДублей = Результат.НайтиСтроки(ФильтрГруппы);
	
	Если ГруппаДублей.Количество() = 0 Тогда
		ГруппаДублей = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(ГруппаДублей, ФильтрГруппы);
		
		СтрокаДублей = Результат.Добавить();
		СписокСвойств = "Ссылка, Код, Наименование," + СтруктураПолей.СписокПолейИдентичности + "," + СтруктураПолей.СписокПолейПодобия;
		ЗаполнитьЗначенияСвойств(СтрокаДублей, ДанныеОсновногоЭлемента, СписокСвойств);
		
		СтрокаДублей.Родитель = ГруппаДублей.Ссылка;
	Иначе
		ГруппаДублей = ГруппаДублей[0];
	КонецЕсли;
	
	СтрокаДублей = Результат.Добавить();
	СписокСвойств = "Ссылка, Код, Наименование," + СтруктураПолей.СписокПолейИдентичности + "," + СтруктураПолей.СписокПолейПодобия;
	ЗаполнитьЗначенияСвойств(СтрокаДублей, ДанныеКандидата, СписокСвойств);
	
	СтрокаДублей.Родитель = ГруппаДублей.Ссылка;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для автономной работы.

// [ОбщегоНазначения.МестаИспользования]
Функция МестаИспользованияСсылок(Знач НаборСсылок, Знач АдресРезультата = "")
	
	Возврат ОбщегоНазначения.МестаИспользования(НаборСсылок, АдресРезультата);
	
КонецФункции

// [ОбщегоНазначения.ЗаменитьСсылки]
Функция ЗаменитьСсылки(Знач ПарыЗамен, Знач Параметры = Неопределено, Знач АдресРезультата = "")
	
	Результат = ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, Параметры);
	Если АдресРезультата <> "" Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие.

Функция ДоступныеРеквизитыОтбора(ОбъектМетаданных)
	МассивРеквизитов = Новый Массив;
	Для Каждого РеквизитМетаданные Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если РеквизитМетаданные.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		МассивРеквизитов.Добавить(РеквизитМетаданные.Имя);
	КонецЦикла;
	Для Каждого РеквизитМетаданные Из ОбъектМетаданных.Реквизиты Цикл
		Если РеквизитМетаданные.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		МассивРеквизитов.Добавить(РеквизитМетаданные.Имя);
	КонецЦикла;
	Возврат СтрСоединить(МассивРеквизитов, ",");
КонецФункции

Функция ИнициализироватьВыборкуКД(СхемаКД, НастройкиКД)
	Выборка = Новый Структура("Таблица, ТекущийЭлемент, Индекс, ВГраница, ПроцессорКД, ПроцессорВыводаКД");
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКД, НастройкиКД, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Выборка.ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	Выборка.ПроцессорКД.Инициализировать(МакетКД);
	
	Выборка.Таблица = Новый ТаблицаЗначений;
	Выборка.Индекс = -1;
	Выборка.ВГраница = -100;
	
	Выборка.ПроцессорВыводаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Выборка.ПроцессорВыводаКД.УстановитьОбъект(Выборка.Таблица);
	
	Возврат Выборка;
КонецФункции

Функция ИнициализироватьВыборкуТЗ(ТаблицаЗначений)
	Выборка = Новый Структура("Таблица, ТекущийЭлемент, Индекс, ВГраница, ПроцессорКД, ПроцессорВыводаКД");
	Выборка.Таблица = ТаблицаЗначений;
	Выборка.Индекс = -1;
	Выборка.ВГраница = ТаблицаЗначений.Количество() - 1;
	Возврат Выборка;
КонецФункции

Функция СледующийЭлементВыборки(Выборка)
	Если Выборка.Индекс >= Выборка.ВГраница Тогда
		Если Выборка.ПроцессорКД = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если Выборка.ВГраница = -100 Тогда
			Выборка.ПроцессорВыводаКД.НачатьВывод();
		КонецЕсли;
		Выборка.Таблица.Очистить();
		Выборка.Индекс = -1;
		Выборка.ВГраница = -1;
		Пока Выборка.ВГраница = -1 Цикл
			ЭлементРезультатаКД = Выборка.ПроцессорКД.Следующий();
			Если ЭлементРезультатаКД = Неопределено Тогда
				Выборка.ПроцессорВыводаКД.ЗакончитьВывод();
				Возврат Ложь;
			КонецЕсли;
			Выборка.ПроцессорВыводаКД.ВывестиЭлемент(ЭлементРезультатаКД);
			Выборка.ВГраница = Выборка.Таблица.Количество() - 1;
		КонецЦикла;
	КонецЕсли;
	Выборка.Индекс = Выборка.Индекс + 1;
	Выборка.ТекущийЭлемент = Выборка.Таблица[Выборка.Индекс];
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область Кастом

Процедура ФоновыйПоискДублейКастом(Знач Параметры, Знач АдресРезультата) Экспорт
	
	ПолноеИмяСправочника = Параметры.ОбластьПоискаДублей;
	ПолноеИмяСправочникаДляСсылки = СтрЗаменить(ПолноеИмяСправочника, "Справочник", "Справочники");
	
	ТаблицаДублей = Новый ТаблицаЗначений;
	ТаблицаДублей.Колонки.Добавить("Родитель",, "Родитель");
	ТаблицаДублей.Колонки.Добавить("Ссылка",, "Ссылка");
	
	Результат = Новый Структура("ТаблицаДублей, ОписаниеОшибки, МестаИспользования", ТаблицаДублей);
	
	ПоляПоиска = Новый Массив;
	
	Для каждого ПравилоПоиска Из Параметры.ПравилаПоиска Цикл
	
		Если ЗначениеЗаполнено(ПравилоПоиска.Правило) Тогда
		
			ПоляПоиска.Добавить(ПравилоПоиска.Реквизит);
			
			Если Не ПравилоПоиска.Реквизит = "Ссылка" И Не ПравилоПоиска.Реквизит = "Код" И Не ПравилоПоиска.Реквизит = "Наименование" Тогда
			
				Выполнить("ТаблицаДублей.Колонки.Добавить(""" + ПравилоПоиска.Реквизит + ?(ПравилоПоиска.Реквизит = "Родитель", "Ссылки", "") + """, ПолучитьТипРеквизита(""" + ПолноеИмяСправочникаДляСсылки + """, """ + ПравилоПоиска.Реквизит + """), """ + ПравилоПоиска.Реквизит + """);");		
			
			КонецЕсли;			
		
		КонецЕсли;
	
	КонецЦикла;
	
	ПростыеОтборы 	= Новый Массив;
	ТяжелыеОтборы 	= Новый Массив;
	
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	НомерСекцииИли = 0;
	
	ЗаполнитьМассивыОтборов(ПростыеОтборы, ТяжелыеОтборы, Параметры.НастройкиКомпоновщикаПредварительногоОтбора.Отбор.Элементы, ТаблицаДублей, ПолноеИмяСправочникаДляСсылки, ТипГруппаЭлементовОтбораКомпоновкиДанных,, НомерСекцииИли);
	
	МассивРеквизитов = Новый Массив;
	
	МассивИменСправочников = ОбщиеФункцииПовтИсп.ПолучитьИменаСправочников();
	
	Для каждого Реквизит Из Параметры.МассивОтмеченныхРеквизитов Цикл
	
		Если Найти(Реквизит, ".") > 0 Тогда
		
			МассивРеквизитов.Добавить(СтрЗаменить(Реквизит, ".", ""));		
		
		Иначе
		
			МассивРеквизитов.Добавить(Реквизит);
			
			Если ТаблицаДублей.Колонки.Найти(Реквизит) = Неопределено Или Реквизит = "Родитель" И ТаблицаДублей.Колонки.Найти("РодительСсылки") = Неопределено Тогда
				
				Выполнить("ТаблицаДублей.Колонки.Добавить(""" + Реквизит + ?(Реквизит = "Родитель", "Ссылки", "") + """, ПолучитьТипРеквизита(""" + ПолноеИмяСправочникаДляСсылки + """, """ + Реквизит + """), """ + Реквизит + """);");
				
			КонецЕсли;
			
		КонецЕсли;	
	
	КонецЦикла;
	
	ИмяСправочника = СтрЗаменить(ПолноеИмяСправочника, "Справочник.", "");
	
	КоличествоРеквизитов = МассивРеквизитов.Количество();
	
	Для Н = 0 По КоличествоРеквизитов - 1 Цикл
		
		Реквизит = МассивРеквизитов.Получить(Н);
		
		Если Реквизит = "ОбозначениеПредметаСнабжения" Тогда
			
			Продолжить;	
			
		КонецЕсли;		
		
		ПустоеЗначениеРеквизита = ОбщиеФункцииПовтИсп.ПолучитьПустоеЗначениеРеквизитаСправочника(ИмяСправочника, Реквизит);
		
		Если Не МассивИменСправочников.Найти(Строка(ТипЗнч(ПустоеЗначениеРеквизита))) = Неопределено Тогда
			
			МетаданныеРеквизита = ПустоеЗначениеРеквизита.Метаданные();
			
			Если МетаданныеРеквизита.Владельцы.Количество() > 0 Тогда
				
				ВладелецРеквизита = Реквизит + ".Владелец";
				
				МассивРеквизитов.Добавить(ВладелецРеквизита);
				
				Выполнить("ТаблицаДублей.Колонки.Добавить(""" + СтрЗаменить(ВладелецРеквизита, ".", "") + """, ПолучитьТипРеквизита(""" + СтрЗаменить(МетаданныеРеквизита.ПолноеИмя(), "Справочник", "Справочники") + """, ""Владелец""), """ + ВладелецРеквизита + """);");
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЕстьТяжелыеОтборы = ТяжелыеОтборы.Количество() > 0 Или ЗначениеЗаполнено(Параметры.СтруктураОтбораПоЗаказу) Или Не МассивРеквизитов.Найти("ОбозначениеПредметаСнабжения") = Неопределено;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	
	Если ЕстьТяжелыеОтборы Тогда
		
		Запрос = СформироватьЗапросСТяжелымиОтборами(ПолноеИмяСправочника, ПоляПоиска, МВТ, ПростыеОтборы, ТяжелыеОтборы, МассивРеквизитов, Параметры.СтруктураОтбораПоЗаказу);
				
	Иначе
		
		Запрос = СформироватьЗапросСПростымиОтборами(ПолноеИмяСправочника, ПоляПоиска, МВТ, ПростыеОтборы, МассивРеквизитов);		
	
	КонецЕсли;	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;	
	
	КонецЕсли;
	
	СчетчикКоличество = 0;
	
	НаборСсылок = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПолучитьДублиСвышеДостаточногоКоличества = Параметры.Свойство("ПолучитьДублиСвышеДостаточногоКоличества");
	
	Пока Выборка.Следующий() Цикл
		
		СчетчикКоличество = СчетчикКоличество + Выборка.КоличествоСсылок;
		
		ДобавитьДубли = СчетчикКоличество <= Параметры.ДостаточноеКоличество Или ПолучитьДублиСвышеДостаточногоКоличества;
		
		ПолучитьДублиСвышеДостаточногоКоличества = Ложь;
		
		Если ДобавитьДубли Тогда
			
			ПараметрыПоиска = Новый Соответствие;
			
			Для каждого ПолеОтбора Из ПоляПоиска Цикл
				
				Выполнить("ПараметрыПоиска.Вставить(""" + ПолеОтбора + """, Выборка." + ПолеОтбора + ");");	
				
			КонецЦикла;
			
			ДобавитьДублиВТаблицу(МВТ, ТаблицаДублей, НаборСсылок, ПараметрыПоиска, ПолноеИмяСправочника, ПростыеОтборы, ТяжелыеОтборы, МассивРеквизитов);
			
		ИначеЕсли ТаблицаДублей.Количество() = 0 Тогда
			
			Результат.Вставить("ПревышениеДостаточногоКоличества", СчетчикКоличество);
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДублей.Индексы.Добавить("Ссылка");
	ТаблицаДублей.Индексы.Добавить("Родитель");
	ТаблицаДублей.Индексы.Добавить("Ссылка, Родитель");
	
	Результат.ТаблицаДублей = ТаблицаДублей;
	
	МестаИспользования = МестаИспользованияСсылок(НаборСсылок);
	МестаИспользования = МестаИспользования.Скопировать(
	МестаИспользования.НайтиСтроки(Новый Структура("ВспомогательныеДанные", Ложь)));
	МестаИспользования.Индексы.Добавить("Ссылка");
	
	Результат.Вставить("МестаИспользования", МестаИспользования);
	
	Результат.Вставить("МассивРеквизитов", МассивРеквизитов);
	
	Результат.Вставить("СчетчикКоличество", СчетчикКоличество);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);	
	
КонецПроцедуры

Процедура ЗаполнитьМассивыОтборов(ПростыеОтборы, ТяжелыеОтборы, ЭлементыОтбора, ТаблицаДублей, ПолноеИмяСправочникаДляСсылки, ТипГруппаЭлементовОтбораКомпоновкиДанных, ТипГруппы = Неопределено, НомерСекцииИли)

	Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
	
		НомерСекцииИли = НомерСекцииИли + 1;
	
	КонецЕсли;
	
	Для каждого СтрокаОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(СтрокаОтбора) = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			
			ЗаполнитьМассивыОтборов(ПростыеОтборы, ТяжелыеОтборы, СтрокаОтбора.Элементы, ТаблицаДублей, ПолноеИмяСправочникаДляСсылки, ТипГруппаЭлементовОтбораКомпоновкиДанных, СтрокаОтбора.ТипГруппы, НомерСекцииИли);
			Продолжить;	
			
		КонецЕсли;
	
		Если СтрокаОтбора.Использование Тогда
			
			ОтборСтруктура = Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение,РеквизитЧерезТочку,ЛевоеЗначениеБезТочек,СекцияНе,НомерСекцииИли");
			
			ЗаполнитьЗначенияСвойств(ОтборСтруктура, СтрокаОтбора);
			ОтборСтруктура.ЛевоеЗначение = Строка(ОтборСтруктура.ЛевоеЗначение);
			ОтборСтруктура.ЛевоеЗначениеБезТочек = ОтборСтруктура.ЛевоеЗначение;
			
			ОтборСтруктура.СекцияНе = ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
			
			Если ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
			
				ОтборСтруктура.НомерСекцииИли = НомерСекцииИли;	
			
			КонецЕсли;
			
			ПозицияТочки = Найти(СтрокаОтбора.ЛевоеЗначение, ".");
			
			ЧерезТочку = Не ПозицияТочки = 0;
			
			Если Не ЧерезТочку И ЭтоПростойВидСравнения(СтрокаОтбора.ВидСравнения) Тогда
			
				ПростыеОтборы.Добавить(ОтборСтруктура); 	
			
			Иначе
				
				Если ЧерезТочку Тогда
				
					ОтборСтруктура.РеквизитЧерезТочку = Лев(ОтборСтруктура.ЛевоеЗначение, ПозицияТочки - 1);
					ОтборСтруктура.ЛевоеЗначениеБезТочек = СтрЗаменить(ОтборСтруктура.ЛевоеЗначение, ".", "");
				
				КонецЕсли;
			
				ТяжелыеОтборы.Добавить(ОтборСтруктура);
			
			КонецЕсли;	
			
			Если ТаблицаДублей.Колонки.Найти(ОтборСтруктура.ЛевоеЗначениеБезТочек) = Неопределено Или ОтборСтруктура.ЛевоеЗначениеБезТочек = "Родитель" И ТаблицаДублей.Колонки.Найти("РодительСсылки") = Неопределено Тогда
			
				Выполнить("ТаблицаДублей.Колонки.Добавить(""" + ОтборСтруктура.ЛевоеЗначениеБезТочек + ?(ОтборСтруктура.ЛевоеЗначениеБезТочек = "Родитель", "Ссылки", "") + """, ПолучитьТипРеквизита(""" + ПолноеИмяСправочникаДляСсылки + """, """ + ОтборСтруктура.ЛевоеЗначение + """, ЧерезТочку), """ + ОтборСтруктура.ЛевоеЗначение + """);");;		
			
			КонецЕсли;
			
		КонецЕсли;	
	
	КонецЦикла;

КонецПроцедуры // ЗаполнитьМассивыОтборов()

Функция ПолучитьТипРеквизита(ПолноеИмяСправочникаДляСсылки, ИмяРеквизита, ЧерезТочку = Ложь) Экспорт
	
	Если ИмяРеквизита = "ОбозначениеПредметаСнабжения" Тогда
	
		Возврат Новый ОписаниеТипов("Строка");	
	
	КонецЕсли;
	
	Если Не ЧерезТочку Тогда
		
		Тип = Неопределено;
		
		Выполнить("
		|МетаданныеСправочника = " + ПолноеИмяСправочникаДляСсылки + ".ПустаяСсылка().Метаданные();
		|Реквизит = МетаданныеСправочника.Реквизиты.Найти(""" + ИмяРеквизита + """);
		|Тип = ?(Реквизит = Неопределено, МетаданныеСправочника.СтандартныеРеквизиты." + ИмяРеквизита + ".Тип, Реквизит.Тип);");
		
		Возврат Тип;
	
	Иначе
		
		Тип = Неопределено;
		
		МассивРеквизитовДляМетаданных = Новый Массив;
		
		ПозицияТочки = Найти(ИмяРеквизита, ".");
		
		Пока ПозицияТочки > 0 Цикл
		
			МассивРеквизитовДляМетаданных.Добавить(Лев(ИмяРеквизита, ПозицияТочки));
			
			ИмяРеквизита = Прав(ИмяРеквизита, СтрДлина(ИмяРеквизита) - ПозицияТочки);
			
			ПозицияТочки = Найти(ИмяРеквизита, ".");
		
		КонецЦикла;
		
		ЦепочкаРеквизитовДляМетаданных = СтрСоединить(МассивРеквизитовДляМетаданных);
		
		Выполнить("
		|МетаданныеСправочника = " + ПолноеИмяСправочникаДляСсылки + ".ПустаяСсылка()." + ЦепочкаРеквизитовДляМетаданных + "Метаданные();
		|Реквизит = МетаданныеСправочника.Реквизиты.Найти(""" + ИмяРеквизита + """);
		|Тип = ?(Реквизит = Неопределено, МетаданныеСправочника.СтандартныеРеквизиты." + ИмяРеквизита + ".Тип, Реквизит.Тип);");
		
		Возврат Тип;	
	
	КонецЕсли;	
	
КонецФункции // ПолучитьТипРеквизита()

Функция СформироватьЗапросСПростымиОтборами(ПолноеИмяСправочника, ПоляПоиска, МВТ, ПростыеОтборы, МассивОтмеченныхРеквизитов)

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Ссылка");
	
	Для каждого ПолеПоиска Из ПоляПоиска Цикл
	
		Если Не ПолеПоиска = "Ссылка" Тогда
		
			МассивПолей.Добавить(ПолеПоиска);
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Для каждого СтруктураОтбора Из ПростыеОтборы Цикл
	
		Если МассивПолей.Найти(СтруктураОтбора.ЛевоеЗначениеБезТочек) = Неопределено Тогда
		
			МассивПолей.Добавить(СтруктураОтбора.ЛевоеЗначениеБезТочек);	
		
		КонецЕсли;		
	
	КонецЦикла;
	
	Для каждого Реквизит Из МассивОтмеченныхРеквизитов Цикл
	
		Если МассивПолей.Найти(Реквизит) = Неопределено Тогда
		
			МассивПолей.Добавить(Реквизит);	
		
		КонецЕсли;		
	
	КонецЦикла;
	
	МассивТекстаЗапроса = Новый Массив;
	
	МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
	
	Для каждого Поле Из МассивПолей Цикл
		
		МассивТекстаЗапроса.Добавить("
		|	Таблица.");	
		МассивТекстаЗапроса.Добавить(Поле);	
		МассивТекстаЗапроса.Добавить(",");	
		
	КонецЦикла;
	
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);	
	
	МассивТекстаЗапроса.Добавить("
	|ПОМЕСТИТЬ ВТ_Таблица
	|ИЗ
	|	");
	МассивТекстаЗапроса.Добавить(ПолноеИмяСправочника);
	МассивТекстаЗапроса.Добавить(" КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления");
	
	СчетчикОтборов = 0;
	
	ДобавитьУсловияПростыхОтборов(ПростыеОтборы, Запрос, МассивТекстаЗапроса, СчетчикОтборов);	
	
	МассивТекстаЗапроса.Добавить("
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	");
	
	Для каждого ПолеПоиска Из ПоляПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("Таблица.");	
		МассивТекстаЗапроса.Добавить(ПолеПоиска);
		МассивТекстаЗапроса.Добавить(",
		|	");	
		
	КонецЦикла;	
	
	МассивТекстаЗапроса.Добавить(СтрЗаменить(МассивТекстаЗапроса.Получить(МассивТекстаЗапроса.Количество() - 1), ",", ""));
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 2);
	
	МассивТекстаЗапроса.Добавить(";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	");
	
	Для каждого ПолеОтбора Из ПоляПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("ВложенныйЗапрос.");
		МассивТекстаЗапроса.Добавить(ПолеОтбора);
		МассивТекстаЗапроса.Добавить(",
		|	");
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("ВложенныйЗапрос.КоличествоСсылок
	|ИЗ
	|	(ВЫБРАТЬ
	|		");	
	
	Для каждого ПолеОтбора Из ПоляПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("Таблица.");
		МассивТекстаЗапроса.Добавить(ПолеОтбора);
		МассивТекстаЗапроса.Добавить(",
		|		");
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("КОЛИЧЕСТВО(Таблица.Ссылка) КАК КоличествоСсылок
	|	ИЗ ВТ_Таблица КАК Таблица
	|	
	|	СГРУППИРОВАТЬ ПО
	|		");
	
	Для каждого ПолеОтбора Из ПоляПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("Таблица.");
		МассивТекстаЗапроса.Добавить(ПолеОтбора);
		МассивТекстаЗапроса.Добавить(",
		|		");
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить(СтрЗаменить(МассивТекстаЗапроса.Получить(МассивТекстаЗапроса.Количество() - 1), ",", ""));
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 2);
	
	МассивТекстаЗапроса.Добавить("
	|		
	|		ИМЕЮЩИЕ
	|			КОЛИЧЕСТВО(Таблица.Ссылка) > 1) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.КоличествоСсылок");
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	
	Возврат Запрос;	

КонецФункции // СформироватьЗапросСПростымиОтборами()

Функция СформироватьЗапросСТяжелымиОтборами(ПолноеИмяСправочника, ПоляПоиска, МВТ, ПростыеОтборы, ТяжелыеОтборы, МассивОтмеченныхРеквизитов, СтруктураОтбораПоЗаказу)
	
	ТяжелыеОтборыКопия = Новый Массив;
	
	Для каждого СтруктураОтбора Из ТяжелыеОтборы Цикл
		
		ТяжелыеОтборыКопия.Добавить(СтруктураОтбора);	
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Ссылка");
	
	Для каждого ПолеПоиска Из ПоляПоиска Цикл
		
		Если Не ПолеПоиска = "Ссылка" Тогда
			
			МассивИменРеквизитов.Добавить(ПолеПоиска);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Для каждого СтруктураОтбора Из ПростыеОтборы Цикл
		
		Если МассивИменРеквизитов.Найти(СтруктураОтбора.ЛевоеЗначениеБезТочек) = Неопределено Тогда
			
			МассивИменРеквизитов.Добавить(СтруктураОтбора.ЛевоеЗначениеБезТочек);	
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Для каждого СтруктураОтбора Из ТяжелыеОтборыКопия Цикл
		
		ИмяРеквизита = ?(ЗначениеЗаполнено(СтруктураОтбора.РеквизитЧерезТочку), СтруктураОтбора.РеквизитЧерезТочку, СтруктураОтбора.ЛевоеЗначение);
		
		Если МассивИменРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			
			МассивИменРеквизитов.Добавить(ИмяРеквизита);	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Для каждого Реквизит Из МассивОтмеченныхРеквизитов Цикл
		
		Если МассивИменРеквизитов.Найти(Реквизит) = Неопределено И Найти(Реквизит, ".") = 0 Тогда
			
			МассивИменРеквизитов.Добавить(Реквизит);	
			
		КонецЕсли;		
		
	КонецЦикла;
	
	МассивТекстаЗапроса = Новый Массив;
	
	ИмяПоследнейТаблицы = ПолноеИмяСправочника;
	
	СчетчикОтборов = 0;
	
	МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
	
	Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		
		МассивТекстаЗапроса.Добавить("
		|	Таблица.");		
		МассивТекстаЗапроса.Добавить(?(ИмяРеквизита = "ОбозначениеПредметаСнабжения", "ПредметСнабжения.Обозначение КАК ОбозначениеПредметаСнабжения", ИмяРеквизита));
		МассивТекстаЗапроса.Добавить(",");
		
	КонецЦикла;
	
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
	
	МассивТекстаЗапроса.Добавить("
	|ПОМЕСТИТЬ ВТ_ТаблицаПростыеОтборы
	|ИЗ
	|	");
	МассивТекстаЗапроса.Добавить(ИмяПоследнейТаблицы);
	МассивТекстаЗапроса.Добавить(" КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления");
	
	Если ПростыеОтборы.Количество() > 0 Тогда
		
		ДобавитьУсловияПростыхОтборов(ПростыеОтборы, Запрос, МассивТекстаЗапроса, СчетчикОтборов, Истина);	
		
	КонецЕсли;
	
	МассивТекстаЗапроса.Добавить("
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|");
	
	ИмяПоследнейТаблицы = "ВТ_ТаблицаПростыеОтборы";
	
	ОчередностьТяжелыхОтборов = 1;
	
	ЕстьСекцииИли = Ложь;
	
	Пока ТяжелыеОтборыКопия.Количество() > 0 Цикл
		
		ИндексСтруктурыОтбора = -1;
		ОтборНайден = Ложь;
	
		Для каждого СтруктураОтбора Из ТяжелыеОтборыКопия Цикл
			
			ИндексСтруктурыОтбора = ИндексСтруктурыОтбора + 1;
			
			Если ЗначениеЗаполнено(СтруктураОтбора.НомерСекцииИли) Тогда
				
				ТяжелыеОтборыКопия.Удалить(ИндексСтруктурыОтбора);
				ЕстьСекцииИли = Истина;
				Продолжить;
				
			КонецЕсли;
			
			Если ОчередностьТяжелыхОтборов = 1 Тогда
				
				Если СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
					
					ОтборНайден = Истина;
					Прервать;	
					
				КонецЕсли;	
				
			ИначеЕсли ОчередностьТяжелыхОтборов = 2 Тогда
				
				Если ЗначениеЗаполнено(СтруктураОтбора.РеквизитЧерезТочку) И ЭтоПростойВидСравнения(СтруктураОтбора.ВидСравнения) Тогда
					
					ОтборНайден = Истина;
					Прервать;	
					
				КонецЕсли;	
				
			ИначеЕсли ОчередностьТяжелыхОтборов = 3 Тогда
				
				Если ЗначениеЗаполнено(СтруктураОтбора.РеквизитЧерезТочку) Тогда
					
					ОтборНайден = Истина;
					Прервать;	
					
				КонецЕсли;
				
			Иначе
				
				ОтборНайден = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если ОтборНайден Тогда
			
			Если ОчередностьТяжелыхОтборов = 1 Или ОчередностьТяжелыхОтборов = 2 Или ОчередностьТяжелыхОтборов = 3 Тогда
				
				ЛевоеЗначениеБезТочек = СтрЗаменить(СтруктураОтбора.ЛевоеЗначение, ".", "");
				
				МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
				
				Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
					
					Если ОчередностьТяжелыхОтборов = 1 И ИмяРеквизита = СтруктураОтбора.ЛевоеЗначение Тогда
						
						Продолжить;	
						
					КонецЕсли;
					
					МассивТекстаЗапроса.Добавить("
					|	Таблица.");		
					МассивТекстаЗапроса.Добавить(ИмяРеквизита);
					МассивТекстаЗапроса.Добавить(",");
					
				КонецЦикла;
				
				Если ОчередностьТяжелыхОтборов = 1 Тогда
					
					МассивТекстаЗапроса.Добавить("
					|	ЕСТЬNULL(");	
					
				КонецЕсли;			
				
				МассивТекстаЗапроса.Добавить("Таблица.");
				МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
				
				Если ОчередностьТяжелыхОтборов = 1 Тогда
					
					МассивТекстаЗапроса.Добавить(",&");
					МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
					МассивТекстаЗапроса.Добавить(Строка(СчетчикОтборов + 1));
					МассивТекстаЗапроса.Добавить(")");	
					
				КонецЕсли;			
				
				МассивТекстаЗапроса.Добавить(" КАК ");
				МассивТекстаЗапроса.Добавить(ЛевоеЗначениеБезТочек);
				
				Если Не ОчередностьТяжелыхОтборов = 1 Тогда
					
					МассивИменРеквизитов.Добавить(ЛевоеЗначениеБезТочек);	
					
				КонецЕсли;
				
				МассивТекстаЗапроса.Добавить("
				|ПОМЕСТИТЬ ");
				
				ИмяВременнойТаблицы = "ВТ_ТяжелыйОтбор" + Строка(СчетчикОтборов);
				СчетчикОтборов = СчетчикОтборов + 1;
				
				МассивТекстаЗапроса.Добавить(ИмяВременнойТаблицы);
				МассивТекстаЗапроса.Добавить("
				|ИЗ
				|	");
				МассивТекстаЗапроса.Добавить(ИмяПоследнейТаблицы);
				МассивТекстаЗапроса.Добавить(" КАК Таблица");
				
				Если ОчередностьТяжелыхОтборов = 2 Тогда
					
					МассивТекстаЗапроса.Добавить("
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Таблица.");	
					МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
					
				КонецЕсли;
				
				МассивТекстаЗапроса.Добавить("
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|");		
				
				ИмяПоследнейТаблицы = ИмяВременнойТаблицы;
				
			Иначе
				
				ЛевоеЗначениеБезТочек = "";
				
			КонецЕсли;
			
			МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
			
			Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
				
				МассивТекстаЗапроса.Добавить("
				|	Таблица.");		
				МассивТекстаЗапроса.Добавить(ИмяРеквизита);
				МассивТекстаЗапроса.Добавить(",");
				
			КонецЦикла;
			
			МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
			
			МассивТекстаЗапроса.Добавить("
			|ПОМЕСТИТЬ ");
			
			ИмяВременнойТаблицы = "ВТ_ТяжелыйОтбор" + Строка(СчетчикОтборов);
			
			МассивТекстаЗапроса.Добавить(ИмяВременнойТаблицы);
			МассивТекстаЗапроса.Добавить("
			|ИЗ
			|	");
			МассивТекстаЗапроса.Добавить(ИмяПоследнейТаблицы);
			МассивТекстаЗапроса.Добавить(" КАК Таблица
			|ГДЕ
			|	");
			
			ДобавитьУсловиеОтбора(СтруктураОтбора, Запрос, МассивТекстаЗапроса, ЛевоеЗначениеБезТочек, ПолноеИмяСправочника, СчетчикОтборов);
			
			СчетчикОтборов = СчетчикОтборов + 1;
			
			МассивТекстаЗапроса.Добавить("
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|");
			
			ИмяПоследнейТаблицы = ИмяВременнойТаблицы;
			
			ТяжелыеОтборыКопия.Удалить(ИндексСтруктурыОтбора);
			
		Иначе
			
			ОчередностьТяжелыхОтборов = ОчередностьТяжелыхОтборов + 1;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	СчетчикСекцийИли = 1;
	
	Пока ЕстьСекцииИли Цикл
	
		МассивОтборовСекции = Новый Массив;
		
		ЕстьПоляЧерезТочку = Ложь;
	
		Для каждого СтруктураОтбора Из ПростыеОтборы Цикл
		
			Если СтруктураОтбора.НомерСекцииИли = СчетчикСекцийИли Тогда
			
				МассивОтборовСекции.Добавить(СтруктураОтбора);	
			
			КонецЕсли;		
		
		КонецЦикла;
		
		Для каждого СтруктураОтбора Из ТяжелыеОтборы Цикл
		
			Если СтруктураОтбора.НомерСекцииИли = СчетчикСекцийИли Тогда
			
				МассивОтборовСекции.Добавить(СтруктураОтбора);
				
				Если Найти(СтруктураОтбора.ЛевоеЗначение, ".") > 0 Тогда
				
					ЕстьПоляЧерезТочку = Истина;	
				
				КонецЕсли;
			
			КонецЕсли;		
		
		КонецЦикла;
		
		Если МассивОтборовСекции.Количество() > 0 Тогда
			
			Если ЕстьПоляЧерезТочку Тогда
				
				МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
				
				Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
					
					МассивТекстаЗапроса.Добавить("
					|	Таблица.");		
					МассивТекстаЗапроса.Добавить(ИмяРеквизита);
					МассивТекстаЗапроса.Добавить(",");
					
				КонецЦикла;
				
				Для каждого СтруктураОтбора Из МассивОтборовСекции Цикл
					
					Если Найти(СтруктураОтбора.ЛевоеЗначение, ".") > 0 Тогда
						
						Если СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
							
							МассивТекстаЗапроса.Добавить("
							|	ЕСТЬNULL(");	
							
						КонецЕсли;			
						
						МассивТекстаЗапроса.Добавить("Таблица.");
						МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
						
						Если СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
							
							МассивТекстаЗапроса.Добавить(",&");
							МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
							МассивТекстаЗапроса.Добавить(Строка(СчетчикОтборов + 1));
							МассивТекстаЗапроса.Добавить(")");	
							
						КонецЕсли;			
						
						МассивТекстаЗапроса.Добавить(" КАК ");
						МассивТекстаЗапроса.Добавить(ЛевоеЗначениеБезТочек);
						
						Если Не СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
							
							МассивИменРеквизитов.Добавить(ЛевоеЗначениеБезТочек);	
							
						КонецЕсли;		
						
					КонецЕсли;		
					
				КонецЦикла;
				
				МассивТекстаЗапроса.Добавить("
				|ПОМЕСТИТЬ ");
				
				ИмяВременнойТаблицы = "ВТ_ТяжелыйОтбор" + Строка(СчетчикОтборов);
				
				СчетчикОтборов = СчетчикОтборов + 1;
				
				МассивТекстаЗапроса.Добавить(ИмяВременнойТаблицы);
				МассивТекстаЗапроса.Добавить("
				|ИЗ
				|	");
				МассивТекстаЗапроса.Добавить(ИмяПоследнейТаблицы);
				МассивТекстаЗапроса.Добавить(" КАК Таблица
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|");
				
				ИмяПоследнейТаблицы = ИмяВременнойТаблицы;		
				
			КонецЕсли;
			
			МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
			
			Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
				
				МассивТекстаЗапроса.Добавить("
				|	Таблица.");		
				МассивТекстаЗапроса.Добавить(ИмяРеквизита);
				МассивТекстаЗапроса.Добавить(",");
				
			КонецЦикла;
			
			МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
			
			МассивТекстаЗапроса.Добавить("
			|ПОМЕСТИТЬ ");
			
			ИмяВременнойТаблицы = "ВТ_ТяжелыйОтбор" + Строка(СчетчикОтборов);
			
			МассивТекстаЗапроса.Добавить(ИмяВременнойТаблицы);
			МассивТекстаЗапроса.Добавить("
			|ИЗ
			|	");
			МассивТекстаЗапроса.Добавить(ИмяПоследнейТаблицы);
			МассивТекстаЗапроса.Добавить(" КАК Таблица
			|ГДЕ
			|	(");
			
			Для каждого СтруктураОтбора Из МассивОтборовСекции Цикл
			
				ДобавитьУсловиеОтбора(СтруктураОтбора, Запрос, МассивТекстаЗапроса, ЛевоеЗначениеБезТочек, ПолноеИмяСправочника, СчетчикОтборов);	
				
				МассивТекстаЗапроса.Добавить(" ИЛИ ");
				
				СчетчикОтборов = СчетчикОтборов + 1;
				
			КонецЦикла;
			
			МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
			
			МассивТекстаЗапроса.Добавить(")");
			
			МассивТекстаЗапроса.Добавить("
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|");
			
			ИмяПоследнейТаблицы = ИмяВременнойТаблицы;
			
			СчетчикСекцийИли = СчетчикСекцийИли + 1;
		
		Иначе
		
			ЕстьСекцииИли = Ложь;	
		
		КонецЕсли;
	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(СтруктураОтбораПоЗаказу) Тогда
	
		Если СтруктураОтбораПоЗаказу.Применить Тогда
		
			Если Не ИмяПоследнейТаблицы = ПолноеИмяСправочника Тогда
				
				МассивТекстаЗапроса.Вставить(МассивТекстаЗапроса.Количество() - 1, "
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Таблица.Ссылка");		
				
			КонецЕсли;
			
			МассивТекстаЗапроса.Добавить("ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения
			|ПОМЕСТИТЬ ВТ_ПредметыСнабженияСтруктурыЗаказов
			|ИЗ
			|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
			|ГДЕ
			|	");
			
			Если СтруктураОтбораПоЗаказу.ВидСравнения = "НеРавно" Или СтруктураОтбораПоЗаказу.ВидСравнения = "НеВСписке" Тогда
			
				МассивТекстаЗапроса.Добавить("НЕ ");	
			
			КонецЕсли;
			
			МассивТекстаЗапроса.Добавить("СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец");
			
			Если СтруктураОтбораПоЗаказу.ВидСравнения = "Равно" Или СтруктураОтбораПоЗаказу.ВидСравнения = "НеРавно" Тогда
			
				МассивТекстаЗапроса.Добавить(" = &Корабль");
				
				Запрос.УстановитьПараметр("Корабль", СтруктураОтбораПоЗаказу.ЗначениеОтбора);
			
			ИначеЕсли СтруктураОтбораПоЗаказу.ВидСравнения = "ВСписке" Или СтруктураОтбораПоЗаказу.ВидСравнения = "НеВСписке" Тогда
			
				МассивТекстаЗапроса.Добавить(" В(&Корабли)");
				
				Запрос.УстановитьПараметр("Корабли", СтруктураОтбораПоЗаказу.МассивЗначенийОтбора);
			
			КонецЕсли;
			
			МассивТекстаЗапроса.Добавить("
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПредметСнабжения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|");
			
			МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
			
			Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
				
				МассивТекстаЗапроса.Добавить("
				|	Таблица.");		
				МассивТекстаЗапроса.Добавить(ИмяРеквизита);
				МассивТекстаЗапроса.Добавить(",");
				
			КонецЦикла;
			
			МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
			
			МассивТекстаЗапроса.Добавить("
			|ПОМЕСТИТЬ ВТ_ОтборПоЗаказу
			|ИЗ
			|	");
			МассивТекстаЗапроса.Добавить(ИмяПоследнейТаблицы);
			МассивТекстаЗапроса.Добавить(" КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПредметыСнабженияСтруктурыЗаказов КАК ВТ_ПредметыСнабженияСтруктурыЗаказов
			|		ПО Таблица.Ссылка = ВТ_ПредметыСнабженияСтруктурыЗаказов.ПредметСнабжения");
			
			ИмяПоследнейТаблицы = "ВТ_ОтборПоЗаказу";
			
		КонецЕсли;
		
	Иначе
		
		МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);	
		
	КонецЕсли;
	
	МассивТекстаЗапроса.Добавить("
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	");
	
	Для каждого ПолеПоиска Из ПоляПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("Таблица.");	
		МассивТекстаЗапроса.Добавить(ПолеПоиска);
		МассивТекстаЗапроса.Добавить(",
		|	");	
		
	КонецЦикла;	
	
	МассивТекстаЗапроса.Добавить(СтрЗаменить(МассивТекстаЗапроса.Получить(МассивТекстаЗапроса.Количество() - 1), ",", ""));
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 2);
	
	МассивТекстаЗапроса.Добавить(";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	");
	
	Для каждого ПолеОтбора Из ПоляПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("ВложенныйЗапрос.");
		МассивТекстаЗапроса.Добавить(ПолеОтбора);
		МассивТекстаЗапроса.Добавить(",
		|	");
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("ВложенныйЗапрос.КоличествоСсылок
	|ИЗ
	|	(ВЫБРАТЬ
	|		");	
	
	Для каждого ПолеОтбора Из ПоляПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("Таблица.");
		МассивТекстаЗапроса.Добавить(ПолеОтбора);
		МассивТекстаЗапроса.Добавить(",
		|		");
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("КОЛИЧЕСТВО(Таблица.Ссылка) КАК КоличествоСсылок
	|	ИЗ ВТ_Таблица КАК Таблица
	|	
	|	СГРУППИРОВАТЬ ПО
	|		");
	
	Для каждого ПолеОтбора Из ПоляПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("Таблица.");
		МассивТекстаЗапроса.Добавить(ПолеОтбора);
		МассивТекстаЗапроса.Добавить(",
		|		");
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить(СтрЗаменить(МассивТекстаЗапроса.Получить(МассивТекстаЗапроса.Количество() - 1), ",", ""));
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 2);
	
	МассивТекстаЗапроса.Добавить("
	|		
	|		ИМЕЮЩИЕ
	|			КОЛИЧЕСТВО(Таблица.Ссылка) > 1) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.КоличествоСсылок");
	
	Запрос.Текст = СтрЗаменить(СтрСоединить(МассивТекстаЗапроса), ИмяПоследнейТаблицы, "ВТ_Таблица");
	
	Возврат Запрос;	

КонецФункции // СформироватьЗапросСТяжелымиОтборами()

Функция ЭтоПростойВидСравнения(ВидСравнения)

	Возврат ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или
		ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Или
		ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Или
		ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Или
		ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Или
		ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Или
		ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или
		ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;

КонецФункции // ЭтоПростойВидСравнения()

Процедура ДобавитьУсловияПростыхОтборов(ПростыеОтборы, Запрос, МассивТекстаЗапроса, СчетчикОтборов, ЕстьТяжелыеОтборы = Ложь)

	ЕстьСекцииИли = Ложь;
	
	Для каждого СтруктураОтбора Из ПростыеОтборы Цикл
		
		Если ЗначениеЗаполнено(СтруктураОтбора.НомерСекцииИли) Тогда
		
			ЕстьСекцииИли = Истина;
			Продолжить;
		 	
		КонецЕсли;
		
		СчетчикОтборов = СчетчикОтборов + 1;
		
		ТекстСравнения = ПолучитьТекстСравнения(СтруктураОтбора.ВидСравнения);
		
		МассивТекстаЗапроса.Добавить("
		|	И ");
		
		Если СтруктураОтбора.СекцияНе Тогда
		
			МассивТекстаЗапроса.Добавить("НЕ ");	
		
		ИначеЕсли СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			
			МассивТекстаЗапроса.Добавить("НЕ ");	
			
		КонецЕсли;		
		
		МассивТекстаЗапроса.Добавить("Таблица.");
		МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
		
		МассивТекстаЗапроса.Добавить(ТекстСравнения);
		МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
		МассивТекстаЗапроса.Добавить(Строка(СчетчикОтборов));
		
		Если СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			
			МассивТекстаЗапроса.Добавить(")");	
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр(СтруктураОтбора.ЛевоеЗначение + Строка(СчетчикОтборов), СтруктураОтбора.ПравоеЗначение);	
		
	КонецЦикла;	
	
	Если Не ЕстьТяжелыеОтборы Тогда
		
		СчетчикСекцийИли = 1;
		
		Пока ЕстьСекцииИли Цикл
			
			МассивОтборовСекции = Новый Массив;
			
			Для каждого СтруктураОтбора Из ПростыеОтборы Цикл
				
				Если СтруктураОтбора.НомерСекцииИли = СчетчикСекцийИли Тогда
					
					МассивОтборовСекции.Добавить(СтруктураОтбора);	
					
				КонецЕсли;		
				
			КонецЦикла;	
			
			Если МассивОтборовСекции.Количество() > 0 Тогда
				
				МассивТекстаЗапроса.Добавить("
				|	И (");	
				
				Для каждого СтруктураОтбора Из МассивОтборовСекции Цикл
					
					СчетчикОтборов = СчетчикОтборов + 1;
					
					МассивТекстаЗапроса.Добавить("Таблица.");
					МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
					
					МассивТекстаЗапроса.Добавить(ТекстСравнения);
					МассивТекстаЗапроса.Добавить(СтруктураОтбора.ЛевоеЗначение);
					МассивТекстаЗапроса.Добавить(Строка(СчетчикОтборов));
					
					Если СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						
						МассивТекстаЗапроса.Добавить(")");	
						
					КонецЕсли;
					
					Запрос.УстановитьПараметр(СтруктураОтбора.ЛевоеЗначение + Строка(СчетчикОтборов), СтруктураОтбора.ПравоеЗначение);
					
					МассивТекстаЗапроса.Добавить("
					|			ИЛИ ");
					
				КонецЦикла;
				
				МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
				
				МассивТекстаЗапроса.Добавить(")");
				
				СчетчикСекцийИли = СчетчикСекцийИли + 1;
				
			Иначе
				
				ЕстьСекцииИли = Ложь;	
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры // ДобавитьУсловияПростыхОтборов()

Процедура ДобавитьУсловиеОтбора(СтруктураОтбора, Запрос, МассивТекстаЗапроса, ЛевоеЗначениеБезТочек, ПолноеИмяСправочника, СчетчикТяжелыхОтборов)

	Если СтруктураОтбора.СекцияНе Тогда
		
		МассивТекстаЗапроса.Добавить("НЕ ");	
		
	ИначеЕсли СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Или
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Или 
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Или 
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Или
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Или
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		
		МассивТекстаЗапроса.Добавить("НЕ ");	
		
	КонецЕсли;		
	
	ТекстСравнения = ПолучитьТекстСравнения(СтруктураОтбора.ВидСравнения);
	
	МассивТекстаЗапроса.Добавить("Таблица.");
	МассивТекстаЗапроса.Добавить(?(ЗначениеЗаполнено(ЛевоеЗначениеБезТочек), ЛевоеЗначениеБезТочек, СтруктураОтбора.ЛевоеЗначение));
	МассивТекстаЗапроса.Добавить(ТекстСравнения);
	
	МассивТекстаЗапроса.Добавить(?(ЗначениеЗаполнено(ЛевоеЗначениеБезТочек), ЛевоеЗначениеБезТочек, СтруктураОтбора.ЛевоеЗначение));
	
	МассивТекстаЗапроса.Добавить(Строка(СчетчикТяжелыхОтборов));
	
	Если СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Или
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Или
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		МассивТекстаЗапроса.Добавить(")");	
		
	КонецЕсли;
	
	Если СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
		
		ПравоеЗначение = СтруктураОтбора.ПравоеЗначение + "%";
		
	ИначеЕсли СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Или 
		СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		
		ПравоеЗначение = "%" + СтруктураОтбора.ПравоеЗначение + "%";
		
	ИначеЕсли СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Или СтруктураОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		ПравоеЗначение = ОбщиеФункцииПовтИсп.ПолучитьПустоеЗначениеРеквизитаСправочника(СтрЗаменить(ПолноеИмяСправочника, "Справочник.", ""), Строка(СтруктураОтбора.ЛевоеЗначение));		
		
	Иначе
		
		ПравоеЗначение = СтруктураОтбора.ПравоеЗначение;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр(?(ЗначениеЗаполнено(ЛевоеЗначениеБезТочек), ЛевоеЗначениеБезТочек, СтруктураОтбора.ЛевоеЗначение) + Строка(СчетчикТяжелыхОтборов), ПравоеЗначение);			

КонецПроцедуры

Функция ПолучитьТекстСравнения(ВидСравнения)
	
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		ТекстСравнения = " = &";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		
		ТекстСравнения = " > &";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		
		ТекстСравнения = " >= &";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		
		ТекстСравнения = " < &";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		
		ТекстСравнения = " <= &";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Или ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		
		ТекстСравнения = " <> &";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		
		ТекстСравнения = " В(&";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Или
		ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		ТекстСравнения = " В ИЕРАРХИИ (&";
		
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Или 
		ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Или 
		ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Или ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		
		ТекстСравнения = " ПОДОБНО &";
		
	КонецЕсли;	

	Возврат ТекстСравнения;
	
КонецФункции // ПолучитьТекстСравнения()

Процедура ДобавитьДублиВТаблицу(МВТ, ТаблицаДублей, НаборСсылок, ПараметрыПоиска, ПолноеИмяСправочника, ПростыеОтборы, ТяжелыеОтборы, МассивОтмеченныхРеквизитов)

	Запрос = Новый Запрос;

	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	МассивТекстаЗапроса = Новый Массив;
	
	МассивИменРеквизитов = Новый Массив;
	МассивИменРеквизитов.Добавить("Ссылка");
		
	Для каждого Параметр Из ПараметрыПоиска Цикл
	
		Если Не Параметр.Ключ = "Ссылка" Тогда
		
			МассивИменРеквизитов.Добавить(Параметр.Ключ);
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Для каждого СтруктураОтбора Из ПростыеОтборы Цикл
	
		Если МассивИменРеквизитов.Найти(СтруктураОтбора.ЛевоеЗначениеБезТочек) = Неопределено Тогда
		
			МассивИменРеквизитов.Добавить(СтруктураОтбора.ЛевоеЗначениеБезТочек);	
		
		КонецЕсли;		
	
	КонецЦикла;
	
	Для каждого СтруктураОтбора Из ТяжелыеОтборы Цикл
		
		Если МассивИменРеквизитов.Найти(СтруктураОтбора.ЛевоеЗначениеБезТочек) = Неопределено Тогда
		
			МассивИменРеквизитов.Добавить(СтруктураОтбора.ЛевоеЗначениеБезТочек);	
		
		КонецЕсли;	
		
	КонецЦикла;
	
	Для каждого Реквизит Из МассивОтмеченныхРеквизитов Цикл
	
		Если МассивИменРеквизитов.Найти(Реквизит) = Неопределено И (Найти(Реквизит, ".") = 0 Или МассивИменРеквизитов.Найти(СтрЗаменить(Реквизит, ".", "")) = Неопределено) Тогда
		
			МассивИменРеквизитов.Добавить(Реквизит);				
		
		КонецЕсли;	
	
	КонецЦикла;
	
	МассивТекстаЗапроса = Новый Массив;
	
	ИмяПоследнейТаблицы = ПолноеИмяСправочника;
	
	МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
		
	Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
		
		МассивТекстаЗапроса.Добавить("
		|	Таблица.");		
		МассивТекстаЗапроса.Добавить(ИмяРеквизита + ?(ИмяРеквизита = "Родитель", " КАК РодительСсылки", ""));
		МассивТекстаЗапроса.Добавить(",");
		
	КонецЦикла;
	
	МассивТекстаЗапроса.Удалить(МассивТекстаЗапроса.Количество() - 1);
	
	МассивТекстаЗапроса.Добавить("
	|ИЗ
	|	ВТ_Таблица КАК Таблица
	|ГДЕ
	|	ИСТИНА");
	
	Для каждого Параметр Из ПараметрыПоиска Цикл
	
		МассивТекстаЗапроса.Добавить("
		|	И ");
		МассивТекстаЗапроса.Добавить("Таблица.");
		МассивТекстаЗапроса.Добавить(Параметр.Ключ);
		МассивТекстаЗапроса.Добавить(" = &");
		МассивТекстаЗапроса.Добавить(Параметр.Ключ);
		
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Родитель = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Родитель = Неопределено Тогда
			
			Родитель = Выборка.Ссылка;
		
			НоваяСтрока = ТаблицаДублей.Добавить();
			НоваяСтрока.Ссылка = Родитель;
			
			ПерваяСсылкаДобавлена = Истина;
		
		КонецЕсли;
	
		НоваяСтрока = ТаблицаДублей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Родитель = Родитель;
		
		НаборСсылок.Добавить(Выборка.Ссылка);
	
	КонецЦикла;	

КонецПроцедуры

Процедура УдалениеДублейКастом(ПарыЗамен, МестаИспользования, АдресРезультата, ОбластьПоискаДублей)

	Результат = Новый Структура("Выполнено,Описание", Ложь, "");
	
	ТипОбластиПоиска = Новый ОписаниеТипов(СтрЗаменить(ОбластьПоискаДублей, "Справочник", "СправочникСсылка"));
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ИменаПолейТаблиц = Новый ТаблицаЗначений;
	ИменаПолейТаблиц.Колонки.Добавить("ОбъектМетаданных");
	ИменаПолейТаблиц.Колонки.Добавить("ИмяТаблицы");
	ИменаПолейТаблиц.Колонки.Добавить("ИмяПоля");
	ИменаПолейТаблиц.Колонки.Добавить("УсловнаяЗамена", ТипБулево);
	ИменаПолейТаблиц.Колонки.Добавить("Движение", ТипБулево);
	
	МассивИменСправочников = ОбщиеФункцииПовтИсп.ПолучитьИменаСправочников();	
	МассивИменДокументов = ОбщиеФункцииПовтИсп.ПолучитьИменаДокументов();
	
	Замены = Новый Соответствие;
	
	Для каждого Замена Из ПарыЗамен Цикл
		
		Если Не Замена.Ключ = Замена.Значение Тогда
		
			Замены.Вставить(Замена.Ключ, Замена.Значение);		
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из МестаИспользования Цикл  
		
		Если Замены.Получить(Строка.Ссылка) = Неопределено Тогда
		
			Продолжить;	
		
		КонецЕсли;
		
		Если Не МассивИменСправочников.Найти(Строка(ТипЗнч(Строка.Данные))) = Неопределено Тогда
			
			ОбъектМетаданныхСтроки = Строка.Данные.Метаданные();
			
			Если Не ИменаПолейТаблиц.Найти(ОбъектМетаданныхСтроки, "ОбъектМетаданных") = Неопределено Тогда
			
				Продолжить;	
			
			КонецЕсли;
			
			ПолноеИмяОбъектаМетаданныхСтроки = ОбъектМетаданныхСтроки.ПолноеИмя();
			
			Для каждого Реквизит Из ОбъектМетаданныхСтроки.Реквизиты Цикл
				
				Если Реквизит.Тип = ТипОбластиПоиска Тогда
					
					НоваяСтрока = ИменаПолейТаблиц.Добавить();
					НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхСтроки;
					НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхСтроки;
					НоваяСтрока.ИмяПоля = Реквизит.Имя;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			Для каждого Реквизит Из ОбъектМетаданныхСтроки.СтандартныеРеквизиты Цикл
				
				Если Реквизит.Имя = "Ссылка" Тогда
					
					Продолжить;	
					
				КонецЕсли;
				
				Если Реквизит.Тип = ТипОбластиПоиска Тогда
					
					НоваяСтрока = ИменаПолейТаблиц.Добавить();
					НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхСтроки;
					НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхСтроки;
					НоваяСтрока.ИмяПоля = Реквизит.Имя;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			Для каждого ТабличнаяЧасть Из ОбъектМетаданныхСтроки.ТабличныеЧасти Цикл
				
				Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					
					Если Реквизит.Тип = ТипОбластиПоиска Тогда
						
						НоваяСтрока = ИменаПолейТаблиц.Добавить();
						НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхСтроки;
						НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхСтроки + "." + ТабличнаяЧасть.Имя;
						НоваяСтрока.ИмяПоля = Реквизит.Имя;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли Не МассивИменДокументов.Найти(Строка(ТипЗнч(Строка.Данные))) = Неопределено Тогда
			
			ОбъектМетаданныхСтроки = Строка.Данные.Метаданные();
			
			Если Не ИменаПолейТаблиц.Найти(ОбъектМетаданныхСтроки, "ОбъектМетаданных") = Неопределено Тогда
			
				Продолжить;	
			
			КонецЕсли;
			
			ПолноеИмяОбъектаМетаданныхСтроки = ОбъектМетаданныхСтроки.ПолноеИмя();
			
			УсловнаяЗамена = Ложь;
			
			Для каждого ОбъектМетаданныхДвижения Из ОбъектМетаданныхСтроки.Движения Цикл
			
				Если ОбъектМетаданныхДвижения.РазрешитьИтогиСрезПервых Или ОбъектМетаданныхДвижения.РазрешитьИтогиСрезПоследних Тогда
				
					УсловнаяЗамена = Истина;
					Прервать;
				
				КонецЕсли;	
			
			КонецЦикла;
			
			Для каждого Реквизит Из ОбъектМетаданныхСтроки.Реквизиты Цикл
				
				Если Реквизит.Тип = ТипОбластиПоиска Тогда
					
					НоваяСтрока = ИменаПолейТаблиц.Добавить();
					НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхСтроки;
					НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхСтроки;
					НоваяСтрока.ИмяПоля = Реквизит.Имя;
					НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			Для каждого ТабличнаяЧасть Из ОбъектМетаданныхСтроки.ТабличныеЧасти Цикл
				
				Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					
					Если Реквизит.Тип = ТипОбластиПоиска Тогда
						
						НоваяСтрока = ИменаПолейТаблиц.Добавить();
						НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхСтроки;
						НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхСтроки + "." + ТабличнаяЧасть.Имя;
						НоваяСтрока.ИмяПоля = Реквизит.Имя;
						НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для каждого ОбъектМетаданныхДвижения Из ОбъектМетаданныхСтроки.Движения Цикл
				
				ПолноеИмяОбъектаМетаданныхДвижения = ОбъектМетаданныхДвижения.ПолноеИмя();
				
				Для каждого Реквизит Из ОбъектМетаданныхДвижения.Измерения Цикл
					
					Если Реквизит.Тип = ТипОбластиПоиска Тогда
						
						НоваяСтрока = ИменаПолейТаблиц.Добавить();
						НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
						НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения;
						НоваяСтрока.ИмяПоля = Реквизит.Имя;
						НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
						НоваяСтрока.Движение = Истина;
						
						Если ОбъектМетаданныхДвижения.РазрешитьИтогиСрезПервых Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения + ".СрезПервых";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;
							НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
							
						КонецЕсли;
						
						Если ОбъектМетаданныхДвижения.РазрешитьИтогиСрезПоследних Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения + ".СрезПоследних";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
				Для каждого Реквизит Из ОбъектМетаданныхДвижения.Ресурсы Цикл
					
					Если Реквизит.Тип = ТипОбластиПоиска Тогда
						
						НоваяСтрока = ИменаПолейТаблиц.Добавить();
						НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
						НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения;
						НоваяСтрока.ИмяПоля = Реквизит.Имя;
						НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
						НоваяСтрока.Движение = Истина;
						
						Если ОбъектМетаданныхДвижения.РазрешитьИтогиСрезПервых Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения + ".СрезПервых";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
							
						КонецЕсли;
						
						Если ОбъектМетаданныхДвижения.РазрешитьИтогиСрезПоследних Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения + ".СрезПоследних";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для каждого Реквизит Из ОбъектМетаданныхДвижения.Реквизиты Цикл
					
					Если Реквизит.Тип = ТипОбластиПоиска Тогда
						
						НоваяСтрока = ИменаПолейТаблиц.Добавить();
						НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
						НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения;
						НоваяСтрока.ИмяПоля = Реквизит.Имя;
						НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
						НоваяСтрока.Движение = Истина;
						
						Если ОбъектМетаданныхДвижения.РазрешитьИтогиСрезПервых Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения + ".СрезПервых";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
							
						КонецЕсли;
						
						Если ОбъектМетаданныхДвижения.РазрешитьИтогиСрезПоследних Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхДвижения;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхДвижения + ".СрезПоследних";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = УсловнаяЗамена;
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			ДанныеСтрока = Строка(Строка.Данные);
			
			Если Лев(ДанныеСтрока, 25) = "РегистрСведенийКлючЗаписи" Тогда
				
				ОбъектМетаданныхРегистра = Неопределено;
				
				Выполнить("НаборЗаписей = РегистрыСведений." + СтрЗаменить(ДанныеСтрока, "РегистрСведенийКлючЗаписи.", "") + ".СоздатьНаборЗаписей();
				|ОбъектМетаданныхРегистра = НаборЗаписей.Метаданные();");
				
				Если Не ИменаПолейТаблиц.Найти(ОбъектМетаданныхРегистра, "ОбъектМетаданных") = Неопределено Тогда
					
					Продолжить;	
					
				КонецЕсли;
				
				ПолноеИмяОбъектаМетаданныхРегистра = ОбъектМетаданныхРегистра.ПолноеИмя();
				
				Для каждого Реквизит Из ОбъектМетаданныхРегистра.Измерения Цикл
					
					Если Реквизит.Тип = ТипОбластиПоиска Тогда
						
						НоваяСтрока = ИменаПолейТаблиц.Добавить();
						НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
						НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра;
						НоваяСтрока.ИмяПоля = Реквизит.Имя;
						НоваяСтрока.УсловнаяЗамена = Истина;
						
						Если ОбъектМетаданныхРегистра.РазрешитьИтогиСрезПервых Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра + ".СрезПервых";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;
							НоваяСтрока.УсловнаяЗамена = Истина;
							
						КонецЕсли;
						
						Если ОбъектМетаданныхРегистра.РазрешитьИтогиСрезПоследних Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра + ".СрезПоследних";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = Истина;
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
				Для каждого Реквизит Из ОбъектМетаданныхРегистра.Ресурсы Цикл
					
					Если Реквизит.Тип = ТипОбластиПоиска Тогда
						
						НоваяСтрока = ИменаПолейТаблиц.Добавить();
						НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
						НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра;
						НоваяСтрока.ИмяПоля = Реквизит.Имя;
						НоваяСтрока.УсловнаяЗамена = Истина;
						
						Если ОбъектМетаданныхРегистра.РазрешитьИтогиСрезПервых Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра + ".СрезПервых";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = Истина;
							
						КонецЕсли;
						
						Если ОбъектМетаданныхРегистра.РазрешитьИтогиСрезПоследних Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра + ".СрезПоследних";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = Истина;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для каждого Реквизит Из ОбъектМетаданныхРегистра.Реквизиты Цикл
					
					Если Реквизит.Тип = ТипОбластиПоиска Тогда
						
						НоваяСтрока = ИменаПолейТаблиц.Добавить();
						НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
						НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра;
						НоваяСтрока.ИмяПоля = Реквизит.Имя;
						НоваяСтрока.УсловнаяЗамена = Истина;
						
						Если ОбъектМетаданныхРегистра.РазрешитьИтогиСрезПервых Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра + ".СрезПервых";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = Истина;
							
						КонецЕсли;
						
						Если ОбъектМетаданныхРегистра.РазрешитьИтогиСрезПоследних Тогда
						
							НоваяСтрока = ИменаПолейТаблиц.Добавить();
							НоваяСтрока.ОбъектМетаданных = ОбъектМетаданныхРегистра;
							НоваяСтрока.ИмяТаблицы = ПолноеИмяОбъектаМетаданныхРегистра + ".СрезПоследних";
							НоваяСтрока.ИмяПоля = Реквизит.Имя;	
							НоваяСтрока.УсловнаяЗамена = Истина;
							
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	МассивИменМетаданных = Новый Массив();
	МассивИменМетаданных.Добавить(ОбластьПоискаДублей);
	МассивИменМетаданных.Добавить("РегистрСведений.ИсторияУдаленияДублей");
	МассивИменМетаданных.Добавить("РегистрСведений.НевыполненныеЗаменыСсылок");
	
	Для каждого Строка Из ИменаПолейТаблиц Цикл
		
		МассивИменМетаданных.Добавить(Строка.ОбъектМетаданных.ПолноеИмя());			
	
	КонецЦикла;
	
	Если МассивИменМетаданных.Найти("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП") = Неопределено Тогда
	
		МассивИменМетаданных.Добавить("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");	
	
	КонецЕсли;
	
	Если МассивИменМетаданных.Найти("Справочник.КаталогПредметовСнабжения") = Неопределено Тогда
	
		МассивИменМетаданных.Добавить("Справочник.КаталогПредметовСнабжения");	
	
	КонецЕсли;
	
	Если МассивИменМетаданных.Найти("РегистрСведений.ДополнительныеНаименования") = Неопределено Тогда
	
		МассивИменМетаданных.Добавить("РегистрСведений.ДополнительныеНаименования");	
	
	КонецЕсли;
	
	ТаблицаСтруктурыХранения = ПолучитьСтруктуруХраненияБазыДанных(МассивИменМетаданных);
	
	ИмяТаблицыСУБД = ТаблицаСтруктурыХранения.Найти(ОбластьПоискаДублей, "ИмяТаблицы").ИмяТаблицыХранения;
	
	СтрокаТаблицыИсторииСУБД = ТаблицаСтруктурыХранения.Найти("РегистрСведений.ИсторияУдаленияДублей", "ИмяТаблицы");
	
	ИмяТаблицыИсторииСУБД = СтрокаТаблицыИсторииСУБД.ИмяТаблицыХранения;
	
	СтрокаТаблицыНевыполненныхЗаменСсылокСУБД = ТаблицаСтруктурыХранения.Найти("РегистрСведений.НевыполненныеЗаменыСсылок", "ИмяТаблицы");
	
	ИмяТаблицыНевыполненныхЗаменСсылокСУБД = СтрокаТаблицыНевыполненныхЗаменСсылокСУБД.ИмяТаблицыХранения;
	
	СтрокаТаблицыСтруктурыЗаказаСУБД = ТаблицаСтруктурыХранения.Найти("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП", "ИмяТаблицы");
	
	СтрокаТаблицыПредметовСнабженияСУБД = ТаблицаСтруктурыХранения.Найти("Справочник.КаталогПредметовСнабжения", "ИмяТаблицы");
	
	СтрокаТаблицыИзготовителейИПоставщиковПредметовСнабженияСУБД = ТаблицаСтруктурыХранения.Найти("Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики", "ИмяТаблицы");
	
	СтрокаТаблицыДополнительныхНаименованийСУБД = ТаблицаСтруктурыХранения.Найти("РегистрСведений.ДополнительныеНаименования", "ИмяТаблицы");
	
	ИменаПолейТаблицСУБД = Новый ТаблицаЗначений;
	ИменаПолейТаблицСУБД.Колонки.Добавить("ИмяТаблицыСУБД");
	ИменаПолейТаблицСУБД.Колонки.Добавить("ИмяПоляСУБД");
	ИменаПолейТаблицСУБД.Колонки.Добавить("УсловнаяЗамена", ТипБулево);
	ИменаПолейТаблицСУБД.Колонки.Добавить("Движение", ТипБулево);
	ИменаПолейТаблицСУБД.Колонки.Добавить("ИмяТаблицы");
	
	Для каждого Строка Из ИменаПолейТаблиц Цикл
		
		СтрокаТаблицыСтруктурыХранения = ТаблицаСтруктурыХранения.Найти(Строка.ИмяТаблицы, "ИмяТаблицы");
		
		НоваяСтрока = ИменаПолейТаблицСУБД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "УсловнаяЗамена,Движение,ИмяТаблицы");
		НоваяСтрока.ИмяТаблицыСУБД = СтрокаТаблицыСтруктурыХранения.ИмяТаблицыХранения;
		НоваяСтрока.ИмяПоляСУБД = СтрокаТаблицыСтруктурыХранения.Поля.Найти(Строка.ИмяПоля, "ИмяПоля").ИмяПоляХранения;
		
	КонецЦикла;
	
	ТаблицаЗамены = Новый ТаблицаЗначений;
	ТаблицаЗамены.Колонки.Добавить("Заменяемый");
	ТаблицаЗамены.Колонки.Добавить("Заменяющий");
	ТаблицаЗамены.Колонки.Добавить("UIDЗаменяемого");
	ТаблицаЗамены.Колонки.Добавить("UIDЗаменяющего");
	
	ТипСтруктураКораблей = Новый ОписаниеТипов("СправочникСсылка.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
	
	ТаблицаЭлементовСтруктурыКораблей = Новый ТаблицаЗначений;
	ТаблицаЭлементовСтруктурыКораблей.Колонки.Добавить("Замененный", ТипСтруктураКораблей);
	ТаблицаЭлементовСтруктурыКораблей.Колонки.Добавить("Заменивший", ТипСтруктураКораблей);
	
	ТипПредметСнабжения = Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения");
	
	ТаблицаПредметовСнабжения = Новый ТаблицаЗначений;
	ТаблицаПредметовСнабжения.Колонки.Добавить("Замененный", ТипПредметСнабжения);
	ТаблицаПредметовСнабжения.Колонки.Добавить("Заменивший", ТипПредметСнабжения);
	
	ИмяСправочника = СтрЗаменить(ОбластьПоискаДублей, "Справочник.", "");	
	
	Для каждого Замена Из Замены Цикл
		
		UIDКлюча = Замена.Ключ.УникальныйИдентификатор();
		UIDЗначения = Замена.Значение.УникальныйИдентификатор();
	
		НоваяСтрока = ТаблицаЗамены.Добавить();
		НоваяСтрока.Заменяемый = РаботаСMSSQL.ПолучитьЗначениеСУБДСсылки(, UIDКлюча);
		НоваяСтрока.Заменяющий = РаботаСMSSQL.ПолучитьЗначениеСУБДСсылки(, UIDЗначения);
		НоваяСтрока.UIDЗаменяемого = UIDКлюча;
		НоваяСтрока.UIDЗаменяющего = UIDЗначения;
		
		Если ИмяСправочника = "СтруктураЗаказаПоКомплектующимИзделиямИЗИП" Тогда
		
			НоваяСтрока = ТаблицаЭлементовСтруктурыКораблей.Добавить();
			НоваяСтрока.Замененный = Замена.Ключ;
			НоваяСтрока.Заменивший = Замена.Значение;
		
		КонецЕсли;
		
		Если ИмяСправочника = "КаталогПредметовСнабжения" Тогда
		
			НоваяСтрока = ТаблицаПредметовСнабжения.Добавить();
			НоваяСтрока.Замененный = Замена.Ключ;
			НоваяСтрока.Заменивший = Замена.Значение;
		
		КонецЕсли;
	
	КонецЦикла;
	
	XML = Новый ЗаписьXML;
	XML.УстановитьСтроку();
	XML.ЗаписатьНачалоЭлемента("root");
	
	XML.ЗаписатьНачалоЭлемента("params");
	
	XML.ЗаписатьАтрибут("TableName", XMLСтрока("_" + ИмяТаблицыСУБД));
	XML.ЗаписатьАтрибут("HistoryTableName", XMLСтрока("_" + ИмяТаблицыИсторииСУБД));
	XML.ЗаписатьАтрибут("ImpossibleChangingTableName", XMLСтрока("_" + ИмяТаблицыНевыполненныхЗаменСсылокСУБД));
	XML.ЗаписатьАтрибут("ReferenceName", XMLСтрока(ИмяСправочника));
	XML.ЗаписатьАтрибут("Author", XMLСтрока(РаботаСMSSQL.ПолучитьЗначениеСУБДСсылки(ПараметрыСеанса.ТекущийПользователь)));
	XML.ЗаписатьАтрибут("English", XMLСтрока(РаботаСMSSQL.ПолучитьЗначениеСУБДСсылки(Справочники.Языки.Английский)));
	
	Для каждого ПолеТаблицы Из СтрокаТаблицыИсторииСУБД.Поля Цикл
	
		Если ПолеТаблицы.ИмяПоля = "ИмяСправочника" Тогда
		
			XML.ЗаписатьАтрибут("HistoryFieldReferenceName", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));	
		
		ИначеЕсли ПолеТаблицы.ИмяПоля = "UIDЗамененногоЭлемента" Тогда
		
			XML.ЗаписатьАтрибут("HistoryFieldChangeWhatUID", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "UIDЗаменившегоЭлемента" Тогда
		
			XML.ЗаписатьАтрибут("HistoryFieldChangeToUID", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "Автор" Тогда
		
			XML.ЗаписатьАтрибут("HistoryFieldAuthor", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения + "RRef"));
		
		ИначеЕсли ПолеТаблицы.ИмяПоля = "ДатаЗамены" Тогда
		
			XML.ЗаписатьАтрибут("HistoryFieldDate", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));	
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Для каждого ПолеТаблицы Из СтрокаТаблицыНевыполненныхЗаменСсылокСУБД.Поля Цикл
	
		Если ПолеТаблицы.ИмяПоля = "ИмяСправочника" Тогда
		
			XML.ЗаписатьАтрибут("ImpossibleChangingFieldReferenceName", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));	
		
		ИначеЕсли ПолеТаблицы.ИмяПоля = "UIDЗамененногоЭлемента" Тогда
		
			XML.ЗаписатьАтрибут("ImpossibleChangingFieldChangeWhatUID", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "ИмяМестаИспользования" Тогда
		
			XML.ЗаписатьАтрибут("ImpossibleChangingFieldMarkTableName", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "UIDЗаменившегоЭлемента" Тогда
		
			XML.ЗаписатьАтрибут("ImpossibleChangingFieldChangeToUID", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "Автор" Тогда
		
			XML.ЗаписатьАтрибут("ImpossibleChangingFieldAuthor", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения + "RRef"));
		
		ИначеЕсли ПолеТаблицы.ИмяПоля = "ДатаЗамены" Тогда
		
			XML.ЗаписатьАтрибут("ImpossibleChangingFieldDate", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));	
		
		КонецЕсли;	
	
	КонецЦикла;	
	
	Для каждого ПолеТаблицы Из СтрокаТаблицыСтруктурыЗаказаСУБД.Поля Цикл
	
		Если ПолеТаблицы.ИмяПоля = "Количество" Тогда
		
			XML.ЗаписатьАтрибут("ShipStructureFieldCount", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));	
		
		ИначеЕсли ПолеТаблицы.ИмяПоля = "КоличествоВЗИПБорт" Тогда
		
			XML.ЗаписатьАтрибут("ShipStructureFieldCountBoard", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "КоличествоВЗИПБаза" Тогда
		
			XML.ЗаписатьАтрибут("ShipStructureFieldCountBase", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "КоличествоВЗИПДЭ" Тогда
		
			XML.ЗаписатьАтрибут("ShipStructureFieldCountD", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
		
		ИначеЕсли ПолеТаблицы.ИмяПоля = "КоличествоВЗИПР" Тогда
		
			XML.ЗаписатьАтрибут("ShipStructureFieldCountR", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));	
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Для каждого ПолеТаблицы Из СтрокаТаблицыПредметовСнабженияСУБД.Поля Цикл
	
		Если ПолеТаблицы.ИмяПоля = "Обозначение" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemFieldDesignation", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "ОбозначениеТранслитированное" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemFieldDesignationTranslit", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "ДокументНаПоставку" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemFieldDeliveryDocument", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "INCAT" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemFieldINCAT", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "НомерОСК" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemFieldNumberOSK", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
		
		КонецЕсли;	
	
	КонецЦикла;
	
	XML.ЗаписатьАтрибут("SupplyItemPartnerTableName", XMLСтрока("_" + СтрЗаменить(СтрокаТаблицыИзготовителейИПоставщиковПредметовСнабженияСУБД.ИмяТаблицыХранения, ".", "_")));
	XML.ЗаписатьАтрибут("SupplyItemPartnerFieldREF", XMLСтрока("_" + СтрокаТаблицыПредметовСнабженияСУБД.ИмяТаблицыХранения + "_IDRRef"));
	
	Для каждого ПолеТаблицы Из СтрокаТаблицыИзготовителейИПоставщиковПредметовСнабженияСУБД.Поля Цикл
	
		Если ПолеТаблицы.ИмяПоля = "НомерСтроки" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemPartnerFieldRowNumber", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "Контрагент" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemPartnerFieldPartner", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения + "RRef"));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "Поставщик" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemPartnerFieldShipper", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "Разработчик" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemPartnerFieldDeveloper", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "Изготовитель" Тогда
		
			XML.ЗаписатьАтрибут("SupplyItemPartnerFieldProducer", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		КонецЕсли;	
	
	КонецЦикла;
	
	XML.ЗаписатьАтрибут("TranslateTableName", XMLСтрока("_" + СтрокаТаблицыДополнительныхНаименованийСУБД.ИмяТаблицыХранения));
	
	Для каждого ПолеТаблицы Из СтрокаТаблицыДополнительныхНаименованийСУБД.Поля Цикл
	
		Если ПолеТаблицы.ИмяПоля = "Владелец" Тогда
		
			XML.ЗаписатьАтрибут("TranslateFieldOwner", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения + "_RRRef"));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "ИмяРеквизита" Тогда
		
			XML.ЗаписатьАтрибут("TranslateFieldFieldName", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "Язык" Тогда
		
			XML.ЗаписатьАтрибут("TranslateFieldLanguage", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения + "RRef"));
			
		ИначеЕсли ПолеТаблицы.ИмяПоля = "Перевод" Тогда
		
			XML.ЗаписатьАтрибут("TranslateFieldTranslation", XMLСтрока("_" + ПолеТаблицы.ИмяПоляХранения));
			
		КонецЕсли;	
	
	КонецЦикла;
	
	XML.ЗаписатьНачалоЭлемента("MergeTablesRows");
	
	Для каждого Строка Из ИменаПолейТаблицСУБД Цикл
		
		Если Не Строка.УсловнаяЗамена Тогда
			
			XML.ЗаписатьНачалоЭлемента("MergeTablesRow");
			XML.ЗаписатьАтрибут("MergeTableName", XMLСтрока("_" + СтрЗаменить(Строка.ИмяТаблицыСУБД, ".", "_")));
			XML.ЗаписатьАтрибут("MergeFieldName", XMLСтрока("_" + Строка.ИмяПоляСУБД + "RRef"));
			XML.ЗаписатьКонецЭлемента(); // MergeTablesRow	
			
		КонецЕсли;
			
	КонецЦикла;
	
	XML.ЗаписатьКонецЭлемента(); // MergeTablesRows
	
	XML.ЗаписатьНачалоЭлемента("ConditionalMergeTablesRows");
	
	Для каждого Строка Из ИменаПолейТаблицСУБД Цикл
		
		Если Строка.УсловнаяЗамена Тогда
			
			XML.ЗаписатьНачалоЭлемента("ConditionalMergeTablesRow");
			XML.ЗаписатьАтрибут("ConditionalMergeTableName", XMLСтрока("_" + СтрЗаменить(Строка.ИмяТаблицыСУБД, ".", "_")));
			XML.ЗаписатьАтрибут("ConditionalMergeFieldName", XMLСтрока("_" + Строка.ИмяПоляСУБД + "RRef"));
			XML.ЗаписатьАтрибут("ConditionalMergeObjectName", XMLСтрока(Строка.ИмяТаблицы));
			XML.ЗаписатьАтрибут("ConditionalMergeRegisterRecord", XMLСтрока(Число(Строка.Движение)));
			XML.ЗаписатьКонецЭлемента(); // ConditionalMergeTablesRow	
			
		КонецЕсли;
			
	КонецЦикла;
	
	XML.ЗаписатьКонецЭлемента(); // ConditionalMergeTablesRows
		
	XML.ЗаписатьНачалоЭлемента("ChangeRefsRows");
	
	Для каждого Строка Из ТаблицаЗамены Цикл
		
		XML.ЗаписатьНачалоЭлемента("ChangeRefsRow");
		XML.ЗаписатьАтрибут("ChangeWhatRef", XMLСтрока(Строка.Заменяемый));
		XML.ЗаписатьАтрибут("ChangeToRef", XMLСтрока(Строка.Заменяющий));
		XML.ЗаписатьАтрибут("ChangeWhatUID", XMLСтрока(Строка.UIDЗаменяемого));
		XML.ЗаписатьАтрибут("ChangeToUID", XMLСтрока(Строка.UIDЗаменяющего));
		XML.ЗаписатьКонецЭлемента(); // ChangeRefsRow 
		
	КонецЦикла;
	
	XML.ЗаписатьКонецЭлемента(); // ChangeRefsRows
	
	XML.ЗаписатьНачалоЭлемента("ShipStructureRows");
	
	Если ИмяСправочника = "СтруктураЗаказаПоКомплектующимИзделиямИЗИП" Тогда
	
		РезультатЗапроса = СтруктураЗаказаСервер.ПолучитьДанныеДляСверткиЭлементовСтруктурыКораблей(ТаблицаЭлементовСтруктурыКораблей);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				XML.ЗаписатьНачалоЭлемента("ShipStructureRow");
				XML.ЗаписатьАтрибут("REF", XMLСтрока(РаботаСMSSQL.ПолучитьЗначениеСУБДСсылки(Выборка.Заменивший)));
				XML.ЗаписатьАтрибут("Count", XMLСтрока(Выборка.Количество));
				XML.ЗаписатьАтрибут("CountBoard", XMLСтрока(Выборка.КоличествоВЗИПБорт));
				XML.ЗаписатьАтрибут("CountBase", XMLСтрока(Выборка.КоличествоВЗИПБаза));
				XML.ЗаписатьАтрибут("CountD", XMLСтрока(Выборка.КоличествоВЗИПДЭ));
				XML.ЗаписатьАтрибут("CountR", XMLСтрока(Выборка.КоличествоВЗИПР));
				XML.ЗаписатьКонецЭлемента(); // ShipStructureRow
				
			КонецЦикла;	
		
		КонецЕсли;
	
	КонецЕсли;
	
	XML.ЗаписатьКонецЭлемента(); // ShipStructureRows
	
	XML.ЗаписатьНачалоЭлемента("SupplyItemRows");
	
	Если ИмяСправочника = "КаталогПредметовСнабжения" Тогда
		
		РезультатЗапроса = ПредметыСнабженияСервер.ПолучитьДанныеДляСверткиПредметовСнабжения(ТаблицаПредметовСнабжения);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				XML.ЗаписатьНачалоЭлемента("SupplyItemRow");
				XML.ЗаписатьАтрибут("REF", XMLСтрока(РаботаСMSSQL.ПолучитьЗначениеСУБДСсылки(Выборка.Заменивший)));
				XML.ЗаписатьАтрибут("Designation", XMLСтрока(Выборка.Обозначение));
				XML.ЗаписатьАтрибут("DesignationTranslit", XMLСтрока(Выборка.ОбозначениеТранслитированное));
				XML.ЗаписатьАтрибут("DeliveryDocument", XMLСтрока(Выборка.ДокументНаПоставку));
				XML.ЗаписатьАтрибут("INCAT", XMLСтрока(Выборка.INCAT));
				XML.ЗаписатьАтрибут("NumberOSK", XMLСтрока(Выборка.НомерОСК));
				XML.ЗаписатьКонецЭлемента(); // SupplyItemRow
				
			КонецЦикла;	
		
		КонецЕсли;
	
	КонецЕсли;
	
	XML.ЗаписатьКонецЭлемента(); // SupplyItemRows
	
	XML.ЗаписатьНачалоЭлемента("TranslateRows");
	
	Если ИмяСправочника = "КаталогПредметовСнабжения" Тогда
		
		РезультатЗапроса = ПредметыСнабженияСервер.ПолучитьДанныеДляСверткиПереводовНаименованийПредметовСнабжения(ТаблицаПредметовСнабжения);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				XML.ЗаписатьНачалоЭлемента("TranslateRow");
				XML.ЗаписатьАтрибут("REF", XMLСтрока(РаботаСMSSQL.ПолучитьЗначениеСУБДСсылки(Выборка.Заменивший)));
				XML.ЗаписатьАтрибут("Translation", XMLСтрока(Выборка.Перевод));
				XML.ЗаписатьКонецЭлемента(); // TranslateRow
				
			КонецЦикла;	
		
		КонецЕсли;
	
	КонецЕсли;
	
	XML.ЗаписатьКонецЭлемента(); // TranslateRows
	
	XML.ЗаписатьКонецЭлемента(); // params
	
	XML.ЗаписатьКонецЭлемента(); // root
	
	ПараметрXML = XML.Закрыть();	
	
	ТекстЗапроса = "EXEC DeleteDubles '" + ПараметрXML + "'";
	
	Соединение = РаботаСMSSQL.УстановитьСоединение(Справочники.ИсточникиДанных.ПодключениеКТекущейСУБД);
	
	Если Соединение = Неопределено Тогда
	
		Результат.Описание = "Не удалось установить соединение.";
		Перейти ~Конец;
	
	КонецЕсли;
	
	РезультатЗапроса = РаботаСMSSQL.ПолучитьРезультатЗапроса(Соединение, ТекстЗапроса);
	
	ОшибкаЗапроса = Ложь;
	ТекстОшибки = "";
	
	Если РезультатЗапроса = Неопределено Тогда
	
		ОшибкаЗапроса = Истина;	
	
	ИначеЕсли РезультатЗапроса.Количество() = 0 Тогда
	
		ОшибкаЗапроса = Истина;
		
	ИначеЕсли Не РезультатЗапроса[0][0] = 1 Тогда
	
		ОшибкаЗапроса = Истина;
		ТекстОшибки = РезультатЗапроса[0][0];
	
	КонецЕсли;
	
	Если ОшибкаЗапроса Тогда
	
		ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке("УдалениеДублейКастом()" + Символы.ПС + ТекстЗапроса + Символы.ПС + ТекстОшибки, Перечисления.ПриоритетыОшибок.Критический);
		Результат.Описание = "Ошибка при выполнении удаления. Подробности в информации об ошибках.";
		Перейти ~Конец;
	
	КонецЕсли;
	
	Результат.Выполнено = Истина;	
	
	~Конец:
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);

КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхДублей

//++2017092201 22.09.2017 Веденеев П. //сохранение данных из дубликатов при удалении дублей из справочника КаталогПредметовСнабжения
Функция СохранитьДанныеДубликатовКаталогПредметовСнабжения(ПарыЗамен)
	
	//не забыть добавить проверку на модифицированность, чтобы не записывать каждый объект
	//подумать про табличные части
	
	ТаблицаЗамен = Новый ТаблицаЗначений;
	
	ОписаниеТиповКаталогПредметовСнабжения = Новый ОписаниеТипов("СправочникСсылка.КаталогПредметовСнабжения");
	
	ТаблицаЗамен.Колонки.Добавить("Оригинал", ОписаниеТиповКаталогПредметовСнабжения);
	ТаблицаЗамен.Колонки.Добавить("Дубликат", ОписаниеТиповКаталогПредметовСнабжения);
	
	Для каждого ПараЗамены Из ПарыЗамен Цикл
		
		СтрокаТаблицыЗамен = ТаблицаЗамен.Добавить();
		СтрокаТаблицыЗамен.Дубликат = ПараЗамены.Ключ;
		СтрокаТаблицыЗамен.Оригинал = ПараЗамены.Значение;
		
	КонецЦикла;
	
	Выборка = ПолучитьВыборкуДанныхПредметовСнабжения(ТаблицаЗамен);
	
	Пока Выборка.Следующий() Цикл
		
		ПредметСнабженияОбъект = Выборка.ПредметСнабжения.ПолучитьОбъект();
		
		ЗаполнитьЗначениеРеквизита(ПредметСнабженияОбъект, Выборка, "Обозначение");
		ЗаполнитьЗначениеРеквизита(ПредметСнабженияОбъект, Выборка, "ОбозначениеТранслитированное");
		ЗаполнитьЗначениеРеквизита(ПредметСнабженияОбъект, Выборка, "ДокументНаПоставку");
		ЗаполнитьЗначениеРеквизита(ПредметСнабженияОбъект, Выборка, "НомерОСК");
		ЗаполнитьЗначениеРеквизита(ПредметСнабженияОбъект, Выборка, "ФНН");
		ЗаполнитьЗначениеРеквизита(ПредметСнабженияОбъект, Выборка, "NSN");
		ЗаполнитьЗначениеРеквизита(ПредметСнабженияОбъект, Выборка, "INCAT");
		
		ИзготовителиИПоставщики = ПредметСнабженияОбъект.ИзготовителиИПоставщики;
		
		Характеристики = ПредметСнабженияОбъект.Характеристики;
		
		ИзготовителиИПоставщики.Очистить();
		
		Характеристики.Очистить();
		
		ВыборкаЗначенийТабличныхЧастей = Выборка.Выбрать();
		
		Пока ВыборкаЗначенийТабличныхЧастей.Следующий() Цикл
			
			Если Не ВыборкаЗначенийТабличныхЧастей.Контрагент = Неопределено Тогда
				
				СтрокаПоставщик = ИзготовителиИПоставщики.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаПоставщик, ВыборкаЗначенийТабличныхЧастей);
				
			КонецЕсли;
			
			Если Не ВыборкаЗначенийТабличныхЧастей.Характеристика = Неопределено Тогда
				
				СтрокаХарактеристика = Характеристики.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаХарактеристика, ВыборкаЗначенийТабличныхЧастей);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Попытка
			
			ПредметСнабженияОбъект.Записать();
			
		Исключение
			
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
			
	Возврат Истина;		
		
КонецФункции

Процедура ЗаполнитьЗначениеРеквизита(ПредметСнабженияОбъект, Выборка, ИмяРеквизита)
	
	Если Не ЗначениеЗаполнено(ПредметСнабженияОбъект[ИмяРеквизита]) Тогда
		
		ПредметСнабженияОбъект[ИмяРеквизита] = Выборка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

// ++ 07.09.2018 11:40:05 Базунов Д.А. Задача: 
// Не Используется
// -- 07.09.2018 11:40:05 Базунов Д.А. Задача:
Функция ПолучитьВыборкуДанныхПредметовСнабжения(ТаблицаЗамен)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗамен.Оригинал КАК Оригинал,
	|	ТаблицаЗамен.Дубликат КАК Дубликат
	|ПОМЕСТИТЬ втТаблицаЗамен
	|ИЗ
	|	&ТаблицаЗамен КАК ТаблицаЗамен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дубликат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Оригинал КАК ПредметСнабжения,
	|	ВложенныйЗапрос.Обозначение КАК Обозначение,
	|	ВложенныйЗапрос.ОбозначениеТранслитированное КАК ОбозначениеТранслитированное,
	|	ВложенныйЗапрос.ДокументНаПоставку КАК ДокументНаПоставку,
	|	ВложенныйЗапрос.НомерОСК КАК НомерОСК,
	|	ВложенныйЗапрос.ФНН КАК ФНН,
	|	ВложенныйЗапрос.NSN КАК NSN,
	|	ВложенныйЗапрос.INCAT КАК INCAT,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Поставщик КАК Поставщик,
	|	ВложенныйЗапрос.Разработчик КАК Разработчик,
	|	ВложенныйЗапрос.Изготовитель КАК Изготовитель,
	|	ВложенныйЗапрос.СрокиИзготовления КАК СрокиИзготовления,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.СостояниеПроизводства КАК СостояниеПроизводства,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Значение КАК Значение,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Основная КАК Основная,
	|	ВложенныйЗапрос.ОтображениеДляЗаказчика КАК ОтображениеДляЗаказчика
	|ИЗ
	|	(ВЫБРАТЬ
	|		втТаблицаЗамен.Оригинал КАК Оригинал,
	|		МАКСИМУМ(КаталогПредметовСнабжения.Обозначение) КАК Обозначение,
	|		МАКСИМУМ(КаталогПредметовСнабжения.ОбозначениеТранслитированное) КАК ОбозначениеТранслитированное,
	|		МАКСИМУМ(КаталогПредметовСнабжения.ДокументНаПоставку) КАК ДокументНаПоставку,
	|		МАКСИМУМ(КаталогПредметовСнабжения.НомерОСК) КАК НомерОСК,
	|		МАКСИМУМ(КаталогПредметовСнабжения.ФНН) КАК ФНН,
	|		МАКСИМУМ(КаталогПредметовСнабжения.NSN) КАК NSN,
	|		МАКСИМУМ(КаталогПредметовСнабжения.INCAT) КАК INCAT,
	|		НЕОПРЕДЕЛЕНО КАК Контрагент,
	|		НЕОПРЕДЕЛЕНО КАК Поставщик,
	|		НЕОПРЕДЕЛЕНО КАК Разработчик,
	|		НЕОПРЕДЕЛЕНО КАК Изготовитель,
	|		НЕОПРЕДЕЛЕНО КАК СрокиИзготовления,
	|		НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
	|		НЕОПРЕДЕЛЕНО КАК СостояниеПроизводства,
	|		НЕОПРЕДЕЛЕНО КАК Характеристика,
	|		НЕОПРЕДЕЛЕНО КАК Значение,
	|		НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения,
	|		НЕОПРЕДЕЛЕНО КАК Основная,
	|		НЕОПРЕДЕЛЕНО КАК ОтображениеДляЗаказчика
	|	ИЗ
	|		втТаблицаЗамен КАК втТаблицаЗамен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|			ПО втТаблицаЗамен.Дубликат = КаталогПредметовСнабжения.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		втТаблицаЗамен.Оригинал
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		втТаблицаЗамен.Оригинал,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент,
	|		МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.Поставщик),
	|		МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.Разработчик),
	|		МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.Изготовитель),
	|		МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.СрокиИзготовления),
	|		МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.ЕдиницаИзмерения),
	|		МАКСИМУМ(КаталогПредметовСнабженияИзготовителиИПоставщики.СостояниеПроизводства),
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		втТаблицаЗамен КАК втТаблицаЗамен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.ИзготовителиИПоставщики КАК КаталогПредметовСнабженияИзготовителиИПоставщики
	|			ПО втТаблицаЗамен.Дубликат = КаталогПредметовСнабженияИзготовителиИПоставщики.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		втТаблицаЗамен.Оригинал,
	|		КаталогПредметовСнабженияИзготовителиИПоставщики.Контрагент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		втТаблицаЗамен.Оригинал,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		КаталогПредметовСнабженияХарактеристики.Характеристика,
	|		КаталогПредметовСнабженияХарактеристики.Значение,
	|		КаталогПредметовСнабженияХарактеристики.ЕдиницаИзмерения,
	|		КаталогПредметовСнабженияХарактеристики.Основная,
	|		КаталогПредметовСнабженияХарактеристики.ОтображениеДляЗаказчика
	|	ИЗ
	|		втТаблицаЗамен КАК втТаблицаЗамен
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КаталогПредметовСнабжения.Характеристики КАК КаталогПредметовСнабженияХарактеристики
	|			ПО втТаблицаЗамен.Дубликат = КаталогПредметовСнабженияХарактеристики.Ссылка) КАК ВложенныйЗапрос
	|ИТОГИ
	|	МАКСИМУМ(Обозначение),
	|	МАКСИМУМ(ОбозначениеТранслитированное),
	|	МАКСИМУМ(ДокументНаПоставку),
	|	МАКСИМУМ(НомерОСК),
	|	МАКСИМУМ(ФНН),
	|	МАКСИМУМ(NSN),
	|	МАКСИМУМ(INCAT)
	|ПО
	|	ПредметСнабжения";
	Запрос.УстановитьПараметр("ТаблицаЗамен", ТаблицаЗамен);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции
//--2017092201 22.09.2017 Веденеев П. //сохранение данных из дубликатов при удалении дублей из справочника КаталогПредметовСнабжения

//++2017100201 03.10.2017 Веденеев П. //сохранение данных дубликатов при удалении дублей из любого справочника
Функция СохранитьДанныеДубликатов(ПарыЗамен, СписокСохраняемыхРеквизитов, ОбластьПоискаДублей)
	
	СоответствиеОбъектовСсылкам = Новый Соответствие;
	
	ИндексНачалаТабличныхЧастей = ПолучитьИндексНачалаТабличныхЧастей(СписокСохраняемыхРеквизитов);
	
	ИндексКрайнегоЭлемента = СписокСохраняемыхРеквизитов.Количество() - 1;
	
	ИндексКрайнегоРеквизита = ?(ИндексНачалаТабличныхЧастей = Неопределено, ИндексКрайнегоЭлемента, ИндексНачалаТабличныхЧастей - 1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗамен", ПолучитьТаблицуЗамен(ПарыЗамен, ОбластьПоискаДублей));
	
	//если есть реквизиты для сохранения, то сохраняем значения реквизитов
	Если Не ИндексНачалаТабличныхЧастей = 0 Тогда
	
		Запрос.Текст = ПолучитьТекстЗапросаСохраненияРеквизитов(СписокСохраняемыхРеквизитов, ОбластьПоискаДублей, ИндексКрайнегоРеквизита);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОригиналОбъект = ПолучитьОбъектПоСсылке(Выборка.Оригинал, СоответствиеОбъектовСсылкам);			
			
			Для Сч = 0 По ИндексКрайнегоРеквизита Цикл
				
				ИмяРеквизита = СписокСохраняемыхРеквизитов[Сч].Значение;
				
				Если Не ЗначениеЗаполнено(ОригиналОбъект[ИмяРеквизита]) И ЗначениеЗаполнено(Выборка[ИмяРеквизита]) Тогда
					
					ОригиналОбъект[ИмяРеквизита] = Выборка[ИмяРеквизита];
					
				КонецЕсли;
				
			КонецЦикла;
			
			СоответствиеОбъектовСсылкам.Вставить(Выборка.Оригинал, ОригиналОбъект);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//если есть табличные части, то сохраняем значения табличных частей
	Если Не ИндексНачалаТабличныхЧастей = Неопределено Тогда
		
		Для Сч = ИндексНачалаТабличныхЧастей По ИндексКрайнегоЭлемента Цикл
			
			ИмяТабличнойЧасти = СписокСохраняемыхРеквизитов[Сч].Значение;
			
			Запрос.Текст = ПолучитьТекстЗапросаСохраненияТабличнойЧасти(ОбластьПоискаДублей, ИмяТабличнойЧасти);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ВыборкаЭлементов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЭлементов.Следующий() Цикл
				
				ОригиналОбъект = ПолучитьОбъектПоСсылке(ВыборкаЭлементов.Оригинал, СоответствиеОбъектовСсылкам);
				
				ТабличнаяЧастьОбъекта = ОригиналОбъект[ИмяТабличнойЧасти];
				
				ТабличнаяЧастьОбъекта.Очистить();
				
				ВыборкаЗаписейТабличнойЧасти = ВыборкаЭлементов.Выбрать();
				
				Пока ВыборкаЗаписейТабличнойЧасти.Следующий() Цикл
					
					СтрокаТабличнойЧасти = ТабличнаяЧастьОбъекта.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыборкаЗаписейТабличнойЧасти);
					
				КонецЦикла;
				
				СоответствиеОбъектовСсылкам.Вставить(ВыборкаЭлементов.Оригинал, ОригиналОбъект);
				
			КонецЦикла;
			
		КонецЦикла;
				
	КонецЕсли;
	
	//сохраняем измененные элементы в базу данных
	
	Для каждого ЭлементСправочника Из СоответствиеОбъектовСсылкам Цикл
		
		ОбъектСправочника = ЭлементСправочника.Значение;
		
		Если ОбъектСправочника.Модифицированность() Тогда
			
			Попытка
				
				ОбъектСправочника.Записать();
				
			Исключение
				
				ТекстСообщения = "Не удалось запись элемент " + Строка(ЭлементСправочника.Ключ) + Символы.ПС + ОписаниеОшибки();
				
				ОбщиеФункцииСервер.ЗарегистрироватьИнформациюОбОшибке(ТекстСообщения, Перечисления.ПриоритетыОшибок.Критический);
				
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				
				Возврат Ложь;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// ++ 06.09.2018 14:43:31 Базунов Д.А. Задача: 
&НаСервере
Функция ОбъединитьКодыINCAT(ПарыЗамен)
	
	Таблица = ПолучитьТаблицуЗамен(ПарыЗамен, "Справочник.КаталогПредметовСнабжения");
	
	ТаблицаОригиналов = Таблица.Скопировать(,"Оригинал");
	// Уникальные
	ТаблицаОригиналов.Свернуть("Оригинал");
		
	Для каждого ТекСтрока Из ТаблицаОригиналов Цикл
		
		Оригинал = ТекСтрока.Оригинал;
		
		Дубликаты = Новый Массив;
		ТаблицаДубликатов = Таблица.НайтиСтроки(Новый Структура("Оригинал", Оригинал));
		Для каждого СтрДубликат Из ТаблицаДубликатов Цикл
			Дубликаты.Добавить(СтрДубликат.Дубликат);
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КодыINCAT.КодINCAT КАК КодINCAT
		|ИЗ
		|	РегистрСведений.КодыINCAT КАК КодыINCAT
		|ГДЕ
		|	КодыINCAT.ПредметСнабжения В(&ПредметыСнабжения)
		|	И НЕ КодыINCAT.ПредметСнабжения = &Оригинал";
		
		Запрос.УстановитьПараметр("ПредметыСнабжения", Дубликаты);
		Запрос.УстановитьПараметр("Оригинал", Оригинал);
		
		ТаблицаКодовДубликатов = Запрос.Выполнить().Выгрузить();
		
		НаборЗаписей = РегистрыСведений.КодыINCAT.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПредметСнабжения.Установить(Оригинал);
		НаборЗаписей.Прочитать();
		
		ТаблицаКодовОригинала = НаборЗаписей.Выгрузить();
		
		Для каждого ТекСтрока Из ТаблицаКодовДубликатов Цикл
			
			КодINCAT = СокрЛП(ТекСтрока.КодINCAT);
			
			Если ТаблицаКодовОригинала.Найти(КодINCAT) = Неопределено Тогда
				
				НовСтр = НаборЗаписей.Добавить();
				НовСтр.ПредметСнабжения = Оригинал;
				НовСтр.КодINCAT			= КодINCAT;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		// Собираем представление
		СтрокаПредставление = "";
		Для каждого ТекСтрока Из НаборЗаписей Цикл
			СтрокаПредставление = СтрокаПредставление + ?(СтрокаПредставление="", "", "; ") + ТекСтрока.КодINCAT;
		КонецЦикла; 
		
		РезультатЗаписьПредставления = ПредметыСнабженияСервер.ЗаписатьПредставлениеКодовINCAT(Оригинал, СтрокаПредставление);
		
		Если НЕ РезультатЗаписьПредставления.Выполнено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции
// -- 06.09.2018 14:43:31 Базунов Д.А. Задача:

//функция возвращает объект по ссылке на объект
Функция ПолучитьОбъектПоСсылке(СсылкаНаОбъект, СоответствиеОбъектовСсылкам)
	
	Результат = СоответствиеОбъектовСсылкам.Получить(СсылкаНаОбъект);
	
	Если Результат = Неопределено Тогда
		
		Результат = СсылкаНаОбъект.ПолучитьОбъект();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

//функция возвращает текст запроса, объединяющего табличные части всех дубликатов одного оригинала и самого оригинала в единую таблицу
Функция ПолучитьТекстЗапросаСохраненияТабличнойЧасти(ОбластьПоискаДублей, ИмяТабличнойЧасти)
	
	МетаданныеТабличнойЧасти = Метаданные.Справочники[СтрЗаменить(ОбластьПоискаДублей, "Справочник.", "")].ТабличныеЧасти[ИмяТабличнойЧасти];
	
	РеквизитыТабличнойЧасти =  ПолучитьКоллекциюРеквизитовОбъекта(МетаданныеТабличнойЧасти);
	
	СодержитХранилищеЗначения = ПроверитьНаличиеХранилищаЗначения(РеквизитыТабличнойЧасти);
	
	ТекстЗапроса = ПолучитьТекстНачалаЗапроса();
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + 
	"ВЫБРАТЬ " + ?(СодержитХранилищеЗначения, "", "РАЗЛИЧНЫЕ") + " 
	|	втТаблицаЗамен.Оригинал КАК Оригинал";
	
	Для каждого РеквизитТабличнойЧасти Из РеквизитыТабличнойЧасти Цикл
		
		ТекстЗапроса = ТекстЗапроса + "," +Символы.ПС + ПолучитьПредставлениеРеквизита(РеквизитыТабличнойЧасти, РеквизитТабличнойЧасти.Ключ) + " КАК " + РеквизитТабличнойЧасти.Ключ;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС +
	"ИЗ
	 |втТаблицаЗамен КАК втТаблицаЗамен
	 |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ОбластьПоискаДублей КАК ОбластьПоискаДублей
	 |		ПО втТаблицаЗамен.Дубликат = ОбластьПоискаДублей.Ссылка
	 |ИТОГИ ПО
	 |	Оригинал";
	
	ПредставлениеТабличнойЧасти = ОбластьПоискаДублей + "." + ИмяТабличнойЧасти;
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ОбластьПоискаДублей", ПредставлениеТабличнойЧасти);
	
КонецФункции

//функция возвращает соответствие, содержащее реквизиты и стандартные реквизиты объекта метаданных (кроме ссылки и номера строки)
Функция ПолучитьКоллекциюРеквизитовОбъекта(МетаданныеОбъекта)
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	КоллекцияРеквизитов = МетаданныеОбъекта.Реквизиты;
	
	Для каждого ЭлементКоллекции Из КоллекцияРеквизитов Цикл
		
		СоответствиеРеквизитов.Вставить(ЭлементКоллекции.Имя, ЭлементКоллекции);
		
	КонецЦикла;
	
	КоллекцияСтандартныхРеквизитов = МетаданныеОбъекта.СтандартныеРеквизиты;
	
	Для каждого ЭлементКоллекции Из КоллекцияСтандартныхРеквизитов Цикл
		
		Если Не ЭлементКоллекции.Имя = "Ссылка" И Не ЭлементКоллекции.Имя = "НомерСтроки" Тогда
		
			СоответствиеРеквизитов.Вставить(ЭлементКоллекции.Имя, ЭлементКоллекции);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

//функция проверяет наличие в коллекции реквизитов реквизита с типом ХранилищеЗначения
Функция ПроверитьНаличиеХранилищаЗначения(КоллекцияРеквизитов)
	
	Результат = Ложь;
	
	ТипХранилищеЗначения = Тип("ХранилищеЗначения");
	
	Для каждого ЭлементКоллекции Из КоллекцияРеквизитов Цикл
		
		Результат =  ЭлементКоллекции.Значение.Тип.СодержитТип(ТипХранилищеЗначения);
		
		Если Результат Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//функция возвращает индекс элемента списка сохраняемых реквизитов, с которого начинается перечисление сохраняемых табличных частей
Функция ПолучитьИндексНачалаТабличныхЧастей(СписокСохраняемыхРеквизитов)
	
	ИндексНачалаТабличныхЧастей = Неопределено;
	
	Для каждого ЭлементСписка Из СписокСохраняемыхРеквизитов Цикл
		
		Если СтрНайти(ЭлементСписка.Представление, "Табличная часть:") > 0 Тогда
			
			ИндексНачалаТабличныхЧастей = СписокСохраняемыхРеквизитов.Индекс(ЭлементСписка);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИндексНачалаТабличныхЧастей;
	
КонецФункции

//функция возвращает текст запроса, объединяющего значения всех сохраняемых реквизитов одного оригинала и самого оригинала в единую запись
Функция ПолучитьТекстЗапросаСохраненияРеквизитов(СписокСохраняемыхРеквизитов, ОбластьПоискаДублей, ИндексКрайнегоРеквизита)
	
	МетаданныеСправочника = Метаданные.Справочники[СтрЗаменить(ОбластьПоискаДублей, "Справочник.", "")];
	
	РеквизитыСправочника =  ПолучитьКоллекциюРеквизитовОбъекта(МетаданныеСправочника);
		
	ТекстЗапроса = ПолучитьТекстНачалаЗапроса();
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + 
	"ВЫБРАТЬ
	|	втТаблицаЗамен.Оригинал КАК Оригинал";
	
	Для Сч = 0 По ИндексКрайнегоРеквизита Цикл
		
		ЭлементСписка = СписокСохраняемыхРеквизитов[Сч];
		
		ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + "МАКСИМУМ(" + ПолучитьПредставлениеРеквизита(РеквизитыСправочника, ЭлементСписка.Значение) + ") КАК " + ЭлементСписка.Значение;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС +
	"ИЗ
	 |втТаблицаЗамен КАК втТаблицаЗамен
	 |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ОбластьПоискаДублей КАК ОбластьПоискаДублей
	 |		ПО втТаблицаЗамен.Дубликат = ОбластьПоискаДублей.Ссылка
	 |СГРУППИРОВАТЬ ПО
	 |	Оригинал";
	
	Возврат СтрЗаменить(ТекстЗапроса, "&ОбластьПоискаДублей", ОбластьПоискаДублей);
		
КонецФункции

//фукнция возвращает правило получения значения реквизита в запросе в зависимости от типов значений реквизита:
//строка неограниченной длины - строка с ограничением 1000 символов 
Функция ПолучитьПредставлениеРеквизита(КоллекцияРеквизитов, ИмяРеквизита)
	
	ОписаниеТиповРеквизита = КоллекцияРеквизитов[ИмяРеквизита].Тип;
	
	Если ОписаниеТиповРеквизита.СодержитТип(Тип("Строка")) И ОписаниеТиповРеквизита.КвалификаторыСтроки.Длина = 0 Тогда //есть строка неограниченной длины
		
		Если ОписаниеТиповРеквизита.Типы().Количество() = 1 Тогда //строка неограниченной длины, выражаем как строку ограниченной длины
			
			Возврат "ВЫРАЗИТЬ(ОбластьПоискаДублей." + ИмяРеквизита + " КАК СТРОКА(1000))";
			
		Иначе //составной тип со строкой неограниченной длины, выражаем как строку ограниченной только значения такого типа
			
			Результат = 
			"ВЫБОР
			|	КОГДА ТИПЗНАЧЕНИЯ(ОбластьПоискаДублей.ИмяРеквизита) = ТИП(СТРОКА)
			|	ТОГДА ВЫРАЗИТЬ(ОбластьПоискаДублей.ИмяРеквизита КАК СТРОКА(1000))
			|	ИНАЧЕ ОбластьПоискаДублей.ИмяРеквизита
			|КОНЕЦ";
			
			Возврат СтрЗаменить(Результат, "ИмяРеквизита", ИмяРеквизита);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "ОбластьПоискаДублей." + ИмяРеквизита;
	
КонецФункции

//функция возвращает текст запроса помещения таблицы замен во временную таблицу
//с данного запроса начинуются все остальные запросы сохранения данных
Функция ПолучитьТекстНачалаЗапроса()
	
	Возврат 
	"ВЫБРАТЬ
	|	ТаблицаЗамен.Дубликат КАК Дубликат,
	|	ТаблицаЗамен.Оригинал КАК Оригинал
	|ПОМЕСТИТЬ втТаблицаЗамен
	|ИЗ
	|	&ТаблицаЗамен КАК ТаблицаЗамен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дубликат
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// ";
	
КонецФункции

//функция создает таблицу замен, пригодную для использования в запросах на основании соответствия замен
Функция ПолучитьТаблицуЗамен(ПарыЗамен, ОбластьПоискаДублей)
			
	ТипСправочникСсылка = Новый ОписаниеТипов(СтрЗаменить(ОбластьПоискаДублей, "Справочник", "СправочникСсылка"));
	
	ТаблицаЗамен = Новый ТаблицаЗначений;
	ТаблицаЗамен.Колонки.Добавить("Дубликат", ТипСправочникСсылка);
	ТаблицаЗамен.Колонки.Добавить("Оригинал", ТипСправочникСсылка);
	
	Для каждого ПараЗамены Из ПарыЗамен Цикл
		
		СтрокаТаблицыЗамен = ТаблицаЗамен.Добавить();
		СтрокаТаблицыЗамен.Дубликат = ПараЗамены.Ключ;
		СтрокаТаблицыЗамен.Оригинал = ПараЗамены.Значение;
		
	КонецЦикла;
	
	Возврат ТаблицаЗамен;
	
КонецФункции
//--2017100201 03.10.2017 Веденеев П. //сохранение данных дубликатов при удалении дублей из любого справочника

#КонецОбласти

//++ 20.10.2017 Веденеев П. //заполнение очереди на изменение спецификации для элементов каталога предметов снабжения

Функция ПолучитьИзмененияСпецификаций(ПарыЗамен, ОбластьПоискаДублей, ТаблицаРодителейУдаляемыхСпецификаций)
	
	ТаблицаЗамен = ПолучитьТаблицуЗамен(ПарыЗамен, ОбластьПоискаДублей);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗамен.Оригинал КАК Оригинал,
	|	ТаблицаЗамен.Дубликат КАК Дубликат
	|ПОМЕСТИТЬ втТаблицаЗамен
	|ИЗ
	|	&ТаблицаЗамен КАК ТаблицаЗамен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЗамен.Оригинал КАК Оригинал,
	|	втТаблицаЗамен.Дубликат КАК Дубликат
	|ПОМЕСТИТЬ втДубликаты
	|ИЗ
	|	втТаблицаЗамен КАК втТаблицаЗамен
	|ГДЕ
	|	НЕ втТаблицаЗамен.Оригинал = втТаблицаЗамен.Дубликат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Дубликат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаЗамен.Оригинал КАК Оригинал
	|ПОМЕСТИТЬ втОригиналы
	|ИЗ
	|	втТаблицаЗамен КАК втТаблицаЗамен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Оригинал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление) КАК ВидИзменения,
	|	втДубликаты.Оригинал КАК Оригинал
	|ПОМЕСТИТЬ втСпецификацииДубликатов
	|ИЗ
	|	втДубликаты КАК втДубликаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|		ПО втДубликаты.Дубликат = СпецификацииПредметовСнабжения.ПредметСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Оригинал,
	|	СоставляющаяЧасть,
	|	ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП
	|ПОМЕСТИТЬ втТекущиеСпецификацииОригиналов
	|ИЗ
	|	втОригиналы КАК втОригиналы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|		ПО втОригиналы.Оригинал = СпецификацииПредметовСнабжения.ПредметСнабжения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	СоставляющаяЧасть,
	|	ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	втДубликаты.Оригинал КАК Оригинал,
	|	втДубликаты.Дубликат КАК Дубликат,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП
	|ПОМЕСТИТЬ втСоставляющиеЧасти
	|ИЗ
	|	втДубликаты КАК втДубликаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|		ПО втДубликаты.Дубликат = СпецификацииПредметовСнабжения.СоставляющаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ПредметСнабжения КАК ПредметСнабжения,
	|	ВложенныйЗапрос.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	ВложенныйЗапрос.ЗИП КАК ЗИП,
	|	ВложенныйЗапрос.ВидИзменения КАК ВидИзменения,
	|	&Период КАК Период
	|ПОМЕСТИТЬ втРезультатБезПроверки
	|ИЗ
	|	(ВЫБРАТЬ
	|		втСпецификацииДубликатов.Оригинал КАК ПредметСнабжения,
	|		втСпецификацииДубликатов.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|		втСпецификацииДубликатов.ЗИП КАК ЗИП,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыИзмененийСпецификацииПредметовСнабжения.Добавление) КАК ВидИзменения
	|	ИЗ
	|		втСпецификацииДубликатов КАК втСпецификацииДубликатов
	|			ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеСпецификацииОригиналов КАК втТекущиеСпецификацииОригиналов
	|			ПО втСпецификацииДубликатов.Оригинал = втТекущиеСпецификацииОригиналов.ПредметСнабжения
	|				И втСпецификацииДубликатов.СоставляющаяЧасть = втТекущиеСпецификацииОригиналов.СоставляющаяЧасть
	|				И втСпецификацииДубликатов.ЗИП = втТекущиеСпецификацииОригиналов.ЗИП
	|	ГДЕ
	|		втТекущиеСпецификацииОригиналов.ПредметСнабжения ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втСпецификацииДубликатов.ПредметСнабжения,
	|		втСпецификацииДубликатов.СоставляющаяЧасть,
	|		втСпецификацииДубликатов.ЗИП,
	|		втСпецификацииДубликатов.ВидИзменения
	|	ИЗ
	|		втСпецификацииДубликатов КАК втСпецификацииДубликатов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втСоставляющиеЧасти.ПредметСнабжения,
	|		втСоставляющиеЧасти.Дубликат,
	|		втСоставляющиеЧасти.ЗИП,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление)
	|	ИЗ
	|		втСоставляющиеЧасти КАК втСоставляющиеЧасти
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втСоставляющиеЧасти.ПредметСнабжения,
	|		втСоставляющиеЧасти.Оригинал,
	|		втСоставляющиеЧасти.ЗИП,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыИзмененийСпецификацииПредметовСнабжения.Добавление)
	|	ИЗ
	|		втСоставляющиеЧасти КАК втСоставляющиеЧасти
	|	ГДЕ
	|		НЕ втСоставляющиеЧасти.ПредметСнабжения В (&СписокРодителейДубликатов)) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультатБезПроверки.ПредметСнабжения КАК ПредметСнабжения,
	|	втРезультатБезПроверки.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	втРезультатБезПроверки.ЗИП КАК ЗИП,
	|	втРезультатБезПроверки.ВидИзменения КАК ВидИзменения,
	|	втРезультатБезПроверки.Период КАК Период
	|ИЗ
	|	втРезультатБезПроверки КАК втРезультатБезПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭталонныеИзделияВСтруктуреЗаказов КАК ЭталонныеИзделияВСтруктуреЗаказов
	|		ПО втРезультатБезПроверки.ПредметСнабжения = ЭталонныеИзделияВСтруктуреЗаказов.ПредметСнабжения";
	Запрос.УстановитьПараметр("ТаблицаЗамен", ТаблицаЗамен);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());	
	Запрос.УстановитьПараметр("СписокРодителейДубликатов", ТаблицаРодителейУдаляемыхСпецификаций.ВыгрузитьКолонку("ПредметСнабжения"));
	
	Возврат Запрос.Выполнить();
	
КонецФункции

//функция заполняет очередь на изменение спецификаций предметов снабжения. возвращает успешность действия
Функция ЗаполнитьОчередьИзмененияСпецификаций(РезультатЗапроса)
	
	СпецификацииИзменения = РегистрыСведений.СпецификацииПредметовСнабженияИзменения;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = СпецификацииИзменения.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		
		Попытка
			
			МенеджерЗаписи.Записать();
			
		Исключение
			
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
		
КонецФункции

//процедура удаляет дубликаты из спецификаций указанных предметов снабжения
Процедура УдалитьДубликатыИзСпецификаций(ТаблицаРодителейУдаляемыхСпецификаций)
	
	Если ТаблицаРодителейУдаляемыхСпецификаций.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРодителейУдаляемыхСпецификаций.ПредметСнабжения КАК ПредметСнабжения,
	|	ТаблицаРодителейУдаляемыхСпецификаций.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	ТаблицаРодителейУдаляемыхСпецификаций.ЗИП КАК ЗИП
	|ПОМЕСТИТЬ втТаблицаИсключений
	|ИЗ
	|	&ТаблицаРодителейУдаляемыхСпецификаций КАК ТаблицаРодителейУдаляемыхСпецификаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	СоставляющаяЧасть,
	|	ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаИсключений КАК втТаблицаИсключений
	|		ПО СпецификацииПредметовСнабжения.ПредметСнабжения = втТаблицаИсключений.ПредметСнабжения
	|			И СпецификацииПредметовСнабжения.СоставляющаяЧасть = втТаблицаИсключений.СоставляющаяЧасть
	|			И СпецификацииПредметовСнабжения.ЗИП = втТаблицаИсключений.ЗИП";
	Запрос.УстановитьПараметр("ТаблицаРодителейУдаляемыхСпецификаций", ТаблицаРодителейУдаляемыхСпецификаций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ВидУдаление = Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.Удаление;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураЗаказаСервер.ОбработатьИзменениеСпецификации(Выборка.ПредметСнабжения, Выборка.СоставляющаяЧасть, Выборка.ЗИП, ВидУдаление); 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПоместитьРодителейВОчередьНаСворачивание(СоставляющиеЧасти)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	&Период КАК Период
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть В(&СоставляющиеЧасти)";
	Запрос.УстановитьПараметр("СоставляющиеЧасти", СоставляющиеЧасти);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	СпецификацииОчередьМенеджер = РегистрыСведений.СпецификацииПредметовСнабженияОчередьИзменений;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпецификацииОчередьИзменений = СпецификацииОчередьМенеджер.СоздатьМенеджерЗаписи();
		СпецификацииОчередьИзменений.Период = Выборка.Период;
		СпецификацииОчередьИзменений.ПредметСнабжения = Выборка.ПредметСнабжения;
		
		Попытка
			
			 СпецификацииОчередьИзменений.Записать();
			 
		Исключение
			
			 Сообщить(ОписаниеОшибки());
			 Возврат Ложь;
			 
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПоместитьРодителейВОчередьНаСворачивание_Старая(СоставляющиеЧасти)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпецификацииПредметовСнабжения.ПредметСнабжения КАК ПредметСнабжения,
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть КАК СоставляющаяЧасть,
	|	СпецификацииПредметовСнабжения.ЗИП КАК ЗИП,
	|	&Период КАК Период,
	|	&ВидИзменения
	|ИЗ
	|	РегистрСведений.СпецификацииПредметовСнабжения КАК СпецификацииПредметовСнабжения
	|ГДЕ
	|	СпецификацииПредметовСнабжения.СоставляющаяЧасть В(&СоставляющиеЧасти)";
	Запрос.УстановитьПараметр("СоставляющиеЧасти", СоставляющиеЧасти);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ВидИзменения", Перечисления.ВидыИзмененийСпецификацииПредметовСнабжения.СворачиваниеПриУдаленииДубликатов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	СпецификацииИзмененияМенеджер = РегистрыСведений.СпецификацииПредметовСнабженияИзменения;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпецификацииИзмененияМенеджерЗаписи = СпецификацииИзмененияМенеджер.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(СпецификацииИзмененияМенеджерЗаписи, Выборка);
		
		Попытка
			
			 СпецификацииИзмененияМенеджерЗаписи.Записать();
			 
		Исключение
			
			 Сообщить(ОписаниеОшибки());
			 Возврат Ложь;
			 
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
//-- 20.10.2017 Веденеев П. //заполнение очереди на изменение спецификации для элементов каталога предметов снабжения

Функция ОбъединитьЭлементыСтруктурыЗаказа(СписокОбъединяемыхЭлементовСтруктуры)
	
	Если СписокОбъединяемыхЭлементовСтруктуры.Количество() < 2 Тогда //в списке совсем ничего или только оригинал
		
		Возврат Истина; 
		
	КонецЕсли;
	
	ОригиналОбъект = СписокОбъединяемыхЭлементовСтруктуры[0].Значение.ПолучитьОбъект();
	
	ИндексКрайнегоЭлемента = СписокОбъединяемыхЭлементовСтруктуры.Количество() - 1;
	
	//++ 14.06.2018 Веденеев П. //сохранение подчиненных дубликатам элементов в данной структуре
	Если Не ПереместитьПодчиненныеЭлементыСтруктуры(СписокОбъединяемыхЭлементовСтруктуры) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	//-- 14.06.2018 Веденеев П. //сохранение подчиненных дубликатам элементов в данной структуре
	
	Для Сч = 1 По ИндексКрайнегоЭлемента Цикл
		
		Дубликат = СписокОбъединяемыхЭлементовСтруктуры[Сч].Значение;
		
		Если ОригиналОбъект.Количество = 0 Тогда
			
			ОригиналОбъект.Количество = Дубликат.Количество;
		
		КонецЕсли;
		
		Если ОригиналОбъект.КоличествоВЗИПБорт = 0 Тогда
			
			ОригиналОбъект.КоличествоВЗИПБорт = Дубликат.КоличествоВЗИПБорт;
		
		КонецЕсли;
		
		Если ОригиналОбъект.КоличествоВЗИПБаза = 0 Тогда
			
			ОригиналОбъект.КоличествоВЗИПБаза = Дубликат.КоличествоВЗИПБаза;
		
		КонецЕсли;
		
		Если ОригиналОбъект.КоличествоВЗИПДЭ = 0 Тогда
			
			ОригиналОбъект.КоличествоВЗИПДЭ = Дубликат.КоличествоВЗИПДЭ;
		
		КонецЕсли;
		
		Если ОригиналОбъект.КоличествоВЗИПР = 0 Тогда
			
			ОригиналОбъект.КоличествоВЗИПР = Дубликат.КоличествоВЗИПР;
		
		КонецЕсли;
				
		Попытка
			
			//++ 29.06.2018 Веденеев П. //перемещение дубликатов на служебный корабль
			//СтруктураЗаказаСервер.УдалитьЭлементСтруктурыЗаказа(Дубликат);
			ПереместитьДублирующийЭлементСтруктуры(Дубликат, Константы.СлужебныйЗаказ.Получить());
			//-- 29.06.2018 Веденеев П. //перемещение дубликатов на служебный корабль
			
		Исключение
			
			Сообщить(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Попытка
		
		ОригиналОбъект.Записать();
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

//++ 14.06.2018 Веденеев П. //сохранение подчиненных дубликатам элементов в данной структуре
Функция ПереместитьПодчиненныеЭлементыСтруктуры(СписокОбъединяемыхЭлементовСтруктуры)
	
	//устанавливаем блокировку на элементы структуры, которые будут обрабатываться
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка В ИЕРАРХИИ(&СписокОбъединяемыхЭлементовСтруктуры)";
	Запрос.УстановитьПараметр("СписокОбъединяемыхЭлементовСтруктуры", СписокОбъединяемыхЭлементовСтруктуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных; 
	ЭлементБлокировки = Блокировка.Добавить("Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	
	Попытка
		
		Блокировка.Заблокировать();
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	//правила объединения: критерий сравнения - предмет снабжения + флаг ЗИП
	//1. Если элемента нет в оригинале, но есть в дубликатах - переносим один из элементов в дубликатах, количества берем максимальные от всех дубликатов
	//2. Если элемент есть в оригинале, но количества не указаны - указываем для оригинального элемента максимальные количества из дубликатов
	//3. Если элемент есть в оригинале и количества указаны, либо не указаны аналогичные количества в дубликатах - не изменяем
	//ДОДЕЛАТЬ - НЕОБХОДИМОСТЬ СОХРАНЕНИЯ МАКСИМАЛЬНЫХ КОЛИЧЕСТВ В НИЖЕСТОЯЩИХ ЭЛЕМЕНТОВ СПЕЦИФИКАЦИЙ ДУБЛИКАТОВ?
	
	Оригинал = СписокОбъединяемыхЭлементовСтруктуры[0].Значение;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество КАК Количество,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт КАК КоличествоВЗИПБорт,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза КАК КоличествоВЗИПБаза,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ КАК КоличествоВЗИПДЭ,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР КАК КоличествоВЗИПР
	|ПОМЕСТИТЬ втСпецификацияОригинала
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Оригинал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка) КАК Ссылка,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения КАК ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП КАК ЗИП,
	|	МАКСИМУМ(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Количество) КАК Количество,
	|	МАКСИМУМ(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБорт) КАК КоличествоВЗИПБорт,
	|	МАКСИМУМ(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПБаза) КАК КоличествоВЗИПБаза,
	|	МАКСИМУМ(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПДЭ) КАК КоличествоВЗИПДЭ,
	|	МАКСИМУМ(СтруктураЗаказаПоКомплектующимИзделиямИЗИП.КоличествоВЗИПР) КАК КоличествоВЗИПР
	|ПОМЕСТИТЬ втСпецификацииДубликатов
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель В(&СписокОбъединяемыхЭлементовСтруктуры)
	|	И НЕ СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Родитель = &Оригинал
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ЗИП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметСнабжения,
	|	ЗИП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСпецификацияОригинала.Ссылка, втСпецификацииДубликатов.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(втСпецификацияОригинала.ПредметСнабжения, втСпецификацииДубликатов.ПредметСнабжения) КАК ПредметСнабжения,
	|	ЕСТЬNULL(втСпецификацияОригинала.ЗИП, втСпецификацииДубликатов.ЗИП) КАК ЗИП,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСпецификацияОригинала.Количество, 0) = 0
	|			ТОГДА ЕСТЬNULL(втСпецификацииДубликатов.Количество, 0)
	|		ИНАЧЕ втСпецификацияОригинала.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСпецификацияОригинала.КоличествоВЗИПБорт, 0) = 0
	|			ТОГДА ЕСТЬNULL(втСпецификацииДубликатов.КоличествоВЗИПБорт, 0)
	|		ИНАЧЕ втСпецификацияОригинала.КоличествоВЗИПБорт
	|	КОНЕЦ КАК КоличествоВЗИПБорт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСпецификацияОригинала.КоличествоВЗИПБаза, 0) = 0
	|			ТОГДА ЕСТЬNULL(втСпецификацииДубликатов.КоличествоВЗИПБаза, 0)
	|		ИНАЧЕ втСпецификацияОригинала.КоличествоВЗИПБаза
	|	КОНЕЦ КАК КоличествоВЗИПБаза,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСпецификацияОригинала.КоличествоВЗИПДЭ, 0) = 0
	|			ТОГДА ЕСТЬNULL(втСпецификацииДубликатов.КоличествоВЗИПДЭ, 0)
	|		ИНАЧЕ втСпецификацияОригинала.КоличествоВЗИПДЭ
	|	КОНЕЦ КАК КоличествоВЗИПДЭ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСпецификацияОригинала.КоличествоВЗИПР, 0) = 0
	|			ТОГДА ЕСТЬNULL(втСпецификацииДубликатов.КоличествоВЗИПР, 0)
	|		ИНАЧЕ втСпецификацияОригинала.КоличествоВЗИПР
	|	КОНЕЦ КАК КоличествоВЗИПР
	|ИЗ
	|	втСпецификацияОригинала КАК втСпецификацияОригинала
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСпецификацииДубликатов КАК втСпецификацииДубликатов
	|		ПО втСпецификацияОригинала.ПредметСнабжения = втСпецификацииДубликатов.ПредметСнабжения
	|			И втСпецификацияОригинала.ЗИП = втСпецификацииДубликатов.ЗИП
	|ГДЕ
	|	(втСпецификацияОригинала.Ссылка ЕСТЬ NULL
	|			ИЛИ втСпецификацияОригинала.Количество = 0
	|				И ЕСТЬNULL(втСпецификацииДубликатов.Количество, 0) > 0
	|			ИЛИ втСпецификацияОригинала.КоличествоВЗИПБорт = 0
	|				И ЕСТЬNULL(втСпецификацииДубликатов.КоличествоВЗИПБорт, 0) > 0
	|			ИЛИ втСпецификацияОригинала.КоличествоВЗИПБаза = 0
	|				И ЕСТЬNULL(втСпецификацииДубликатов.КоличествоВЗИПБаза, 0) > 0
	|			ИЛИ втСпецификацияОригинала.КоличествоВЗИПДЭ = 0
	|				И ЕСТЬNULL(втСпецификацииДубликатов.КоличествоВЗИПДЭ, 0) > 0
	|			ИЛИ втСпецификацияОригинала.КоличествоВЗИПР = 0
	|				И ЕСТЬNULL(втСпецификацииДубликатов.КоличествоВЗИПР, 0) > 0)";
	Запрос.УстановитьПараметр("СписокОбъединяемыхЭлементовСтруктуры", СписокОбъединяемыхЭлементовСтруктуры);
	Запрос.УстановитьПараметр("Оригинал", Оригинал);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементСтруктурыОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭлементСтруктурыОбъект.Родитель = Оригинал;
		ЭлементСтруктурыОбъект.Количество = Выборка.Количество;
		ЭлементСтруктурыОбъект.КоличествоВЗИПБорт = Выборка.КоличествоВЗИПБорт;
		ЭлементСтруктурыОбъект.КоличествоВЗИПБаза = Выборка.КоличествоВЗИПБаза;
		ЭлементСтруктурыОбъект.КоличествоВЗИПДЭ = Выборка.КоличествоВЗИПДЭ;
		ЭлементСтруктурыОбъект.КоличествоВЗИПР = Выборка.КоличествоВЗИПР;
		
		Попытка
			
			 ЭлементСтруктурыОбъект.Записать();
			 
		Исключение
			 
			 Сообщить(ОписаниеОшибки());
			 Возврат Ложь;
			 
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//-- 14.06.2018 Веденеев П. //сохранение подчиненных дубликатам элементов в данной структуре

//++ 28.06.2018 Веденеев П. //сохранение информации об элементах структуры кораблей, ссылающихся на дубликаты

Процедура ЗаписатьИнформациюОДубликатахВРегистрСвертки(ПарыЗамен)
	
	Дубликаты = Новый Массив;
	
	Для каждого ПараЗамены Из ПарыЗамен Цикл
		
		Оригинал = ПараЗамены.Значение;
		
		Если Не ПараЗамены.Ключ = Оригинал Тогда
			
			Дубликаты.Добавить(ПараЗамены.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктурыОригинал
	|ПОМЕСТИТЬ втЭлементыСтруктурыОригинала
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &Оригинал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Владелец,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктурыДубликат
	|ПОМЕСТИТЬ втЭлементыСтруктурыДубликатов
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения В(&Дубликаты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЭлементыСтруктурыОригинала.ЭлементСтруктурыОригинал КАК ЭлементСтруктурыОригинал,
	|	втЭлементыСтруктурыДубликатов.ЭлементСтруктурыДубликат КАК ЭлементСтруктурыДубликат
	|ИЗ
	|	втЭлементыСтруктурыОригинала КАК втЭлементыСтруктурыОригинала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЭлементыСтруктурыДубликатов КАК втЭлементыСтруктурыДубликатов
	|		ПО втЭлементыСтруктурыОригинала.Владелец = втЭлементыСтруктурыДубликатов.Владелец";
	Запрос.УстановитьПараметр("Оригинал", Оригинал);
	Запрос.УстановитьПараметр("Дубликаты", Дубликаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СверткаДублейМенеджерЗаписи = РегистрыСведений.СверткаДублейПредметовСнабженияВспомогательный.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(СверткаДублейМенеджерЗаписи, Выборка);
		СверткаДублейМенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

//-- 28.06.2018 Веденеев П. //сохранение информации об элементах структуры кораблей, ссылающихся на дубликаты

//++ 29.06.2018 Веденеев П. //перемещение дубликатов на служебный корабль
Процедура ПереместитьДублирующийЭлементСтруктуры(ЭлементСтруктуры, СлужебныйЗаказ, Родитель = Неопределено)
	
	ЭлементСтруктурыОбъект = ЭлементСтруктуры.ПолучитьОбъект();
	ЭлементСтруктурыОбъект.Владелец = СлужебныйЗаказ;
	ЭлементСтруктурыОбъект.Родитель = Родитель;
	ЭлементСтруктурыОбъект.Записать();
	
	Выборка = Справочники.СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Выбрать(ЭлементСтруктуры);
	
	Пока Выборка.Следующий() Цикл
		
		ПереместитьДублирующийЭлементСтруктуры(Выборка.Ссылка, СлужебныйЗаказ, ЭлементСтруктуры);
		
	КонецЦикла;
	
КонецПроцедуры
//-- 29.06.2018 Веденеев П. //перемещение дубликатов на служебный корабль

#КонецЕсли