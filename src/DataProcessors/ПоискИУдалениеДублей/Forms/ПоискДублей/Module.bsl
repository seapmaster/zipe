#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьЦветаИУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПоискаСтрок", "FuzzySearch", ТипВнешнейКомпоненты.Native) Тогда
		НечеткийПоиск = Истина;
	КонецЕсли;
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "");
	Если НастройкиФормы = Неопределено Тогда
		НастройкиФормы = Новый Структура;
		НастройкиФормы.Вставить("УчитыватьПрикладныеПравила", Истина);
		НастройкиФормы.Вставить("ОбластьПоискаДублей",        "");
		НастройкиФормы.Вставить("НастройкиКД",                Неопределено);
		НастройкиФормы.Вставить("ПравилаПоиска",              Неопределено);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НастройкиФормы, Параметры);
	
	ПриСозданииНаСервереИнициализацияДанных(НастройкиФормы);
	
	ИнициализироватьКомпоновщикОтбораИПравила(НастройкиФормы);
	
	// Схема должна быть переформирована всегда, настройки компоновщика -  в разрезе ОбластьПоискаДублей. 
	
	// Постоянный интерфейс
	ОтображениеСостояния = Элементы.ПоискНеВыполнялся.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Поиск дублей не выполнялся. 
	|Задайте условия отбора и сравнения и нажмите ""Найти дубли"".'");
	ОтображениеСостояния.Картинка = Элементы.Предупреждение32.Картинка;
	
	ОтображениеСостояния = Элементы.ВыполнениеПоиска.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Поиск дублей...'");
	ОтображениеСостояния.Картинка = Элементы.ДлительнаяОперация48.Картинка;
	
	ОтображениеСостояния = Элементы.ВыполнениеУдаления.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Удаление дублей...'");
	ОтображениеСостояния.Картинка = Элементы.ДлительнаяОперация48.Картинка;
	
	ОтображениеСостояния = Элементы.ДублейНеНайдено.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Текст = НСтр("ru = 'Не обнаружено дублей по указанным параметрам.
	|Измените условия отбора и сравнения, нажмите ""Найти дубли""'");
	ОтображениеСостояния.Картинка = Элементы.Предупреждение32.Картинка;
	
	// Пошаговый мастер
	НастройкиПошаговогоМастера = ИнициализироватьМастер(Элементы.ШагиМастера, Элементы.Далее, Элементы.Назад, Элементы.Отмена);
	
	// Добавляем шаги, зависящие от логики формы.
	ИнициализироватьСценарийМастера();
	
	// Автосохранение настроек
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	//+ 19.04.2017 10:54:17 Савинов Александр Задача: ОПЗ 2
	
	ИменаСправочников.ЗагрузитьЗначения(ОбщиеФункцииПовтИсп.ПолучитьИменаСправочников());
	
	Если Параметры.Свойство("Дубликаты") Тогда
		
		ВызовИзФормыСписка = Истина;
		
		ОбластьПоискаДублей = "Справочник." + Параметры.Дубликаты.Получить(0).Метаданные().Имя;
		
		СписокДублей.ЗагрузитьЗначения(Параметры.Дубликаты);
		
		Для каждого Строка Из КомпоновщикПредварительногоОтбора.Настройки.Отбор.Элементы Цикл
		
			Строка.Использование = Ложь;	
		
		КонецЦикла;
		
		Для каждого Строка Из ПравилаПоиска Цикл
		
			Если Не Строка.Реквизит = "Наименование" Тогда
			
				Строка.Правило = "";		
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	//- 19.04.2017 10:54:20 Савинов Александр Задача: ОПЗ 2
	
	//++ 04.10.2017 Веденеев П. //заполнение списка реквизитов и табличных частей, сохраняемых при удалении дубликатов
	Параметры.Свойство("СписокСохраняемыхРеквизитов", СписокСохраняемыхРеквизитов);
	//-- 04.10.2017 Веденеев П. //заполнение списка реквизитов и табличных частей, сохраняемых при удалении дубликатов
	
	//++ 11.10.2017 Веденеев П. //явное указание оригинала
	Параметры.Свойство("ОригинальныйЭлемент", ОригинальныйЭлемент);
	//++ 11.10.2017 Веденеев П. //явное указание оригинала
	
	//++ 23.10.2017 Веденеев П. //добавление списка родителей удаляемых
	Если Параметры.Свойство("ТаблицаРодителейУдаляемыхСпецификаций") Тогда
		
		 ТаблицаРодителейУдаляемыхСпецификаций.Загрузить(Параметры.ТаблицаРодителейУдаляемыхСпецификаций.Выгрузить());
		 
	КонецЕсли;
	 
	Параметры.Свойство("ПризнакЗИПОригинала", ПризнакЗИПОригинала); 
	//-- 23.10.2017 Веденеев П. //добавление списка родителей удаляемых
	
	//++ 27.10.2017 Веденеев П. //объединение элементов структуры заказа
	Параметры.Свойство("СписокОбъединяемыхЭлементовСтруктуры", СписокОбъединяемыхЭлементовСтруктуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//+ 20.04.2017 9:39:51 Савинов Александр Задача: ОПЗ 2
	
	Если ВызовИзФормыСписка Тогда
		
		Дубликаты = СписокДублей.ВыгрузитьЗначения();
	
		HighPerfomance = Истина;
		HighPerfomanceПриИзменении();
		
		ОбработчикДобавленияДублей(Дубликаты);
		
		//++ 11.10.2017 Веденеев П. //явное указание оригинала
		Если ЗначениеЗаполнено(ОригинальныйЭлемент) И НайденныеДубли.ПолучитьЭлементы().Количество() > 0 Тогда
			
			УстановитьОригинальныйЭлемент();
			
		КонецЕсли;
		//-- 11.10.2017 Веденеев П. //явное указание оригинала
	
	Иначе
		
		// Указываем стартовую страницу.
		УстановитьНачальнуюСтраницуМастера(Элементы.ШагПоискНеВыполнялся);
		ЗапуститьРаботуМастера();	
		
	КонецЕсли;
	
	//- 20.04.2017 9:39:53 Савинов Александр Задача: ОПЗ 2
	
	//++ 26.10.2017 Веденеев П.
	Если ЗначениеЗаполнено(ОбластьПоискаДублей) Тогда
		
		ПриИзмененииОбластиПоискаДублей();
		
	КонецЕсли;
	//-- 26.10.2017 Веденеев П.
	
КонецПроцедуры

//++ 11.10.2017 Веденеев П. //явное указание оригинала
&НаСервере
Процедура УстановитьОригинальныйЭлемент()
	
	дзНайденныеДубли = РеквизитФормыВЗначение("НайденныеДубли", Тип("ДеревоЗначений"));
	
	СтрокаОригинал = дзНайденныеДубли.Строки[0];
	
	Если Не СтрокаОригинал.Ссылка = ОригинальныйЭлемент Тогда
		
		Для каждого СтрокаДубликат Из СтрокаОригинал.Строки Цикл
			
			Если СтрокаДубликат.Ссылка = ОригинальныйЭлемент Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаДубликат);
				
				СтрокаДубликат.Основной = Истина;
				
			Иначе
				
				СтрокаДубликат.Основной = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(дзНайденныеДубли, "НайденныеДубли");
	
КонецПроцедуры
//-- 11.10.2017 Веденеев П. //явное указание оригинала

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием Тогда
		Возврат;
	КонецЕсли;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
		ТекстВопроса = НСтр("ru = 'Прервать поиск дублей и закрыть форму?'");
	ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
		ТекстВопроса = НСтр("ru = 'Прервать удаление дублей и закрыть форму?'");
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Прервать'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет,      НСтр("ru = 'Не прерывать'"));
	
	Обработчик = Новый ОписаниеОповещения("ПослеПодтвержденияОтменыЗадания", ЭтотОбъект);
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Нет);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбластьПоискаДублейНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПоискаДублейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Имя = ПолноеИмяФормы("ОбластьПоискаДублей");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресНастроек", АдресНастроек);
	ПараметрыФормы.Вставить("ОбластьПоискаДублей", ОбластьПоискаДублей);
	
	Обработчик = Новый ОписаниеОповещения("ОбластьПоискаДублейЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПоискаДублейЗавершениеВыбора(Результат, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьПоискаДублей = Результат;
	ИнициализироватьКомпоновщикОтбораИПравила(Неопределено);
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся);
	
	//++ 26.10.2017 Веденеев П.
	ПриИзмененииОбластиПоискаДублей();
	//-- 26.10.2017 Веденеев П.
	
	//+ 06.04.2017 13:40:06 Савинов Александр Задача: ОПЗ 2
	
	HighPerfomance = Ложь;
	HighPerfomanceПриИзменении();
	
	//- 06.04.2017 13:40:09 Савинов Александр Задача: ОПЗ 2	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбластьПоискаДублейПриИзменении(Элемент)
	
	//++ 26.10.2017 Веденеев П.
	ПриИзмененииОбластиПоискаДублей();
	//-- 26.10.2017 Веденеев П.
	
	ИнициализироватьКомпоновщикОтбораИПравила(Неопределено);
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся);
	
КонецПроцедуры


//++ 26.10.2017 Веденеев П.
&НаКлиенте
Функция ЗаполнитьСписокСохраняемыхРеквизитовКаталогаПредметовСнабжения()
	
	СписокСохраняемыхРеквизитов.Очистить();
	СписокСохраняемыхРеквизитов.Добавить("Обозначение", "Обозначение");
	СписокСохраняемыхРеквизитов.Добавить("ОбозначениеТранслитированное", "Обозначение транслитерированное");
	СписокСохраняемыхРеквизитов.Добавить("ДокументНаПоставку", "Документ на поставку");
	СписокСохраняемыхРеквизитов.Добавить("НомерОСК", "Номер ОСК");
	СписокСохраняемыхРеквизитов.Добавить("ФНН", "ФНН");
	СписокСохраняемыхРеквизитов.Добавить("NSN", "NSN");
	СписокСохраняемыхРеквизитов.Добавить("INCAT", "INCAT");
	СписокСохраняемыхРеквизитов.Добавить("ИзготовителиИПоставщики", "Табличная часть: Изготовители и поставщики");
	СписокСохраняемыхРеквизитов.Добавить("Характеристики", "Табличная часть: Характеристики");
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииОбластиПоискаДублей()
	
	//++ 03.10.2017 Веденеев П.
	ЗаполнитьСписокРеквизитов();
	ЗаполнитьСписокРеквизитовИТабличныхЧастей();
	//-- 03.10.2017 Веденеев П.
	
	Если СтрНайти(ОбластьПоискаДублей, "КаталогПредметовСнабжения") > 0 Тогда //для каталога заполним список сохраняемых реквизитов автоматически
		
		ЗаполнитьСписокСохраняемыхРеквизитовКаталогаПредметовСнабжения();
		
	Иначе
		
		СписокСохраняемыхРеквизитов.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры
//-- 26.10.2017 Веденеев П.

&НаКлиенте
Процедура ОбластьПоискаДублейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользованияНеобработанныхНажатие(Элемент)
	
	ПоказатьМестаИспользования(НеобработанныеДубли);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользованияНажатие(Элемент)
	
	ПоказатьМестаИспользования(НайденныеДубли);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПравилОтбораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Имя = ПолноеИмяФормы("ПравилаОтбора");
	
	ЭлементСписка = Элементы.ОбластьПоискаДублей.СписокВыбора.НайтиПоЗначению(ОбластьПоискаДублей);
	Если ЭлементСписка = Неопределено Тогда
		ПредставлениеОбластиПоискаДублей = Неопределено;
	Иначе
		ПредставлениеОбластиПоискаДублей = ЭлементСписка.Представление;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемыКомпоновки",            АдресСхемыКомпоновки);
	ПараметрыФормы.Вставить("АдресНастроекКомпоновщикаОтбора", АдресНастроекКомпоновщикаОтбора());
	ПараметрыФормы.Вставить("ИдентификаторОсновнойФормы",      УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ПредставлениеОбластиОтбора",      ПредставлениеОбластиПоискаДублей);	
	
	Обработчик = Новый ОписаниеОповещения("ПравилаОтбораЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОтбораЗавершениеВыбора(АдресРезультата, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(АдресРезультата) <> Тип("Строка") Или Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	ОбновитьКомпоновщикОтбора(АдресРезультата);
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся);
	
	//+ 12.04.2017 10:41:02 Савинов Александр Задача: ОПЗ 2
	
	Если HighPerfomance Тогда
	
		ОбновитьОтметкиСпискаРеквизитов();	
	
	КонецЕсли;
	
	//- 12.04.2017 10:41:04 Савинов Александр Задача: ОПЗ 2
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПравилОтбораОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КомпоновщикПредварительногоОтбора.Настройки.Отбор.Элементы.Очистить();
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся);
	СохранитьПользовательскиеНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПравилПоискаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Имя = ПолноеИмяФормы("ПравилаПоиска");
	
	ЭлементСписка = Элементы.ОбластьПоискаДублей.СписокВыбора.НайтиПоЗначению(ОбластьПоискаДублей);
	Если ЭлементСписка = Неопределено Тогда
		ПредставлениеОбластиПоискаДублей = Неопределено;
	Иначе
		ПредставлениеОбластиПоискаДублей = ЭлементСписка.Представление;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбластьПоискаДублей",        ОбластьПоискаДублей);
	ПараметрыФормы.Вставить("ОписаниеПрикладныхПравил",   ОписаниеПрикладныхПравил);
	ПараметрыФормы.Вставить("АдресНастроек",              АдресНастроекПравилПоиска());
	ПараметрыФормы.Вставить("ПредставлениеОбластиОтбора", ПредставлениеОбластиПоискаДублей);
	
	//+ 06.04.2017 13:40:06 Савинов Александр Задача: ОПЗ 2
	
	Если HighPerfomance Тогда
		
		ПараметрыФормы.Вставить("HighPerfomance");
		
	КонецЕсли;
	
	//- 06.04.2017 13:40:09 Савинов Александр Задача: ОПЗ 2	
	
	Обработчик = Новый ОписаниеОповещения("ПравилаПоискаЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПравилаПоискаЗавершениеВыбора(АдресРезультата, ПараметрыВыполнения) Экспорт
	Если ТипЗнч(АдресРезультата) <> Тип("Строка") Или Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат;
	КонецЕсли;
	ОбновитьПравилаПоиска(АдресРезультата);
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся);
	
	//+ 12.04.2017 10:41:02 Савинов Александр Задача: ОПЗ 2
	
	Если HighPerfomance Тогда
	
		ОбновитьОтметкиСпискаРеквизитов();	
	
	КонецЕсли;
	
	//- 12.04.2017 10:41:04 Савинов Александр Задача: ОПЗ 2
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПодробнееНажатие(Элемент)
	СтандартныеПодсистемыКлиент.ПоказатьПодробнуюИнформацию(Неопределено, Элемент.Подсказка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНайденныеДубли

&НаКлиенте
Процедура НайденныеДублиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтложенныйОбработчикАктивизацииСтрокиДублей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйОбработчикАктивизацииСтрокиДублей()
	ИдентификаторСтроки = Элементы.НайденныеДубли.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Или ИдентификаторСтроки = ИдентификаторТекущейСтроки Тогда
		Возврат;
	КонецЕсли;
	ИдентификаторТекущейСтроки = ИдентификаторСтроки;
	
	ОбновитьМестаИспользованияКандидата(ИдентификаторСтроки);
	
	//+ 03.05.2017 13:19:48 Савинов Александр Задача: ОПЗ 2
	
	Если ОбластьПоискаДублей = "Справочник.КаталогПредметовСнабжения" Тогда
		
		ОбновитьПрименяемостьПредметаСнабжения(Элементы.НайденныеДубли.ТекущиеДанные);	
	
	КонецЕсли;
	
	//- 03.05.2017 13:19:50 Савинов Александр Задача: ОПЗ 2
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМестаИспользованияКандидата(Знач ИдентификаторСтроки)
	ДанныеСтроки = НайденныеДубли.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		// Описание группы
		МестаИспользованияКандидата.Очистить();
		
		НаименованиеОригинала = Неопределено;
		Для Каждого Кандидат Из ДанныеСтроки.ПолучитьЭлементы() Цикл
			Если Кандидат.Основной Тогда
				НаименованиеОригинала = Кандидат.Наименование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ОписаниеТекущейГруппыДублей.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для элемента ""%1"" найдено дублей: %2'"),
			НаименованиеОригинала,
			ДанныеСтроки.Количество);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.ОписаниеГруппы;
		Возврат;
	КонецЕсли;
	
	// Перечень мест использования.
	ТаблицаИспользования = ПолучитьИзВременногоХранилища(АдресМестИспользования);
	Фильтр = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
	
	МестаИспользованияКандидата.Загрузить(ТаблицаИспользования.Скопировать(ТаблицаИспользования.НайтиСтроки(Фильтр)));
	
	//+ 19.04.2017 10:51:34 Савинов Александр Задача: ОПЗ 2
	
	ЕстьВладельцы = Ложь;
	ЕстьВладельцыВладельцев = Ложь;
	
	МассивИменВладельцев = Новый Массив;
	МассивИменВладельцевВладельцев = Новый Массив;
	
	Если HighPerfomance Тогда
		
		НаличиеВладельцевТипов = Новый Соответствие;
		
		Для каждого Строка Из МестаИспользованияКандидата Цикл
			
			ТипМестаИспользования = ТипЗнч(Строка.Данные);
			
			НаличиеВладельца = НаличиеВладельцевТипов.Получить(ТипМестаИспользования);
			
			Если НаличиеВладельца = Неопределено Тогда
				
				Если Не ИменаСправочников.НайтиПоЗначению(Строка(ТипМестаИспользования)) = Неопределено Тогда
					
					МетаданныеРеквизита = Строка.Данные.Метаданные();
					
					Если МетаданныеРеквизита.Владельцы.Количество() > 0 Тогда
						
						НаличиеВладельца = Истина;		
						
					Иначе
						
						НаличиеВладельца = Ложь;
						
					КонецЕсли;
					
				Иначе
					
					НаличиеВладельца = Ложь;	
					
				КонецЕсли;
				
				НаличиеВладельцевТипов.Вставить(ТипМестаИспользования, НаличиеВладельца);
				
			КонецЕсли;
			
			Если НаличиеВладельца Тогда
				
				Строка.Владелец = ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Строка.Данные, "Владелец");
				ЕстьВладельцы = Истина;
				
				ИмяВладельца = ОбщиеФункцииПовтИсп.ПолучитьСинонимРеквизитаСправочника(Строка.Данные.Метаданные().Имя, "Владелец");
				
				Если МассивИменВладельцев.Найти(ИмяВладельца) = Неопределено Тогда
				
					МассивИменВладельцев.Добавить(ИмяВладельца);		
				
				КонецЕсли;
				
				ТипВладельца = ТипЗнч(Строка.Владелец);
				
				НаличиеВладельцаВладельца = НаличиеВладельцевТипов.Получить(ТипВладельца);
				
				Если НаличиеВладельцаВладельца = Неопределено Тогда
					
					Если Не ИменаСправочников.НайтиПоЗначению(Строка(ТипВладельца)) = Неопределено Тогда
						
						МетаданныеРеквизита = Строка.Владелец.Метаданные();
						
						Если МетаданныеРеквизита.Владельцы.Количество() > 0 Тогда
							
							НаличиеВладельцаВладельца = Истина;		
							
						Иначе
							
							НаличиеВладельцаВладельца = Ложь;
							
						КонецЕсли;
						
					Иначе
						
						НаличиеВладельцаВладельца = Ложь;	
						
					КонецЕсли;
					
					НаличиеВладельцевТипов.Вставить(ТипВладельца, НаличиеВладельцаВладельца);
					
				КонецЕсли;
				
				Если НаличиеВладельцаВладельца Тогда
				
					Строка.ВладелецВладельца = ОбщиеФункцииСервер.ПолучитьЗначениеРеквизита(Строка.Владелец, "Владелец");
					ЕстьВладельцыВладельцев = Истина;
					
					ИмяВладельцаВладельца = ОбщиеФункцииПовтИсп.ПолучитьСинонимРеквизитаСправочника(Строка.Владелец.Метаданные().Имя, "Владелец");
					
					Если МассивИменВладельцевВладельцев.Найти(ИмяВладельцаВладельца) = Неопределено Тогда
						
						МассивИменВладельцевВладельцев.Добавить(ИмяВладельцаВладельца);		
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Элементы.МестаИспользованияКандидатаВладелец.Видимость = ЕстьВладельцы;
	Элементы.МестаИспользованияКандидата.Шапка = ЕстьВладельцы;
	Элементы.МестаИспользованияКандидатаВладелецВладельца.Видимость = ЕстьВладельцыВладельцев;
	
	Если МассивИменВладельцев.Количество() = 1 Тогда
	
		Элементы.МестаИспользованияКандидатаВладелец.Заголовок = МассивИменВладельцев.Получить(0);	
	
	КонецЕсли;
	
	Если МассивИменВладельцевВладельцев.Количество() = 1 Тогда
	
		Элементы.МестаИспользованияКандидатаВладелецВладельца.Заголовок = МассивИменВладельцевВладельцев.Получить(0);	
	
	КонецЕсли;
	
	//- 19.04.2017 10:51:37 Савинов Александр Задача: ОПЗ 2
	
	Если ДанныеСтроки.Количество = 0 Тогда
		Элементы.ОписаниеТекущейГруппыДублей.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент ""%1"" не используется'"), 
			ДанныеСтроки.Наименование);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.ОписаниеГруппы;
	Иначе
		Элементы.МестаИспользованияКандидата.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Места использования ""%1"" (%2)'"), 
			ДанныеСтроки.Наименование,
			ДанныеСтроки.Количество);
		
		Элементы.СтраницыМестаИспользования.ТекущаяСтраница = Элементы.МестаИспользования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуДубля(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НайденныеДублиПометкаПриИзменении(Элемент)
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	
	ДанныеСтроки.Пометка = ДанныеСтроки.Пометка % 2;
	
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
	
	ПересчитатьКоличествоНайденныхДублей();
	
	ОбновитьОписаниеСостоянияНайденныхДублей(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНеобработанныеДубли

&НаКлиенте
Процедура НеобработанныеДублиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОтложенныйОбработчикАктивизацииСтрокиНеобработанныхДублей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтложенныйОбработчикАктивизацииСтрокиНеобработанныхДублей()
	
	ДанныеСтроки = Элементы.НеобработанныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьМестаИспользованияНеобработанныхДубли( ДанныеСтроки.ПолучитьИдентификатор() );
КонецПроцедуры

&НаСервере
Процедура ОбновитьМестаИспользованияНеобработанныхДубли(Знач СтрокаДанных)
	ДанныеСтроки = НеобработанныеДубли.НайтиПоИдентификатору(СтрокаДанных);
	
	Если ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		// Описание группы
		МестаИспользованияНеобработанных.Очистить();
		
		Элементы.ОписаниеТекущейГруппыДублей1.Заголовок = НСтр("ru = 'Для просмотра причин выберите проблемный элемент-дубль.'");
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеГруппыНеобработанных;
		Возврат;
	КонецЕсли;
	
	// Перечень мест ошибок
	ТаблицаОшибок = ПолучитьИзВременногоХранилища(АдресРезультатаЗамены);
	Фильтр = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
	
	Данные = ТаблицаОшибок.Скопировать( ТаблицаОшибок.НайтиСтроки(Фильтр) );
	Данные.Колонки.Добавить("Пиктограмма");
	Данные.ЗаполнитьЗначения(Истина, "Пиктограмма");
	МестаИспользованияНеобработанных.Загрузить(Данные);
	
	Если ДанныеСтроки.Количество = 0 Тогда
		Элементы.ОписаниеТекущейГруппыДублей1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Замена дубля ""%1"" возможна, но была отменена из-за невозможности замены в других местах.'"), 
			ДанныеСтроки.Наименование);
		
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеГруппыНеобработанных;
	Иначе
		Элементы.МестаИспользованияКандидата.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось заменить дубли в некоторых местах (%1)'"), 
			ДанныеСтроки.Количество);
		
		Элементы.СтраницыМестаИспользованияНеобработанных.ТекущаяСтраница = Элементы.ОписаниеМестИспользованияНеобработанных;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеобработанныеДублиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуДубля(Элементы.НеобработанныеДубли.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыМестаИспользованияНеобработанных

&НаКлиенте
Процедура МестаИспользованияНеобработанныхПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОписаниеОшибкиНеобработанных = "";
	Иначе
		ОписаниеОшибкиНеобработанных = ТекущиеДанные.ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияНеобработанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = МестаИспользованияНеобработанных.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПоказатьЗначение(, ТекущиеДанные.ОбъектОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыМестаИспользованияКандидата

&НаКлиенте
Процедура МестаИспользованияКандидатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = МестаИспользованияКандидата.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПоказатьЗначение(, ТекущиеДанные.Данные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьОсновнойЭлемент(Команда)
	
	ДанныеСтроки = Элементы.НайденныеДубли.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Или ДанныеСтроки.Основной Тогда
		Возврат; // Нет данных или Текущий уже основной.
	КонецЕсли;
		
	Родитель = ДанныеСтроки.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОсновнойЭлементИерархически(ДанныеСтроки, Родитель);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКандидатаВДубли(Команда)
	
	ОткрытьФормуДубля(Элементы.НайденныеДубли.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНеобработанныйДубль(Команда)
	
	ОткрытьФормуДубля(Элементы.НеобработанныеДубли.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппыДублей(Команда)
	
	РазвернутьГруппуДублейИерархически();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьГруппыДублей(Команда)
	
	СвернутьГруппуДублейИерархически();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПоиск(Команда)
	
	ПерейтиНаШагМастера(Элементы.ШагВыполнениеПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераНазад(Команда)
	ШагМастера("Назад");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераДалее(Команда)
	ШагМастера("Далее");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераОтмена(Команда)
	ШагМастера("Отмена");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Функция ПолноеИмяФормы(КраткоеИмяФормы)
	Имена = СтрРазделить(ИмяФормы, ".");
	Возврат Имена[0] + "." + Имена[1] + ".Форма." + КраткоеИмяФормы;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ПриСозданииНаСервереИнициализацияДанных(НастройкиФормы)
	УчитыватьПрикладныеПравила = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиФормы, "УчитыватьПрикладныеПравила");
	ОбластьПоискаДублей        = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиФормы, "ОбластьПоискаДублей");
	
	ТаблицаНастроек = ПоискИУдалениеДублей.НастройкиОбъектовМетаданных();
	АдресНастроек = ПоместитьВоВременноеХранилище(ТаблицаНастроек, УникальныйИдентификатор);
	
	СписокВыбора = Элементы.ОбластьПоискаДублей.СписокВыбора;
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		СписокВыбора.Добавить(СтрокаТаблицы.ПолноеИмя, СтрокаТаблицы.ПредставлениеСписка, , БиблиотекаКартинок[СтрокаТаблицы.Вид]);
	КонецЦикла;
	
	ВсеВариантыСравнения.Добавить("Равно",   НСтр("ru = 'Совпадает'"));
	ВсеВариантыСравнения.Добавить("Подобно", НСтр("ru = 'Совпадает по похожим словам'"));
КонецПроцедуры

&НаСервере
Процедура СохранитьПользовательскиеНастройки()
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
	НастройкиФормы.Вставить("ОбластьПоискаДублей", ОбластьПоискаДублей);
	НастройкиФормы.Вставить("НастройкиКД", КомпоновщикПредварительногоОтбора.Настройки);
	НастройкиФормы.Вставить("ПравилаПоиска", ПравилаПоиска.Выгрузить());
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "", НастройкиФормы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ОткрытьФормуДубля(Знач ТекущиеДанные)
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаИУсловноеОформление()
	ЦветПоясняющийТекст       = ЦветСтиляИлиАвто("ПоясняющийТекст",       69,  81,  133);
	ЦветПоясняющийОшибкуТекст = ЦветСтиляИлиАвто("ПоясняющийОшибкуТекст", 255, 0,   0);
	ЦветНедоступныеДанные     = ЦветСтиляИлиАвто("ЦветНедоступныеДанные", 192, 192, 192);
	
	ЭлементыУсловногоОформления = УсловноеОформление.Элементы;
	ЭлементыУсловногоОформления.Очистить();
	
	// Отсутствие мест использования у группы.
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Ссылка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиКоличество");
	
	// 1. Строка с текущим основным элементом группы:
	
	// Картинка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиОсновной");
	
	// Отсутствие пометки
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиПометка");
	
	// 2. Строка с обычным элементом.
	
	// Картинка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиОсновной");
	
	// Наличие пометки
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Основной");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Истина);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиПометка");
	
	// 3. Места использования
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Ссылка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Количество");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = 0;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '-'"));
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДублиКоличество");
	
	// 4. Неактивная строка
	ЭлементОформления = ЭлементыУсловногоОформления.Добавить();
	
	ОтборОформления = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НайденныеДубли.Пометка");
	ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = 0;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНедоступныеДанные);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("НайденныеДубли");
	
КонецПроцедуры

&НаСервере
Функция ЦветСтиляИлиАвто(Знач Имя, Знач Красный = Неопределено, Зеленый = Неопределено, Синий = Неопределено)
	ЭлементСтиля = Метаданные.ЭлементыСтиля.Найти(Имя);
	Если ЭлементСтиля <> Неопределено И ЭлементСтиля.Вид = Метаданные.СвойстваОбъектов.ВидЭлементаСтиля.Цвет Тогда
		Возврат ЦветаСтиля[Имя];
	КонецЕсли;
	
	Возврат ?(Красный = Неопределено, Новый Цвет, Новый Цвет(Красный, Зеленый, Синий));
КонецФункции

&НаСервере
Функция ПарыЗаменДублей()
	ПарыЗамен = Новый Соответствие;
	
	ДеревоДублей = РеквизитФормыВЗначение("НайденныеДубли");
	ФильтрПоиска = Новый Структура("Основной", Истина);
	
	Для Каждого Родитель Из ДеревоДублей.Строки Цикл
		ОсновнойВГруппе = Родитель.Строки.НайтиСтроки(ФильтрПоиска)[0].Ссылка;
		
		Для Каждого Потомок Из Родитель.Строки Цикл
			Если Потомок.Пометка = 1 Тогда 
				ПарыЗамен.Вставить(Потомок.Ссылка, ОсновнойВГруппе);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПарыЗамен;
КонецФункции

&НаКлиенте
Процедура ПоказатьМестаИспользования(ДеревоИсточник)
	МассивСсылок = Новый Массив;
	Для Каждого ГруппаДублей Из ДеревоИсточник.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДерева Из ГруппаДублей.ПолучитьЭлементы() Цикл
			МассивСсылок.Добавить(СтрокаДерева.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Отбор", Новый Структура("НаборСсылок", МассивСсылок));
	РежимОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Отчет.МестаИспользованияСсылок.Форма", ПараметрыОтчета, ЭтотОбъект, , , , , РежимОкна);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьГруппуДублейИерархически(Знач СтрокаДанных = Неопределено)
	Если СтрокаДанных <> Неопределено Тогда
		Элементы.НайденныеДубли.Развернуть(СтрокаДанных, Истина);
	КонецЕсли;
	
	// Все первого уровня
	ВсеСтроки = Элементы.НайденныеДубли;
	Для Каждого ДанныеСтроки Из НайденныеДубли.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Развернуть(ДанныеСтроки.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьГруппуДублейИерархически(Знач СтрокаДанных = Неопределено)
	Если СтрокаДанных <> Неопределено Тогда
		Элементы.НайденныеДубли.Свернуть(СтрокаДанных);
		Возврат;
	КонецЕсли;
	
	// Все первого уровня
	ВсеСтроки = Элементы.НайденныеДубли;
	Для Каждого ДанныеСтроки Из НайденныеДубли.ПолучитьЭлементы() Цикл 
		ВсеСтроки.Свернуть(ДанныеСтроки.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкиКандидатовИерархически(Знач ДанныеСтроки)
	ПроставитьПометкиВниз(ДанныеСтроки);
	ПроставитьПометкиВверх(ДанныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(Знач ДанныеСтроки)
	Значение = ДанныеСтроки.Пометка;
	Для Каждого Потомок Из ДанныеСтроки.ПолучитьЭлементы() Цикл
		Потомок.Пометка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(Знач ДанныеСтроки)
	РодительСтроки = ДанныеСтроки.ПолучитьРодителя();
	
	Если РодительСтроки <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		
		Для Каждого Потомок Из РодительСтроки.ПолучитьЭлементы() Цикл
			ВсеИстина = ВсеИстина И (Потомок.Пометка = 1);
			НеВсеЛожь = НеВсеЛожь Или (Потомок.Пометка > 0);
		КонецЦикла;
		
		Если ВсеИстина Тогда
			РодительСтроки.Пометка = 1;
			
		ИначеЕсли НеВсеЛожь Тогда
			РодительСтроки.Пометка = 2;
			
		Иначе
			РодительСтроки.Пометка = 0;
			
		КонецЕсли;
		
		ПроставитьПометкиВверх(РодительСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОписаниеСостоянияНайденныхДублей(Форма, СчетчикКоличество = Неопределено)
	
	Если СчетчикКоличество = Неопределено Тогда
	
		Форма.ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Найдено дублей: %2 (среди элементов: %1). Все отмеченные элементы будут помечены на удаление и заменены во всех местах использования на оригиналы (отмечены стрелкой).'"),
			Форма.ВсегоЭлементов,
			Форма.ВсегоНайденоДублей),
		,
		Форма.ЦветПоясняющийТекст);	
	
	Иначе
	
		Форма.ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выведено дублей: %2. Найдено дублей: %3 (среди элементов: %1). Все отмеченные элементы будут помечены на удаление и заменены во всех местах использования на оригиналы (отмечены стрелкой).'"),
			Форма.ВсегоЭлементов,
			Форма.ВсегоНайденоДублей,
			СчетчикКоличество),
		,
		Форма.ЦветПоясняющийТекст);	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоНайденныхДублей()
	ВсегоНайденоДублей = 0;
	Для Каждого Дубль Из НайденныеДубли.ПолучитьЭлементы() Цикл
		Для Каждого Потомок Из Дубль.ПолучитьЭлементы() Цикл
			Если Не Потомок.Основной И Потомок.Пометка Тогда
				ВсегоНайденоДублей = ВсегоНайденоДублей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОсновнойЭлементИерархически(Знач ДанныеСтроки, Знач Родитель)
	Для Каждого Потомок Из Родитель.ПолучитьЭлементы() Цикл
		Потомок.Основной = Ложь;
	КонецЦикла;
	ДанныеСтроки.Основной = Истина;
	
	// Выбранный всегда используем.
	ДанныеСтроки.Пометка = 1;
	ИзменитьПометкиКандидатовИерархически(ДанныеСтроки);
	
	// И изменяем название группы
	Родитель.Наименование = ДанныеСтроки.Наименование + " (" + Родитель.Количество + ")";
КонецПроцедуры

&НаСервере
Функция АдресНастроекКомпоновщикаОтбора()
	Возврат ПоместитьВоВременноеХранилище(КомпоновщикПредварительногоОтбора.Настройки, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция АдресНастроекПравилПоиска()
	Настройки = Новый Структура;
	Настройки.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
	Настройки.Вставить("ВсеВариантыСравнения", ВсеВариантыСравнения);
	Настройки.Вставить("ПравилаПоиска", РеквизитФормыВЗначение("ПравилаПоиска"));
	Возврат ПоместитьВоВременноеХранилище(Настройки);
КонецФункции

&НаСервере
Процедура ОбновитьКомпоновщикОтбора(АдресРезультата)
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	КомпоновщикПредварительногоОтбора.ЗагрузитьНастройки(Результат);
	КомпоновщикПредварительногоОтбора.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	СохранитьПользовательскиеНастройки();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПравилаПоиска(АдресРезультата)
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	УдалитьИзВременногоХранилища(АдресРезультата);
	УчитыватьПрикладныеПравила = Результат.УчитыватьПрикладныеПравила;
	ЗначениеВРеквизитФормы(Результат.ПравилаПоиска, "ПравилаПоиска");
	СохранитьПользовательскиеНастройки();
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикОтбораИПравила(НастройкиФормы)
	// 1. Очистка и инициализация сведений об объекте метаданных.
	ПредставлениеПравилОтбора = "";
	ПредставлениеПравилПоиска = "";
	
	ТаблицаНастроек = ПолучитьИзВременногоХранилища(АдресНастроек);
	СтрокаТаблицыНастроек = ТаблицаНастроек.Найти(ОбластьПоискаДублей, "ПолноеИмя");
	Если СтрокаТаблицыНастроек = Неопределено Тогда
		ОбластьПоискаДублей = "";
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбластьПоискаДублей);
	
	// 2. Инициализация СКД, которая используется для отборов.
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = "ВЫБРАТЬ " + ДоступныеРеквизитыОтбора(ОбъектМетаданных) + " ИЗ " + ОбластьПоискаДублей;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	
	КомпоновщикПредварительногоОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
	// 3. Заполнение таблицы ПравилаПоиска.
	ТаблицаПравил = РеквизитФормыВЗначение("ПравилаПоиска");
	ТаблицаПравил.Очистить();
	
	ИгнорируемыеРеквизиты = Новый Структура("ПометкаУдаления, Ссылка, Предопределенный, ИмяПредопределенныхДанных, ЭтоГруппа");
	ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, ИгнорируемыеРеквизиты, ВсеВариантыСравнения, ОбъектМетаданных.СтандартныеРеквизиты, НечеткийПоиск);
	ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, ИгнорируемыеРеквизиты, ВсеВариантыСравнения, ОбъектМетаданных.Реквизиты, НечеткийПоиск);
	
	// 4. Загрузка сохраненных значений.
	ОтборыЗагружены = Ложь;
	НастройкиКД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиФормы, "НастройкиКД");
	Если ТипЗнч(НастройкиКД) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикПредварительногоОтбора.ЗагрузитьНастройки(НастройкиКД);
		ОтборыЗагружены = Истина;
	КонецЕсли;
	
	ПравилаЗагружены = Ложь;
	СохраненныеПравила = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиФормы, "ПравилаПоиска");
	Если ТипЗнч(СохраненныеПравила) = Тип("ТаблицаЗначений") Тогда
		ПравилаЗагружены = Истина;
		Для Каждого СохраненноеПравило Из СохраненныеПравила Цикл
			Правило = ТаблицаПравил.Найти(СохраненноеПравило.Реквизит, "Реквизит");
			Если Правило <> Неопределено
				И Правило.ВариантыСравнения.НайтиПоЗначению(СохраненноеПравило.Правило) <> Неопределено Тогда
				Правило.Правило = СохраненноеПравило.Правило;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 5. Установка умолчаний.
	// Отбор по пометке удаления.
	Если Не ОтборыЗагружены Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			КомпоновщикПредварительногоОтбора.Настройки.Отбор,
			"ПометкаУдаления",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			Ложь);
	КонецЕсли;
	// Сравнение по наименованию.
	Если Не ПравилаЗагружены Тогда
		Правило = ТаблицаПравил.Найти("Наименование", "Реквизит");
		Если Правило <> Неопределено Тогда
			ЗначениеДляСравнения = ?(НечеткийПоиск, "Подобно", "Равно");
			Если Правило.ВариантыСравнения.НайтиПоЗначению(ЗначениеДляСравнения) <> Неопределено Тогда
				Правило.Правило = ЗначениеДляСравнения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 6. Механизмы расширения в части прикладных правил.
	ОписаниеПрикладныхПравил = Неопределено;
	Если СтрокаТаблицыНастроек.СобытиеПараметрыПоискаДублей Тогда
		ПараметрыПоУмолчанию = Новый Структура;
		ПараметрыПоУмолчанию.Вставить("ПравилаПоиска",        ТаблицаПравил);
		ПараметрыПоУмолчанию.Вставить("ОграниченияСравнения", Новый Массив);
		ПараметрыПоУмолчанию.Вставить("КомпоновщикОтбора",    КомпоновщикПредварительногоОтбора);
		ПараметрыПоУмолчанию.Вставить("КоличествоЭлементовДляСравнения", 1000);
		МенеджерОбъектаМетаданных = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		МенеджерОбъектаМетаданных.ПараметрыПоискаДублей(ПараметрыПоУмолчанию);
		
		// Представление прикладных правил.
		ОписаниеПрикладныхПравил = "";
		Для Каждого Описание Из ПараметрыПоУмолчанию.ОграниченияСравнения Цикл
			ОписаниеПрикладныхПравил = ОписаниеПрикладныхПравил + Символы.ПС + Описание.Представление;
		КонецЦикла;
		ОписаниеПрикладныхПравил = СокрЛП(ОписаниеПрикладныхПравил);
	КонецЕсли;
	
	КомпоновщикПредварительногоОтбора.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	ТаблицаПравил.Сортировать("ПредставлениеРеквизита");
	ЗначениеВРеквизитФормы(ТаблицаПравил, "ПравилаПоиска");
	
	Если НастройкиФормы = Неопределено Тогда
		СохранитьПользовательскиеНастройки();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеРеквизитыОтбора(ОбъектМетаданных)
	МассивРеквизитов = Новый Массив;
	Для Каждого РеквизитМетаданные Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		Если Не РеквизитМетаданные.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			МассивРеквизитов.Добавить(РеквизитМетаданные.Имя);
		КонецЕсли
	КонецЦикла;
	Для Каждого РеквизитМетаданные Из ОбъектМетаданных.Реквизиты Цикл
		Если Не РеквизитМетаданные.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			МассивРеквизитов.Добавить(РеквизитМетаданные.Имя);
		КонецЕсли
	КонецЦикла;
	Возврат СтрСоединить(МассивРеквизитов, ",");
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьПравилаМетаРеквизитов(ТаблицаПравил, Знач Игнорировать, Знач ВсеВариантыСравнения, Знач МетаКоллекция, Знач ДоступенНечеткийПоиск)
	
	Для Каждого МетаРеквизит Из МетаКоллекция Цикл
		Если Не Игнорировать.Свойство(МетаРеквизит.Имя) Тогда
			ВариантыСравнения = ВариантыСравненияДляТипа(МетаРеквизит.Тип, ВсеВариантыСравнения, ДоступенНечеткийПоиск);
			Если ВариантыСравнения <> Неопределено Тогда
				// Можно сравнивать
				СтрокаПравил = ТаблицаПравил.Добавить();
				СтрокаПравил.Реквизит          = МетаРеквизит.Имя;
				СтрокаПравил.ВариантыСравнения = ВариантыСравнения;
				
				ПредставлениеРеквизита = МетаРеквизит.Синоним;
				СтрокаПравил.ПредставлениеРеквизита = ?(ПустаяСтрока(ПредставлениеРеквизита), МетаРеквизит.Имя, ПредставлениеРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантыСравненияДляТипа(Знач ДоступныеТипы, Знач ВсеВариантыСравнения, Знач ДоступенНечеткийПоиск) 
	
	ЭтоХранилище = ДоступныеТипы.СодержитТип(Тип("ХранилищеЗначения"));
	Если ЭтоХранилище Тогда 
		// Нельзя сравнивать
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоСтрока = ДоступныеТипы.СодержитТип(Тип("Строка"));
	ЭтоФиксированнаяСтрока = ЭтоСтрока И ДоступныеТипы.КвалификаторыСтроки <> Неопределено 
		И ДоступныеТипы.КвалификаторыСтроки.Длина <> 0;
		
	Если ЭтоСтрока И Не ЭтоФиксированнаяСтрока Тогда
		// Нельзя сравнивать
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	ЗаполнитьЗначенияСвойств(Результат.Добавить(), ВсеВариантыСравнения[0]);		// Совпадает
	
	Если ДоступенНечеткийПоиск И ЭтоСтрока Тогда
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), ВсеВариантыСравнения[1]);	// Похоже
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Пошаговый помощник

&НаСервере
Процедура ИнициализироватьСценарийМастера()
	
	// 0. Поиск не выполнялся.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Найти дубли >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Найти дубли по указанным критериям'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Отказаться от поиска и замены дублей'");
	
	ДобавитьШагМастера(Элементы.ШагПоискНеВыполнялся,
		ДействиеШагаМастера("ПриАктивации",         "ШагПоискНеВыполнялсяПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагПоискНеВыполнялсяПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагПоискНеВыполнялсяПередДействиемОтмена",))),
		КнопкиМастера);
	
	// 1. Длительный поиск.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Прервать'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Прервать поиск дублей'");
	
	ДобавитьШагМастера(Элементы.ШагВыполнениеПоиска,
		ДействиеШагаМастера("ПриАктивации",         "ШагВыполнениеПоискаПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыполнениеПоискаПередДействиемОтмена")), 
		КнопкиМастера);
	
	// 2. Обработка результатов поиска, выбор основных элементов.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Удалить дубли >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Удалить дубли'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Отказаться от поиска и замены дублей'");
	
	ДобавитьШагМастера(Элементы.ШагВыборОсновногоЭлемента,
		ДействиеШагаМастера("ПриАктивации",         "ШагВыборОсновногоЭлементаПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборОсновногоЭлементаПередДействиемОтмена",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборОсновногоЭлементаПередДействиемДалее",))),
		КнопкиМастера);
	
	// 3. Длительное удаление дублей.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Прервать'");
	КнопкиМастера.Отмена.Подсказка = НСтр("ru = 'Прервать удаление дублей'");
	
	ДобавитьШагМастера(Элементы.ШагВыполнениеУдаления,
		ДействиеШагаМастера("ПриАктивации",         "ШагВыполнениеУдаленияПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыполнениеУдаленияПередДействиемОтмена")), 
		КнопкиМастера);
	
	// 4. Успешное удаление.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Заголовок = НСтр("ru = '< Новый поиск'");
	КнопкиМастера.Назад.Подсказка = НСтр("ru = 'Начать новый поиск с другими параметрами'");
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.КнопкаПоУмолчанию = Истина;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагУспешноеУдаление,
		ДействиеШагаМастера("ПриАктивации",         "ШагУспешноеУдалениеПриАктивации",
		ДействиеШагаМастера("ПередДействиемНазад",  "ШагУспешноеУдалениеПередДействиемНазад",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагУспешноеУдалениеПередДействиемОтмена",))),
		КнопкиМастера);
	
	// 5. Неполное удаление.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Повторить удаление >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Удалить дубли'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагНеудачныеЗамены,
		ДействиеШагаМастера("ПриАктивации",         "ШагНеудачныеЗаменыПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагНеудачныеЗаменыПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагНеудачныеЗаменыПередДействиемОтмена",))),
		КнопкиМастера);
	
	// 6. Дублей не найдено.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Заголовок = НСтр("ru = 'Найти дубли >'");
	КнопкиМастера.Далее.Подсказка = НСтр("ru = 'Найти дубли по указанным критериям'");
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагДублейНеНайдено,
		ДействиеШагаМастера("ПриАктивации",         "ШагДублейНеНайденоПриАктивации",
		ДействиеШагаМастера("ПередДействиемДалее",  "ШагДублейНеНайденоПередДействиемДалее",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагДублейНеНайденоПередДействиемОтмена",))),
		КнопкиМастера);
	
	// 7. Ошибки выполнения.
	КнопкиМастера = КнопкиМастера();
	КнопкиМастера.Назад.Видимость = Ложь;
	КнопкиМастера.Далее.Видимость = Ложь;
	КнопкиМастера.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
	ДобавитьШагМастера(Элементы.ШагВозниклаОшибка,
		ДействиеШагаМастера("ПриАктивации",         "ШагВозниклаОшибкаПриАктивации",
		ДействиеШагаМастера("ПередДействиемОтмена", "ШагВозниклаОшибкаПередДействиемОтмена")),
		КнопкиМастера);
	
КонецПроцедуры

// 0. Поиск не выполнялся

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Истина;
	
	// Представление правил отбора.
	ПредставлениеПравилОтбора = Строка(КомпоновщикПредварительногоОтбора.Настройки.Отбор);
	Если ПустаяСтрока(ПредставлениеПравилОтбора) Тогда
		ПредставлениеПравилОтбора = НСтр("ru = 'Все элементы'");
	КонецЕсли;
	
	// Представление правил поиска.
	Союз = " " + НСтр("ru = 'И'") + " ";
	ТекстПравил = "";
	Для Каждого Правило Из ПравилаПоиска Цикл
		Если Правило.Правило = "Равно" Тогда
			Сравнение = Правило.ПредставлениеРеквизита + " " + НСтр("ru = 'совпадает'");
		ИначеЕсли Правило.Правило = "Подобно" Тогда
			Сравнение = Правило.ПредставлениеРеквизита + " " + НСтр("ru = 'совпадает по похожим словам'");
		Иначе
			Продолжить;
		КонецЕсли;
		ТекстПравил = ?(ТекстПравил = "", "", ТекстПравил + Союз) + Сравнение;
	КонецЦикла;
	Если УчитыватьПрикладныеПравила Тогда
		Для Позиция = 1 По СтрЧислоСтрок(ОписаниеПрикладныхПравил) Цикл
			СтрокаПравила = СокрЛП(СтрПолучитьСтроку(ОписаниеПрикладныхПравил, Позиция));
			Если Не ПустаяСтрока(СтрокаПравила) Тогда
				ТекстПравил = ?(ТекстПравил = "", "", ТекстПравил + Союз) + СтрокаПравила;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(ТекстПравил) Тогда
		ТекстПравил = НСтр("ru = 'Правила не заданы'");
	КонецЕсли;
	ПредставлениеПравилПоиска = ТекстПравил;
	
	// Доступность.
	Элементы.ПредставлениеПравилОтбора.Доступность = Не ПустаяСтрока(ОбластьПоискаДублей);
	Элементы.ПредставлениеПравилПоиска.Доступность = Не ПустаяСтрока(ОбластьПоискаДублей);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Возможность поиска
	Если Не ПустаяСтрока(ОбластьПоискаДублей) Тогда
		ЗавершитьШагМастера(ПараметрыШага);
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать область поиска дублей'");
	ПоказатьПредупреждение(, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискНеВыполнялсяПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 1. Длительный поиск

&НаКлиенте
Процедура ШагВыполнениеПоискаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Если Не ЭтоАдресВременногоХранилища(АдресСхемыКомпоновки) Тогда
		Возврат; // Не инициализировано.
	КонецЕсли;
	Элементы.Шапка.Доступность = Ложь;
	НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Истина;
	НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей";
	ЗапуститьФоновоеЗаданиеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ШагВыполнениеПоискаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Ложь;
	Закрыть();
КонецПроцедуры

// 2. Обработка результатов поиска, выбор основных элементов.

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Элементы.Шапка.Доступность = Истина;
	Элементы.ПовторитьПоиск.Видимость = Истина;
	РазвернутьГруппуДублейИерархически();
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Элементы.ПовторитьПоиск.Видимость = Ложь;
	ЗавершитьШагМастера(ПараметрыШага);
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 3. Длительное удаление

&НаКлиенте
Процедура ШагВыполнениеУдаленияПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	//++ 11.10.2017 Веденеев П. //проверка зацикливания составов предметов снабжения
	Если ТипЗнч(НайденныеДубли.ПолучитьЭлементы()[0].ПолучитьЭлементы()[0].Ссылка) = Тип("СправочникСсылка.КаталогПредметовСнабжения") Тогда
		
		ВыполнитьПроверкуЗацикливанияСоставовПредметовСнабжения();
		
	КонецЕсли;
	//-- 11.10.2017 Веденеев П. //проверка зацикливания составов предметов снабжения
	
	Элементы.Шапка.Доступность = Ложь;
	НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Истина;
	НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей";
	ЗапуститьФоновоеЗаданиеКлиент();
	
КонецПроцедуры

//++ 11.10.2017 Веденеев П. //проверка зацикливания составов предметов снабжения
&НаСервере
Функция ВыполнитьПроверкуЗацикливанияСоставовПредметовСнабжения()
	
	Результат = Новый Структура("Выполнено", Истина);
	
	дзНайденныеДубли = РеквизитФормыВЗначение("НайденныеДубли", Тип("ДеревоЗначений"));
		
	Для каждого СтрокаОригинал Из дзНайденныеДубли.Строки Цикл
		
		Если СтрокаОригинал.Пометка > 0 Тогда
			
			ВыбранныеДубликаты = СтрокаОригинал.Строки.НайтиСтроки(Новый Структура("Пометка", 1));
			
			МассивДубликатов = Новый Массив;
			
			Для каждого СтрокаДубликат Из ВыбранныеДубликаты Цикл
				
				МассивДубликатов.Добавить(СтрокаДубликат.Ссылка);
				
			КонецЦикла;
			
			Прервано = Ложь;
			
			Для каждого СтрокаДубликат Из ВыбранныеДубликаты Цикл
				
				Если СтруктураЗаказаСервер.ВходитВСпецификацииПредметовСнабжения(СтрокаДубликат.Ссылка, МассивДубликатов) Тогда
					
					Если СтрокаДубликат.Ссылка = СтрокаОригинал.Ссылка Тогда //если в спецификацию дубликата входит оригинал - отменяем всю ветку						
						
						СтрокаОригинал.Пометка = 0;
						Прервано = Истина;
						Прервать;
						
					Иначе
						
						СтрокаОригинал.Пометка = 2;
						СтрокаДубликат.Пометка = 0;
						Сообщить("Дубликат " + Строка(СтрокаДубликат.Ссылка) + " (" + СтрокаДубликат.Ссылка.Код + ") входит в спецификацию одного из других дубликатов! Пометка снята");
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Прервано Тогда
				
				Для каждого СтрокаДубликат Из ВыбранныеДубликаты Цикл
					
					СтрокаДубликат.Пометка = 0;
					
				КонецЦикла;
				
				Сообщить("Оригинал " + Строка(СтрокаДубликат.Ссылка) + " (" + СтрокаДубликат.Ссылка.Код + ") входит в спецификацию одного из дубликатов! Обработка ветки отменена");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(дзНайденныеДубли, "НайденныеДубли");
		
КонецФункции
//-- 11.10.2017 Веденеев П. //проверка зацикливания составов предметов снабжения

&НаКлиенте
Процедура ШагВыполнениеУдаленияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Ложь;
	Закрыть();
КонецПроцедуры

// 4. Успешное удаление

&НаКлиенте
Процедура ШагУспешноеУдалениеПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Ложь;
	
	//+ 20.04.2017 10:39:29 Савинов Александр Задача: ОПЗ 2
	
	Элементы.Отмена.Видимость = Не ВызовИзФормыСписка;
	Элементы.ЗакрытьПрограммно.Видимость = ВызовИзФормыСписка;
	Элементы.ЗакрытьПрограммно.КнопкаПоУмолчанию = ВызовИзФормыСписка;
	
	//- 20.04.2017 10:39:31 Савинов Александр Задача: ОПЗ 2
	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешноеУдалениеПередДействиемНазад(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Переход на начало для работы с новыми параметрами.
	ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешноеУдалениеПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 5. Неполное удаление

&НаКлиенте
Процедура ШагНеудачныеЗаменыПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагНеудачныеЗаменыПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Повторяем удаление
	ПерейтиНаШагМастера(Элементы.ШагВыполнениеУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагНеудачныеЗаменыПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 6. Дублей не найдено

&НаКлиенте
Процедура ШагДублейНеНайденоПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагДублейНеНайденоПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	ПерейтиНаШагМастера(Элементы.ШагВыполнениеПоиска); // Повторный поиск.
	
КонецПроцедуры

&НаКлиенте
Процедура ШагДублейНеНайденоПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

// 7. Ошибки выполнения.

&НаКлиенте
Процедура ШагВозниклаОшибкаПриАктивации(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	Элементы.Шапка.Доступность = Истина;
	Элементы.СсылкаПодробнее.Видимость = ЗначениеЗаполнено(Элементы.СсылкаПодробнее.Подсказка);
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВозниклаОшибкаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок мастера

// Для встраивания функционала мастера необходимо:
//
//     1) Нарисовать на форме группу, содержащую страницы помощника.
//     2) Определить на форме три команды для действий "Далее", "Назад", "Отмена". Определить им обработчики как:
//
//         &НаКлиенте
//         Процедура ШагМастераНазад(Команда)
//             ШагМастера("Назад");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераДалее(Команда)
//             ШагМастера("Далее");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераОтмена(Команда)
//             ШагМастера("Отмена");
//         КонецПроцедуры
//
//     3) Добавить блок методов пошагового помощника.
//
//     4) В коде на сервере:
//          - Инициализировать структуры помощника вызовом "ИнициализироватьМастер", передав туда соответствующие
//            элементы формы.
//
//          - Создать сценарий работы последовательным вызовами "ДобавитьШагМастера". Рекомендуется использовать 
//            вспомогательные функции "ДействиеШагаМастера" и "КнопкаШагаМастера". Например:
//
//              ДобавитьШагМастера(Элементы.ШагВыборЦелевогоЭлемента, 
//                      ДействиеШагаМастера("ПриАктивации",         "ШагВыборЦелевогоЭлементаПриАктивации",
//                      ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборЦелевогоЭлементаПередДействиемДалее",
//                      ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборЦелевогоЭлементаПередДействиемОтмена",
//                  ))), 
//                      КнопкиМастера()
//              );
//
//     5) В коде на клиенте (обычно при открытии):
//          - Указать начальную страницу мастера при помощи вызова "УстановитьНачальнуюСтраницуМастера".
//          - Запустить начальную страницу вызовом "ЗапуститьРаботуМастера".
//

&НаСервере
Функция ИнициализироватьМастер(Знач ГруппаСтраниц, Знач КнопкаДалее, Знач КнопкаНазад, Знач КнопкаОтмена)
	// Инициализирует структуры мастера.
	//
	// Параметры:
	//     ГруппаСтраниц - ГруппаФормы - Элемент формы, группа типа "страницы", содержащая в себе страницы-шаги мастера.
	//     КнопкаДалее   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Далее".
	//     КнопкаНазад   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Назад".
	//     КнопкаОтмена  - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Отмена".
	Результат = Новый Структура;
	
	Результат.Вставить("Шаги", Новый Массив);
	Результат.Вставить("НомерТекущегоШага", 0);
	Результат.Вставить("СтраницаСтарта", Неопределено);
	
	// Идентификаторы частей интерфейса.
	Результат.Вставить("ГруппаСтраниц", ГруппаСтраниц.Имя);
	Результат.Вставить("КнопкаДалее",   КнопкаДалее.Имя);
	Результат.Вставить("КнопкаНазад",   КнопкаНазад.Имя);
	Результат.Вставить("КнопкаОтмена",  КнопкаОтмена.Имя);
	
	// Для обработки длительных операций.
	Результат.Вставить("ИмяПроцедуры");
	Результат.Вставить("ПоказатьДиалогПередЗакрытием", Ложь);
	
	Возврат Результат;
КонецФункции

// Добавляет шаг мастера. Переходы между страницами будут происходить согласно порядку добавления.
//
// Параметры:
//
//     Страница - ГруппаФормы - Группа-страница, содержащая элементы текущего шага страницы.
// 
//     Действия - Структура - Описание действий, возможных на текущем шаге. Поля структуры:
//
//          *  ПриАктивации      - Строка - Необязательное имя процедуры, которая будет выполнена перед активацией
//                                          страницы с двумя параметрами:
//                                           <Страница> - ГруппаФормы - группа-страница, которая активизируется.
//                                           <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемДалее  - Строка - Необязательное имя процедуры, которая будет выполнена при нажатии кнопки
//                                            "Далее", перед переходом на следующую страницу. Процедура будет вызвана с
//                                            двумя параметрами:
//                                              <ПараметрыШага> - служебный реквизит. При успешном завершении цепочки
//                                                                немодальных  вызовов последняя процедура-обработчик
//                                                                должна произвести вызов.
//                                                                ЗавершитьШагМастера(ПараметрыШага), подтверждая
//                                                                действие.
//                                             <ДополнительныеПараметры> - Неопределено
//
//          * ПередДействиемНазад  - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Назад".
//
//          * ПередДействиемОтмена - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки
//                                            "Отмена".
//
//      Кнопки - Структура - описание кнопок на текущем шаге. Поля структуры:
//
//          * Далее  - Структура - Описание кнопки "Далее". поля: Заголовок, Подсказка, Доступность, Видимость,
//                                 КнопкаПоУмолчанию.
//                                 Пустая подсказка заменяется на заголовок. По умолчанию будут использованы значения:
//                                 Заголовок = "Далее >", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Истина;
//
//          * Назад  - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "< Назад", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
//          * Отмена - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                                 Заголовок = "Отмена", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
// Для составления параметров рекомендуется использовать вспомогательные методы "ДобавитьШагМастера",
// "ДействиеШагаМастера", "КнопкаШагаМастера".
//
&НаСервере
Процедура ДобавитьШагМастера(Знач Страница, Знач Действия, Знач Кнопки)
	
	// Умолчания
	ОписаниеШага = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена");
	
	ОписаниеШага.Вставить("Страница", Страница.Имя);
	
	// Устанавливаем действия
	ЗаполнитьЗначенияСвойств(ОписаниеШага, Действия);
	
	// Регистрация описаний кнопок.
	Для Каждого КлючИЗначение Из Кнопки Цикл
		ИмяКнопки = КлючИЗначение.Ключ;
		ОписаниеКнопки = КлючИЗначение.Значение;
		// Дозаполнение вторичных свойств.
		Если Не ОписаниеКнопки.Видимость Тогда
			ОписаниеКнопки.Доступность = Ложь;
			ОписаниеКнопки.КнопкаПоУмолчанию = Ложь;
		Иначе
			Если Не ЗначениеЗаполнено(ОписаниеКнопки.Подсказка) Тогда
				ОписаниеКнопки.Подсказка = ОписаниеКнопки.Заголовок;
			КонецЕсли;
		КонецЕсли;
		// Регистрация с префиксом "Кнопка".
		ОписаниеШага.Вставить("Кнопка" + ИмяКнопки, ОписаниеКнопки);
	КонецЦикла;

	НастройкиПошаговогоМастера.Шаги.Добавить(ОписаниеШага);
КонецПроцедуры

// Вспомогательное формирование структуры, описывающей действие.
//
// Параметры:
//     Идентификатор    - Строка - Идентификатор действия, см описание метода "ДобавитьШагМастера".
//     ИмяОбработчика   - Строка - Имя процедуры, см описание метода "ДобавитьШагМастера".
//     СлужебныеДанные  - Структура - Накапливает значения.
//
// Возвращаемое значение - Структура - СлужебныеДанные с добавленными полями.
&НаСервере
Функция ДействиеШагаМастера(Знач Идентификатор, Знач ИмяОбработчика, СлужебныеДанные = Неопределено)
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	СлужебныеДанные.Вставить(Идентификатор, ИмяОбработчика);;
	Возврат СлужебныеДанные;
КонецФункции

// Вспомогательное формирование структуры, описывающей кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Кнопки мастера.
//       * Назад  - Структура - Описание кнопки Назад, сформированное методом КнопкаМастера().
//       * Далее  - Структура - Описание кнопки Далее, сформированное методом КнопкаМастера().
//       * Отмена - Структура - Описание кнопки Отмена, сформированное методом КнопкаМастера().
//
&НаСервере
Функция КнопкиМастера()
	Результат = Новый Структура("Далее, Назад, Отмена", КнопкаМастера(), КнопкаМастера(), КнопкаМастера());
	Результат.Далее.КнопкаПоУмолчанию = Истина;
	Результат.Далее.Заголовок = НСтр("ru='Далее >'");
	Результат.Назад.Заголовок = НСтр("ru='< Назад'");
	Результат.Отмена.Заголовок = НСтр("ru='Отмена'");
	Возврат Результат;
КонецФункции

// Описание настроек кнопки мастера.
//
// Возвращаемое значение:
//   Структура - Настройки кнопки формы.
//       * Заголовок         - Строка - Заголовок кнопки.
//       * Подсказка         - Строка - Подсказка для кнопки.
//       * Видимость         - Булево - Когда Истина то кнопка видна. Значение по умолчанию: Истина.
//       * Доступность       - Булево - Когда Истина то кнопку можно нажимать. Значение по умолчанию: Истина.
//       * КнопкаПоУмолчанию - Булево - Когда Истина то кнопка будет основной кнопкой формы. Значение по умолчанию:
//                                      Ложь.
//
// См. также:
//   "КнопкаФормы" в синтакс-помощнике.
//
&НаСервере
Функция КнопкаМастера()
	Результат = Новый Структура;
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Подсказка", "");
	
	Результат.Вставить("Доступность", Истина);
	Результат.Вставить("Видимость", Истина);
	Результат.Вставить("КнопкаПоУмолчанию", Ложь);
	
	Возврат Результат;
КонецФункции

// Устанавливает начальную страницу для первого запуска мастера.
//
// Параметры:
//     СтартоваяСтраница - Число, Строка, ГруппаФормы - Номер шага, группа-страница, или ее идентификатор.
//
&НаКлиенте
Процедура УстановитьНачальнуюСтраницуМастера(Знач Страница)
	
	НастройкиПошаговогоМастера.СтраницаСтарта = НомерШагаМастераПоИдентификатору(Страница);
	
КонецПроцедуры

// Запускает начальную работу мастера с шага, установленного предварительно при помощи
// "УстановитьНачальнуюСтраницуМастера".
&НаКлиенте
Процедура ЗапуститьРаботуМастера()
	
	Если НастройкиПошаговогоМастера.СтраницаСтарта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Перед запуском мастера должна быть установлена начальная страница.'");
		
	ИначеЕсли НастройкиПошаговогоМастера.СтраницаСтарта = -1 Тогда
		// Разогрев. Проверяем наличие обработчиков действий у всех шагов.
		ВозможныеДействия = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена");
		Для Каждого ОписаниеШага Из НастройкиПошаговогоМастера.Шаги Цикл
			Для Каждого КлючЗначение Из ВозможныеДействия Цикл
				ИмяДействия = КлючЗначение.Ключ;
				ИмяОбработчика = ОписаниеШага[ИмяДействия];
				Если Не ПустаяСтрока(ИмяОбработчика) Тогда
					Попытка
						Тест = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
					Исключение
						Текст = НСтр("ru = 'Ошибка создания обработчика события %1 для страницы %2, не определена процедура %3'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяДействия, ОписаниеШага.Страница, ИмяОбработчика);
						ВызватьИсключение Текст;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Фактический запуск
		ПерейтиНаШагМастера(НастройкиПошаговогоМастера.НомерТекущегоШага);
	Иначе
		// По умолчанию все отключено
		Элементы[НастройкиПошаговогоМастера.КнопкаДалее].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаНазад].Видимость  = Ложь;
		Элементы[НастройкиПошаговогоМастера.КнопкаОтмена].Видимость = Ложь;
		
		// Отложенный запуск
		НастройкиПошаговогоМастера.НомерТекущегоШага = НастройкиПошаговогоМастера.СтраницаСтарта;
		НастройкиПошаговогоМастера.СтраницаСтарта    = -1;
		ПодключитьОбработчикОжидания("ЗапуститьРаботуМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Выполняет переключение мастера на следующую или предыдущую страницу.
//
// Параметры:
//     КодКоманды - Строка - Идентификатор действия, может принимать значения "Далее", "Назад" или "Отмена".
//
&НаКлиенте
Процедура ШагМастера(Знач КодКоманды)
	
	Если КодКоманды = "Далее" Тогда
		Направление = 1;
	ИначеЕсли КодКоманды = "Назад" Тогда
		Направление = -1;
	ИначеЕсли КодКоманды = "Отмена" Тогда
		Направление = 0;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректная команда шага помощника'");
	КонецЕсли;
	
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// Отрабатываем уход с текущей страницы.
	Если Направление = 1 Тогда
		Действие = ОписаниеШага.ПередДействиемДалее;
		
	ИначеЕсли Направление = -1 Тогда
		Действие = ОписаниеШага.ПередДействиемНазад;
		
	Иначе
		Действие = ОписаниеШага.ПередДействиемОтмена;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Действие) Тогда
		ЗавершитьШагМастера(Направление);
	Иначе
		Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Направление);
	КонецЕсли;
КонецПроцедуры

// Выполняет безусловное позиционирование мастера на страницу.
//
// Параметры:
//     ИдентификаторШага   - Число, Строка, ГруппаФормы - Номер, группа-страница формы или ее имя для перехода.
//     ИнициироватьСобытия - Булево - Флаг того, что необходимо вызывать события, связанные с активацией шага.
//
&НаКлиенте
Процедура ПерейтиНаШагМастера(Знач ИдентификаторШага, Знач ИнициироватьСобытия = Истина)
	СледующийШаг = НомерШагаМастераПоИдентификатору(ИдентификаторШага);
	Если СледующийШаг = Неопределено Тогда
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден шаг помощника %1'"), ИдентификаторШага);
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	
	// И запускаем новую страницу
	ШагМастераЗавершениеБезусловно(СледующийШаг, ИнициироватьСобытия);
КонецПроцедуры

// Подтверждает действие шага мастера и вызывает переключение страницы.
//
// Параметры:
//     ПараметрыШага - Служебный реквизит, полученный в обработчике перед началом действия.
//
&НаКлиенте
Процедура ЗавершитьШагМастера(Знач ПараметрыШага)
	СледующийШаг = НастройкиПошаговогоМастера.НомерТекущегоШага + ПараметрыШага;
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	Если ПараметрыШага = 0 Тогда
		// Подтверждение отмены - ничего не делаем.
		Возврат;
		
	ИначеЕсли ПараметрыШага = 1 И СледующийШаг > ПоследнийШаг Тогда
		// Попытка сделать шаг за пределы вперед.
		ВызватьИсключение НСтр("ru='Попытка выхода за последний шаг мастера'");
		
	ИначеЕсли ПараметрыШага = -1 И СледующийШаг < 0 Тогда
		// Попытка сделать шаг за пределы назад.
		ВызватьИсключение НСтр("ru='Попытка выхода назад из первого шага мастера'");
		
	КонецЕсли;
	
	ШагМастераЗавершениеБезусловно(СледующийШаг);
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераЗавершениеБезусловно(Знач СледующийШаг, Знач ИнициироватьСобытия = Истина)
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу.
	Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	//+ 13.04.2017 15:08:58 Савинов Александр Задача: ОПЗ 2
	
	Элементы.ДобавитьДубли.Видимость = HighPerfomance И НастройкиПошаговогоМастера.НомерТекущегоШага = 0;	
	// УДАЛИТЬ ПОТОМ
	Элементы.ЗаполнитьИзБазы.Видимость = HighPerfomance И НастройкиПошаговогоМастера.НомерТекущегоШага = 0;	
	// УДАЛИТЬ ПОТОМ
	
	//- 13.04.2017 15:09:01 Савинов Александр Задача: ОПЗ 2
	
	Если ИнициироватьСобытия И Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		// Отрабатываем "ПриАктивации" новой страницы, он же запустит ожидание.
		ПодключитьОбработчикОжидания("ОбработкаАктивацииСтраницыМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваКнопкиМастера(Знач ИмяКнопки, Знач Описание)
	
	КнопкаМастера = Элементы[ИмяКнопки];
	ЗаполнитьЗначенияСвойств(КнопкаМастера, Описание);
	КнопкаМастера.РасширеннаяПодсказка.Заголовок = Описание.Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивацииСтраницыМастера()
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[НастройкиПошаговогоМастера.НомерТекущегоШага];
	Если Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		Оповещение = Новый ОписаниеОповещения(ОписаниеШага.ПриАктивации, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Элементы[ОписаниеШага.Страница]);
	КонецЕсли;
КонецПроцедуры

// Может быть номер шага или группа-страница, или ее идентификатор.
&НаКлиенте
Функция НомерШагаМастераПоИдентификатору(Знач ИдентификаторШага)
	ТипПараметра = ТипЗнч(ИдентификаторШага);
	Если ТипПараметра = Тип("Число") Тогда
		Возврат ИдентификаторШага;
	КонецЕсли;
	
	ИмяПоиска = ?(ТипПараметра = Тип("ГруппаФормы"), ИдентификаторШага.Имя, ИдентификаторШага);
	Для НомерШага=0 По НастройкиПошаговогоМастера.Шаги.ВГраница() Цикл
		Если НастройкиПошаговогоМастера.Шаги[НомерШага].Страница = ИмяПоиска Тогда
			Возврат НомерШага;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден шаг ""%1"".'"), ИмяПоиска);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с длительными операциями

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеКлиент()
	
	////+ 24.04.2017 11:52:37 Савинов Александр Задача: ОПЗ 2
	//
	//Если HighPerfomance И НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
	//
	//	РеквизитыИсточника = ОбщиеФункцииСервер.ПолучитьЗначенияРеквизитов(ПредопределенноеЗначение("Справочник.ИсточникиДанных.ПодключениеКТекущейСУБД"), "ИмяСервера,ИмяБазы,Пользователь,Пароль");
	//	
	//	Если Не ЗначениеЗаполнено(РеквизитыИсточника.ИмяСервера) Или
	//		Не ЗначениеЗаполнено(РеквизитыИсточника.ИмяБазы) Или
	//		Не ЗначениеЗаполнено(РеквизитыИсточника.Пользователь) Или
	//		Не ЗначениеЗаполнено(РеквизитыИсточника.Пароль) Тогда
	//		
	//		ПоказатьПредупреждение(, "Не заполнен источник данных ""Подключение к текущей СУБД""",, "Действие запрещено");
	//		Возврат;
	//		
	//	КонецЕсли;	
	//	
	//КонецЕсли;	
	//
	////- 24.04.2017 11:52:40 Савинов Александр Задача: ОПЗ 2
	
	Задание = ЗапуститьФоновоеЗадание();
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗадания", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗадание()
	
	Элементы.ПовторитьПоиск.Доступность = Истина;	
	
	// Определение параметров запуска.
	ИмяМетода = "ДлительныеОперации.ВыполнитьКомандуОтчетаИлиОбработки";
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ПолноеИмяОбъекта", "Обработка.ПоискИУдалениеДублей");
	ПараметрыМетода.Вставить("ИмяПроцедуры", НастройкиПошаговогоМастера.ИмяПроцедуры);
	
	Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
		
		//+ 06.04.2017 13:40:06 Савинов Александр Задача: ОПЗ 2
		
		УбратьВременныеКолонки();				
		
		Если HighPerfomance Тогда
		
			ПараметрыМетода.Вставить("HighPerfomance");
			ПараметрыМетода.Вставить("ДостаточноеКоличество", ДостаточноеКоличество);
			
			Если ПолучитьДублиСвышеДостаточногоКоличества Тогда
			
				ПараметрыМетода.Вставить("ПолучитьДублиСвышеДостаточногоКоличества");
				
				ПолучитьДублиСвышеДостаточногоКоличества = Ложь;
			
			КонецЕсли;
			
			МассивОтмеченныхРеквизитов = Новый Массив;
			
			Для каждого Реквизит Из СписокРеквизитов Цикл
				
				Если Реквизит.Пометка Тогда
					
					МассивОтмеченныхРеквизитов.Добавить(Реквизит.Значение);	
					
				КонецЕсли;	
				
			КонецЦикла;
			
			ПараметрыМетода.Вставить("МассивОтмеченныхРеквизитов", МассивОтмеченныхРеквизитов);
			
			СтруктураОтбораПоЗаказу = Неопределено;
			
			Если ЗначениеЗаполнено(АдресНастроекОтбораПоЗаказу) Тогда
			
				СтруктураОтбораПоЗаказу = ПолучитьИзВременногоХранилища(АдресНастроекОтбораПоЗаказу);
			
			КонецЕсли;
			
			ПараметрыМетода.Вставить("СтруктураОтбораПоЗаказу", СтруктураОтбораПоЗаказу);
			
		КонецЕсли;
		
		//- 06.04.2017 13:40:09 Савинов Александр Задача: ОПЗ 2
		
		НаименованиеМетода = НСтр("ru = 'Поиск и удаление дублей: Поиск дублей'");
		
		ПараметрыМетода.Вставить("ОбластьПоискаДублей",     ОбластьПоискаДублей);
		ПараметрыМетода.Вставить("МаксимальноеЧислоДублей", 1500);
		
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			ПараметрыМетода.МаксимальноеЧислоДублей = 50;
		КонецЕсли;
		
		МассивПравилПоиска = Новый Массив;
		Для Каждого Правило Из ПравилаПоиска Цикл
			МассивПравилПоиска.Добавить(Новый Структура("Реквизит, Правило", Правило.Реквизит, Правило.Правило));
		КонецЦикла;
		ПараметрыМетода.Вставить("ПравилаПоиска", МассивПравилПоиска);
		
		ПараметрыМетода.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
		
		// В качестве схемы компоновки передаем схему, будет использован отдельный фоновый сеанс.
		ПараметрыМетода.Вставить("СхемаКомпоновки", ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки));
		ПараметрыМетода.Вставить("НастройкиКомпоновщикаПредварительногоОтбора", КомпоновщикПредварительногоОтбора.Настройки);
		
	ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
		
		НаименованиеМетода = НСтр("ru = 'Поиск и удаление дублей: Удаление дублей'");
		
		ПараметрыМетода.Вставить("СпособУдаления", "Пометка");
		ПараметрыМетода.Вставить("ПарыЗамен", ПарыЗаменДублей());
		ПараметрыМетода.Вставить("УчитыватьПрикладныеПравила", УчитыватьПрикладныеПравила);
		
		//++ 03.10.2017 Веденеев П. //добавление списка сохраняемых реквизитов в параметры метода
		ПараметрыМетода.Вставить("СписокСохраняемыхРеквизитов", СписокСохраняемыхРеквизитов);
		//-- 03.10.2017 Веденеев П. //добавление списка сохраняемых реквизитов в параметры метода
		
		//++ 23.10.2017 Веденеев П. //добавление списка родителей удаляемых спецификаций в параметры метода
		ПараметрыМетода.Вставить("ТаблицаРодителейУдаляемыхСпецификаций", ТаблицаРодителейУдаляемыхСпецификаций.Выгрузить());
		ПараметрыМетода.Вставить("ПризнакЗИПОригинала", ПризнакЗИПОригинала);
		ПараметрыМетода.Вставить("СписокОбъединяемыхЭлементовСтруктуры", СписокОбъединяемыхЭлементовСтруктуры);
		//-- 23.10.2017 Веденеев П. //добавление списка родителей удаляемых спецификаций в параметры метода
		
		//++ 14.11.2017 Веденеев П. //устранение бага
		Если Не ПараметрыМетода.Свойство("ОбластьПоискаДублей") Тогда
			
			ПараметрыМетода.Вставить("ОбластьПоискаДублей", ОбластьПоискаДублей);
			
		КонецЕсли;
		//-- 14.11.2017 Веденеев П. //устранение бага
		
		//+ 12.04.2017 9:23:33 Савинов Александр Задача: ОПЗ 2
		
		Если HighPerfomance Тогда
			
			МестаИспользования = ПолучитьИзВременногоХранилища(АдресМестИспользования);
			
			Для каждого Строка Из МестаИспользования Цикл
				
				Строка.Метаданные = Неопределено;	
				
			КонецЦикла;	
			
			ПараметрыМетода.Вставить("HighPerfomance");
			ПараметрыМетода.Вставить("МестаИспользования", МестаИспользования);
			ПараметрыМетода.Вставить("ОбластьПоискаДублей", ОбластьПоискаДублей);
		
		КонецЕсли;
		
		//- 12.04.2017 9:23:33 Савинов Александр Задача: ОПЗ 2
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НаименованиеМетода;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗадания(Задание, ДополнительныеПараметры) Экспорт
	НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Ложь;
	Активизировать();
	Если Задание.Статус = "Выполнено" Тогда
		Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
			
			//+ 10.04.2017 10:09:35 Савинов Александр Задача: ОПЗ 2
			
			//ВсегоНайденоДублей = ЗаполнитьРезультатыПоискаДублей(Задание.АдресРезультата);
			
			РезультатПоискаДублей = ЗаполнитьРезультатыПоискаДублей(Задание.АдресРезультата);
			
			Если ТипЗнч(РезультатПоискаДублей) = Тип("Структура") Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияОбработчикОтветаНаВопрос", ЭтотОбъект);
				
				ПоказатьВопрос(ОписаниеОповещения, РезультатПоискаДублей.ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Получение дублей");
				
				Возврат;
				
			Иначе
				
				ВсегоНайденоДублей = РезультатПоискаДублей;
				
			КонецЕсли;
			
			//- 10.04.2017 10:09:38 Савинов Александр Задача: ОПЗ 2
			
			Если ВсегоНайденоДублей > 0 Тогда
				// Найдены дубли.
				ШагМастера("Далее");
			ИначеЕсли ВсегоНайденоДублей < 0 Тогда
				// Возникла ошибка (вероятно, найдено слишком много дублей).
				ПерейтиНаШагМастера(Элементы.ШагВозниклаОшибка);
			Иначе
				// Дублей по текущим установкам не найдено.
				ПерейтиНаШагМастера(Элементы.ШагДублейНеНайдено);
			КонецЕсли;
		ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
			Успех = ЗаполнитьРезультатыУдаленияДублей(Задание.АдресРезультата);
			Если Успех = Истина Тогда
				// Заменены все группы дублей.
				ШагМастера("Далее");	
			Иначе
				// Не все места использования удалось заменить.
				ПерейтиНаШагМастера(Элементы.ШагНеудачныеЗамены);
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Фоновое задание завершено с ошибкой.
		Если НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей" Тогда
			Кратко = НСтр("ru = 'При поиске дублей возникла ошибка:'");
		ИначеЕсли НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновоеУдалениеДублей" Тогда
			Кратко = НСтр("ru = 'При удалении дублей возникла ошибка:'");
		КонецЕсли;
		Кратко = Кратко + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		Подробно = Кратко + Символы.ПС + Символы.ПС + Задание.ПодробноеПредставлениеОшибки;
		Элементы.НадписьТекстОшибки.Заголовок = Кратко;
		Элементы.СсылкаПодробнее.Подсказка    = Подробно;
		ПерейтиНаШагМастера(Элементы.ШагВозниклаОшибка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРезультатыПоискаДублей(Знач АдресРезультата)
	// Данные - результат функции ГруппыДублей модуля.
	Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Не ПустаяСтрока(Данные.ОписаниеОшибки) Тогда // Фоновое сломалось
		Элементы.НадписьТекстОшибки.Заголовок = Данные.ОписаниеОшибки;
		Элементы.СсылкаПодробнее.Видимость    = Ложь;
		Возврат -1;
	КонецЕсли;
	
	//+ 10.04.2017 10:09:35 Савинов Александр Задача: ОПЗ 2
	
	Если Данные.Свойство("ПревышениеДостаточногоКоличества") Тогда
		
		ТекстВопроса = "Минимальная группа дублей превышает достаточное количество и составляет " + Формат(Данные.ПревышениеДостаточногоКоличества, "ЧГ=") + " записей." + Символы.ПС + "Получить дубли?";
	
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ТекстВопроса", ТекстВопроса);
		
		Возврат СтруктураВозврата;
	
	КонецЕсли;
	
	ТаблицаДублей = Данные.ТаблицаДублей;
	
	ЕстьКолонкаКоличество = Ложь;
	
	Если HighPerfomance И ТаблицаДублей.Количество() > 0 Тогда
		
		ДобавитьВременныеКолонки(ТаблицаДублей, Данные.МассивРеквизитов);	
		
		ЕстьКолонкаКоличество = Не ТаблицаДублей.Колонки.Найти("Количество") = Неопределено;
		
	КонецЕсли;
	
	//- 10.04.2017 10:09:38 Савинов Александр Задача: ОПЗ 2	
	
	// Нет ошибок поиска
	// Строим дерево для редактирования по таблицам результата.
	ЭлементыДерева = НайденныеДубли.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	МестаИспользования = Данные.МестаИспользования;
	//ТаблицаДублей      = Данные.ТаблицаДублей;	
	
	ФильтрСтрок = Новый Структура("Родитель");
	ФильтрМест  = Новый Структура("Ссылка");
	
	ВсегоНайденоДублей = 0;
	
	ВсеГруппы = ТаблицаДублей.НайтиСтроки(ФильтрСтрок);
	Для Каждого Группа Из ВсеГруппы Цикл
		ФильтрСтрок.Родитель = Группа.Ссылка;
		ЭлементыГруппы = ТаблицаДублей.НайтиСтроки(ФильтрСтрок);
		
		ГруппаДерева = ЭлементыДерева.Добавить();
		ГруппаДерева.Количество = ЭлементыГруппы.Количество();
		ГруппаДерева.Пометка = 1;
		
		МаксСтрока = Неопределено;
		МаксМест   = -1;
		Для Каждого Элемент Из ЭлементыГруппы Цикл
			СтрокаДерева = ГруппаДерева.ПолучитьЭлементы().Добавить();
			//ЗаполнитьЗначенияСвойств(СтрокаДерева, Элемент, "Ссылка, Код, Наименование");
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Элемент);
			
			Если ЕстьКолонкаКоличество Тогда
				
				СтрокаДерева.КоличествоСсылки = Элемент.Количество;	
				
			КонецЕсли;			
			
			СтрокаДерева.Пометка = 1;
			
			ФильтрМест.Ссылка = Элемент.Ссылка;
			СтрокаДерева.Количество = МестаИспользования.НайтиСтроки(ФильтрМест).Количество();
			
			Если МаксМест < СтрокаДерева.Количество Тогда
				Если МаксСтрока <> Неопределено Тогда
					МаксСтрока.Основной = Ложь;
				КонецЕсли;
				МаксСтрока = СтрокаДерева;
				МаксМест   = СтрокаДерева.Количество;
				МаксСтрока.Основной = Истина;
			КонецЕсли;
			
			ВсегоНайденоДублей = ВсегоНайденоДублей + 1;
		КонецЦикла;
		
		// Устанавливаем кандидата по максимальной ссылке.
		ГруппаДерева.Наименование = МаксСтрока.Наименование + " (" + ГруппаДерева.Количество + ")";
	КонецЦикла;	
	
	// Места использования сохраняем для дальнейшего фильтра.
	МестаИспользованияКандидата.Очистить();
	Элементы.ОписаниеТекущейГруппыДублей.Заголовок = НСтр("ru = 'Дублей не найдено'");
	
	Если ЭтоАдресВременногоХранилища(АдресМестИспользования) Тогда
		УдалитьИзВременногоХранилища(АдресМестИспользования);
	КонецЕсли;
	АдресМестИспользования = ПоместитьВоВременноеХранилище(МестаИспользования, УникальныйИдентификатор);
	
	Если ВсегоНайденоДублей = ЭлементыДерева.Количество() Тогда
		ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(Элементы.Информация16.Картинка, " ",
			НСтр("ru = 'Не обнаружено дублей по указанным условиям.'"));
	Иначе
		
		//+ 10.04.2017 10:09:38 Савинов Александр Задача: ОПЗ 2
		
		Если HighPerfomance Тогда
		
			ОбновитьОписаниеСостоянияНайденныхДублей(ЭтотОбъект, Данные.СчетчикКоличество);
		
		Иначе
		
			ОбновитьОписаниеСостоянияНайденныхДублей(ЭтотОбъект);	
		
		КонецЕсли;
		
		//- 10.04.2017 10:09:38 Савинов Александр Задача: ОПЗ 2
		
	КонецЕсли;
	
	Возврат ВсегоНайденоДублей;
КонецФункции

&НаСервере
Функция ЗаполнитьРезультатыУдаленияДублей(Знач АдресРезультата)
	
	//++ 25.09.2017 Веденеев П. - HighPerformance отключен
	
	//+ 21.04.2017 13:58:21 Савинов Александр Задача: ОПЗ 2
	
	//Если HighPerfomance Тогда
	//
	//	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	//	
	//	Если Не Результат.Выполнено Тогда
	//	
	//		Сообщить(Результат.Описание);	
	//	
	//	КонецЕсли;
	//	
	//	Возврат Результат.Выполнено;
	//	
	//Иначе
		
		// ТаблицаОшибок - результат функции ЗаменитьСсылки модуля.
		ТаблицаОшибок = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ТаблицаОшибок = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(АдресРезультатаЗамены) Тогда
			УдалитьИзВременногоХранилища(АдресРезультатаЗамены);
		КонецЕсли;
		
		ЗавершеноБезОшибок = ТаблицаОшибок.Количество() = 0;
		ПоследнийКандидат  = Неопределено;
		
		Если ЗавершеноБезОшибок Тогда
			ВсегоОбработано = 0; 
			ВсегоОсновных   = 0;
			Для Каждого ГруппаДублей Из НайденныеДубли.ПолучитьЭлементы() Цикл
				Если ГруппаДублей.Пометка Тогда
					Для Каждого Кандидат Из ГруппаДублей.ПолучитьЭлементы() Цикл
						Если Кандидат.Основной Тогда
							ПоследнийКандидат = Кандидат.Ссылка;
							ВсегоОбработано   = ВсегоОбработано + 1;
							ВсегоОсновных     = ВсегоОсновных + 1;
						ИначеЕсли Кандидат.Пометка Тогда 
							ВсегоОбработано = ВсегоОбработано + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если ВсегоОсновных = 1 Тогда
				// Много дублей в один элемент.
				Если ПоследнийКандидат = Неопределено Тогда
					ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все найденные дубли (%1) успешно объединены'"),
					ВсегоОбработано));
				Иначе
					ПоследнийКандидатСтрокой = ОбщегоНазначения.ПредметСтрокой(ПоследнийКандидат);
					ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Все найденные дубли (%1) успешно объединены
					|в ""%2""'"),
					ВсегоОбработано, ПоследнийКандидатСтрокой));
				КонецЕсли;
			Иначе
				// Много дублей во много групп.
				ОписаниеСостоянияНайденныхДублей = Новый ФорматированнаяСтрока(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все найденные дубли (%1) успешно объединены.
				|Оставлено элементов (%2).'"),
				ВсегоОбработано,
				ВсегоОсновных));
			КонецЕсли;
		КонецЕсли;
		
		НеобработанныеДубли.ПолучитьЭлементы().Очистить();
		МестаИспользованияНеобработанных.Очистить();
		МестаИспользованияКандидата.Очистить();
		
		Если ЗавершеноБезОшибок Тогда
			НайденныеДубли.ПолучитьЭлементы().Очистить();
			Возврат Истина;
		КонецЕсли;
		
		// Сохраняем для последующего доступа при анализе ссылок.
		АдресРезультатаЗамены = ПоместитьВоВременноеХранилище(ТаблицаОшибок, УникальныйИдентификатор);
		
		// Формируем дерево дублей по ошибкам.
		ЗначениеВРеквизитФормы(РеквизитФормыВЗначение("НайденныеДубли"), "НеобработанныеДубли");
		
		// Анализируем оставшихся
		Фильтр = Новый Структура("Ссылка");
		Родители = НеобработанныеДубли.ПолучитьЭлементы();
		ПозицияРодителя = Родители.Количество() - 1;
		Пока ПозицияРодителя >= 0 Цикл
			Родитель = Родители[ПозицияРодителя];
			
			Потомки = Родитель.ПолучитьЭлементы();
			ПозицияПотомка = Потомки.Количество() - 1;
			ОсновнойПотомок = Потомки[0];	// Там есть минимум один
			
			Пока ПозицияПотомка >= 0 Цикл
				Потомок = Потомки[ПозицияПотомка];
				
				Если Потомок.Основной Тогда
					ОсновнойПотомок = Потомок;
					Фильтр.Ссылка = Потомок.Ссылка;
					Потомок.Количество = ТаблицаОшибок.НайтиСтроки(Фильтр).Количество();
					
				ИначеЕсли ТаблицаОшибок.Найти(Потомок.Ссылка, "Ссылка") = Неопределено Тогда
					// Был успешно удален, нет ошибок.
					Потомки.Удалить(Потомок);
					
				Иначе
					Фильтр.Ссылка = Потомок.Ссылка;
					Потомок.Количество = ТаблицаОшибок.НайтиСтроки(Фильтр).Количество();
					
				КонецЕсли;
				
				ПозицияПотомка = ПозицияПотомка - 1;
			КонецЦикла;
			
			КоличествоПотомков = Потомки.Количество();
			Если КоличествоПотомков = 1 И Потомки[0].Основной Тогда
				Родители.Удалить(Родитель);
			Иначе
				Родитель.Количество = КоличествоПотомков - 1;
				Родитель.Наименование = ОсновнойПотомок.Наименование + " (" + КоличествоПотомков + ")";
			КонецЕсли;
			
			ПозицияРодителя = ПозицияРодителя - 1;
		КонецЦикла;
		
		Возврат Ложь;	
		
//	КонецЕсли;
	
	//- 21.04.2017 13:58:23 Савинов Александр Задача: ОПЗ 2
	
	
	
КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияОтменыЗадания(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Прервать
		И НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием Тогда
		НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область Кастом

&НаКлиенте
Процедура HighPerfomanceПриИзменении(Элемент = Неопределено)
	
	Если HighPerfomance Тогда
		
		Если Не Лев(ОбластьПоискаДублей, 10) = "Справочник" Тогда
		
			HighPerfomance = Ложь;
			Возврат;
		
		КонецЕсли;
	
		Элементы.ДостаточноеКоличество.Видимость = Истина;
		ДостаточноеКоличество = 1000;
		
		Элементы.ВыбратьРеквизиты.Видимость = Истина;
		
		ПравилаИзменились = Ложь;
		
		Для каждого ПравилоПоиска Из ПравилаПоиска Цикл
		
			Если ПравилоПоиска.Правило = "Подобно" Тогда
			
				ПравилоПоиска.Правило = "Равно";
				ПравилаИзменились = Истина;
			
			КонецЕсли;	
		
		КонецЦикла;
		
		Если ПравилаИзменились Тогда
			
			Союз = " " + НСтр("ru = 'И'") + " ";
			ТекстПравил = "";
			Для Каждого Правило Из ПравилаПоиска Цикл
				Если Правило.Правило = "Равно" Тогда
					Сравнение = Правило.ПредставлениеРеквизита + " " + НСтр("ru = 'совпадает'");
				ИначеЕсли Правило.Правило = "Подобно" Тогда
					Сравнение = Правило.ПредставлениеРеквизита + " " + НСтр("ru = 'совпадает по похожим словам'");
				Иначе
					Продолжить;
				КонецЕсли;
				ТекстПравил = ?(ТекстПравил = "", "", ТекстПравил + Союз) + Сравнение;
			КонецЦикла;
			Если УчитыватьПрикладныеПравила Тогда
				Для Позиция = 1 По СтрЧислоСтрок(ОписаниеПрикладныхПравил) Цикл
					СтрокаПравила = СокрЛП(СтрПолучитьСтроку(ОписаниеПрикладныхПравил, Позиция));
					Если Не ПустаяСтрока(СтрокаПравила) Тогда
						ТекстПравил = ?(ТекстПравил = "", "", ТекстПравил + Союз) + СтрокаПравила;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ПустаяСтрока(ТекстПравил) Тогда
				ТекстПравил = НСтр("ru = 'Правила не заданы'");
			КонецЕсли;
			ПредставлениеПравилПоиска = ТекстПравил;
			
		КонецЕсли;
		
		ЗаполнитьСписокРеквизитов();
		
		ОбновитьОтметкиСпискаРеквизитов();
		
		//++ 02.10.2017 Веденеев П. - заполнение списка табличных частей справочника
		ЗаполнитьСписокРеквизитовИТабличныхЧастей();
		//-- 02.10.2017 Веденеев П. - заполнение списка табличных частей справочника
		
		Элементы.ПрименяемостьПредметаСнабжения.Видимость = ОбластьПоискаДублей = "Справочник.КаталогПредметовСнабжения";
		
	Иначе
	
		Элементы.ДостаточноеКоличество.Видимость = Ложь;
		ДостаточноеКоличество = 0;	
		
		Элементы.ВыбратьРеквизиты.Видимость = Ложь;
		
		Элементы.ПрименяемостьПредметаСнабжения.Видимость = Ложь;
		
	КонецЕсли;
	
	УстановитьВидимостьОтбораПоЗаказу();
	
	Элементы.ДобавитьДубли.Видимость = HighPerfomance И НастройкиПошаговогоМастера.НомерТекущегоШага = 0;	
	// УДАЛИТЬ ПОТОМ
	Элементы.ЗаполнитьИзБазы.Видимость = HighPerfomance И НастройкиПошаговогоМастера.НомерТекущегоШага = 0;	
	// УДАЛИТЬ ПОТОМ	
	
	//ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияОбработчикОтветаНаВопрос(Ответ, ДопПараметры = Неопределено) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПолучитьДублиСвышеДостаточногоКоличества = Истина;
	
		Элементы.Шапка.Доступность = Ложь;
		НастройкиПошаговогоМастера.ПоказатьДиалогПередЗакрытием = Истина;
		НастройкиПошаговогоМастера.ИмяПроцедуры = "ФоновыйПоискДублей";
		ЗапуститьФоновоеЗаданиеКлиент();		
		
	Иначе
		
		ПерейтиНаШагМастера(Элементы.ШагПоискНеВыполнялся);
	
	КонецЕсли;	

КонецПроцедуры // ПослеЗавершенияФоновогоЗаданияОбработчикОтветаНаВопрос()

&НаКлиенте
Процедура ВыбратьРеквизиты(Команда)
	
	МассивОтмеченныхРеквизитов = Новый Массив;
	
	Для каждого Реквизит Из СписокРеквизитов Цикл
	
		Если Реквизит.Пометка Тогда
		
			МассивОтмеченныхРеквизитов.Добавить(Реквизит.Значение);	
		
		КонецЕсли;	
	
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыбораРеквизитов", ЭтотОбъект, Новый Структура("МассивОтмеченныхРеквизитов", МассивОтмеченныхРеквизитов));
	
	//СписокРеквизитов.ПоказатьОтметкуЭлементов(ОписаниеОповещения, "Выбор реквизитов");
	
	ПараметрыОткрытия = Новый Структура("СписокРеквизитов", СписокРеквизитов);
	
	ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма.ФормаВыборРеквизитов", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораРеквизитов(ВозЗнач, ДопПараметры) Экспорт

	Если ВозЗнач = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	СписокРеквизитов = ВозЗнач;
	
	Для каждого Реквизит Из ВозЗнач Цикл
	
		Если Реквизит.Пометка И ДопПараметры.МассивОтмеченныхРеквизитов.Найти(Реквизит.Значение) = Неопределено Тогда
		
			РеквизитУдаленныйВручную = СписокРеквизитовУдаленныхВручную.НайтиПоЗначению(Реквизит.Значение);
			
			Если Не РеквизитУдаленныйВручную = Неопределено Тогда
			
				СписокРеквизитовУдаленныхВручную.Удалить(РеквизитУдаленныйВручную);	
			
			Иначе
			
				СписокРеквизитовВыбранныхВручную.Добавить(Реквизит.Значение);	
			
			КонецЕсли;	
		
		КонецЕсли;	
		
		Если Не Реквизит.Пометка И Не ДопПараметры.МассивОтмеченныхРеквизитов.Найти(Реквизит.Значение) = Неопределено Тогда
		
			РеквизитВыбранныйВручную = СписокРеквизитовВыбранныхВручную.НайтиПоЗначению(Реквизит.Значение);
			
			Если Не РеквизитВыбранныйВручную = Неопределено Тогда
			
				СписокРеквизитовВыбранныхВручную.Удалить(РеквизитВыбранныйВручную);	
				
			Иначе
				
				СписокРеквизитовУдаленныхВручную.Добавить(Реквизит.Значение);
			
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если ВызовИзФормыСписка Или Элементы.ПовторитьПоиск.Доступность = Ложь Тогда
	
		ПерезаполнитьТаблицуДублей();	
	
	КонецЕсли;

КонецПроцедуры // ОбработчикВыбораРеквизитов()

&НаСервере
Процедура ПерезаполнитьТаблицуДублей()
	
	НайденныеДубли.ПолучитьЭлементы().Очистить();
	
	УбратьВременныеКолонки();
	
	Если ВызовИзФормыСписка Тогда
		
		МассивВыбранныхДублей = СписокДублей.ВыгрузитьЗначения();
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СписокДублей.Получить(0).Значение));
		
		ТаблицаДублей = Новый ТаблицаЗначений;
		ТаблицаДублей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТипов));
		
		Для каждого Дубль Из МассивВыбранныхДублей Цикл
			
			НоваяСтрока = ТаблицаДублей.Добавить();
			НоваяСтрока.Ссылка = Дубль;
			
		КонецЦикла;	
		
	Иначе
		
		ТаблицаДублей = ПолучитьИзВременногоХранилища(АдресТаблицыДублей);
		
		МассивВыбранныхДублей = ТаблицаДублей.ВыгрузитьКолонку("Ссылка");
	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	МассивТекстаЗапроса = Новый Массив;
	
	МассивТекстаЗапроса.Добавить("ВЫБРАТЬ
	|	ТаблицаДублей.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаДублей КАК ТаблицаДублей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	");
	
	Для каждого Реквизит Из СписокРеквизитов Цикл
		
		Если Реквизит.Пометка Тогда
			
			МассивТекстаЗапроса.Добавить("Таблица.");
			МассивТекстаЗапроса.Добавить(Реквизит.Значение);
			МассивТекстаЗапроса.Добавить(",
			|	");	
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("Таблица.Ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ");
	
	МассивТекстаЗапроса.Добавить(ОбластьПоискаДублей);
	
	МассивТекстаЗапроса.Добавить(" КАК Таблица
	|		ПО ВТ.Ссылка = Таблица.Ссылка");
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
		
	Запрос.УстановитьПараметр("ТаблицаДублей", ТаблицаДублей);
	
	ТаблицаДублей = Запрос.Выполнить().Выгрузить();
	
	ДобавитьВременныеКолонки(ТаблицаДублей);
	
	МестаИспользования = ОбщегоНазначения.МестаИспользования(МассивВыбранныхДублей);
	МестаИспользования = МестаИспользования.Скопировать(
	МестаИспользования.НайтиСтроки(Новый Структура("ВспомогательныеДанные", Ложь)));
	МестаИспользования.Индексы.Добавить("Ссылка");
	
	ГруппаДерева = НайденныеДубли.ПолучитьЭлементы().Добавить();
	ГруппаДерева.Количество = МассивВыбранныхДублей.Количество();
	ГруппаДерева.Пометка = 1;
	
	МаксСтрока = Неопределено;
	МаксМест   = -1;
	
	ЕстьКолонкаКоличество = Не ТаблицаДублей.Колонки.Найти("Количество") = Неопределено;
	
	Для каждого СтрокаДублей Из ТаблицаДублей Цикл
	
		СтрокаДерева = ГруппаДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДублей);
		
		Если ЕстьКолонкаКоличество Тогда
		
			СтрокаДерева.КоличествоСсылки = СтрокаДублей.Количество;	
		
		КонецЕсли;
		
		СтрокаДерева.Пометка = 1;
		СтрокаДерева.Количество = МестаИспользования.НайтиСтроки(Новый Структура("Ссылка", СтрокаДублей.Ссылка)).Количество();
		
		Если МаксМест < СтрокаДерева.Количество Тогда
			Если МаксСтрока <> Неопределено Тогда
				МаксСтрока.Основной = Ложь;
			КонецЕсли;
			МаксСтрока = СтрокаДерева;
			МаксМест   = СтрокаДерева.Количество;
			МаксСтрока.Основной = Истина;
		КонецЕсли;
	
	КонецЦикла;	
	
	ВсегоНайденоДублей = МассивВыбранныхДублей.Количество();
	
	ГруппаДерева.Наименование = МаксСтрока.Наименование + " (" + ГруппаДерева.Количество + ")";
	
	МестаИспользованияКандидата.Очистить();
	Элементы.ОписаниеТекущейГруппыДублей.Заголовок = НСтр("ru = 'Дублей не найдено'");
	
	Если ЭтоАдресВременногоХранилища(АдресМестИспользования) Тогда
		УдалитьИзВременногоХранилища(АдресМестИспользования);
	КонецЕсли;
	АдресМестИспользования = ПоместитьВоВременноеХранилище(МестаИспользования, УникальныйИдентификатор);
	
	ОбновитьОписаниеСостоянияНайденныхДублей(ЭтотОбъект);	

КонецПроцедуры // ПерезаполнитьТаблицуДублей()

&НаСервере
Процедура ЗаполнитьСписокРеквизитов()
	
	СписокРеквизитов.Очистить();
	СписокРеквизитовВыбранныхВручную.Очистить();
	СписокРеквизитовУдаленныхВручную.Очистить();
	
	Реквизиты = Неопределено;
	
	Реквизиты = Метаданные.Справочники[СтрЗаменить(ОбластьПоискаДублей, "Справочник.", "")].Реквизиты;
	
	Для каждого Реквизит Из Реквизиты Цикл
		
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда //++ 03.10.2017 Веденеев П. - исключаем хранилища значений
			
			Продолжить;
			
		КонецЕсли;
	
		СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Синоним, ОбластьПоискаДублей = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП" И Реквизит.Имя = "ПредметСнабжения");
		
		Если ОбластьПоискаДублей = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП" И Реквизит.Имя = "ПредметСнабжения" Тогда
		
			СписокРеквизитов.Добавить("ОбозначениеПредметаСнабжения", "Обозначение предмета снабжения", Истина);
			СписокРеквизитовВыбранныхВручную.Добавить("ПредметСнабжения");	
			СписокРеквизитовВыбранныхВручную.Добавить("ОбозначениеПредметаСнабжения");	
		
		КонецЕсли;
	
	КонецЦикла;
	
	СтандартныеРеквизиты = Неопределено;
	
	СтандартныеРеквизиты = Метаданные.Справочники[СтрЗаменить(ОбластьПоискаДублей, "Справочник.", "")].СтандартныеРеквизиты;	
	
	Для каждого СтандартныйРеквизит Из СтандартныеРеквизиты Цикл
		
		Если СтандартныйРеквизит.Имя = "Ссылка" Тогда
		
			Продолжить;	
		
		КонецЕсли;
	
		СписокРеквизитов.Добавить(СтандартныйРеквизит.Имя, ?(ЗначениеЗаполнено(СтандартныйРеквизит.Синоним), СтандартныйРеквизит.Синоним, ОбщиеФункцииСервер.ПолучитьСиноним(СтандартныйРеквизит.Имя)), СтандартныйРеквизит.Имя = "Наименование" Или СтандартныйРеквизит.Имя = "Родитель" И ОбластьПоискаДублей = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП");	
		
		Если ОбластьПоискаДублей = "Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП" И СтандартныйРеквизит.Имя = "Родитель" Тогда
			
			СписокРеквизитовВыбранныхВручную.Добавить(СтандартныйРеквизит.Имя);	
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

//++ 02.10.2017 Веденеев П. - заполнение списка табличных частей справочника
&НаСервере
Процедура ЗаполнитьСписокРеквизитовИТабличныхЧастей()
	
	СписокРеквизитовИТабличныхЧастей.Очистить();
	
	СписокРеквизитовИТабличныхЧастей = СписокРеквизитов.Скопировать();
	
	ТабличныеЧасти = Метаданные.Справочники[СтрЗаменить(ОбластьПоискаДублей, "Справочник.", "")].ТабличныеЧасти;
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		СписокРеквизитовИТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя, "Табличная часть: " + ТабличнаяЧасть.Синоним);
		
	КонецЦикла;
	
КонецПроцедуры
//-- 02.10.2017 Веденеев П. - заполнение списка табличных частей справочника

&НаКлиенте
Процедура ОбновитьОтметкиСпискаРеквизитов()
	
	ИспользованиеОтборов.Очистить();
	
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	Для каждого ПравилоПоиска Из ПравилаПоиска Цикл
		
		Использование = ЗначениеЗаполнено(ПравилоПоиска.Правило);
		
		Если Не Использование Тогда
			
			Для каждого ЭлементОтбора Из КомпоновщикПредварительногоОтбора.Настройки.Отбор.Элементы Цикл
				
				Если ТипЗнч(ЭлементОтбора) = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
				
					Продолжить;	
				
				КонецЕсли;
				
				Если Строка(ЭлементОтбора.ЛевоеЗначение) = ПравилоПоиска.Реквизит Тогда
					
					Использование = ЭлементОтбора.Использование; 
					
					Прервать;
					
				КонецЕсли;		
				
			КонецЦикла;	
			
		КонецЕсли;
		
		НоваяСтрока = ИспользованиеОтборов.Добавить();
		НоваяСтрока.Значение = ПравилоПоиска.Реквизит;
		НоваяСтрока.Использование = Использование; 	
	
	КонецЦикла;
	
	ПродолжитьЗаполнениеИспользованияОтборов(КомпоновщикПредварительногоОтбора.Настройки.Отбор.Элементы, ТипГруппаЭлементовОтбораКомпоновкиДанных);
		
	Для каждого Строка Из ИспользованиеОтборов Цикл
	
		ШагЦиклаОбновленияОтметкиСпискаРеквизитов(Строка.Значение, Строка.Использование);	
	
	КонецЦикла;

КонецПроцедуры // ОбновитьОтметкиСпискаРеквизитов()

&НаКлиенте
Процедура ПродолжитьЗаполнениеИспользованияОтборов(ЭлементыОтбора, ТипГруппаЭлементовОтбораКомпоновкиДанных)

	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			
			ПродолжитьЗаполнениеИспользованияОтборов(ЭлементОтбора.Элементы, ТипГруппаЭлементовОтбораКомпоновкиДанных);
			Продолжить;	
			
		КонецЕсли;
		
		МассивСтрок = ИспользованиеОтборов.НайтиСтроки(Новый Структура("Значение", Строка(ЭлементОтбора.ЛевоеЗначение)));
		
		Если МассивСтрок.Количество() > 0 И Не ЭлементОтбора.Использование Тогда
			
			Продолжить;			
			
		КонецЕсли;
		
		НоваяСтрока = ИспользованиеОтборов.Добавить();
		НоваяСтрока.Значение = Строка(ЭлементОтбора.ЛевоеЗначение);
		НоваяСтрока.Использование = ЭлементОтбора.Использование; 		
		
	КонецЦикла;	
	
КонецПроцедуры // ПродолжитьЗаполнениеИспользованияОтборов()

&НаКлиенте
Процедура ШагЦиклаОбновленияОтметкиСпискаРеквизитов(Значение, Использование)

	Если Использование Тогда
		
		РеквизитСпискаРеквизитов = СписокРеквизитов.НайтиПоЗначению(Значение);
		
		Если РеквизитСпискаРеквизитов = Неопределено Тогда
			
			СписокРеквизитов.Добавить(Значение, ОбщиеФункцииСервер.ПолучитьСиноним(Значение), Истина);	
			
		Иначе
			
			Если Не РеквизитСпискаРеквизитов.Пометка Тогда
				
				Если СписокРеквизитовУдаленныхВручную.НайтиПоЗначению(Значение) = Неопределено Тогда
					
					РеквизитСпискаРеквизитов.Пометка = Истина;	
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;		
		
	Иначе
		
		РеквизитСпискаРеквизитов = СписокРеквизитов.НайтиПоЗначению(Значение);
		
		Если Не РеквизитСпискаРеквизитов = Неопределено Тогда
		
			Если РеквизитСпискаРеквизитов.Пометка Тогда
				
				Если СписокРеквизитовВыбранныхВручную.НайтиПоЗначению(Значение) = Неопределено Тогда
					
					РеквизитСпискаРеквизитов.Пометка = Ложь;	
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры // ШагЦиклаОбновленияОтметкиСпискаРеквизитов()

&НаКлиенте
Процедура ДобавитьДубли(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикДобавленияДублей", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбластьПоискаДублей", ОбластьПоискаДублей);
	
	ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма.ФормаДобавлениеДублей", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикДобавленияДублей(МассивВыбранныхДублей, ДопПараметры = Неопределено) Экспорт
	
	Если МассивВыбранныхДублей = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	НедостаточноДублей = Ложь;
	НедостаточноНеповторяющихсяДублей = Ложь;

	Если МассивВыбранныхДублей.Количество() > 1 Тогда
		
		МассивВыбранныхДублей = ОбщиеФункцииКлиент.УдалитьДублиИзМассива(МассивВыбранныхДублей);
		
		Если Не МассивВыбранныхДублей.Количество() > 1  Тогда
			
			НедостаточноНеповторяющихсяДублей = Истина;	
			
		КонецЕсли;
		
	Иначе
		
		НедостаточноДублей = Истина;	
		
	КонецЕсли;	
	
	Если НедостаточноДублей Или НедостаточноНеповторяющихсяДублей Тогда
	
		ПоказатьПредупреждение(, "Выбрано недостаточное количество" + ?(НедостаточноНеповторяющихсяДублей, " неповторяющихся", "") + " элементов.",, "Действие запрещено");	
		Возврат;
	
	КонецЕсли;
	
	ДобавитьДублиНаСервере(МассивВыбранныхДублей);
	
	СледующийШаг = 2;
	
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу.
	Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	Элементы.ДобавитьДубли.Видимость = Ложь;
	
	Элементы.ПовторитьПоиск.Доступность = Ложь;

КонецПроцедуры // ОбработчикДобавленияДублей()

&НаСервере
Процедура ДобавитьДублиНаСервере(МассивВыбранныхДублей, Очищать = Истина)
	
	Если ЗначениеЗаполнено(АдресВременныхРеквизитовИЭлементов) Тогда
		
		ВременныеРеквизиты = ПолучитьИзВременногоХранилища(АдресВременныхРеквизитовИЭлементов);
		
		ИзменитьРеквизиты(, ВременныеРеквизиты);
		
		Для каждого ВременныйРеквизит Из ВременныеРеквизиты Цикл
			
			Выполнить("Элементы.Удалить(Элементы." + СтрЗаменить(ВременныйРеквизит, ".", "") + ");");	
			
		КонецЦикла;
		
		УдалитьИзВременногоХранилища(АдресВременныхРеквизитовИЭлементов);
		
		АдресВременныхРеквизитовИЭлементов = "";
		
	КонецЕсли;
	
	Если Очищать Тогда
		НайденныеДубли.ПолучитьЭлементы().Очистить();
	КонецЕсли; 
	
	ТаблицаДублей = ПолучитьТаблицуДублей(МассивВыбранныхДублей);
	
	КолонкаРодительСсылки = ТаблицаДублей.Колонки.Найти("РодительСсылки");
	
	Если Не КолонкаРодительСсылки = Неопределено Тогда
	
		КолонкаРодительСсылки.Заголовок = "Родитель";	
	
	КонецЕсли;
	
	АдресТаблицыДублей = ПоместитьВоВременноеХранилище(ТаблицаДублей, УникальныйИдентификатор);
	
	МестаИспользования = ОбщегоНазначения.МестаИспользования(МассивВыбранныхДублей);
	МестаИспользования = МестаИспользования.Скопировать(
	МестаИспользования.НайтиСтроки(Новый Структура("ВспомогательныеДанные", Ложь)));
	МестаИспользования.Индексы.Добавить("Ссылка");
	
	ДобавляемыеРеквизиты 	= Новый Массив;
	ВременныеРеквизиты 		= Новый Массив;
	
	Элементы.НайденныеДублиКод.Видимость = Не ТаблицаДублей.Колонки.Найти("Код") = Неопределено;
	Элементы.НайденныеДублиНаименование.Видимость = Не ТаблицаДублей.Колонки.Найти("Наименование") = Неопределено;
	
	Для каждого Колонка Из ТаблицаДублей.Колонки Цикл
		
		Если Не Колонка.Имя = "Ссылка" И Не Колонка.Имя = "Код" И Не Колонка.Имя = "Наименование" Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "НайденныеДубли", Колонка.Заголовок); 
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			ВременныеРеквизиты.Добавить("НайденныеДубли." + Колонка.Имя);		
			
		КонецЕсли;			
		
	КонецЦикла;
	
	Если ВременныеРеквизиты.Количество() > 0 Тогда
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ИмяСправочника = СтрЗаменить(ОбластьПоискаДублей, "Справочник.", "");
		
		Для каждого ДобавляемыйРеквизит Из ДобавляемыеРеквизиты Цикл
			
			НоваяКолонка = Элементы.Вставить("НайденныеДубли" + ДобавляемыйРеквизит.Имя, Тип("ПолеФормы"), Элементы.НайденныеДубли, Элементы.НайденныеДублиКоличество);
			НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
			НоваяКолонка.Заголовок = ?(ДобавляемыйРеквизит.Заголовок = "ОбозначениеПредметаСнабжения", "Обозначение предмета снабжения", ОбщиеФункцииПовтИсп.ПолучитьСинонимРеквизитаСправочника(ИмяСправочника, ДобавляемыйРеквизит.Заголовок));
			НоваяКолонка.Ширина = СтрДлина(НоваяКолонка.Заголовок);
			НоваяКолонка.ПутьКДанным = "НайденныеДубли." + ДобавляемыйРеквизит.Имя;		
			
		КонецЦикла;
		
		АдресВременныхРеквизитовИЭлементов = ПоместитьВоВременноеХранилище(ВременныеРеквизиты, УникальныйИдентификатор);
		
	КонецЕсли;	
	
	ГруппаДерева = НайденныеДубли.ПолучитьЭлементы().Добавить();
	ГруппаДерева.Количество = МассивВыбранныхДублей.Количество();
	ГруппаДерева.Пометка = 1;
	
	МаксСтрока = Неопределено;
	МаксМест   = -1;
	
	Для каждого СтрокаДублей Из ТаблицаДублей Цикл
	
		СтрокаДерева = ГруппаДерева.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДублей);
		СтрокаДерева.Пометка = 1;
		СтрокаДерева.Количество = МестаИспользования.НайтиСтроки(Новый Структура("Ссылка", СтрокаДублей.Ссылка)).Количество();
		
		Если МаксМест < СтрокаДерева.Количество Тогда
			Если МаксСтрока <> Неопределено Тогда
				МаксСтрока.Основной = Ложь;
			КонецЕсли;
			МаксСтрока = СтрокаДерева;
			МаксМест   = СтрокаДерева.Количество;
			МаксСтрока.Основной = Истина;
		КонецЕсли;
	
	КонецЦикла;	
	
	ВсегоНайденоДублей = МассивВыбранныхДублей.Количество();
	
	ГруппаДерева.Наименование = МаксСтрока.Наименование + " (" + ГруппаДерева.Количество + ")";
	
	МестаИспользованияКандидата.Очистить();
	Элементы.ОписаниеТекущейГруппыДублей.Заголовок = НСтр("ru = 'Дублей не найдено'");
	
	Если ЭтоАдресВременногоХранилища(АдресМестИспользования) Тогда
		УдалитьИзВременногоХранилища(АдресМестИспользования);
	КонецЕсли;
	АдресМестИспользования = ПоместитьВоВременноеХранилище(МестаИспользования, УникальныйИдентификатор);
	
	ОбновитьОписаниеСостоянияНайденныхДублей(ЭтотОбъект);	
	
КонецПроцедуры // ДобавитьДублиНаСервере()

&НаСервере
Функция ПолучитьТаблицуДублей(МассивВыбранныхДублей)
	
	МассивТекстаЗапроса = Новый Массив;
	
	МассивТекстаЗапроса.Добавить("ВЫБРАТЬ");
	
	Для каждого Реквизит Из СписокРеквизитов Цикл
	
		Если Реквизит.Пометка Тогда
			
			Если Реквизит.Значение = "ОбозначениеПредметаСнабжения" Тогда
			
				ИмяРеквизита = "ПредметСнабжения.Обозначение КАК ОбозначениеПредметаСнабжения";	
			
			ИначеЕсли Реквизит.Значение = "Родитель" Тогда
			
				ИмяРеквизита = "Родитель КАК РодительСсылки";
			
			Иначе
				
				ИмяРеквизита = Реквизит.Значение;	
			
			КонецЕсли;
		
			МассивТекстаЗапроса.Добавить("
			|	Таблица.");
			МассивТекстаЗапроса.Добавить(ИмяРеквизита);
			МассивТекстаЗапроса.Добавить(",");
		
		КонецЕсли;	
	
	КонецЦикла;
	
	МассивТекстаЗапроса.Добавить("
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.");
	МассивТекстаЗапроса.Добавить(СтрЗаменить(ОбластьПоискаДублей, "Справочник.", ""));
	МассивТекстаЗапроса.Добавить(" КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка В(&МассивСсылок)");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивВыбранныхДублей);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуДублей()

&НаКлиенте
Процедура ЗакрытьПрограммно(Команда)
	
	Закрыть(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьОтбораПоЗаказу()

	Элементы.ПравилоОтбораПоЗаказу.Видимость = HighPerfomance И ОбластьПоискаДублей = "Справочник.КаталогПредметовСнабжения";	
	
	Если Элементы.ПравилоОтбораПоЗаказу.Видимость Тогда
	
		ПравилоОтбораПоЗаказу = "Все заказы";		
	
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьОтбораПоЗаказу()

&НаКлиенте
Процедура ПравилоОтбораПоЗаказуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикНастройкиОтбораПоЗаказу", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресНастроекОтбораПоЗаказу", АдресНастроекОтбораПоЗаказу);
	
	ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма.ФормаПравилаОтбораПоЗаказу", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикНастройкиОтбораПоЗаказу(ВозЗнач, ДопПараметры = Неопределено) Экспорт

	Если ВозЗнач = Неопределено Тогда
	
		Возврат;	
	
	КонецЕсли;	
	
	АдресНастроекОтбораПоЗаказу = ВозЗнач;	
	
	СтруктураОтбораПоЗаказу = ПолучитьИзВременногоХранилища(АдресНастроекОтбораПоЗаказу);
	
	Если СтруктураОтбораПоЗаказу.Применить Тогда
	
		МассивПравила = Новый Массив;
		
		МассивПравила.Добавить(ОбщиеФункцииКлиент.ПолучитьСиноним(СтруктураОтбораПоЗаказу.ВидСравнения));
		
		Если СтруктураОтбораПоЗаказу.ВидСравнения = "ВСписке" Или СтруктураОтбораПоЗаказу.ВидСравнения = "НеВСписке" Тогда
			
			МассивПравила.Добавить(" """);
		
			Для каждого ЗначениеОтбора Из СтруктураОтбораПоЗаказу.МассивЗначенийОтбора Цикл
			
				МассивПравила.Добавить(Строка(ЗначениеОтбора));
				МассивПравила.Добавить("; ");
			
			КонецЦикла;	
			
			МассивПравила.Удалить(МассивПравила.Количество() - 1);
			
			МассивПравила.Добавить("""");
		
		Иначе
		
			МассивПравила.Добавить(" """);
			
			МассивПравила.Добавить(Строка(СтруктураОтбораПоЗаказу.ЗначениеОтбора));
			
			МассивПравила.Добавить("""");	
		
		КонецЕсли;
		
		ПравилоОтбораПоЗаказу = СтрСоединить(МассивПравила);
	
	Иначе
	
		ПравилоОтбораПоЗаказу = "Все заказы";		
	
	КонецЕсли;

КонецПроцедуры // ОбработчикНастройкиОтбораПоЗаказу()

&НаКлиенте
Процедура ПравилоОтбораПоЗаказуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПравилоОтбораПоЗаказу = "Все заказы";
	УдалитьИзВременногоХранилища(АдресНастроекОтбораПоЗаказу);
	АдресНастроекОтбораПоЗаказу = "";
	
КонецПроцедуры

&НаСервере
Процедура УбратьВременныеКолонки()
	
	Если ЗначениеЗаполнено(АдресВременныхРеквизитовИЭлементов) Тогда
		
		ВременныеРеквизиты = ПолучитьИзВременногоХранилища(АдресВременныхРеквизитовИЭлементов);
		
		ИзменитьРеквизиты(, ВременныеРеквизиты);
		
		Для каждого ВременныйРеквизит Из ВременныеРеквизиты Цикл
			
			Выполнить("Элементы.Удалить(Элементы." + СтрЗаменить(ВременныйРеквизит, ".", "") + ");");	
			
		КонецЦикла;
		
		УдалитьИзВременногоХранилища(АдресВременныхРеквизитовИЭлементов);
		
		АдресВременныхРеквизитовИЭлементов = "";
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВременныеКолонки(ТаблицаДублей, МассивРеквизитов = Неопределено)
	
	ДобавляемыеРеквизиты 	= Новый Массив;
	ВременныеРеквизиты 		= Новый Массив;
	
	Элементы.НайденныеДублиКод.Видимость = Не ТаблицаДублей.Колонки.Найти("Код") = Неопределено;
	Элементы.НайденныеДублиНаименование.Видимость = Не ТаблицаДублей.Колонки.Найти("Наименование") = Неопределено;
	
	Для каждого Колонка Из ТаблицаДублей.Колонки Цикл
		
		ИмяКолонки = ?(Колонка.Имя = "Количество", "КоличествоСсылки", Колонка.Имя);
		
		Если Не ИмяКолонки = "Ссылка" И Не ИмяКолонки = "Код" И Не ИмяКолонки = "Наименование" И Не ИмяКолонки = "Родитель" И 
			(МассивРеквизитов = Неопределено Или Не МассивРеквизитов.Найти(ИмяКолонки) = Неопределено Или Найти(ИмяКолонки, "ВладелецВладелец") > 0 Или ИмяКолонки = "КоличествоСсылки" Или ИмяКолонки = "РодительСсылки") Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ИмяКолонки, Колонка.ТипЗначения, "НайденныеДубли", Колонка.Заголовок); 
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			ВременныеРеквизиты.Добавить("НайденныеДубли." + ИмяКолонки);		
			
		КонецЕсли;			
		
	КонецЦикла;
	
	Если ВременныеРеквизиты.Количество() > 0 Тогда
		
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		ИмяСправочника = СтрЗаменить(ОбластьПоискаДублей, "Справочник.", "");
		
		Для каждого ДобавляемыйРеквизит Из ДобавляемыеРеквизиты Цикл
			
			НоваяКолонка = Элементы.Вставить("НайденныеДубли" + ДобавляемыйРеквизит.Имя, Тип("ПолеФормы"), Элементы.НайденныеДубли, Элементы.НайденныеДублиКоличество);
			НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
			НоваяКолонка.Заголовок = ?(ДобавляемыйРеквизит.Заголовок = "ОбозначениеПредметаСнабжения", "Обозначение предмета снабжения", ОбщиеФункцииПовтИсп.ПолучитьСинонимРеквизитаСправочника(ИмяСправочника, ДобавляемыйРеквизит.Заголовок));
			НоваяКолонка.Ширина = СтрДлина(НоваяКолонка.Заголовок);
			НоваяКолонка.ПутьКДанным = "НайденныеДубли." + ДобавляемыйРеквизит.Имя;		
			
		КонецЦикла;
		
		АдресВременныхРеквизитовИЭлементов = ПоместитьВоВременноеХранилище(ВременныеРеквизиты, УникальныйИдентификатор);
		
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьВременныеКолонки()

&НаКлиенте
Процедура ОбновитьПрименяемостьПредметаСнабжения(ТекущиеДанные)

	ПрименяемостьПредметаСнабжения.Очистить();
	
	Если Не ТекущиеДанные = Неопределено Тогда
	
		ОбновитьПрименяемостьПредметаСнабженияНаСервере(ТекущиеДанные.Ссылка);	
	
	КонецЕсли;

КонецПроцедуры // ОбновитьПрименяемостьПредметаСнабжения()

&НаСервере
Процедура ОбновитьПрименяемостьПредметаСнабженияНаСервере(ПредметСнабжения)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Владелец КАК Корабль,
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.Ссылка КАК ЭлементСтруктуры
	|ПОМЕСТИТЬ ВТ_ЭлементыСтруктуры
	|ИЗ
	|	Справочник.СтруктураЗаказаПоКомплектующимИзделиямИЗИП КАК СтруктураЗаказаПоКомплектующимИзделиямИЗИП
	|ГДЕ
	|	СтруктураЗаказаПоКомплектующимИзделиямИЗИП.ПредметСнабжения = &ПредметСнабжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭлементыСтруктуры.Корабль КАК Корабль,
	|	ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ОписаниеИерархии КАК Применяемость
	|ИЗ
	|	ВТ_ЭлементыСтруктуры КАК ВТ_ЭлементыСтруктуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП КАК ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП
	|		ПО ВТ_ЭлементыСтруктуры.ЭлементСтруктуры = ОписанияИерархииЭлементовСтруктурыЗаказовПоКомплектующимИзделиямИЗИП.ЭлементСтруктуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	Корабль";
	
	Запрос.УстановитьПараметр("ПредметСнабжения", ПредметСнабжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	ПрименяемостьПредметаСнабжения.Загрузить(РезультатЗапроса.Выгрузить());	

КонецПроцедуры // ОбновитьПрименяемостьПредметаСнабженияНаСервере()

//++ 02.10.2017 Веденеев П. //заполнение списка реквизитов, значения которых будут сохранены при объединении
&НаКлиенте
Процедура СписокСохраняемыхРеквизитовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВыбораСохраняемыхРеквизитов", ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура("СписокРеквизитов, СписокПометок", СписокРеквизитовИТабличныхЧастей, СписокСохраняемыхРеквизитов);
	
	ОткрытьФорму("Обработка.ПоискИУдалениеДублей.Форма.ФормаВыборРеквизитов", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораСохраняемыхРеквизитов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СписокСохраняемыхРеквизитов.Очистить();
	
	Для каждого ЭлементСписка Из РезультатЗакрытия Цикл
		
		Если ЭлементСписка.Пометка Тогда
			
			СписокСохраняемыхРеквизитов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-- 02.10.2017 Веденеев П. //заполнение списка реквизитов, значения которых будут сохранены при объединении

//+ 04.12.2017 13:15:22 Базунов Д.А. Задача: УДАЛИТЬ ПОТОМ

&НаСервере
Функция ПолучитьСоединение()
	
	V8 = Новый COMОбъект("V83.COMConnector");   
	
	СтрокаСоединения =  "srvr='" + "sp-1c" + "'; ref='" + "osk_zip_test" + "'; usr='" + "Администратор" + "'; pwd='" + "984651" + "';";
	
	Попытка     
		Соединение = V8.Connect(СтрокаСоединения);          
	Исключение
		Соединение = Неопределено;
		аа = ОписаниеОшибки();
		Сообщить(аа);
	КонецПопытки;    
	
	Возврат Соединение;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИзБазыНаСервере()
	
	Соединение = ПолучитьСоединение();
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НайденныеДубли.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсторияУдаленияДублей.ИмяСправочника КАК ИмяСправочника,
	|	ИсторияУдаленияДублей.UIDЗамененногоЭлемента КАК UIDЗамененногоЭлемента,
	|	ИсторияУдаленияДублей.UIDЗаменившегоЭлемента КАК UIDЗаменившегоЭлемента,
	|	ИсторияУдаленияДублей.ДатаЗамены КАК ДатаЗамены
	|ИЗ
	|	РегистрСведений.ИсторияУдаленияДублей КАК ИсторияУдаленияДублей
	|ГДЕ
	|	ИсторияУдаленияДублей.ДатаЗамены > ДАТАВРЕМЯ(2017, 12, 4)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияУдаленияДублей.ДатаЗамены";
	Табл = Запрос.Выполнить().Выгрузить();
	
	Запрос = Соединение.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ИсторияУдаленияДублей.ИмяСправочника КАК ИмяСправочника,
	|	ИсторияУдаленияДублей.UIDЗамененногоЭлемента КАК UIDЗамененногоЭлемента,
	|	ИсторияУдаленияДублей.UIDЗаменившегоЭлемента КАК UIDЗаменившегоЭлемента,
	|	ИсторияУдаленияДублей.ДатаЗамены КАК ДатаЗамены
	|ИЗ
	|	РегистрСведений.ИсторияУдаленияДублей КАК ИсторияУдаленияДублей
	|ГДЕ
	|	ИсторияУдаленияДублей.ДатаЗамены > ДАТАВРЕМЯ(2017, 12, 4)
	|	И НЕ ИсторияУдаленияДублей.UIDЗамененногоЭлемента В(&МассUIDЗамененногоЭлемента)
	//|	И НЕ ИсторияУдаленияДублей.UIDЗаменившегоЭлемента В(&МассUIDЗаменившегоЭлемента)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияУдаленияДублей.ДатаЗамены
	|ИТОГИ ПО
	|	UIDЗаменившегоЭлемента";
	Список1 = Соединение.NewObject("СписокЗначений");
	Список2 = Соединение.NewObject("СписокЗначений");
	
	Для каждого Стр Из Табл Цикл
		Список1.Добавить(Стр.UIDЗамененногоЭлемента);
		Список2.Добавить(Стр.UIDЗаменившегоЭлемента);
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("МассUIDЗамененногоЭлемента", Список1);
	Запрос.УстановитьПараметр("МассUIDЗаменившегоЭлемента", Список2);
	
	Дерево = Запрос.Выполнить().Выгрузить(Соединение.ОбходРезультатаЗапроса.ПоГруппировкам);

	СпрПС = Справочники.КаталогПредметовСнабжения; МассОригиналов = Новый Массив;
	
	Для каждого Стр Из Дерево.Строки Цикл
		
		Масс = Новый Массив;
		ТекЭлем = СпрПС.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.UIDЗаменившегоЭлемента));
		
		Если ТекЭлем.ПолучитьОбъект() = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Масс.Добавить(ТекЭлем); МассОригиналов.Добавить(ТекЭлем);
		
		Для каждого Дубли Из Стр.Строки Цикл
			Масс.Добавить(СпрПС.ПолучитьСсылку(Новый УникальныйИдентификатор(Дубли.UIDЗамененногоЭлемента)));
		КонецЦикла; 
		
		ДобавитьДублиНаСервере(Масс, Ложь);
		
	КонецЦикла;	
	
	УстановитьОригинальныйЭлемент1(МассОригиналов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОригинальныйЭлемент1(МассОригиналов)
	
	дзНайденныеДубли = РеквизитФормыВЗначение("НайденныеДубли", Тип("ДеревоЗначений"));
	
	Для каждого ТекЭлем Из МассОригиналов Цикл
		
		Найд = дзНайденныеДубли.Строки.Найти(ТекЭлем,, Истина);
		
		СтрокаОригинал = Найд.Родитель;
		
		Для каждого СтрокаДубликат Из Найд.Родитель.Строки Цикл
			
			Если СтрокаДубликат.Ссылка = ТекЭлем Тогда
				
				ЗаполнитьЗначенияСвойств(СтрокаОригинал, СтрокаДубликат);
				
				СтрокаДубликат.Основной = Истина;
				
			Иначе
				
				СтрокаДубликат.Основной = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(дзНайденныеДубли, "НайденныеДубли");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзБазы(Команда)
	
	ЗаполнитьИзБазыНаСервере();
	//ДобавитьДублиНаСервере(МассивВыбранныхДублей);
	
	СледующийШаг = 2;
	
	ОписаниеШага = НастройкиПошаговогоМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиПошаговогоМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу.
	Элементы[НастройкиПошаговогоМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиПошаговогоМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	Элементы.ДобавитьДубли.Видимость = Ложь;
	
	Элементы.ПовторитьПоиск.Доступность = Ложь;
	
КонецПроцедуры


//- 04.12.2017 13:15:22 Базунов Д.А. Задача: УДАЛИТЬ ПОТОМ


#КонецОбласти