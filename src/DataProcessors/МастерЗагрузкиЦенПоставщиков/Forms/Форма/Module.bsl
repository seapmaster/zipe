///////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область Сервис

&НаКлиенте
Процедура ДиалогПриВыбореФайла()
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогОткрытияФайла.ПолноеИмяФайла 	= ИмяФайла;
	ДиалогОткрытияФайла.Заголовок 		= "Файл с данными тендера";
	ДиалогОткрытияФайла.Фильтр			= "Файлы excel|*.xls;*.xlsx";
	
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("ПослеВыбораФайла", ЭтаФорма));	
	
КонецПроцедуры	//ДиалогПриВыбореФайла

&НаКлиенте
Процедура СнятьУстановитьОтборДублей(ОтключитьПринудительно = Ложь)
	
	Если Элементы.ТаблицаДанных.ОтборСтрок = Неопределено И Не ОтключитьПринудительно Тогда
		СтруктураОтбор = Новый ФиксированнаяСтруктура("ЕстьДубли", Истина);
		Элементы.ТаблицаДанных.ОтборСтрок = СтруктураОтбор;
		//Элементы.ТаблицаДанныхКонтекстноеМенюУдалитьСтроку.Видимость = Истина;
		ТаблицаДанных.Сортировать("ПредметСнабжения, ПорядокСтроки");
		Элементы.ТаблицаДанныхКомандаОтборДублей.Пометка = Истина;
	Иначе
		Элементы.ТаблицаДанных.ОтборСтрок 					= Неопределено;
		Элементы.ТаблицаДанныхКомандаОтборДублей.Пометка 	= Ложь;
		ТаблицаДанных.Сортировать("ПорядокСтроки");
		
		ПеренумероватьСтрокиВТаблице();
		
		//Элементы.ТаблицаДанныхКонтекстноеМенюУдалитьСтроку.Видимость = Ложь;
    КонецЕсли;
	
	РезПроверки = ПроверкаНаДубли();
	ОбновитьКнопкуОтборДублей(РезПроверки.Дублей);
	
КонецПроцедуры	//СнятьУстановитьОтборДублей

&НаКлиенте
Процедура УдалитьВыделеннуюСтроку()
	
	Если Элементы.ТаблицаДанных.ВыделенныеСтроки.Количество() > 0 Тогда
	
		ТаблицаДанных.Удалить(ТаблицаДанных.НайтиПоИдентификатору(Элементы.ТаблицаДанных.ВыделенныеСтроки[0]));
	
		РезПроверкиДублей = ПроверкаНаДубли();
		ОбновитьКнопкуОтборДублей(РезПроверкиДублей.Дублей);
		
		Если Не Элементы.ТаблицаДанныхКомандаОтборДублей.Пометка Тогда
		
			ПеренумероватьСтрокиВТаблице();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры	//УдалитьВыделеннуюСтроку

&НаКлиенте
Процедура ЗаполнениеТаблицыДанных()
	
	СнятьУстановитьОтборДублей(Истина);
	
	УстановитьВидимостьПоУмолчанию();
	
	Если Не ПроверитьЗаполнениеНастроек() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных.Очистить();
	Для НомерСтроки = НомерПервойСтроки По НомерПоследнейСтроки Цикл
		НоваяСтрока 				= ТаблицаДанных.Добавить();
		НоваяСтрока.Обозначение 	= ПолучитьЗначение(НомерСтроки, КолонкаКодПС);
		НоваяСтрока.Наименование 	= ПолучитьЗначение(НомерСтроки, КолонкаНаименованиеПС);
		НоваяСтрока.Количество 		= ПолучитьЗначение(НомерСтроки, КолонкаКоличество, Истина);
		НоваяСтрока.Цена 			= ПолучитьЗначение(НомерСтроки, КолонкаЦена, Истина);
		Если КолонкаСрокПоставки > 0 Тогда 
			НоваяСтрока.СрокПоставки 	= ПолучитьЗначение(НомерСтроки, КолонкаСрокПоставки, Истина);
		КонецЕсли;
		НоваяСтрока.ИДСтроки		= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
		
	ЗаполнитьПредметыСнабжения();
	
	ПеренумероватьСтрокиВТаблице();
	
	РезПроверкаДублей = ПроверкаНаДубли(); 
	ОбновитьКнопкуОтборДублей(РезПроверкаДублей.Дублей);
	
КонецПроцедуры	//ЗаполнениеТаблицыДанных

&НаСервере
Процедура ПоместитьСтрокиВТаблицуБыстрогоПоиска(МассивСтрок, ИдСтрока, ПоискПоНаименованию)
	
	Если МассивСтрок.Количество() > 0 Тогда
		Для Каждого элМассива из МассивСтрок Цикл
			нСтрока = ТаблицаБыстрогоПоиска.Добавить();
			рСтрока = ТаблицаБыстрогоПоиска.НайтиПоИдентификатору(нСтрока.ПолучитьИдентификатор());
			рСтрока.ПредметСнабжения 	= элМассива.Значение;
			рСтрока.ОбозначениеПС 		= рСтрока.ПредметСнабжения.Обозначение; 
			рСтрока.ДокументНаПоставку 	= рСтрока.ПредметСнабжения.ДокументНаПоставку; 
			рСтрока.ИДСтроки 			= ИдСтрока;
			рСтрока.ПоискПоНаименованию = ПоискПоНаименованию;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры	//ПоместитьСтрокиВТаблицуБыстрогоПоиска

&НаСервере
Функция СформироватьСтрокуАвтоподбора(Строка, ПоискПоНаименованию = Ложь)

	Ответ = "";
	
	Если ПоискПоНаименованию Тогда
		Если ЗначениеЗаполнено(Строка.ПредметСнабжения) Тогда
			Ответ = "" + Строка.ПредметСнабжения; 	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Строка.ОбозначениеПС) Тогда
			Ответ = Ответ + " - " + Строка.ОбозначениеПС; 	
		ИначеЕсли ЗначениеЗаполнено(Строка.ОбозначениеПС) Тогда
			Ответ = "" + Строка.ОбозначениеПС; 	
		КонецЕсли;

	Иначе
		Если ЗначениеЗаполнено(Строка.ОбозначениеПС) Тогда
			Ответ = "" + Строка.ОбозначениеПС; 	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Строка.ПредметСнабжения) Тогда
			Ответ = Ответ + " - " + Строка.ПредметСнабжения; 	
		ИначеЕсли ЗначениеЗаполнено(Строка.ПредметСнабжения) Тогда
			Ответ = "" + Строка.ПредметСнабжения; 	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Строка.ДокументНаПоставку) Тогда
		Ответ = Ответ + " - " + Строка.ДокументНаПоставку; 	
	ИначеЕсли ЗначениеЗаполнено(Строка.ДокументНаПоставку) Тогда
		Ответ = "" + Строка.ДокументНаПоставку; 	
	КонецЕсли; //Если ЗначениеЗаполнено(Ответ) И ЗначениеЗаполнено(Строка.ДокументНаПоставку) Тогда

	Возврат Ответ;
	
КонецФункции // СформироватьСтрокуАвтоподбора()

&НаСервере
Процедура УстановитьПараметрыПоУмолчанию()

	Дата 						= ТекущаяДата();
	НомерПервойСтроки			= 1;
	ВидКонтракта				= Перечисления.ВидыКонтрактов.КонтрактСПоставщиком;
	ТипКонтракта				= Перечисления.ТипыКонтрактов.КоммерческоеПредложение;
	Валюта						= Справочники.ОКВ.НайтиПоКоду("643");	//RUB - Российский рубль
	
	УстановитьВидимостьПоУмолчанию();
	
	СформироватьСписокВыбораТипа();

КонецПроцедуры	//УстановитьПараметрыПоУмолчанию

&НаСервере
Процедура УстановитьВидимостьПоУмолчанию()

	//Элементы.ТаблицаДанныхКомандаОтборДублей.Видимость 				= Ложь;
	//Элементы.ТаблицаДанныхКонтекстноеМенюУдалитьСтроку.Видимость 	= Ложь;

КонецПроцедуры	//УстановитьВидимостьПоУмолчанию

&НаСервере
Функция ПолучитьТаблицуБезДублей()
	
	ТекТабл = ТаблицаДанных.Выгрузить();
	
	//убираю возможные дубли
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТекТабл.ПредметСнабжения КАК ПредметСнабжения,
	|	ТекТабл.Цена КАК Цена,
	|	ТекТабл.Количество КАК Количество,
	|	ТекТабл.НомерСтроки КАК НомерСтроки,
	|	ТекТабл.СрокПоставки КАК СрокПоставки,
	|	ТекТабл.РезультатовПоиска КАК РезультатовПоиска,
	|	ПОДСТРОКА(ТекТабл.Наименование, 0, 100) КАК Наименование,
	|	ПОДСТРОКА(ТекТабл.Обозначение, 0 , 100) КАК Обозначение,
	|	ТекТабл.ИДСтроки КАК ИДСтроки
	|ПОМЕСТИТЬ ВТ_источник
	|ИЗ
	|	&ТекТабл КАК ТекТабл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_источник.ПредметСнабжения КАК ПредметСнабжения,
	|	МАКСИМУМ(ВТ_источник.Цена) КАК Цена,
	|	МАКСИМУМ(ВТ_источник.Количество) КАК Количество,
	|	МАКСИМУМ(ВТ_источник.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(ВТ_источник.СрокПоставки) КАК СрокПоставки,
	|	МАКСИМУМ(ВТ_источник.РезультатовПоиска) КАК РезультатовПоиска,
	|	МАКСИМУМ(ВТ_источник.Наименование) КАК Наименование,
	|	МАКСИМУМ(ВТ_источник.Обозначение) КАК Обозначение,
	|	МАКСИМУМ(ВТ_источник.ИДСтроки) КАК ИДСтроки
	|ИЗ
	|	ВТ_источник КАК ВТ_источник
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_источник.ПредметСнабжения";
	
	Запрос.Параметры.Вставить("ТекТабл", ТекТабл);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции	//ПолучитьТаблицуБезДублей

&НаСервере
Функция ПолучитьТаблицуДублирующизсяПС()
	
	ТекТабл = ТаблицаДанных.Выгрузить();
	
	//убираю возможные дубли
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТекТабл.ПредметСнабжения КАК ПредметСнабжения,
	               |	ТекТабл.Цена КАК Цена,
	               |	ТекТабл.Количество КАК Количество,
	               |	ТекТабл.НомерСтроки КАК НомерСтроки,
	               |	ТекТабл.СрокПоставки КАК СрокПоставки,
	               |	ТекТабл.РезультатовПоиска КАК РезультатовПоиска,
	               |	ПОДСТРОКА(ТекТабл.Наименование, 0, 100) КАК Наименование,
	               |	ПОДСТРОКА(ТекТабл.Обозначение, 0, 100) КАК Обозначение,
	               |	ТекТабл.ИДСтроки КАК ИДСтроки
	               |ПОМЕСТИТЬ ВТ_источник
	               |ИЗ
	               |	&ТекТабл КАК ТекТабл
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_источник.ПредметСнабжения КАК ПредметСнабжения
	               |ИЗ
	               |	ВТ_источник КАК ВТ_источник
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_источник.ПредметСнабжения
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_источник.ИДСтроки) > 1";
	
	Запрос.Параметры.Вставить("ТекТабл", ТекТабл);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции	//ПолучитьТаблицуБезДублей

&НаКлиенте
Процедура ОткрытьОбъектЕслиНеобходимо(СсылкаНаОбъект, НужноОткрыть)
	
	Если НужноОткрыть Тогда
		Описание = Новый ОписаниеОповещения("ПослеОткрытияОбъекта", ЭтаФорма);
		ПоказатьЗначение(Описание, СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры	//ОткрытьОбъектЕслиНеобходимо

&НаСервере
Процедура СформироватьСписокВыбораТипа()

	Элементы.ТипКонтракта.СписокВыбора.Очистить();
	
	Если ВидКонтракта = ПредопределенноеЗначение("Перечисление.ВидыКонтрактов.ПустаяСсылка") Тогда
	
		Возврат;	
	
	КонецЕсли;
	
	Элементы.ТипКонтракта.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтрактов.Контракт"), "Контракт");
	Элементы.ТипКонтракта.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтрактов.Договор"), "Договор");
	
	Если ВидКонтракта = ПредопределенноеЗначение("Перечисление.ВидыКонтрактов.КонтрактСЗаказчиком") Тогда
	
		Элементы.ТипКонтракта.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтрактов.ТКП"), "ТКП");	
	
	ИначеЕсли ВидКонтракта = ПредопределенноеЗначение("Перечисление.ВидыКонтрактов.КонтрактСПоставщиком") Тогда
	
		Элементы.ТипКонтракта.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтрактов.КоммерческоеПредложение"), "Коммерческое предложение");
		
	КонецЕсли;	

КонецПроцедуры // СформироватьСписокВыбораТипа()

&НаСервере
Процедура ПеренумероватьСтрокиВТаблице()
	
	тНомер = 1;
	
	Для Каждого тСтр Из ТаблицаДанных Цикл
		
		тСтр.ПорядокСтроки = тНомер;
		
		тНомер = тНомер + 1;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкуОтборДублей(КоличествоДублей=0)
	
	Если Не Элементы.ТаблицаДанныхКомандаОтборДублей.Пометка Тогда
		
		Элементы.ТаблицаДанныхКомандаОтборДублей.Заголовок = "Отобрать дубли (" + КоличествоДублей + ")";
			
	Иначе	
		
		Элементы.ТаблицаДанныхКомандаОтборДублей.Заголовок = "Отключить отбор (" + КоличествоДублей + ")";
		
	КонецЕсли;
	
КонецПроцедуры	//ОбновитьКнопкуОтборДублей

&НаСервере
Функция ПрочитатьТабличныйДокументНаСервере(АдресВХ, Расширение)
	
	ВремФайл = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХ);
	ДвоичныеДанные.Записать(ВремФайл);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ВремФайл);
	УдалитьФайлы(ВремФайл);
	Возврат ТабДок;
	
КонецФункции //ПрочитатьТабличныйДокументНаСервере

&НаСервереБезКонтекста
Функция ПолучитьРасширениеФайла(Знач ИмяФайла)
	
	РасширениеФайла = "";
	МассивСтрок = СтрРазделить(ИмяФайла, ".", Ложь);
	Если МассивСтрок.Количество() > 1 Тогда
		РасширениеФайла = МассивСтрок[МассивСтрок.Количество() - 1];
	КонецЕсли;
	
	Возврат РасширениеФайла;
	
КонецФункции	//ПолучитьРасширениеФайла

&НаКлиенте
Процедура ПолучитьОписаниеИПоказатьПользователю()

	ТекДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТекстПредупреждения = "";
		
		РезПоиска = ТекДанные.РезультатовПоиска;
		МетПоиска = ТекДанные.МетодПоиска;
		
		
		Если РезПоиска = 0 Тогда
			ТекстПредупреждения = "Не нашлось подходящих предметов снабжения.";
		ИначеЕсли РезПоиска = 1 Тогда
			Если МетПоиска = 1 Тогда
				ТекстПредупреждения = "Найден единственный предмет снабжения по точному соответствию обозначения.";
			ИначеЕсли МетПоиска = 2 Тогда
				ТекстПредупреждения = "Найден единственный предмет снабжения по подобному обозначению.";
			ИначеЕсли МетПоиска = 3 Тогда
				ТекстПредупреждения = "Найден единственный предмет снабжения по точному соответствию наименования.";
			КонецЕсли;
		ИначеЕсли РезПоиска = 2 Тогда
			Если МетПоиска = 1 Тогда
				ТекстПредупреждения = "Найдено несколько предметов снабжения по точному соответствию обозначения.";
			ИначеЕсли МетПоиска = 2 Тогда
				ТекстПредупреждения = "Найдено несколько предметов снабжения по подобному обозначению.";
			ИначеЕсли МетПоиска = 3 Тогда
				ТекстПредупреждения = "Найдено несколько предметов снабжения по точному соответствию наименования.";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(,ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область CallBackМетоды

&НаКлиенте
Процедура ПослеОткрытияОбъекта(ДополнительныеПараметры) Экспорт

	//не удалять
	
КонецПроцедуры	//ПослеОткрытияОбъекта

&НаКлиенте
Процедура ПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла 	= ВыбранныеФайлы[0];
	ДанныеExcel = ПрочитатьExcel(ИмяФайла);
	
	ЗаполнитьНачальныеПараметрыПоискаВДокументе();
	
КонецПроцедуры // ПослеВыбораФайла

#КонецОбласти

#Область Проверки

&НаКлиенте
Функция ПроверитьЗаполнениеНастроек()
	
	Результат = Истина;
	
	Если НомерПервойСтроки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан номер первой строки",, "НомерПервойСтроки");
		Результат = Ложь;
	КонецЕсли; 
	
	Если НомерПоследнейСтроки = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан номер последней строки",, "НомерПоследнейСтроки");
		Результат = Ложь;
	КонецЕсли; 
	
	Если НомерПоследнейСтроки < НомерПервойСтроки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Номер последней строки должен быть больше номера первой строки",, "НомерПоследнейСтроки");
		Результат = Ложь;
	КонецЕсли; 
	
	Если КолонкаКодПС = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка Обозначение",, "КолонкаКодПС");
		Результат = Ложь;
	КонецЕсли; 
	
	Если КолонкаНаименованиеПС = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка Наименование",, "КолонкаНаименованиеПС");
		Результат = Ложь;
	КонецЕсли; 
	
	Если КолонкаКоличество = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка Количество",, "КолонкаКоличество");
		Результат = Ложь;
	КонецЕсли; 
	
	Если КолонкаЦена = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана колонка Цена",, "КолонкаЦена");
		Результат = Ложь;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ПроверитьЗаполнениеНастроек

&НаКлиенте
Функция ПроверитьЗаполнениеНастроекСозданияДокументов()
	
	Результат = Истина;
	
	стрПроверкиЗаполнено = ПолучитьРеквизитыДляПроверки();
	
	Для Каждого элПроверки Из стрПроверкиЗаполнено Цикл
		
		Если Не ЗначениеЗаполнено(элПроверки.Значение) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен реквизит: " + СтрЗаменить(элПроверки.Ключ, "_"," "),,СтрЗаменить(элПроверки.Ключ,"_",""));
			Результат = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Таблица предметов снабжения пустая",, "ТаблицаДанных");
		Результат = Ложь;
	КонецЕсли; 
	
	Для Каждого тдСтр Из ТаблицаДанных Цикл
		
		Если Не ЗначениеЗаполнено(тдСтр.ПредметСнабжения) Тогда
			НомСтроки = ТаблицаДанных.Индекс(тдСтр) + 1;
			текстСообщения = "В строке №" + НомСтроки + " не заполнен предмет снабжения";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстСообщения,, "ТаблицаДанных["+(НомСтроки-1)+"].ПредметСнабжения");
			Результат = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(тдСтр.Цена) Тогда
			НомСтроки = ТаблицаДанных.Индекс(тдСтр) + 1;
			текстСообщения = "В строке №" + НомСтроки + " не заполнена цена";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текстСообщения,, "ТаблицаДанных["+(НомСтроки-1)+"].Цена");
			Результат = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	РезПроверки = ПроверкаНаДубли();
	
	Если РезПроверки.Свойство("Ошибка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезПроверки.Ошибка);
		ОбновитьКнопкуОтборДублей(РезПроверки.дублей);
		//Элементы.ТаблицаДанныхКомандаОтборДублей.Видимость = Истина;
		Результат = Ложь;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции // ПроверитьЗаполнениеНастроекСозданияДокументов

&НаКлиенте
Функция ПолучитьРеквизитыДляПроверки()
	
	стрПроверкиЗаполнено = Новый Структура();
	стрПроверкиЗаполнено.Вставить("Дата", 			Дата);
	стрПроверкиЗаполнено.Вставить("Контрагент", 	Контрагент);
	стрПроверкиЗаполнено.Вставить("Номер_контракта",НомерКонтракта);
	стрПроверкиЗаполнено.Вставить("Валюта", 		Валюта);
	стрПроверкиЗаполнено.Вставить("Вид_контракта", 	ВидКонтракта);
	стрПроверкиЗаполнено.Вставить("Тип_контракта", 	ТипКонтракта);
	//стрПроверкиЗаполнено.Вставить("Заявка", 		Заявка);
	
	Возврат стрПроверкиЗаполнено;
	
КонецФункции	//ПолучитьРеквизитыДляПроверки

&НаСервере
Функция ПроверкаНаДубли()

	Ответ = Новый Структура();
	
	//ТЗБезДудлей = ПолучитьТаблицуБезДублей();
	
	ТзДублей = ПолучитьТаблицуДублирующизсяПС();
	
	//Если ТаблицаДанных.Количество() <> ТЗБезДудлей.Количество() Тогда
	Если ТзДублей.Количество() > 0 Тогда
		
		//ТаблицаДанных.Загрузить(ТЗБезДудлей);	
		
		НайденныеДубли = ТаблицаДанных.НайтиСтроки(Новый Структура("ЕстьДубли", Истина));
		Для Каждого нДубль Из НайденныеДубли Цикл
			Если ТзДублей.Найти(нДубль.ПредметСнабжения) = Неопределено Тогда
				нДубль.ЕстьДубли = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ТекстОшибки = "В таблице предметов снабжения найдены дубли. 
					|Удалите лишние строки и повторите создание контракта."; 
		
		Ответ.Вставить("Ошибка", ТекстОшибки); 
		
		Для Каждого пСдубль Из ТзДублей Цикл
			НайденныеПредметы = ТаблицаДанных.НайтиСтроки(Новый Структура("ПредметСнабжения", пСдубль.ПредметСнабжения));
			Для Каждого нСтрока Из НайденныеПредметы Цикл
				нСтрока.ЕстьДубли = истина;
			КонецЦикла;
			
		КонецЦикла;
	Иначе
		НайденныеДубли = ТаблицаДанных.НайтиСтроки(Новый Структура("ЕстьДубли", Истина));
		Для Каждого нДубль Из НайденныеДубли Цикл
			нДубль.ЕстьДубли = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	Ответ.Вставить("Дублей", ТзДублей.Количество());
	
	Возврат Ответ;
	
КонецФункции // ПроверкаНаДубли()

&НаКлиенте
Процедура ПроверкаДатыДокумента()

	Если Дата > ТекущаяДата() Тогда
		Дата = ТекущаяДата();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Дата документа не может быть больше текущей.",, "Дата");
	КонецЕсли;

КонецПроцедуры	//ПроверкаДатыДокумента

#КонецОбласти

#Область ПолучениеДанных

&НаСервере
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизита

&НаСервере
Процедура ЗаполнитьПредметыСнабжения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	стрДопСимволов = Новый Структура;
	стрДопСимволов.Вставить("Цифры", 				Истина);
	стрДопСимволов.Вставить("ЛатиницаЗаглавные", 	Истина);
	стрДопСимволов.Вставить("ЛатиницаПрописные", 	Истина);
	стрДопСимволов.Вставить("Кириллица", 			Истина);
	
	МаксимумВариантовПС = 10;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		НайденоПоТочномуОбозначению   = Ложь;
		НайденоПоПодобномуОбозначению = Ложь;
		НайденоПоТочномуНаименованию  = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредметСнабжения) Тогда
			Продолжить;
		КонецЕсли;
		
		ПоискПоНаименованию = Ложь;
		
		Обозначение = СтрокаТаблицы.Обозначение;
		Наименован_ = СтрокаТаблицы.Наименование;
		
		Если ЗначениеЗаполнено(Обозначение) И СтрДлина(Обозначение) > 3 Тогда 
		ИначеЕсли ЗначениеЗаполнено(Наименован_) Тогда 
			ПоискПоНаименованию = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Обозначение) И Не ЗначениеЗаполнено(Наименован_) Тогда
			Продолжить;
		КонецЕсли;

		НайденныеПС = Новый СписокЗначений();
		
		Если Не ПоискПоНаименованию Тогда
			НайденныеПС = НайтиПСПоТочномуОбозначению(Обозначение);
			//НайтиПСПростымЗапросом(Обозначение, ПоискПоНаименованию, МаксимумВариантовПС, стрДопСимволов, Истина); 
			Если НайденныеПС.Количество() = 0 Тогда
				НайденныеПС = НайтиПСПростымЗапросом(Обозначение, ПоискПоНаименованию, МаксимумВариантовПС, стрДопСимволов);	
				Если НайденныеПС.Количество() > 0 Тогда
					НайденоПоПодобномуОбозначению = Истина;	
				КонецЕсли;
			Иначе
				НайденоПоТочномуОбозначению = Истина;
			КонецЕсли;
			Если НайденныеПС.Количество() = 0 И ЗначениеЗаполнено(Наименован_) Тогда
				НайденныеПС = НайтиПСПоНаименованию(Наименован_);
				//НайтиПСПростымЗапросом(Наименован_, ПоискПоНаименованию, МаксимумВариантовПС, стрДопСимволов); 
				Если НайденныеПС.Количество() > 0 Тогда
					НайденоПоТочномуНаименованию = Истина;	
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденныеПС = НайтиПСПростымЗапросом(Наименован_, ПоискПоНаименованию, МаксимумВариантовПС, стрДопСимволов); 
			Если НайденныеПС.Количество() > 0 Тогда
				НайденоПоТочномуНаименованию = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Если НайденныеПС.Количество() = 0 Тогда
			СтрокаТаблицы.РезультатовПоиска = 0;	
			
		ИначеЕсли НайденныеПС.Количество() = 1 Тогда
			СтрокаТаблицы.ПредметСнабжения = НайденныеПС[0].Значение;	
			СтрокаТаблицы.РезультатовПоиска = 1;	
			
			Если НайденоПоТочномуОбозначению Тогда
				СтрокаТаблицы.МетодПоиска = 1;
			ИначеЕсли НайденоПоПодобномуОбозначению Тогда 
				СтрокаТаблицы.МетодПоиска = 2;
			ИначеЕсли НайденоПоТочномуНаименованию Тогда 
				СтрокаТаблицы.МетодПоиска = 3;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.РезультатовПоиска = 2;	
			ПоместитьСтрокиВТаблицуБыстрогоПоиска(НайденныеПС, СтрокаТаблицы.ИДСтроки, ПоискПоНаименованию);
			
			Если НайденоПоТочномуОбозначению Тогда
				СтрокаТаблицы.МетодПоиска = 1;
			ИначеЕсли НайденоПоПодобномуОбозначению Тогда 
				СтрокаТаблицы.МетодПоиска = 2;
			ИначеЕсли НайденоПоТочномуНаименованию Тогда 
				СтрокаТаблицы.МетодПоиска = 3;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПредметСнабжения) Тогда
			СтрокаТаблицы.ОбозначениеПС 	= СтрокаТаблицы.ПредметСнабжения.Обозначение;
		КонецЕсли;
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ЗаполнитьПредметыСнабжения

&НаСервере
Функция ПолучитьСписокАвтоподбора(ИдСтроки)
	
	Ответ = Новый СписокЗначений;
	
	НайденныеСтроки = ТаблицаБыстрогоПоиска.НайтиСтроки(Новый Структура("ИдСтроки", ИдСтроки));
	Для Каждого Строка Из НайденныеСтроки Цикл
		Ответ.Добавить(Строка.ПредметСнабжения, СформироватьСтрокуАвтоподбора(Строка, Строка.ПоискПоНаименованию));
	КонецЦикла;
	Ответ.СортироватьПоПредставлению();
	
	Возврат Ответ;
	
КонецФункции // ПолучитьСписокАвтоподбора()

&НаСервере
Функция НайтиПСПростымЗапросом(Обозначение, ПоНаименованию = Ложь, МаксРезультатов = 10, стрДопСимволов = Неопределено, ПоТочномуОбозначению = Ложь) Экспорт
	
	Ответ 	= Новый СписокЗначений;
	Запрос 	= Новый Запрос;
	
	#Область ТекстЗапроса
	ТекстЗапроса = "ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Источник
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	|	И &парКаталогПредметовСнабженияИмя ПОДОБНО &Обозначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КаталогПредметовСнабжения.Ссылка
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	|	И КаталогПредметовСнабжения.ОбозначениеТранслитированное ПОДОБНО &Обозначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыINCAT.ПредметСнабжения
	|ИЗ
	|	РегистрСведений.КодыINCAT КАК КодыINCAT
	|ГДЕ
	|	КодыINCAT.КодINCAT ПОДОБНО &Обозначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ &МаксРезультатов
	|	ВТ_Источник.Ссылка КАК Ссылка,
	|	ВТ_Источник.Ссылка.Обозначение КАК Обозначение
	|ИЗ
	|	ВТ_Источник КАК ВТ_Источник";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&парКаталогПредметовСнабженияИмя", 
								?(ПоНаименованию, "КаталогПредметовСнабжения.Наименование", "КаталогПредметовСнабжения.Обозначение"));
								
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксРезультатов", МаксРезультатов);
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	
	
	Если ПоНаименованию Тогда 
		Запрос.УстановитьПараметр("Обозначение", Обозначение);
	ИначеЕсли ПоТочномуОбозначению Тогда
		Запрос.УстановитьПараметр("Обозначение", Обозначение);
	Иначе
		Запрос.УстановитьПараметр("Обозначение", "%" + ПодготовитьОбозначениеКПоиску(Обозначение, стрДопСимволов) + "%");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Ответ.Добавить(Выборка.Ссылка, "" + Выборка.Обозначение + " - " + Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции // НайтиПСПростымЗапросом()

&НаСервере
Функция НайтиПСПоТочномуОбозначению(Обозначение, МаксРезультатов = 10) Экспорт
	
	Ответ 	= Новый СписокЗначений;
	Запрос 	= Новый Запрос;
	
	#Область ТекстЗапроса
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КаталогПредметовСнабжения.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Источник
	               |ИЗ
	               |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	               |ГДЕ
	               |	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	               |	И КаталогПредметовСнабжения.Обозначение = &Обозначение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КаталогПредметовСнабжения.Ссылка
	               |ИЗ
	               |	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	               |ГДЕ
	               |	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	               |	И КаталогПредметовСнабжения.ОбозначениеТранслитированное = &Обозначение
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КодыINCAT.ПредметСнабжения
	               |ИЗ
	               |	РегистрСведений.КодыINCAT КАК КодыINCAT
	               |ГДЕ
	               |	КодыINCAT.КодINCAT = &Обозначение
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ &МаксРезультатов
	               |	ВТ_Источник.Ссылка КАК Ссылка,
	               |	ВТ_Источник.Ссылка.Обозначение КАК Обозначение
	               |ИЗ
	               |	ВТ_Источник КАК ВТ_Источник";
								
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксРезультатов", МаксРезультатов);
	#КонецОбласти
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Обозначение", Обозначение);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Ответ.Добавить(Выборка.Ссылка, "" + Выборка.Обозначение + " - " + Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции // НайтиПСПростымЗапросом()


&НаСервере
Функция НайтиПСПоНаименованию(ЗначПоиска, МаксРезультатов = 10) 
	
	Ответ 	= Новый СписокЗначений;
	Запрос 	= Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ &МаксРезультатов 
	|	КаталогПредметовСнабжения.Ссылка КАК Ссылка,
	|	КаталогПредметовСнабжения.Обозначение КАК Обозначение
	|ИЗ
	|	Справочник.КаталогПредметовСнабжения КАК КаталогПредметовСнабжения
	|ГДЕ
	|	НЕ КаталогПредметовСнабжения.ПометкаУдаления
	|	И КаталогПредметовСнабжения.Наименование = &Наименование";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МаксРезультатов", МаксРезультатов);	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Наименование", ЗначПоиска);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Ответ.Добавить(Выборка.Ссылка, "" + Выборка.Обозначение + " - " + Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции // НайтиПСПростымЗапросом()

&НаСервере
Функция МассивДопустимыхСимволовПростогоПоиска(парОтбора = Неопределено)
	
	Результат = Новый Массив;
	
	Если парОтбора = Неопределено Или парОтбора.Свойство("Пробел") Тогда
		ДобавитьСимволыВМассив(32, 	 32, 	Результат); // Пробел
	КонецЕсли;
	Если парОтбора = Неопределено Или парОтбора.Свойство("Цифры") Тогда	
		ДобавитьСимволыВМассив(48, 	 57, 	Результат); // Цифры
	КонецЕсли;
	Если парОтбора = Неопределено Или парОтбора.Свойство("ЛатиницаЗаглавные") Тогда
		ДобавитьСимволыВМассив(65, 	 90, 	Результат); // Латиница заглавные
	КонецЕсли;
	Если парОтбора = Неопределено Или парОтбора.Свойство("ЛатиницаПрописные") Тогда
		ДобавитьСимволыВМассив(97, 	 122,  	Результат); // Латиница прописные
	КонецЕсли;
	Если парОтбора = Неопределено Или парОтбора.Свойство("Кириллица") Тогда
		ДобавитьСимволыВМассив(1040, 1103, 	Результат); // Кирилица
		ДобавитьСимволыВМассив(1025, 1025, 	Результат); // Ё
		ДобавитьСимволыВМассив(1105, 1105, 	Результат); // ё
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	//МассивДопустимыхСимволовПростогоПоиска

&НаСервере
Процедура ДобавитьСимволыВМассив(НижняяГраница, ВерхняяГраница, МассивПолучатель)
	
	Для Сч = НижняяГраница По ВерхняяГраница Цикл
		МассивПолучатель.Добавить(Сч);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьОбозначениеКПоиску(Знач Обозначение, стрДопустимыхСимволов = Неопределено)
	
	Пока СтрНайти(Обозначение, "  ") > 0 Цикл
		Обозначение = СтрЗаменить(Обозначение, "  ", " ");
		Обозначение = СокрЛП(Обозначение);
	КонецЦикла;
	Результат 	= "";
	
	ДопустимыеСимволы = МассивДопустимыхСимволовПростогоПоиска(стрДопустимыхСимволов);
	Для Сч = 1 По СтрДлина(Обозначение) Цикл
		Символ = Сред(Обозначение, Сч, 1);
		Если ДопустимыеСимволы.Найти(КодСимвола(Символ, 1)) = Неопределено Тогда
			Результат = Результат + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // ПодготовитьОбозначениеКПоиску

#КонецОбласти

#Область ЧтениеExcel

&НаКлиенте
Функция ПрочитатьExcel(ИмяФайла)
	
	Расширение = ПолучитьРасширениеФайла(ИмяФайла);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	АдресВС = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Возврат ПрочитатьТабличныйДокументНаСервере(АдресВС, Расширение);
		
КонецФункции // ПрочитатьExcel

&НаКлиенте
Функция ЗаполнитьНачальныеПараметрыПоискаВДокументе()
	
	НомерПоследнейСтроки = ДанныеExcel.ВысотаТаблицы;
	
КонецФункции // ЗаполнитьНачальныеПараметрыПоискаВДокументе

#КонецОбласти

#Область ОбработкаТабличногоДокумента

&НаСервере
Функция ПолучитьЗначение(НомерСтроки, НомерКолонки, ЧисловоеЗначение = Ложь)
	
	Попытка
		ИмяОбласти 		= "R" + Формат(НомерСтроки, "ЧГ=") +"C" + Формат(НомерКолонки);
		СтрокаДанных 	= ДанныеExcel.Область(ИмяОбласти).Текст;
		СтрокаДанных 	= СокрЛП(СтрокаДанных);
		Если ЧисловоеЗначение Тогда
			Если СтрНайти(СтрокаДанных, ".") > 0 И СтрНайти(СтрокаДанных, ",") > 0 Тогда
				СтрокаДанных = СтрЗаменить(СтрокаДанных, ",", "");
			КонецЕсли;
			Результат 	= СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаДанных);
		Иначе
			Результат 	= СтрокаДанных;
		КонецЕсли;                                  	
	Исключение
		Результат 		= ?(ЧисловоеЗначение, -1, "");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("" + ИмяОбласти + ": не удалось получить значение. " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗначение

#КонецОбласти

#Область СозданиеДокументов

&НаКлиенте
Процедура СозданиеДокументов()
	
	Если Не ПроверитьЗаполнениеНастроекСозданияДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	Если СоздатьДокументы() Тогда
		Если ОткрыватьКонтрактПослеСоздания Тогда
			ОткрытьОбъектЕслиНеобходимо(ДокументКонтракт, ОткрыватьКонтрактПослеСоздания);
		Иначе
			ПоказатьПредупреждение(, "Создание контракта выполнено успешно!", 60, "Внимание");
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры	//СозданиеДокументов

&НаСервере
Функция СоздатьКонтракт(Заявка = Неопределено)
	
	Штука = Справочники.ОКЕИ.НайтиПоКоду("796"); //шт
	
	Контракт = Документы.Контракт.СоздатьДокумент();
	
	Контракт.Дата 				= Дата;
	Контракт.Вид 				= ВидКонтракта;
	Контракт.Тип			 	= ТипКонтракта;
	Контракт.Валюта 			= Валюта;
	Контракт.Статус 			= Перечисления.СтатусыКонтрактов.Активен;
	Контракт.ОтветственноеЛицо 	= ПараметрыСеанса.ТекущийПользователь;
	Контракт.Примечание 		= Примечание;
	Контракт.Контрагент			= Контрагент;
	Контракт.НомерКонтракта 	= НомерКонтракта;
	
	Для Каждого текСтрока Из ТаблицаДанных Цикл
		
		НоваяСтрока = Контракт.ПредметыСнабжения.Добавить();
		НоваяСтрока.UID 					= Строка(Новый УникальныйИдентификатор());
		НоваяСтрока.ПредметСнабжения 		= текСтрока.ПредметСнабжения;
		НоваяСтрока.ПредметСнабженияИсходный= текСтрока.ПредметСнабжения;
		НоваяСтрока.Цена 					= текСтрока.Цена;
		НоваяСтрока.Количество 				= текСтрока.Количество;
		НоваяСтрока.ЕдиницаИзмерения 		= Штука;
		НоваяСтрока.КлючСвязи 				= Строка(Новый УникальныйИдентификатор());
		НоваяСтрока.НомерПозиции 			= текСтрока.НомерСтроки;
		Если Не Заявка = Неопределено Тогда
			НоваяСтрока.Заявка					= Заявка;
		КонецЕсли;
		НоваяСтрока.СрокПоставки 			= текСтрока.СрокПоставки;
		НоваяСтрока.ИдентификаторПозиции	= текСтрока.ИДСтроки;

	КонецЦикла;
	
	Контракт.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Контракт.Ссылка;
	
КонецФункции // СоздатьКонтракт()

&НаСервере
Функция СоздатьДокументы()
	
	Результат = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Контракт не регистрирует цены ДЗО без заявки, а заявку нельзя создать без запроса.
		// В заявке и запросе проставил НомерЗаказчика	= "РегистрацияЦенПоставщика", 
		// по этому реквизиту скрыл документы в формах списка для всех, кроме РольДоступна("ПолныеПрава");
				
		//ЗапросТКПRFP = СоздатьЗапрос();
		//Заявка 		 = СоздатьЗаявку(ЗапросТКПRFP);		
		//Контракт 	 = СоздатьКонтракт(Заявка);
		ДокументКонтракт 	 = СоздатьКонтракт();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При создании контракта произошла ошибка: " + ОписаниеОшибки());
		
		ДокументКонтракт = Документы.Контракт.ПустаяСсылка();
		
		Результат = Ложь;
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции // СоздатьДокументы

&НаСервере
Функция СоздатьЗапрос()
	
	Запрос 					= Документы.ЗапросТКПRFP.СоздатьДокумент();
	Запрос.Дата 			= Дата;
	Запрос.НомерЗаказчика	= "РегистрацияЦенПоставщика";
	Запрос.Примечание 		= "Создано автоматически, для регистрации цен ДЗО.";
	Запрос.Записать();
	
	Возврат Запрос.Ссылка;	
	
КонецФункции // СоздатьЗапрос

&НаСервере
Функция СоздатьЗаявку(Запрос)
	
	Заявка 						= Документы.Заявка.СоздатьДокумент();
	Заявка.Дата 				= Дата;
	Заявка.НомерЗаказчика 		= Запрос.НомерЗаказчика;
	Заявка.Валюта 				= Валюта;
	Заявка.КоличествоПозиций 	= ТаблицаДанных.Количество();
	Заявка.ЗапросТКПRFP 		= Запрос;
	Заявка.Примечание			= "Создано автоматически, для регистрации цен ДЗО.";
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		НоваяСтрока 										= Заявка.Спецификация.Добавить();
		НоваяСтрока.ИдентификаторПозиции 					= СтрокаТаблицы.ИдСтроки;
		НоваяСтрока.ПредметСнабжения 						= СтрокаТаблицы.ПредметСнабжения;
		НоваяСтрока.НаименованиеПредметаСнабженияЗаказчика 	= СтрокаТаблицы.Наименование;
		НоваяСтрока.КодПредметаСнабженияЗаказчика			= СтрокаТаблицы.Обозначение;
		НоваяСтрока.Количество								= СтрокаТаблицы.Количество;
	КонецЦикла; 
		
	Заявка.Записать();
	
	Возврат Заявка.Ссылка;
	
КонецФункции // СоздатьЗаявку

#КонецОбласти

///////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

#Область Команды

&НаКлиенте
Процедура КомандаЗаполнитьТаблицуДанных(Команда)
	
	ЗаполнениеТаблицыДанных();

КонецПроцедуры // КомандаЗаполнитьТаблицуДанных

&НаКлиенте
Процедура КомандаСоздатьДокументы(Команда)
	
	СозданиеДокументов();
		
КонецПроцедуры // КомандаСоздатьДокументы

&НаКлиенте
Процедура КомандаВыбратьФайл(Команда)
	
	ДиалогПриВыбореФайла();
	
КонецПроцедуры	//КомандаВыбратьФайл

&НаКлиенте
Процедура КомандаОтборДублей(Команда)
	
	СнятьУстановитьОтборДублей();
		
КонецПроцедуры	//КомандаОтборДублей

&НаКлиенте
Процедура КомандаПолучитьОписание(Команда)
	ПолучитьОписаниеИПоказатьПользователю()
КонецПроцедуры


#КонецОбласти

///////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

#Область СобытияФормыИЭлементов

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПараметрыПоУмолчанию();
	
КонецПроцедуры // ПриСозданииНаСервере

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогПриВыбореФайла();
	
КонецПроцедуры // ИмяФайлаНачалоВыбора

&НаКлиенте
Процедура ДанныеExcelПриИзменении(Элемент)
	
	ЗаполнитьНачальныеПараметрыПоискаВДокументе();
	
КонецПроцедуры	//ДанныеExcelПриИзменении

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПроверкаДатыДокумента();	
	
КонецПроцедуры	//ДатаПриИзменении

&НаКлиенте
Процедура ВидКонтрактаПриИзменении(Элемент)
	
	СформироватьСписокВыбораТипа();
	
КонецПроцедуры //ВидКонтрактаПриИзменении

#КонецОбласти

#Область СобытияТаблицыДанных

&НаКлиенте
Процедура ТаблицаДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаДанныхПередНачаломДобавления

&НаКлиенте
Процедура ТаблицаДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаДанныхПередУдалением

&НаКлиенте
Процедура ТаблицаДанныхПредметСнабженияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаДанных.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущаяСтрока.ОбозначениеПС = ПолучитьЗначениеРеквизита(ТекущаяСтрока.ПредметСнабжения, "Обозначение");
	
	ТекущаяСтрока.МетодПоиска = 0;
	
	РезПроверкиДублей = ПроверкаНаДубли();
	ОбновитьКнопкуОтборДублей(РезПроверкиДублей.Дублей);
	
КонецПроцедуры // ТаблицаДанныхПредметСнабженияПриИзменении

&НаКлиенте
Процедура ТаблицаДанныхПредметСнабженияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		ТекущаяСтрока 				= Элементы.ТаблицаДанных.ТекущиеДанные;
		Если ТекущаяСтрока.РезультатовПоиска = 2 Тогда
			СписокВыбора = ПолучитьСписокАвтоподбора(ТекущаяСтрока.ИдСтроки); 
			Если СписокВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка 	= Ложь;
				ДанныеВыбора 			= СписокВыбора;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаДанныхПредметСнабженияАвтоПодбор

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьВыделеннуюСтроку();
		
КонецПроцедуры	//УдалитьСтроку




#КонецОбласти



